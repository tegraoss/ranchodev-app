var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { StorageEngine } from './storage';
/**
 * @name LocalStorage
 * @description
 * The LocalStorage storage engine uses the browser's local storage system for
 * storing key/value pairs.
 *
 * Note: LocalStorage should ONLY be used for temporary data that you can afford to lose.
 * Given disk space constraints on a mobile device, local storage might be "cleaned up"
 * by the operating system (iOS).
 *
 * For guaranteed, long-term storage, use the SqlStorage engine which stores data in a file.
 *
 * @usage
 * ```ts
 * import {Component} from '@angular/core';
 * import {Storage, LocalStorage} from 'ionic-angular';
 * @Component({
 *   template: `<ion-content></ion-content>`
 * });
 * export class MyClass{
 *  constructor(){
 *    this.local = new Storage(LocalStorage);
 *    this.local.set('didTutorial', 'true');
 *  }
 *}
 *```
 * @demo /docs/v2/demos/local-storage/
 * @see {@link /docs/v2/platform/storage/ Storage Platform Docs}
 */
export var LocalStorage = function (_StorageEngine) {
    _inherits(LocalStorage, _StorageEngine);

    function LocalStorage() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, LocalStorage);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(LocalStorage).call(this));
    }
    /**
     * Get the value of a key in LocalStorage
     * @param {string} key the key you want to lookup in LocalStorage
     * @returns {Promise} Returns a promise which is resolved when the value has been retrieved
     */


    _createClass(LocalStorage, [{
        key: 'get',
        value: function get(key) {
            return new Promise(function (resolve, reject) {
                try {
                    var value = window.localStorage.getItem(key);
                    resolve(value);
                } catch (e) {
                    reject(e);
                }
            });
        }
        /**
         * Set a key value pair and save it to LocalStorage
         * @param {string} key the key you want to save to LocalStorage
         * @param {string} value the value of the key you're saving
         * @returns {Promise} Returns a promise which is resolved when the key value pair have been set
         */

    }, {
        key: 'set',
        value: function set(key, value) {
            return new Promise(function (resolve, reject) {
                try {
                    window.localStorage.setItem(key, value);
                    resolve();
                } catch (e) {
                    reject(e);
                }
            });
        }
        /**
         * Remove a key from LocalStorage
         * @param {string} key the key you want to remove from LocalStorage
         * @returns {Promise} Returns a promise which is resolved when the key has been removed
         */

    }, {
        key: 'remove',
        value: function remove(key) {
            return new Promise(function (resolve, reject) {
                try {
                    window.localStorage.removeItem(key);
                    resolve();
                } catch (e) {
                    reject(e);
                }
            });
        }
        /**
         * Clear data stored in LocalStorage
         * @returns {Promise} Returns a promise which is resolved when the data have been cleared
         */

    }, {
        key: 'clear',
        value: function clear() {
            return new Promise(function (resolve, reject) {
                try {
                    window.localStorage.clear();
                    resolve();
                } catch (e) {
                    reject(e);
                }
            });
        }
    }]);

    return LocalStorage;
}(StorageEngine);
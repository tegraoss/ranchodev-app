var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ComponentResolver, HostListener, Renderer, ViewChild, ViewContainerRef } from '@angular/core';
import { addSelector } from '../../config/bootstrap';
import { Animation } from '../../animations/animation';
import { isPresent, pascalCaseToDashCase } from '../../util/util';
import { Key } from '../../util/key';
import { NavParams } from '../nav/nav-params';
import { PageTransition } from '../../transitions/page-transition';
import { ViewController } from '../nav/view-controller';
import { windowDimensions } from '../../util/dom';
/**
 * @name Modal
 * @description
 * A Modal is a content pane that goes over the user's current page.
 * Usually it is used for making a choice or editing an item. A modal uses the
 * `NavController` to
 * {@link /docs/v2/api/components/nav/NavController/#present present}
 * itself in the root nav stack. It is added to the stack similar to how
 * {@link /docs/v2/api/components/nav/NavController/#push NavController.push}
 * works.
 *
 * When a modal (or any other overlay such as an alert or actionsheet) is
 * "presented" to a nav controller, the overlay is added to the app's root nav.
 * After the modal has been presented, from within the component instance The
 * modal can later be closed or "dismissed" by using the ViewController's
 * `dismiss` method. Additionally, you can dismiss any overlay by using `pop`
 * on the root nav controller.
 *
 * Data can be passed to a new modal through `Modal.create()` as the second
 * argument. The data can then be accessed from the opened page by injecting
 * `NavParams`. Note that the page, which opened as a modal, has no special
 * "modal" logic within it, but uses `NavParams` no differently than a
 * standard page.
 *
 * @usage
 * ```ts
 * import { Modal, NavController, NavParams } from 'ionic-angular';
 *
 * @Component(...)
 * class HomePage {
 *
 *  constructor(nav: NavController) {
 *    this.nav = nav;
 *  }
 *
 *  presentProfileModal() {
 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
 *    this.nav.present(profileModal);
 *  }
 *
 * }
 *
 * @Component(...)
 * class Profile {
 *
 *  constructor(params: NavParams) {
 *    console.log('UserId', params.get('userId'));
 *  }
 *
 * }
 * ```
 *
 * A modal can also emit data, which is useful when it is used to add or edit
 * data. For example, a profile page could slide up in a modal, and on submit,
 * the submit button could pass the updated profile data, then dismiss the
 * modal.
 *
 * ```ts
 * import { Component } from '@angular/core';
 * import { Modal, NavController, ViewController } from 'ionic-angular';
 *
 * @Component(...)
 * class HomePage {
 *
 *  constructor(nav: NavController) {
 *    this.nav = nav;
 *  }
 *
 *  presentContactModal() {
 *    let contactModal = Modal.create(ContactUs);
 *    this.nav.present(contactModal);
 *  }
 *
 *  presentProfileModal() {
 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
 *    profileModal.onDismiss(data => {
 *      console.log(data);
 *    });
 *    this.nav.present(profileModal);
 *  }
 *
 * }
 *
 * @Component(...)
 * class Profile {
 *
 *  constructor(viewCtrl: ViewController) {
 *    this.viewCtrl = viewCtrl;
 *  }
 *
 *  dismiss() {
 *    let data = { 'foo': 'bar' };
 *    this.viewCtrl.dismiss(data);
 *  }
 *
 * }
 * ```
 * @demo /docs/v2/demos/modal/
 * @see {@link /docs/v2/components#modals Modal Component Docs}
 */
export var Modal = function (_ViewController) {
    _inherits(Modal, _ViewController);

    function Modal(componentType) {
        var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        _classCallCheck(this, Modal);

        data.componentType = componentType;
        opts.showBackdrop = isPresent(opts.showBackdrop) ? !!opts.showBackdrop : true;
        opts.enableBackdropDismiss = isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
        data.opts = opts;

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Modal).call(this, ModalCmp, data));

        _this.isOverlay = true;
        _this.usePortal = true;
        return _this;
    }
    /**
     * @private
     */


    _createClass(Modal, [{
        key: "getTransitionName",
        value: function getTransitionName(direction) {
            var key = direction === 'back' ? 'modalLeave' : 'modalEnter';
            return this._nav && this._nav.config.get(key);
        }
        /**
         * Create a modal with the following options
         *
         * | Option                | Type       | Description                                                                                                      |
         * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
         * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
         * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |
         *
         *
         * @param {object} componentType The Modal view
         * @param {object} data Any data to pass to the Modal view
         * @param {object} opts Modal options
         */

    }, {
        key: "loaded",

        // Override the load method and load our child component
        value: function loaded(done) {
            var _this2 = this;

            // grab the instance, and proxy the ngAfterViewInit method
            var originalNgAfterViewInit = this.instance.ngAfterViewInit;
            this.instance.ngAfterViewInit = function () {
                if (originalNgAfterViewInit) {
                    originalNgAfterViewInit();
                }
                _this2.instance.loadComponent(done);
            };
        }
    }], [{
        key: "create",
        value: function create(componentType) {
            var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            return new Modal(componentType, data, opts);
        }
    }]);

    return Modal;
}(ViewController);
export var ModalCmp = function () {
    function ModalCmp(_compiler, _renderer, _navParams, _viewCtrl) {
        _classCallCheck(this, ModalCmp);

        this._compiler = _compiler;
        this._renderer = _renderer;
        this._navParams = _navParams;
        this._viewCtrl = _viewCtrl;
        this.d = _navParams.data.opts;
    }

    _createClass(ModalCmp, [{
        key: "loadComponent",
        value: function loadComponent(done) {
            var _this3 = this;

            var componentType = this._navParams.data.componentType;
            addSelector(componentType, 'ion-page');
            this._compiler.resolveComponent(componentType).then(function (componentFactory) {
                var componentRef = _this3.viewport.createComponent(componentFactory, _this3.viewport.length, _this3.viewport.parentInjector);
                _this3._renderer.setElementClass(componentRef.location.nativeElement, 'show-page', true);
                // auto-add page css className created from component JS class name
                var cssClassName = pascalCaseToDashCase(componentType.name);
                _this3._renderer.setElementClass(componentRef.location.nativeElement, cssClassName, true);
                _this3._viewCtrl.setInstance(componentRef.instance);
                _this3.enabled = true;
                done();
            });
        }
    }, {
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
            // intentionally kept empty
        }
    }, {
        key: "dismiss",
        value: function dismiss(role) {
            return this._viewCtrl.dismiss(null, role);
        }
    }, {
        key: "bdClick",
        value: function bdClick() {
            if (this.enabled && this.d.enableBackdropDismiss) {
                this.dismiss('backdrop');
            }
        }
    }, {
        key: "_keyUp",
        value: function _keyUp(ev) {
            if (this.enabled && this._viewCtrl.isLast() && ev.keyCode === Key.ESCAPE) {
                this.bdClick();
            }
        }
    }]);

    return ModalCmp;
}();
__decorate([ViewChild('viewport', { read: ViewContainerRef }), __metadata('design:type', typeof (_a = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _a || Object)], ModalCmp.prototype, "viewport", void 0);
__decorate([HostListener('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], ModalCmp.prototype, "_keyUp", null);
ModalCmp = __decorate([Component({
    selector: 'ion-modal',
    template: '<ion-backdrop disableScroll="false" (click)="bdClick($event)"></ion-backdrop>' + '<div class="modal-wrapper">' + '<div #viewport nav-viewport></div>' + '</div>'
}), __metadata('design:paramtypes', [typeof (_b = typeof ComponentResolver !== 'undefined' && ComponentResolver) === 'function' && _b || Object, typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object, typeof (_d = typeof NavParams !== 'undefined' && NavParams) === 'function' && _d || Object, typeof (_e = typeof ViewController !== 'undefined' && ViewController) === 'function' && _e || Object])], ModalCmp);
/**
 * Animations for modals
 */

var ModalSlideIn = function (_PageTransition) {
    _inherits(ModalSlideIn, _PageTransition);

    function ModalSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalSlideIn);

        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdropEle = ele.querySelector('ion-backdrop');
        var backdrop = new Animation(backdropEle);
        var wrapper = new Animation(ele.querySelector('.modal-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.4);
        wrapper.fromTo('translateY', '100%', '0%');
        _this4.element(enteringView.pageRef()).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(400).add(backdrop).add(wrapper);
        if (enteringView.hasNavbar()) {
            // entering page has a navbar
            var enteringNavBar = new Animation(enteringView.navbarRef());
            enteringNavBar.before.addClass('show-navbar');
            _this4.add(enteringNavBar);
        }
        return _this4;
    }

    return ModalSlideIn;
}(PageTransition);

PageTransition.register('modal-slide-in', ModalSlideIn);

var ModalSlideOut = function (_PageTransition2) {
    _inherits(ModalSlideOut, _PageTransition2);

    function ModalSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalSlideOut);

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new Animation(ele.querySelector('ion-backdrop'));
        var wrapperEle = ele.querySelector('.modal-wrapper');
        var wrapperEleRect = wrapperEle.getBoundingClientRect();
        var wrapper = new Animation(wrapperEle);
        // height of the screen - top of the container tells us how much to scoot it down
        // so it's off-screen
        var screenDimensions = windowDimensions();
        wrapper.fromTo('translateY', '0px', screenDimensions.height - wrapperEleRect.top + "px");
        backdrop.fromTo('opacity', 0.4, 0.0);
        _this5.element(leavingView.pageRef()).easing('ease-out').duration(250).add(backdrop).add(wrapper);
        return _this5;
    }

    return ModalSlideOut;
}(PageTransition);

PageTransition.register('modal-slide-out', ModalSlideOut);

var ModalMDSlideIn = function (_PageTransition3) {
    _inherits(ModalMDSlideIn, _PageTransition3);

    function ModalMDSlideIn(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalMDSlideIn);

        var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalMDSlideIn).call(this, enteringView, leavingView, opts));

        var ele = enteringView.pageRef().nativeElement;
        var backdrop = new Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new Animation(ele.querySelector('.modal-wrapper'));
        backdrop.fromTo('opacity', 0.01, 0.4);
        wrapper.fromTo('translateY', '40px', '0px');
        wrapper.fromTo('opacity', 0.01, 1);
        var DURATION = 280;
        var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
        _this6.element(enteringView.pageRef()).easing(EASING).duration(DURATION).add(backdrop).add(wrapper);
        if (enteringView.hasNavbar()) {
            // entering page has a navbar
            var enteringNavBar = new Animation(enteringView.navbarRef());
            enteringNavBar.before.addClass('show-navbar');
            _this6.add(enteringNavBar);
        }
        return _this6;
    }

    return ModalMDSlideIn;
}(PageTransition);

PageTransition.register('modal-md-slide-in', ModalMDSlideIn);

var ModalMDSlideOut = function (_PageTransition4) {
    _inherits(ModalMDSlideOut, _PageTransition4);

    function ModalMDSlideOut(enteringView, leavingView, opts) {
        _classCallCheck(this, ModalMDSlideOut);

        var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalMDSlideOut).call(this, enteringView, leavingView, opts));

        var ele = leavingView.pageRef().nativeElement;
        var backdrop = new Animation(ele.querySelector('ion-backdrop'));
        var wrapper = new Animation(ele.querySelector('.modal-wrapper'));
        backdrop.fromTo('opacity', 0.4, 0.0);
        wrapper.fromTo('translateY', '0px', '40px');
        wrapper.fromTo('opacity', 0.99, 0);
        _this7.element(leavingView.pageRef()).duration(200).easing('cubic-bezier(0.47,0,0.745,0.715)').add(wrapper).add(backdrop);
        return _this7;
    }

    return ModalMDSlideOut;
}(PageTransition);

PageTransition.register('modal-md-slide-out', ModalMDSlideOut);
var _a, _b, _c, _d, _e;
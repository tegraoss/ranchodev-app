var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { DragGesture } from './drag-gesture';
import { clamp } from '../util';
export var SlideGesture = function (_DragGesture) {
    _inherits(SlideGesture, _DragGesture);

    function SlideGesture(element) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, SlideGesture);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideGesture).call(this, element, opts));

        _this.slide = null;
        _this.element = element;
        return _this;
    }
    /*
     * Get the min and max for the slide. pageX/pageY.
     * Only called on dragstart.
     */


    _createClass(SlideGesture, [{
        key: 'getSlideBoundaries',
        value: function getSlideBoundaries(slide, ev) {
            return {
                min: 0,
                max: this.element.offsetWidth
            };
        }
        /*
         * Get the element's pos when the drag starts.
         * For example, an open side menu starts at 100% and a closed
         * sidemenu starts at 0%.
         */

    }, {
        key: 'getElementStartPos',
        value: function getElementStartPos(slide, ev) {
            return 0;
        }
    }, {
        key: 'canStart',
        value: function canStart(ev) {
            return true;
        }
    }, {
        key: 'onDragStart',
        value: function onDragStart(ev) {
            if (!this.canStart(ev)) {
                return false;
            }
            this.slide = {};
            this.onSlideBeforeStart(this.slide, ev);

            var _getSlideBoundaries = this.getSlideBoundaries(this.slide, ev);

            var min = _getSlideBoundaries.min;
            var max = _getSlideBoundaries.max;

            this.slide.min = min;
            this.slide.max = max;
            this.slide.elementStartPos = this.getElementStartPos(this.slide, ev);
            this.slide.pointerStartPos = ev.center[this.direction];
            this.slide.started = true;
            this.onSlideStart(this.slide, ev);
            return true;
        }
    }, {
        key: 'onDrag',
        value: function onDrag(ev) {
            if (!this.slide || !this.slide.started) {
                return false;
            }
            this.slide.pos = ev.center[this.direction];
            this.slide.distance = clamp(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
            this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
            this.onSlide(this.slide, ev);
            return true;
        }
    }, {
        key: 'onDragEnd',
        value: function onDragEnd(ev) {
            if (!this.slide || !this.slide.started) return;
            this.onSlideEnd(this.slide, ev);
            this.slide = null;
        }
    }, {
        key: 'onSlideBeforeStart',
        value: function onSlideBeforeStart(slide, ev) {}
    }, {
        key: 'onSlideStart',
        value: function onSlideStart(slide, ev) {}
    }, {
        key: 'onSlide',
        value: function onSlide(slide, ev) {}
    }, {
        key: 'onSlideEnd',
        value: function onSlideEnd(slide, ev) {}
    }]);

    return SlideGesture;
}(DragGesture);
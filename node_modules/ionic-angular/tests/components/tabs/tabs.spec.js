"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var src_1 = require('../../../../src');
function run() {
    describe('Tabs', function () {
        describe('previousTab', function () {
            it('should find the previous tab when there has been 3 selections', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                var tab2 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                tabs.add(tab2);
                tab0.root = SomePage;
                tab1.root = SomePage;
                tab2.root = SomePage;
                tabs.select(tab0);
                tabs.select(tab1);
                tabs.select(tab2);
                expect(tabs.selectHistory).toEqual([tab0.id, tab1.id, tab2.id]);
                expect(tabs.previousTab(true)).toEqual(tab1);
                expect(tabs.selectHistory).toEqual([tab0.id, tab1.id]);
                expect(tabs.previousTab(true)).toEqual(tab0);
                expect(tabs.selectHistory).toEqual([tab0.id]);
            });
            it('should not find a previous tab when there has only been one selection', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                tab0.root = SomePage;
                tab1.root = SomePage;
                tabs.select(tab0);
                expect(tabs.previousTab(true)).toEqual(null);
            });
            it('should not find a previous tab when theres no history', function () {
                var tabs = mockTabs();
                expect(tabs.selectHistory.length).toEqual(0);
                expect(tabs.previousTab(true)).toEqual(null);
            });
            it('should track tab selections', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                tab0.root = SomePage;
                tab1.root = SomePage;
                expect(tabs.selectHistory.length).toEqual(0);
                tabs.select(tab0);
                expect(tabs.selectHistory[0]).toEqual(tab0.id);
                expect(tabs.selectHistory.length).toEqual(1);
                tabs.select(tab1);
                expect(tabs.selectHistory[0]).toEqual(tab0.id);
                expect(tabs.selectHistory[1]).toEqual(tab1.id);
                expect(tabs.selectHistory.length).toEqual(2);
                tabs.select(tab0);
                expect(tabs.selectHistory[0]).toEqual(tab0.id);
                expect(tabs.selectHistory[1]).toEqual(tab1.id);
                expect(tabs.selectHistory[2]).toEqual(tab0.id);
                expect(tabs.selectHistory.length).toEqual(3);
            });
        });
        describe('select', function () {
            it('should select tab by tab instance', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                tab0.root = SomePage;
                tab1.root = SomePage;
                tabs.select(tab1);
                expect(tab0.isSelected).toEqual(false);
                expect(tab1.isSelected).toEqual(true);
            });
            it('should select tab by index', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                tab0.root = SomePage;
                tab1.root = SomePage;
                expect(tab0.isSelected).toBeUndefined();
                expect(tab1.isSelected).toBeUndefined();
                tabs.select(0);
                expect(tab0.isSelected).toEqual(true);
                expect(tab1.isSelected).toEqual(false);
            });
            it('should not select an invalid tab index', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                expect(tabs.select(22)).toBeUndefined();
            });
        });
        describe('getByIndex', function () {
            it('should get the tab', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                tab0.setRoot();
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                expect(tabs.getIndex(tab0)).toEqual(0);
                expect(tabs.getIndex(tab1)).toEqual(1);
            });
        });
        describe('getSelected', function () {
            it('should get the selected tab', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                tab1.setSelected(true);
                expect(tabs.getSelected()).toEqual(tab1);
            });
            it('should get null if no selected tab', function () {
                var tabs = mockTabs();
                var tab0 = mockTab(tabs);
                var tab1 = mockTab(tabs);
                tabs.add(tab0);
                tabs.add(tab1);
                expect(tabs.getSelected()).toEqual(null);
            });
        });
        var app;
        var config;
        var platform;
        var _cd;
        function mockNav() {
            return new src_1.Nav(null, null, null, config, null, null, null, null, null);
        }
        function mockTabs() {
            return new src_1.Tabs(null, null, null, config, null, null, null);
        }
        function mockTab(parentTabs) {
            var tab = new src_1.Tab(parentTabs, app, config, null, null, null, null, null, _cd);
            tab.load = function (opts, cb) {
                cb();
            };
            return tab;
        }
        var SomePage = (function () {
            function SomePage() {
            }
            SomePage = __decorate([
                core_1.Component({}), 
                __metadata('design:paramtypes', [])
            ], SomePage);
            return SomePage;
        }());
        beforeEach(function () {
            config = new src_1.Config();
            platform = new src_1.Platform();
            app = new src_1.App(config, null, platform);
            _cd = {
                reattach: function () { },
                detach: function () { }
            };
        });
    });
}
exports.run = run;
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(2));
	__export(__webpack_require__(125));
	__export(__webpack_require__(131));
	__export(__webpack_require__(214));
	__export(__webpack_require__(215));
	__export(__webpack_require__(140));
	__export(__webpack_require__(141));
	__export(__webpack_require__(138));
	__export(__webpack_require__(139));
	__export(__webpack_require__(126));
	__export(__webpack_require__(222));
	__export(__webpack_require__(123));
	__export(__webpack_require__(128));
	__export(__webpack_require__(135));
	__export(__webpack_require__(130));
	var util_1 = __webpack_require__(127);
	exports.reorderArray = util_1.reorderArray;
	__export(__webpack_require__(152));
	__export(__webpack_require__(219));
	__export(__webpack_require__(151));
	__export(__webpack_require__(213));
	__export(__webpack_require__(226));
	// these modules don't export anything
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var platform_browser_dynamic_1 = __webpack_require__(3);
	var core_1 = __webpack_require__(8);
	var http_1 = __webpack_require__(121);
	var app_1 = __webpack_require__(122);
	var click_block_1 = __webpack_require__(123);
	var dom_1 = __webpack_require__(124);
	var config_1 = __webpack_require__(125);
	var events_1 = __webpack_require__(128);
	var feature_detect_1 = __webpack_require__(129);
	var form_1 = __webpack_require__(130);
	var directives_1 = __webpack_require__(131);
	var util_1 = __webpack_require__(127);
	var keyboard_1 = __webpack_require__(135);
	var menu_controller_1 = __webpack_require__(145);
	var platform_1 = __webpack_require__(126);
	var scroll_view_1 = __webpack_require__(159);
	var tap_click_1 = __webpack_require__(210);
	var translate_1 = __webpack_require__(213);
	var _reflect = Reflect;
	/**
	 * @name ionicBootstrap
	 * @description
	 * `ionicBootstrap` allows you to bootstrap your entire application. Similar to Angular's `bootstrap`, `ionicBootstrap`
	 * takes a root component in order to start the app. You can pass along any providers that you may want to inject into your
	 * app as an array for the second argument. You can also pass a config object as the third argument to configure your app's settings.
	 *
	 * @usage
	 *
	 * ```ts
	 * import { ionicBootstrap } from 'ionic-angular';
	 * import { Component } from '@angular/core';
	 *
	 * @Component({
	 *   templateUrl: 'build/app.html',
	 * })
	 * export class MyClass{}
	 *
	 * ionicBootstrap(MyClass, null, {tabbarPlacement: 'bottom'})
	 * ```
	 */
	function ionicBootstrap(appRootComponent, customProviders, config) {
	    // get all Ionic Providers
	    var providers = ionicProviders(customProviders, config);
	    // automatically set "ion-app" selector to users root component
	    addSelector(appRootComponent, 'ion-app');
	    cssReady(function () {
	        // call angular bootstrap
	        platform_browser_dynamic_1.bootstrap(appRootComponent, providers).then(function (ngComponentRef) {
	            // ionic app has finished bootstrapping
	            ionicPostBootstrap(ngComponentRef);
	        });
	    });
	}
	exports.ionicBootstrap = ionicBootstrap;
	/**
	 * @private
	 */
	function ionicPostBootstrap(ngComponentRef) {
	    var app = ngComponentRef.injector.get(app_1.App);
	    app.setAppInjector(ngComponentRef.injector);
	    // prepare platform ready
	    var platform = ngComponentRef.injector.get(platform_1.Platform);
	    platform.setZone(ngComponentRef.injector.get(core_1.NgZone));
	    platform.prepareReady();
	    // TODO: Use PLATFORM_INITIALIZER
	    ngComponentRef.injector.get(tap_click_1.TapClick);
	    return ngComponentRef;
	}
	exports.ionicPostBootstrap = ionicPostBootstrap;
	var cssLoadAttempt = 0;
	function cssReady(done) {
	    var appEle = document.body.querySelector('ion-app');
	    if (!appEle || appEle.clientHeight > 0 || cssLoadAttempt > 300) {
	        done();
	    }
	    else {
	        dom_1.nativeRaf(function () {
	            cssLoadAttempt++;
	            cssReady(done);
	        });
	    }
	}
	/**
	 * @private
	 */
	function ionicProviders(customProviders, config) {
	    // create an instance of Config
	    if (!(config instanceof config_1.Config)) {
	        config = new config_1.Config(config);
	    }
	    // enable production mode if config set to true
	    if (config.getBoolean('prodMode')) {
	        core_1.enableProdMode();
	    }
	    // create an instance of Platform
	    var platform = new platform_1.Platform();
	    // initialize platform
	    platform.setUrl(window.location.href);
	    platform.setUserAgent(window.navigator.userAgent);
	    platform.setNavigatorPlatform(window.navigator.platform);
	    platform.load(config);
	    config.setPlatform(platform);
	    var clickBlock = new click_block_1.ClickBlock();
	    var events = new events_1.Events();
	    var featureDetect = new feature_detect_1.FeatureDetect();
	    setupDom(window, document, config, platform, clickBlock, featureDetect);
	    bindEvents(window, document, platform, events);
	    var providers = [
	        app_1.App,
	        core_1.provide(click_block_1.ClickBlock, { useValue: clickBlock }),
	        core_1.provide(config_1.Config, { useValue: config }),
	        core_1.provide(events_1.Events, { useValue: events }),
	        core_1.provide(feature_detect_1.FeatureDetect, { useValue: featureDetect }),
	        form_1.Form,
	        keyboard_1.Keyboard,
	        menu_controller_1.MenuController,
	        core_1.provide(platform_1.Platform, { useValue: platform }),
	        translate_1.Translate,
	        tap_click_1.TapClick,
	        core_1.provide(core_1.PLATFORM_DIRECTIVES, { useValue: directives_1.IONIC_DIRECTIVES, multi: true }),
	        http_1.HTTP_PROVIDERS
	    ];
	    if (util_1.isPresent(customProviders)) {
	        providers.push(customProviders);
	    }
	    return providers;
	}
	exports.ionicProviders = ionicProviders;
	function setupDom(window, document, config, platform, clickBlock, featureDetect) {
	    var bodyEle = document.body;
	    var mode = config.get('mode');
	    // if dynamic mode links have been added the fire up the correct one
	    var modeLinkAttr = mode + '-href';
	    var linkEle = document.head.querySelector('link[' + modeLinkAttr + ']');
	    if (linkEle) {
	        var href = linkEle.getAttribute(modeLinkAttr);
	        linkEle.removeAttribute(modeLinkAttr);
	        linkEle.href = href;
	    }
	    // set the mode class name
	    // ios/md/wp
	    bodyEle.classList.add(mode);
	    // language and direction
	    platform.setDir(document.documentElement.dir, false);
	    platform.setLang(document.documentElement.lang, false);
	    var versions = platform.versions();
	    platform.platforms().forEach(function (platformName) {
	        // platform-ios
	        var platformClass = 'platform-' + platformName;
	        bodyEle.classList.add(platformClass);
	        var platformVersion = versions[platformName];
	        if (platformVersion) {
	            // platform-ios9
	            platformClass += platformVersion.major;
	            bodyEle.classList.add(platformClass);
	            // platform-ios9_3
	            bodyEle.classList.add(platformClass + '_' + platformVersion.minor);
	        }
	    });
	    // touch devices should not use :hover CSS pseudo
	    // enable :hover CSS when the "hoverCSS" setting is not false
	    if (config.getBoolean('hoverCSS', true) !== false) {
	        bodyEle.classList.add('enable-hover');
	    }
	    if (config.getBoolean('clickBlock', true) !== false) {
	        clickBlock.enable();
	    }
	    // run feature detection tests
	    featureDetect.run(window, document);
	}
	/**
	 * Bind some global events and publish on the 'app' channel
	 */
	function bindEvents(window, document, platform, events) {
	    window.addEventListener('online', function (ev) {
	        events.publish('app:online', ev);
	    }, false);
	    window.addEventListener('offline', function (ev) {
	        events.publish('app:offline', ev);
	    }, false);
	    window.addEventListener('orientationchange', function (ev) {
	        events.publish('app:rotated', ev);
	    });
	    // When that status taps, we respond
	    window.addEventListener('statusTap', function (ev) {
	        // TODO: Make this more better
	        var el = document.elementFromPoint(platform.width() / 2, platform.height() / 2);
	        if (!el) {
	            return;
	        }
	        var content = dom_1.closest(el, 'scroll-content');
	        if (content) {
	            var scroll = new scroll_view_1.ScrollView(content);
	            scroll.scrollTo(0, 0, 300);
	        }
	    });
	    // start listening for resizes XXms after the app starts
	    dom_1.nativeTimeout(function () {
	        window.addEventListener('resize', function () {
	            platform.windowResize();
	        });
	    }, 2000);
	}
	/**
	 * @private
	 */
	function addSelector(type, selector) {
	    if (type) {
	        var annotations = _reflect.getMetadata('annotations', type);
	        if (annotations && !annotations[0].selector) {
	            annotations[0].selector = selector;
	            _reflect.defineMetadata('annotations', annotations, type);
	        }
	    }
	}
	exports.addSelector = addSelector;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var common_1 = __webpack_require__(4);
	var compiler_1 = __webpack_require__(5);
	var core_1 = __webpack_require__(8);
	var platform_browser_1 = __webpack_require__(110);
	var core_private_1 = __webpack_require__(111);
	var async_1 = __webpack_require__(112);
	var lang_1 = __webpack_require__(113);
	var xhr_cache_1 = __webpack_require__(115);
	var xhr_impl_1 = __webpack_require__(120);
	exports.BROWSER_APP_COMPILER_PROVIDERS = [
	    compiler_1.COMPILER_PROVIDERS, {
	        provide: compiler_1.CompilerConfig,
	        useFactory: function (platformDirectives, platformPipes) {
	            return new compiler_1.CompilerConfig({ platformDirectives: platformDirectives, platformPipes: platformPipes });
	        },
	        deps: [core_1.PLATFORM_DIRECTIVES, core_1.PLATFORM_PIPES]
	    },
	    { provide: compiler_1.XHR, useClass: xhr_impl_1.XHRImpl },
	    { provide: core_1.PLATFORM_DIRECTIVES, useValue: common_1.COMMON_DIRECTIVES, multi: true },
	    { provide: core_1.PLATFORM_PIPES, useValue: common_1.COMMON_PIPES, multi: true }
	];
	exports.CACHED_TEMPLATE_PROVIDER = [{ provide: compiler_1.XHR, useClass: xhr_cache_1.CachedXHR }];
	/**
	 * Bootstrapping for Angular applications.
	 *
	 * You instantiate an Angular application by explicitly specifying a component to use
	 * as the root component for your application via the `bootstrap()` method.
	 *
	 * ## Simple Example
	 *
	 * Assuming this `index.html`:
	 *
	 * ```html
	 * <html>
	 *   <!-- load Angular script tags here. -->
	 *   <body>
	 *     <my-app>loading...</my-app>
	 *   </body>
	 * </html>
	 * ```
	 *
	 * An application is bootstrapped inside an existing browser DOM, typically `index.html`.
	 * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is
	 * mainly for security reasons, as well as architectural changes in Angular 2. This means
	 * that `index.html` can safely be processed using server-side technologies such as
	 * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from
	 * Angular 2 component double-curly `{{ syntax }}`.
	 *
	 * We can use this script code:
	 *
	 * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}
	 *
	 * When the app developer invokes `bootstrap()` with the root component `MyApp` as its
	 * argument, Angular performs the following tasks:
	 *
	 *  1. It uses the component's `selector` property to locate the DOM element which needs
	 *     to be upgraded into the angular component.
	 *  2. It creates a new child injector (from the platform injector). Optionally, you can
	 *     also override the injector configuration for an app by invoking `bootstrap` with the
	 *     `componentInjectableBindings` argument.
	 *  3. It creates a new `Zone` and connects it to the angular application's change detection
	 *     domain instance.
	 *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the
	 *     template into it.
	 *  5. It instantiates the specified component.
	 *  6. Finally, Angular performs change detection to apply the initial data providers for the
	 *     application.
	 *
	 *
	 * ## Bootstrapping Multiple Applications
	 *
	 * When working within a browser window, there are many singleton resources: cookies, title,
	 * location, and others. Angular services that represent these resources must likewise be
	 * shared across all Angular applications that occupy the same browser window. For this
	 * reason, Angular creates exactly one global platform object which stores all shared
	 * services, and each angular application injector has the platform injector as its parent.
	 *
	 * Each application has its own private injector as well. When there are multiple
	 * applications on a page, Angular treats each application injector's services as private
	 * to that application.
	 *
	 * ## API
	 *
	 * - `appComponentType`: The root component which should act as the application. This is
	 *   a reference to a `Type` which is annotated with `@Component(...)`.
	 * - `customProviders`: An additional set of providers that can be added to the
	 *   app injector to override default injection behavior.
	 *
	 * Returns a `Promise` of {@link ComponentRef}.
	 */
	function bootstrap(appComponentType, customProviders) {
	    core_private_1.reflector.reflectionCapabilities = new core_private_1.ReflectionCapabilities();
	    var providers = [
	        platform_browser_1.BROWSER_APP_PROVIDERS, exports.BROWSER_APP_COMPILER_PROVIDERS,
	        lang_1.isPresent(customProviders) ? customProviders : []
	    ];
	    var appInjector = core_1.ReflectiveInjector.resolveAndCreate(providers, platform_browser_1.browserPlatform().injector);
	    return core_1.coreLoadAndBootstrap(appComponentType, appInjector);
	}
	exports.bootstrap = bootstrap;
	/**
	 * @experimental
	 */
	function bootstrapWorkerUi(workerScriptUri, customProviders) {
	    var app = core_1.ReflectiveInjector.resolveAndCreate([
	        platform_browser_1.WORKER_UI_APPLICATION_PROVIDERS, exports.BROWSER_APP_COMPILER_PROVIDERS,
	        { provide: platform_browser_1.WORKER_SCRIPT, useValue: workerScriptUri },
	        lang_1.isPresent(customProviders) ? customProviders : []
	    ], platform_browser_1.workerUiPlatform().injector);
	    // Return a promise so that we keep the same semantics as Dart,
	    // and we might want to wait for the app side to come up
	    // in the future...
	    return async_1.PromiseWrapper.resolve(app.get(core_1.ApplicationRef));
	}
	exports.bootstrapWorkerUi = bootstrapWorkerUi;
	/**
	 * @experimental
	 */
	var WORKER_APP_COMPILER_PROVIDERS = [
	    compiler_1.COMPILER_PROVIDERS, {
	        provide: compiler_1.CompilerConfig,
	        useFactory: function (platformDirectives, platformPipes) {
	            return new compiler_1.CompilerConfig({ platformDirectives: platformDirectives, platformPipes: platformPipes });
	        },
	        deps: [core_1.PLATFORM_DIRECTIVES, core_1.PLATFORM_PIPES]
	    },
	    { provide: compiler_1.XHR, useClass: xhr_impl_1.XHRImpl },
	    { provide: core_1.PLATFORM_DIRECTIVES, useValue: common_1.COMMON_DIRECTIVES, multi: true },
	    { provide: core_1.PLATFORM_PIPES, useValue: common_1.COMMON_PIPES, multi: true }
	];
	/**
	 * @experimental
	 */
	function bootstrapWorkerApp(appComponentType, customProviders) {
	    var appInjector = core_1.ReflectiveInjector.resolveAndCreate([
	        platform_browser_1.WORKER_APP_APPLICATION_PROVIDERS, WORKER_APP_COMPILER_PROVIDERS,
	        lang_1.isPresent(customProviders) ? customProviders : []
	    ], platform_browser_1.workerAppPlatform().injector);
	    return core_1.coreLoadAndBootstrap(appComponentType, appInjector);
	}
	exports.bootstrapWorkerApp = bootstrapWorkerApp;
	//# sourceMappingURL=index.js.map

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("angular2")["common"];

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(6));
	//# sourceMappingURL=index.js.map

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @description
	 * Starting point to import all compiler APIs.
	 */
	var compiler_1 = __webpack_require__(7);
	exports.COMPILER_PROVIDERS = compiler_1.COMPILER_PROVIDERS;
	exports.CompileDiDependencyMetadata = compiler_1.CompileDiDependencyMetadata;
	exports.CompileDirectiveMetadata = compiler_1.CompileDirectiveMetadata;
	exports.CompileFactoryMetadata = compiler_1.CompileFactoryMetadata;
	exports.CompileIdentifierMetadata = compiler_1.CompileIdentifierMetadata;
	exports.CompileMetadataWithIdentifier = compiler_1.CompileMetadataWithIdentifier;
	exports.CompileMetadataWithType = compiler_1.CompileMetadataWithType;
	exports.CompilePipeMetadata = compiler_1.CompilePipeMetadata;
	exports.CompileProviderMetadata = compiler_1.CompileProviderMetadata;
	exports.CompileQueryMetadata = compiler_1.CompileQueryMetadata;
	exports.CompileTemplateMetadata = compiler_1.CompileTemplateMetadata;
	exports.CompileTokenMetadata = compiler_1.CompileTokenMetadata;
	exports.CompileTypeMetadata = compiler_1.CompileTypeMetadata;
	exports.CompilerConfig = compiler_1.CompilerConfig;
	exports.DEFAULT_PACKAGE_URL_PROVIDER = compiler_1.DEFAULT_PACKAGE_URL_PROVIDER;
	exports.DirectiveResolver = compiler_1.DirectiveResolver;
	exports.NormalizedComponentWithViewDirectives = compiler_1.NormalizedComponentWithViewDirectives;
	exports.OfflineCompiler = compiler_1.OfflineCompiler;
	exports.PipeResolver = compiler_1.PipeResolver;
	exports.RenderTypes = compiler_1.RenderTypes;
	exports.RuntimeCompiler = compiler_1.RuntimeCompiler;
	exports.SourceModule = compiler_1.SourceModule;
	exports.TEMPLATE_TRANSFORMS = compiler_1.TEMPLATE_TRANSFORMS;
	exports.UrlResolver = compiler_1.UrlResolver;
	exports.ViewResolver = compiler_1.ViewResolver;
	exports.XHR = compiler_1.XHR;
	exports.createOfflineCompileUrlResolver = compiler_1.createOfflineCompileUrlResolver;
	var element_schema_registry_1 = __webpack_require__(28);
	exports.ElementSchemaRegistry = element_schema_registry_1.ElementSchemaRegistry;
	__export(__webpack_require__(9));
	__export(__webpack_require__(102));
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var core_1 = __webpack_require__(8);
	__export(__webpack_require__(9));
	var template_parser_1 = __webpack_require__(11);
	exports.TEMPLATE_TRANSFORMS = template_parser_1.TEMPLATE_TRANSFORMS;
	var config_1 = __webpack_require__(36);
	exports.CompilerConfig = config_1.CompilerConfig;
	exports.RenderTypes = config_1.RenderTypes;
	__export(__webpack_require__(33));
	__export(__webpack_require__(37));
	var runtime_compiler_1 = __webpack_require__(39);
	exports.RuntimeCompiler = runtime_compiler_1.RuntimeCompiler;
	__export(__webpack_require__(34));
	__export(__webpack_require__(86));
	var view_resolver_1 = __webpack_require__(92);
	exports.ViewResolver = view_resolver_1.ViewResolver;
	var directive_resolver_1 = __webpack_require__(90);
	exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
	var pipe_resolver_1 = __webpack_require__(91);
	exports.PipeResolver = pipe_resolver_1.PipeResolver;
	var template_parser_2 = __webpack_require__(11);
	var html_parser_1 = __webpack_require__(21);
	var directive_normalizer_1 = __webpack_require__(85);
	var metadata_resolver_1 = __webpack_require__(87);
	var style_compiler_1 = __webpack_require__(63);
	var view_compiler_1 = __webpack_require__(65);
	var config_2 = __webpack_require__(36);
	var runtime_compiler_2 = __webpack_require__(39);
	var element_schema_registry_1 = __webpack_require__(28);
	var dom_element_schema_registry_1 = __webpack_require__(100);
	var url_resolver_2 = __webpack_require__(34);
	var parser_1 = __webpack_require__(18);
	var lexer_1 = __webpack_require__(20);
	var view_resolver_2 = __webpack_require__(92);
	var directive_resolver_2 = __webpack_require__(90);
	var pipe_resolver_2 = __webpack_require__(91);
	/**
	 * A set of providers that provide `RuntimeCompiler` and its dependencies to use for
	 * template compilation.
	 */
	exports.COMPILER_PROVIDERS = 
	/*@ts2dart_const*/ [
	    lexer_1.Lexer, parser_1.Parser, html_parser_1.HtmlParser, template_parser_2.TemplateParser, directive_normalizer_1.DirectiveNormalizer, metadata_resolver_1.CompileMetadataResolver,
	    url_resolver_2.DEFAULT_PACKAGE_URL_PROVIDER, style_compiler_1.StyleCompiler, view_compiler_1.ViewCompiler,
	    /*@ts2dart_Provider*/ { provide: config_2.CompilerConfig, useValue: new config_2.CompilerConfig() },
	    runtime_compiler_2.RuntimeCompiler,
	    /*@ts2dart_Provider*/ { provide: core_1.ComponentResolver, useExisting: runtime_compiler_2.RuntimeCompiler },
	    dom_element_schema_registry_1.DomElementSchemaRegistry,
	    /*@ts2dart_Provider*/ { provide: element_schema_registry_1.ElementSchemaRegistry, useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry },
	    url_resolver_2.UrlResolver, view_resolver_2.ViewResolver, directive_resolver_2.DirectiveResolver, pipe_resolver_2.PipeResolver
	];
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("angular2")["core"];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(10);
	/**
	 * A segment of text within the template.
	 */
	var TextAst = (function () {
	    function TextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return TextAst;
	}());
	exports.TextAst = TextAst;
	/**
	 * A bound expression within the text of a template.
	 */
	var BoundTextAst = (function () {
	    function BoundTextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundTextAst.prototype.visit = function (visitor, context) {
	        return visitor.visitBoundText(this, context);
	    };
	    return BoundTextAst;
	}());
	exports.BoundTextAst = BoundTextAst;
	/**
	 * A plain attribute on an element.
	 */
	var AttrAst = (function () {
	    function AttrAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return AttrAst;
	}());
	exports.AttrAst = AttrAst;
	/**
	 * A binding for an element property (e.g. `[property]="expression"`).
	 */
	var BoundElementPropertyAst = (function () {
	    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
	        this.name = name;
	        this.type = type;
	        this.securityContext = securityContext;
	        this.value = value;
	        this.unit = unit;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElementProperty(this, context);
	    };
	    return BoundElementPropertyAst;
	}());
	exports.BoundElementPropertyAst = BoundElementPropertyAst;
	/**
	 * A binding for an element event (e.g. `(event)="handler()"`).
	 */
	var BoundEventAst = (function () {
	    function BoundEventAst(name, target, handler, sourceSpan) {
	        this.name = name;
	        this.target = target;
	        this.handler = handler;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundEventAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEvent(this, context);
	    };
	    Object.defineProperty(BoundEventAst.prototype, "fullName", {
	        get: function () {
	            if (lang_1.isPresent(this.target)) {
	                return this.target + ":" + this.name;
	            }
	            else {
	                return this.name;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundEventAst;
	}());
	exports.BoundEventAst = BoundEventAst;
	/**
	 * A reference declaration on an element (e.g. `let someName="expression"`).
	 */
	var ReferenceAst = (function () {
	    function ReferenceAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    ReferenceAst.prototype.visit = function (visitor, context) {
	        return visitor.visitReference(this, context);
	    };
	    return ReferenceAst;
	}());
	exports.ReferenceAst = ReferenceAst;
	/**
	 * A variable declaration on a <template> (e.g. `var-someName="someLocalName"`).
	 */
	var VariableAst = (function () {
	    function VariableAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    VariableAst.prototype.visit = function (visitor, context) {
	        return visitor.visitVariable(this, context);
	    };
	    return VariableAst;
	}());
	exports.VariableAst = VariableAst;
	/**
	 * An element declaration in a template.
	 */
	var ElementAst = (function () {
	    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.references = references;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    ElementAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElement(this, context);
	    };
	    return ElementAst;
	}());
	exports.ElementAst = ElementAst;
	/**
	 * A `<template>` element included in an Angular template.
	 */
	var EmbeddedTemplateAst = (function () {
	    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	        this.attrs = attrs;
	        this.outputs = outputs;
	        this.references = references;
	        this.variables = variables;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEmbeddedTemplate(this, context);
	    };
	    return EmbeddedTemplateAst;
	}());
	exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	/**
	 * A directive property with a bound value (e.g. `*ngIf="condition").
	 */
	var BoundDirectivePropertyAst = (function () {
	    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	        this.directiveName = directiveName;
	        this.templateName = templateName;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirectiveProperty(this, context);
	    };
	    return BoundDirectivePropertyAst;
	}());
	exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	/**
	 * A directive declared on an element.
	 */
	var DirectiveAst = (function () {
	    function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
	        this.directive = directive;
	        this.inputs = inputs;
	        this.hostProperties = hostProperties;
	        this.hostEvents = hostEvents;
	        this.sourceSpan = sourceSpan;
	    }
	    DirectiveAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirective(this, context);
	    };
	    return DirectiveAst;
	}());
	exports.DirectiveAst = DirectiveAst;
	/**
	 * A provider declared on an element
	 */
	var ProviderAst = (function () {
	    function ProviderAst(token, multiProvider, eager, providers, providerType, sourceSpan) {
	        this.token = token;
	        this.multiProvider = multiProvider;
	        this.eager = eager;
	        this.providers = providers;
	        this.providerType = providerType;
	        this.sourceSpan = sourceSpan;
	    }
	    ProviderAst.prototype.visit = function (visitor, context) {
	        // No visit method in the visitor for now...
	        return null;
	    };
	    return ProviderAst;
	}());
	exports.ProviderAst = ProviderAst;
	(function (ProviderAstType) {
	    ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
	    ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
	    ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
	    ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
	    ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
	})(exports.ProviderAstType || (exports.ProviderAstType = {}));
	var ProviderAstType = exports.ProviderAstType;
	/**
	 * Position where content is to be projected (instance of `<ng-content>` in a template).
	 */
	var NgContentAst = (function () {
	    function NgContentAst(index, ngContentIndex, sourceSpan) {
	        this.index = index;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    NgContentAst.prototype.visit = function (visitor, context) {
	        return visitor.visitNgContent(this, context);
	    };
	    return NgContentAst;
	}());
	exports.NgContentAst = NgContentAst;
	/**
	 * Enumeration of types of property bindings.
	 */
	(function (PropertyBindingType) {
	    /**
	     * A normal binding to a property (e.g. `[property]="expression"`).
	     */
	    PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
	    /**
	     * A binding to an element attribute (e.g. `[attr.name]="expression"`).
	     */
	    PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
	    /**
	     * A binding to a CSS class (e.g. `[class.name]="condition"`).
	     */
	    PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
	    /**
	     * A binding to a style rule (e.g. `[style.rule]="expression"`).
	     */
	    PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
	    /**
	     * A binding to an animation reference (e.g. `[animate.key]="expression"`).
	     */
	    PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
	})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
	var PropertyBindingType = exports.PropertyBindingType;
	/**
	 * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
	 */
	function templateVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    asts.forEach(function (ast) {
	        var astResult = ast.visit(visitor, context);
	        if (lang_1.isPresent(astResult)) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	exports.templateVisitAll = templateVisitAll;
	//# sourceMappingURL=template_ast.js.map

/***/ },
/* 10 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var globalScope;
	if (typeof window === 'undefined') {
	    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	        globalScope = self;
	    }
	    else {
	        globalScope = global;
	    }
	}
	else {
	    globalScope = window;
	}
	function scheduleMicroTask(fn) {
	    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	}
	exports.scheduleMicroTask = scheduleMicroTask;
	exports.IS_DART = false;
	// Need to declare a new variable for global here since TypeScript
	// exports the original value of the symbol.
	var _global = globalScope;
	exports.global = _global;
	exports.Type = Function;
	function getTypeNameForDebugging(type) {
	    if (type['name']) {
	        return type['name'];
	    }
	    return typeof type;
	}
	exports.getTypeNameForDebugging = getTypeNameForDebugging;
	exports.Math = _global.Math;
	exports.Date = _global.Date;
	// TODO: remove calls to assert in production environment
	// Note: Can't just export this and import in in other files
	// as `assert` is a reserved keyword in Dart
	_global.assert = function assert(condition) {
	    // TODO: to be fixed properly via #2830, noop for now
	};
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function isBoolean(obj) {
	    return typeof obj === 'boolean';
	}
	exports.isBoolean = isBoolean;
	function isNumber(obj) {
	    return typeof obj === 'number';
	}
	exports.isNumber = isNumber;
	function isString(obj) {
	    return typeof obj === 'string';
	}
	exports.isString = isString;
	function isFunction(obj) {
	    return typeof obj === 'function';
	}
	exports.isFunction = isFunction;
	function isType(obj) {
	    return isFunction(obj);
	}
	exports.isType = isType;
	function isStringMap(obj) {
	    return typeof obj === 'object' && obj !== null;
	}
	exports.isStringMap = isStringMap;
	var STRING_MAP_PROTO = Object.getPrototypeOf({});
	function isStrictStringMap(obj) {
	    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	}
	exports.isStrictStringMap = isStrictStringMap;
	function isPromise(obj) {
	    return obj instanceof _global.Promise;
	}
	exports.isPromise = isPromise;
	function isArray(obj) {
	    return Array.isArray(obj);
	}
	exports.isArray = isArray;
	function isDate(obj) {
	    return obj instanceof exports.Date && !isNaN(obj.valueOf());
	}
	exports.isDate = isDate;
	function noop() { }
	exports.noop = noop;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    if (token.overriddenName) {
	        return token.overriddenName;
	    }
	    var res = token.toString();
	    var newLineIndex = res.indexOf('\n');
	    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	}
	exports.stringify = stringify;
	// serialize / deserialize enum exist only for consistency with dart API
	// enums in typescript don't need to be serialized
	function serializeEnum(val) {
	    return val;
	}
	exports.serializeEnum = serializeEnum;
	function deserializeEnum(val, values) {
	    return val;
	}
	exports.deserializeEnum = deserializeEnum;
	function resolveEnumToken(enumValue, val) {
	    return enumValue[val];
	}
	exports.resolveEnumToken = resolveEnumToken;
	var StringWrapper = (function () {
	    function StringWrapper() {
	    }
	    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	    StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	    StringWrapper.equals = function (s, s2) { return s === s2; };
	    StringWrapper.stripLeft = function (s, charVal) {
	        if (s && s.length) {
	            var pos = 0;
	            for (var i = 0; i < s.length; i++) {
	                if (s[i] != charVal)
	                    break;
	                pos++;
	            }
	            s = s.substring(pos);
	        }
	        return s;
	    };
	    StringWrapper.stripRight = function (s, charVal) {
	        if (s && s.length) {
	            var pos = s.length;
	            for (var i = s.length - 1; i >= 0; i--) {
	                if (s[i] != charVal)
	                    break;
	                pos--;
	            }
	            s = s.substring(0, pos);
	        }
	        return s;
	    };
	    StringWrapper.replace = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.replaceAll = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.slice = function (s, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return s.slice(from, to === null ? undefined : to);
	    };
	    StringWrapper.replaceAllMapped = function (s, from, cb) {
	        return s.replace(from, function () {
	            var matches = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                matches[_i - 0] = arguments[_i];
	            }
	            // Remove offset & string from the result array
	            matches.splice(-2, 2);
	            // The callback receives match, p1, ..., pn
	            return cb(matches);
	        });
	    };
	    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	    StringWrapper.compare = function (a, b) {
	        if (a < b) {
	            return -1;
	        }
	        else if (a > b) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    return StringWrapper;
	}());
	exports.StringWrapper = StringWrapper;
	var StringJoiner = (function () {
	    function StringJoiner(parts) {
	        if (parts === void 0) { parts = []; }
	        this.parts = parts;
	    }
	    StringJoiner.prototype.add = function (part) { this.parts.push(part); };
	    StringJoiner.prototype.toString = function () { return this.parts.join(''); };
	    return StringJoiner;
	}());
	exports.StringJoiner = StringJoiner;
	var NumberParseError = (function (_super) {
	    __extends(NumberParseError, _super);
	    function NumberParseError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    NumberParseError.prototype.toString = function () { return this.message; };
	    return NumberParseError;
	}(Error));
	exports.NumberParseError = NumberParseError;
	var NumberWrapper = (function () {
	    function NumberWrapper() {
	    }
	    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	    NumberWrapper.equal = function (a, b) { return a === b; };
	    NumberWrapper.parseIntAutoRadix = function (text) {
	        var result = parseInt(text);
	        if (isNaN(result)) {
	            throw new NumberParseError('Invalid integer literal when parsing ' + text);
	        }
	        return result;
	    };
	    NumberWrapper.parseInt = function (text, radix) {
	        if (radix == 10) {
	            if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else if (radix == 16) {
	            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else {
	            var result = parseInt(text, radix);
	            if (!isNaN(result)) {
	                return result;
	            }
	        }
	        throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	    };
	    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
	    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
	    Object.defineProperty(NumberWrapper, "NaN", {
	        get: function () { return NaN; },
	        enumerable: true,
	        configurable: true
	    });
	    NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	    NumberWrapper.isNaN = function (value) { return isNaN(value); };
	    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	    return NumberWrapper;
	}());
	exports.NumberWrapper = NumberWrapper;
	exports.RegExp = _global.RegExp;
	var RegExpWrapper = (function () {
	    function RegExpWrapper() {
	    }
	    RegExpWrapper.create = function (regExpStr, flags) {
	        if (flags === void 0) { flags = ''; }
	        flags = flags.replace(/g/g, '');
	        return new _global.RegExp(regExpStr, flags + 'g');
	    };
	    RegExpWrapper.firstMatch = function (regExp, input) {
	        // Reset multimatch regex state
	        regExp.lastIndex = 0;
	        return regExp.exec(input);
	    };
	    RegExpWrapper.test = function (regExp, input) {
	        regExp.lastIndex = 0;
	        return regExp.test(input);
	    };
	    RegExpWrapper.matcher = function (regExp, input) {
	        // Reset regex state for the case
	        // someone did not loop over all matches
	        // last time.
	        regExp.lastIndex = 0;
	        return { re: regExp, input: input };
	    };
	    RegExpWrapper.replaceAll = function (regExp, input, replace) {
	        var c = regExp.exec(input);
	        var res = '';
	        regExp.lastIndex = 0;
	        var prev = 0;
	        while (c) {
	            res += input.substring(prev, c.index);
	            res += replace(c);
	            prev = c.index + c[0].length;
	            regExp.lastIndex = prev;
	            c = regExp.exec(input);
	        }
	        res += input.substring(prev);
	        return res;
	    };
	    return RegExpWrapper;
	}());
	exports.RegExpWrapper = RegExpWrapper;
	var RegExpMatcherWrapper = (function () {
	    function RegExpMatcherWrapper() {
	    }
	    RegExpMatcherWrapper.next = function (matcher) {
	        return matcher.re.exec(matcher.input);
	    };
	    return RegExpMatcherWrapper;
	}());
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	var FunctionWrapper = (function () {
	    function FunctionWrapper() {
	    }
	    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
	    FunctionWrapper.bind = function (fn, scope) { return fn.bind(scope); };
	    return FunctionWrapper;
	}());
	exports.FunctionWrapper = FunctionWrapper;
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}
	exports.looseIdentical = looseIdentical;
	// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	function getMapKey(value) {
	    return value;
	}
	exports.getMapKey = getMapKey;
	function normalizeBlank(obj) {
	    return isBlank(obj) ? null : obj;
	}
	exports.normalizeBlank = normalizeBlank;
	function normalizeBool(obj) {
	    return isBlank(obj) ? false : obj;
	}
	exports.normalizeBool = normalizeBool;
	function isJsObject(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}
	exports.isJsObject = isJsObject;
	function print(obj) {
	    console.log(obj);
	}
	exports.print = print;
	function warn(obj) {
	    console.warn(obj);
	}
	exports.warn = warn;
	// Can't be all uppercase as our transpiler would think it is a special directive...
	var Json = (function () {
	    function Json() {
	    }
	    Json.parse = function (s) { return _global.JSON.parse(s); };
	    Json.stringify = function (data) {
	        // Dart doesn't take 3 arguments
	        return _global.JSON.stringify(data, null, 2);
	    };
	    return Json;
	}());
	exports.Json = Json;
	var DateWrapper = (function () {
	    function DateWrapper() {
	    }
	    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
	        if (month === void 0) { month = 1; }
	        if (day === void 0) { day = 1; }
	        if (hour === void 0) { hour = 0; }
	        if (minutes === void 0) { minutes = 0; }
	        if (seconds === void 0) { seconds = 0; }
	        if (milliseconds === void 0) { milliseconds = 0; }
	        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
	    };
	    DateWrapper.fromISOString = function (str) { return new exports.Date(str); };
	    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };
	    DateWrapper.toMillis = function (date) { return date.getTime(); };
	    DateWrapper.now = function () { return new exports.Date(); };
	    DateWrapper.toJson = function (date) { return date.toJSON(); };
	    return DateWrapper;
	}());
	exports.DateWrapper = DateWrapper;
	function setValueOnPath(global, path, value) {
	    var parts = path.split('.');
	    var obj = global;
	    while (parts.length > 1) {
	        var name = parts.shift();
	        if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[parts.shift()] = value;
	}
	exports.setValueOnPath = setValueOnPath;
	var _symbolIterator = null;
	function getSymbolIterator() {
	    if (isBlank(_symbolIterator)) {
	        if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
	            _symbolIterator = Symbol.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    Map.prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	exports.getSymbolIterator = getSymbolIterator;
	function evalExpression(sourceUrl, expr, declarations, vars) {
	    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	    var fnArgNames = [];
	    var fnArgValues = [];
	    for (var argName in vars) {
	        fnArgNames.push(argName);
	        fnArgValues.push(vars[argName]);
	    }
	    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	}
	exports.evalExpression = evalExpression;
	function isPrimitive(obj) {
	    return !isJsObject(obj);
	}
	exports.isPrimitive = isPrimitive;
	function hasConstructor(value, type) {
	    return value.constructor === type;
	}
	exports.hasConstructor = hasConstructor;
	function escape(s) {
	    return _global.encodeURI(s);
	}
	exports.escape = escape;
	function escapeRegExp(s) {
	    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	}
	exports.escapeRegExp = escapeRegExp;
	//# sourceMappingURL=lang.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(14);
	var ast_1 = __webpack_require__(17);
	var parser_1 = __webpack_require__(18);
	var html_parser_1 = __webpack_require__(21);
	var html_tags_1 = __webpack_require__(25);
	var parse_util_1 = __webpack_require__(26);
	var template_ast_1 = __webpack_require__(9);
	var selector_1 = __webpack_require__(27);
	var element_schema_registry_1 = __webpack_require__(28);
	var template_preparser_1 = __webpack_require__(29);
	var style_url_resolver_1 = __webpack_require__(30);
	var html_ast_1 = __webpack_require__(22);
	var util_1 = __webpack_require__(31);
	var identifiers_1 = __webpack_require__(32);
	var provider_parser_1 = __webpack_require__(35);
	// Group 1 = "bind-"
	// Group 2 = "var-"
	// Group 3 = "let-"
	// Group 4 = "ref-/#"
	// Group 5 = "on-"
	// Group 6 = "bindon-"
	// Group 7 = "animate-/@"
	// Group 8 = the identifier after "bind-", "var-/#", or "on-"
	// Group 9 = identifier inside [()]
	// Group 10 = identifier inside []
	// Group 11 = identifier inside ()
	var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-)|(let-)|(ref-|#)|(on-)|(bindon-)|(animate-|@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
	var TEMPLATE_ELEMENT = 'template';
	var TEMPLATE_ATTR = 'template';
	var TEMPLATE_ATTR_PREFIX = '*';
	var CLASS_ATTR = 'class';
	var PROPERTY_PARTS_SEPARATOR = '.';
	var ATTRIBUTE_PREFIX = 'attr';
	var CLASS_PREFIX = 'class';
	var STYLE_PREFIX = 'style';
	var TEXT_CSS_SELECTOR = selector_1.CssSelector.parse('*')[0];
	/**
	 * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	 * parsed templates before compilation is invoked, allowing custom expression syntax
	 * and other advanced transformations.
	 *
	 * This is currently an internal-only feature and not meant for general use.
	 */
	exports.TEMPLATE_TRANSFORMS = new core_1.OpaqueToken('TemplateTransforms');
	var TemplateParseError = (function (_super) {
	    __extends(TemplateParseError, _super);
	    function TemplateParseError(message, span, level) {
	        _super.call(this, span, message, level);
	    }
	    return TemplateParseError;
	}(parse_util_1.ParseError));
	exports.TemplateParseError = TemplateParseError;
	var TemplateParseResult = (function () {
	    function TemplateParseResult(templateAst, errors) {
	        this.templateAst = templateAst;
	        this.errors = errors;
	    }
	    return TemplateParseResult;
	}());
	exports.TemplateParseResult = TemplateParseResult;
	var TemplateParser = (function () {
	    function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._htmlParser = _htmlParser;
	        this._console = _console;
	        this.transforms = transforms;
	    }
	    TemplateParser.prototype.parse = function (component, template, directives, pipes, templateUrl) {
	        var result = this.tryParse(component, template, directives, pipes, templateUrl);
	        var warnings = result.errors.filter(function (error) { return error.level === parse_util_1.ParseErrorLevel.WARNING; });
	        var errors = result.errors.filter(function (error) { return error.level === parse_util_1.ParseErrorLevel.FATAL; });
	        if (warnings.length > 0) {
	            this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	        }
	        if (errors.length > 0) {
	            var errorString = errors.join('\n');
	            throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
	        }
	        return result.templateAst;
	    };
	    TemplateParser.prototype.tryParse = function (component, template, directives, pipes, templateUrl) {
	        var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl);
	        var errors = htmlAstWithErrors.errors;
	        var result;
	        if (htmlAstWithErrors.rootNodes.length > 0) {
	            var uniqDirectives = removeDuplicates(directives);
	            var uniqPipes = removeDuplicates(pipes);
	            var providerViewContext = new provider_parser_1.ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
	            var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, this._exprParser, this._schemaRegistry);
	            result = html_ast_1.htmlVisitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	            errors = errors.concat(parseVisitor.errors).concat(providerViewContext.errors);
	        }
	        else {
	            result = [];
	        }
	        this._assertNoReferenceDuplicationOnTemplate(result, errors);
	        if (errors.length > 0) {
	            return new TemplateParseResult(result, errors);
	        }
	        if (lang_1.isPresent(this.transforms)) {
	            this.transforms.forEach(function (transform) { result = template_ast_1.templateVisitAll(transform, result); });
	        }
	        return new TemplateParseResult(result, errors);
	    };
	    /** @internal */
	    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	        var existingReferences = [];
	        result.filter(function (element) { return !!element.references; })
	            .forEach(function (element) { return element.references.forEach(function (reference /** TODO #???? */) {
	            var name = reference.name;
	            if (existingReferences.indexOf(name) < 0) {
	                existingReferences.push(name);
	            }
	            else {
	                var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, parse_util_1.ParseErrorLevel.FATAL);
	                errors.push(error);
	            }
	        }); });
	    };
	    /** @nocollapse */
	    TemplateParser.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    TemplateParser.ctorParameters = [
	        { type: parser_1.Parser, },
	        { type: element_schema_registry_1.ElementSchemaRegistry, },
	        { type: html_parser_1.HtmlParser, },
	        { type: core_private_1.Console, },
	        { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [exports.TEMPLATE_TRANSFORMS,] },] },
	    ];
	    return TemplateParser;
	}());
	exports.TemplateParser = TemplateParser;
	var TemplateParseVisitor = (function () {
	    function TemplateParseVisitor(providerViewContext, directives, pipes, _exprParser, _schemaRegistry) {
	        var _this = this;
	        this.providerViewContext = providerViewContext;
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this.errors = [];
	        this.directivesIndex = new Map();
	        this.ngContentCount = 0;
	        this.selectorMatcher = new selector_1.SelectorMatcher();
	        var tempMeta = providerViewContext.component.template;
	        if (lang_1.isPresent(tempMeta) && lang_1.isPresent(tempMeta.interpolation)) {
	            this._interpolationConfig = {
	                start: tempMeta.interpolation[0],
	                end: tempMeta.interpolation[1]
	            };
	        }
	        collection_1.ListWrapper.forEachWithIndex(directives, function (directive, index) {
	            var selector = selector_1.CssSelector.parse(directive.selector);
	            _this.selectorMatcher.addSelectables(selector, directive);
	            _this.directivesIndex.set(directive, index);
	        });
	        this.pipesByName = new Map();
	        pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	    }
	    TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = parse_util_1.ParseErrorLevel.FATAL; }
	        this.errors.push(new TemplateParseError(message, sourceSpan, level));
	    };
	    TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceSpan) {
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
	            this._checkPipes(ast, sourceSpan);
	            if (lang_1.isPresent(ast) &&
	                ast.ast.expressions.length > core_private_1.MAX_INTERPOLATION_VALUES) {
	                throw new exceptions_1.BaseException("Only support at most " + core_private_1.MAX_INTERPOLATION_VALUES + " interpolation values!");
	            }
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseAction = function (value, sourceSpan) {
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseBinding = function (value, sourceSpan) {
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var ast = this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceSpan) {
	        var _this = this;
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
	            bindingsResult.templateBindings.forEach(function (binding) {
	                if (lang_1.isPresent(binding.expression)) {
	                    _this._checkPipes(binding.expression, sourceSpan);
	                }
	            });
	            bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, parse_util_1.ParseErrorLevel.WARNING); });
	            return bindingsResult.templateBindings;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return [];
	        }
	    };
	    TemplateParseVisitor.prototype._checkPipes = function (ast, sourceSpan) {
	        var _this = this;
	        if (lang_1.isPresent(ast)) {
	            var collector = new PipeCollector();
	            ast.visit(collector);
	            collector.pipes.forEach(function (pipeName) {
	                if (!_this.pipesByName.has(pipeName)) {
	                    _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
	                }
	            });
	        }
	    };
	    TemplateParseVisitor.prototype.visitExpansion = function (ast, context) { return null; };
	    TemplateParseVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };
	    TemplateParseVisitor.prototype.visitText = function (ast, parent) {
	        var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	        var expr = this._parseInterpolation(ast.value, ast.sourceSpan);
	        if (lang_1.isPresent(expr)) {
	            return new template_ast_1.BoundTextAst(expr, ngContentIndex, ast.sourceSpan);
	        }
	        else {
	            return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
	        }
	    };
	    TemplateParseVisitor.prototype.visitAttr = function (ast, contex) {
	        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
	    };
	    TemplateParseVisitor.prototype.visitComment = function (ast, context) { return null; };
	    TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	        var _this = this;
	        var nodeName = element.name;
	        var preparsedElement = template_preparser_1.preparseElement(element);
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
	            // Skipping <script> for security reasons
	            // Skipping <style> as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET &&
	            style_url_resolver_1.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	            // Skipping stylesheets with either relative urls or package scheme as we already processed
	            // them in the StyleCompiler
	            return null;
	        }
	        var matchableAttrs = [];
	        var elementOrDirectiveProps = [];
	        var elementOrDirectiveRefs = [];
	        var elementVars = [];
	        var animationProps = [];
	        var events = [];
	        var templateElementOrDirectiveProps = [];
	        var templateMatchableAttrs = [];
	        var templateElementVars = [];
	        var hasInlineTemplates = false;
	        var attrs = [];
	        var lcElName = html_tags_1.splitNsName(nodeName.toLowerCase())[1];
	        var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
	        element.attrs.forEach(function (attr) {
	            var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, animationProps, events, elementOrDirectiveRefs, elementVars);
	            var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	            if (!hasBinding && !hasTemplateBinding) {
	                // don't include the bindings as attributes as well in the AST
	                attrs.push(_this.visitAttr(attr, null));
	                matchableAttrs.push([attr.name, attr.value]);
	            }
	            if (hasTemplateBinding) {
	                hasInlineTemplates = true;
	            }
	        });
	        var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	        var directiveMetas = this._parseDirectives(this.selectorMatcher, elementCssSelector);
	        var references = [];
	        var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
	        var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts)
	            .concat(animationProps);
	        var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	        var providerContext = new provider_parser_1.ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
	        var children = html_ast_1.htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	        providerContext.afterElement();
	        // Override the actual selector when the `ngProjectAs` attribute is provided
	        var projectionSelector = lang_1.isPresent(preparsedElement.projectAs) ?
	            selector_1.CssSelector.parse(preparsedElement.projectAs)[0] :
	            elementCssSelector;
	        var ngContentIndex = parent.findNgContentIndex(projectionSelector);
	        var parsedElement;
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
	            if (lang_1.isPresent(element.children) && element.children.length > 0) {
	                this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
	            }
	            parsedElement = new template_ast_1.NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	        }
	        else if (isTemplateElement) {
	            this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	            parsedElement = new template_ast_1.EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	        }
	        else {
	            this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	            var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	            parsedElement = new template_ast_1.ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);
	        }
	        if (hasInlineTemplates) {
	            var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	            var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector);
	            var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
	            var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
	            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	            var templateProviderContext = new provider_parser_1.ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
	            templateProviderContext.afterElement();
	            parsedElement = new template_ast_1.EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
	        }
	        return parsedElement;
	    };
	    TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {
	        var templateBindingsSource = null;
	        if (attr.name == TEMPLATE_ATTR) {
	            templateBindingsSource = attr.value;
	        }
	        else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
	            var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
	            templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
	        }
	        if (lang_1.isPresent(templateBindingsSource)) {
	            var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
	            for (var i = 0; i < bindings.length; i++) {
	                var binding = bindings[i];
	                if (binding.keyIsVar) {
	                    targetVars.push(new template_ast_1.VariableAst(binding.key, binding.name, attr.sourceSpan));
	                }
	                else if (lang_1.isPresent(binding.expression)) {
	                    this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
	                }
	                else {
	                    targetMatchableAttrs.push([binding.key, '']);
	                    this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetAnimationProps, targetEvents, targetRefs, targetVars) {
	        var attrName = this._normalizeAttributeName(attr.name);
	        var attrValue = attr.value;
	        var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	        var hasBinding = false;
	        if (lang_1.isPresent(bindParts)) {
	            hasBinding = true;
	            if (lang_1.isPresent(bindParts[1])) {
	                this._parseProperty(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (lang_1.isPresent(bindParts[2])) {
	                var identifier = bindParts[8];
	                if (isTemplateElement) {
	                    this._reportError("\"var-\" on <template> elements is deprecated. Use \"let-\" instead!", attr.sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
	                    this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
	                }
	                else {
	                    this._reportError("\"var-\" on non <template> elements is deprecated. Use \"ref-\" instead!", attr.sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
	                    this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
	                }
	            }
	            else if (lang_1.isPresent(bindParts[3])) {
	                if (isTemplateElement) {
	                    var identifier = bindParts[8];
	                    this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
	                }
	                else {
	                    this._reportError("\"let-\" is only supported on template elements.", attr.sourceSpan);
	                }
	            }
	            else if (lang_1.isPresent(bindParts[4])) {
	                var identifier = bindParts[8];
	                this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
	            }
	            else if (lang_1.isPresent(bindParts[5])) {
	                this._parseEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[6])) {
	                this._parseProperty(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[7])) {
	                this._parseAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetAnimationProps);
	            }
	            else if (lang_1.isPresent(bindParts[9])) {
	                this._parseProperty(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[10])) {
	                this._parseProperty(bindParts[10], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (lang_1.isPresent(bindParts[11])) {
	                this._parseEvent(bindParts[11], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	        }
	        else {
	            hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	        }
	        if (!hasBinding) {
	            this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps);
	        }
	        return hasBinding;
	    };
	    TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	        return attrName.toLowerCase().startsWith('data-') ? attrName.substring(5) : attrName;
	    };
	    TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	        }
	        targetVars.push(new template_ast_1.VariableAst(identifier, value, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	        }
	        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseProperty = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	        this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	    };
	    TemplateParseVisitor.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) {
	        var ast = this._parseBinding(expression, sourceSpan);
	        targetMatchableAttrs.push([name, ast.source]);
	        targetAnimationProps.push(new template_ast_1.BoundElementPropertyAst(name, template_ast_1.PropertyBindingType.Animation, core_private_1.SecurityContext.NONE, ast, null, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	        var expr = this._parseInterpolation(value, sourceSpan);
	        if (lang_1.isPresent(expr)) {
	            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	            return true;
	        }
	        return false;
	    };
	    TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	        targetMatchableAttrs.push([name, ast.source]);
	        targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	    };
	    TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        // long format: 'target: eventName'
	        var parts = util_1.splitAtColon(name, [null, name]);
	        var target = parts[0];
	        var eventName = parts[1];
	        var ast = this._parseAction(expression, sourceSpan);
	        targetMatchableAttrs.push([name, ast.source]);
	        targetEvents.push(new template_ast_1.BoundEventAst(eventName, target, ast, sourceSpan));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the matchableAttrs
	    };
	    TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceSpan, targetProps) {
	        targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), true, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	        var _this = this;
	        // Need to sort the directives so that we get consistent results throughout,
	        // as selectorMatcher uses Maps inside.
	        // Also dedupe directives as they might match more than one time!
	        var directives = collection_1.ListWrapper.createFixedSize(this.directivesIndex.size);
	        selectorMatcher.match(elementCssSelector, function (selector, directive) {
	            directives[_this.directivesIndex.get(directive)] = directive;
	        });
	        return directives.filter(function (dir) { return lang_1.isPresent(dir); });
	    };
	    TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, sourceSpan, targetReferences) {
	        var _this = this;
	        var matchedReferences = new Set();
	        var component = null;
	        var directiveAsts = directives.map(function (directive) {
	            if (directive.isComponent) {
	                component = directive;
	            }
	            var hostProperties = [];
	            var hostEvents = [];
	            var directiveProperties = [];
	            _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
	            _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
	            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                    (directive.exportAs == elOrDirRef.value)) {
	                    targetReferences.push(new template_ast_1.ReferenceAst(elOrDirRef.name, identifiers_1.identifierToken(directive.type), elOrDirRef.sourceSpan));
	                    matchedReferences.add(elOrDirRef.name);
	                }
	            });
	            return new template_ast_1.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
	        });
	        elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	            if (elOrDirRef.value.length > 0) {
	                if (!collection_1.SetWrapper.has(matchedReferences, elOrDirRef.name)) {
	                    _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                }
	                ;
	            }
	            else if (lang_1.isBlank(component)) {
	                var refToken = null;
	                if (isTemplateElement) {
	                    refToken = identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef);
	                }
	                targetReferences.push(new template_ast_1.ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	            }
	        }); // fix syntax highlighting issue: `
	        return directiveAsts;
	    };
	    TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceSpan, targetPropertyAsts) {
	        var _this = this;
	        if (lang_1.isPresent(hostProps)) {
	            collection_1.StringMapWrapper.forEach(hostProps, function (expression, propName) {
	                var exprAst = _this._parseBinding(expression, sourceSpan);
	                targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceSpan, targetEventAsts) {
	        var _this = this;
	        if (lang_1.isPresent(hostListeners)) {
	            collection_1.StringMapWrapper.forEach(hostListeners, function (expression, propName) {
	                _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	        if (lang_1.isPresent(directiveProperties)) {
	            var boundPropsByName = new Map();
	            boundProps.forEach(function (boundProp) {
	                var prevValue = boundPropsByName.get(boundProp.name);
	                if (lang_1.isBlank(prevValue) || prevValue.isLiteral) {
	                    // give [a]="b" a higher precedence than a="b" on the same element
	                    boundPropsByName.set(boundProp.name, boundProp);
	                }
	            });
	            collection_1.StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {
	                var boundProp = boundPropsByName.get(elProp);
	                // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                if (lang_1.isPresent(boundProp)) {
	                    targetBoundDirectiveProps.push(new template_ast_1.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                }
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	        var _this = this;
	        var boundElementProps = [];
	        var boundDirectivePropsIndex = new Map();
	        directives.forEach(function (directive) {
	            directive.inputs.forEach(function (prop) {
	                boundDirectivePropsIndex.set(prop.templateName, prop);
	            });
	        });
	        props.forEach(function (prop) {
	            if (!prop.isLiteral && lang_1.isBlank(boundDirectivePropsIndex.get(prop.name))) {
	                boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
	            }
	        });
	        return boundElementProps;
	    };
	    TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceSpan) {
	        var unit = null;
	        var bindingType;
	        var boundPropertyName;
	        var parts = name.split(PROPERTY_PARTS_SEPARATOR);
	        var securityContext;
	        if (parts.length === 1) {
	            boundPropertyName = this._schemaRegistry.getMappedPropName(parts[0]);
	            securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName);
	            bindingType = template_ast_1.PropertyBindingType.Property;
	            if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName)) {
	                this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property", sourceSpan);
	            }
	        }
	        else {
	            if (parts[0] == ATTRIBUTE_PREFIX) {
	                boundPropertyName = parts[1];
	                if (boundPropertyName.toLowerCase().startsWith('on')) {
	                    this._reportError(("Binding to event attribute '" + boundPropertyName + "' is disallowed ") +
	                        ("for security reasons, please use (" + boundPropertyName.slice(2) + ")=..."), sourceSpan);
	                }
	                // NB: For security purposes, use the mapped property name, not the attribute name.
	                securityContext = this._schemaRegistry.securityContext(elementName, this._schemaRegistry.getMappedPropName(boundPropertyName));
	                var nsSeparatorIdx = boundPropertyName.indexOf(':');
	                if (nsSeparatorIdx > -1) {
	                    var ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                    var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
	                    boundPropertyName = html_tags_1.mergeNsAndName(ns, name_1);
	                }
	                bindingType = template_ast_1.PropertyBindingType.Attribute;
	            }
	            else if (parts[0] == CLASS_PREFIX) {
	                boundPropertyName = parts[1];
	                bindingType = template_ast_1.PropertyBindingType.Class;
	                securityContext = core_private_1.SecurityContext.NONE;
	            }
	            else if (parts[0] == STYLE_PREFIX) {
	                unit = parts.length > 2 ? parts[2] : null;
	                boundPropertyName = parts[1];
	                bindingType = template_ast_1.PropertyBindingType.Style;
	                securityContext = core_private_1.SecurityContext.STYLE;
	            }
	            else {
	                this._reportError("Invalid property name '" + name + "'", sourceSpan);
	                bindingType = null;
	                securityContext = null;
	            }
	        }
	        return new template_ast_1.BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);
	    };
	    TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	        var componentTypeNames = [];
	        directives.forEach(function (directive) {
	            var typeName = directive.directive.type.name;
	            if (directive.directive.isComponent) {
	                componentTypeNames.push(typeName);
	            }
	        });
	        return componentTypeNames;
	    };
	    TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 1) {
	            this._reportError("More than one component: " + componentTypeNames.join(','), sourceSpan);
	        }
	    };
	    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	        var _this = this;
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 0) {
	            this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	        }
	        elementProps.forEach(function (prop) {
	            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template", sourceSpan);
	        });
	    };
	    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	        var _this = this;
	        var allDirectiveEvents = new Set();
	        directives.forEach(function (directive) {
	            collection_1.StringMapWrapper.forEach(directive.directive.outputs, function (eventName, _ /** TODO #???? */) { allDirectiveEvents.add(eventName); });
	        });
	        events.forEach(function (event) {
	            if (lang_1.isPresent(event.target) || !collection_1.SetWrapper.has(allDirectiveEvents, event.name)) {
	                _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template", event.sourceSpan);
	            }
	        });
	    };
	    return TemplateParseVisitor;
	}());
	var NonBindableVisitor = (function () {
	    function NonBindableVisitor() {
	    }
	    NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	        var preparsedElement = template_preparser_1.preparseElement(ast);
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
	            // Skipping <script> for security reasons
	            // Skipping <style> and stylesheets as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
	        var selector = createElementCssSelector(ast.name, attrNameAndValues);
	        var ngContentIndex = parent.findNgContentIndex(selector);
	        var children = html_ast_1.htmlVisitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	        return new template_ast_1.ElementAst(ast.name, html_ast_1.htmlVisitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitComment = function (ast, context) { return null; };
	    NonBindableVisitor.prototype.visitAttr = function (ast, context) {
	        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitText = function (ast, parent) {
	        var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	        return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitExpansion = function (ast, context) { return ast; };
	    NonBindableVisitor.prototype.visitExpansionCase = function (ast, context) { return ast; };
	    return NonBindableVisitor;
	}());
	var BoundElementOrDirectiveProperty = (function () {
	    function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
	        this.name = name;
	        this.expression = expression;
	        this.isLiteral = isLiteral;
	        this.sourceSpan = sourceSpan;
	    }
	    return BoundElementOrDirectiveProperty;
	}());
	var ElementOrDirectiveRef = (function () {
	    function ElementOrDirectiveRef(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    return ElementOrDirectiveRef;
	}());
	function splitClasses(classAttrValue) {
	    return lang_1.StringWrapper.split(classAttrValue.trim(), /\s+/g);
	}
	exports.splitClasses = splitClasses;
	var ElementContext = (function () {
	    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	        this.isTemplateElement = isTemplateElement;
	        this._ngContentIndexMatcher = _ngContentIndexMatcher;
	        this._wildcardNgContentIndex = _wildcardNgContentIndex;
	        this.providerContext = providerContext;
	    }
	    ElementContext.create = function (isTemplateElement, directives, providerContext) {
	        var matcher = new selector_1.SelectorMatcher();
	        var wildcardNgContentIndex = null;
	        var component = directives.find(function (directive) { return directive.directive.isComponent; });
	        if (lang_1.isPresent(component)) {
	            var ngContentSelectors = component.directive.template.ngContentSelectors;
	            for (var i = 0; i < ngContentSelectors.length; i++) {
	                var selector = ngContentSelectors[i];
	                if (lang_1.StringWrapper.equals(selector, '*')) {
	                    wildcardNgContentIndex = i;
	                }
	                else {
	                    matcher.addSelectables(selector_1.CssSelector.parse(ngContentSelectors[i]), i);
	                }
	            }
	        }
	        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	    };
	    ElementContext.prototype.findNgContentIndex = function (selector) {
	        var ngContentIndices = [];
	        this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	        collection_1.ListWrapper.sort(ngContentIndices);
	        if (lang_1.isPresent(this._wildcardNgContentIndex)) {
	            ngContentIndices.push(this._wildcardNgContentIndex);
	        }
	        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	    };
	    return ElementContext;
	}());
	function createElementCssSelector(elementName, matchableAttrs) {
	    var cssSelector = new selector_1.CssSelector();
	    var elNameNoNs = html_tags_1.splitNsName(elementName)[1];
	    cssSelector.setElement(elNameNoNs);
	    for (var i = 0; i < matchableAttrs.length; i++) {
	        var attrName = matchableAttrs[i][0];
	        var attrNameNoNs = html_tags_1.splitNsName(attrName)[1];
	        var attrValue = matchableAttrs[i][1];
	        cssSelector.addAttribute(attrNameNoNs, attrValue);
	        if (attrName.toLowerCase() == CLASS_ATTR) {
	            var classes = splitClasses(attrValue);
	            classes.forEach(function (className) { return cssSelector.addClassName(className); });
	        }
	    }
	    return cssSelector;
	}
	var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new selector_1.SelectorMatcher(), null, null);
	var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	var PipeCollector = (function (_super) {
	    __extends(PipeCollector, _super);
	    function PipeCollector() {
	        _super.apply(this, arguments);
	        this.pipes = new Set();
	    }
	    PipeCollector.prototype.visitPipe = function (ast, context) {
	        this.pipes.add(ast.name);
	        ast.exp.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    return PipeCollector;
	}(ast_1.RecursiveAstVisitor));
	exports.PipeCollector = PipeCollector;
	function removeDuplicates(items) {
	    var res = [];
	    items.forEach(function (item) {
	        var hasMatch = res.filter(function (r) { return r.type.name == item.type.name && r.type.moduleUrl == item.type.moduleUrl &&
	            r.type.runtime == item.type.runtime; })
	            .length > 0;
	        if (!hasMatch) {
	            res.push(item);
	        }
	    });
	    return res;
	}
	//# sourceMappingURL=template_parser.js.map

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	exports.isDefaultChangeDetectionStrategy = core_1.__core_private__.isDefaultChangeDetectionStrategy;
	exports.ChangeDetectorState = core_1.__core_private__.ChangeDetectorState;
	exports.CHANGE_DETECTION_STRATEGY_VALUES = core_1.__core_private__.CHANGE_DETECTION_STRATEGY_VALUES;
	exports.constructDependencies = core_1.__core_private__.constructDependencies;
	exports.LifecycleHooks = core_1.__core_private__.LifecycleHooks;
	exports.LIFECYCLE_HOOKS_VALUES = core_1.__core_private__.LIFECYCLE_HOOKS_VALUES;
	exports.ReflectorReader = core_1.__core_private__.ReflectorReader;
	exports.ReflectorComponentResolver = core_1.__core_private__.ReflectorComponentResolver;
	exports.AppElement = core_1.__core_private__.AppElement;
	exports.AppView = core_1.__core_private__.AppView;
	exports.DebugAppView = core_1.__core_private__.DebugAppView;
	exports.ViewType = core_1.__core_private__.ViewType;
	exports.MAX_INTERPOLATION_VALUES = core_1.__core_private__.MAX_INTERPOLATION_VALUES;
	exports.checkBinding = core_1.__core_private__.checkBinding;
	exports.flattenNestedViewRenderNodes = core_1.__core_private__.flattenNestedViewRenderNodes;
	exports.interpolate = core_1.__core_private__.interpolate;
	exports.ViewUtils = core_1.__core_private__.ViewUtils;
	exports.VIEW_ENCAPSULATION_VALUES = core_1.__core_private__.VIEW_ENCAPSULATION_VALUES;
	exports.DebugContext = core_1.__core_private__.DebugContext;
	exports.StaticNodeDebugInfo = core_1.__core_private__.StaticNodeDebugInfo;
	exports.devModeEqual = core_1.__core_private__.devModeEqual;
	exports.uninitialized = core_1.__core_private__.uninitialized;
	exports.ValueUnwrapper = core_1.__core_private__.ValueUnwrapper;
	exports.TemplateRef_ = core_1.__core_private__.TemplateRef_;
	exports.RenderDebugInfo = core_1.__core_private__.RenderDebugInfo;
	exports.SecurityContext = core_1.__core_private__.SecurityContext;
	exports.SanitizationService = core_1.__core_private__.SanitizationService;
	exports.createProvider = core_1.__core_private__.createProvider;
	exports.isProviderLiteral = core_1.__core_private__.isProviderLiteral;
	exports.EMPTY_ARRAY = core_1.__core_private__.EMPTY_ARRAY;
	exports.EMPTY_MAP = core_1.__core_private__.EMPTY_MAP;
	exports.pureProxy1 = core_1.__core_private__.pureProxy1;
	exports.pureProxy2 = core_1.__core_private__.pureProxy2;
	exports.pureProxy3 = core_1.__core_private__.pureProxy3;
	exports.pureProxy4 = core_1.__core_private__.pureProxy4;
	exports.pureProxy5 = core_1.__core_private__.pureProxy5;
	exports.pureProxy6 = core_1.__core_private__.pureProxy6;
	exports.pureProxy7 = core_1.__core_private__.pureProxy7;
	exports.pureProxy8 = core_1.__core_private__.pureProxy8;
	exports.pureProxy9 = core_1.__core_private__.pureProxy9;
	exports.pureProxy10 = core_1.__core_private__.pureProxy10;
	exports.castByValue = core_1.__core_private__.castByValue;
	exports.Console = core_1.__core_private__.Console;
	exports.reflector = core_1.__core_private__.reflector;
	exports.NoOpAnimationPlayer = core_1.__core_private__.NoOpAnimationPlayer;
	exports.AnimationPlayer = core_1.__core_private__.AnimationPlayer;
	exports.NoOpAnimationDriver = core_1.__core_private__.NoOpAnimationDriver;
	exports.AnimationDriver = core_1.__core_private__.AnimationDriver;
	exports.AnimationSequencePlayer = core_1.__core_private__.AnimationSequencePlayer;
	exports.AnimationGroupPlayer = core_1.__core_private__.AnimationGroupPlayer;
	exports.AnimationKeyframe = core_1.__core_private__.AnimationKeyframe;
	exports.AnimationStyles = core_1.__core_private__.AnimationStyles;
	exports.ANY_STATE = core_1.__core_private__.ANY_STATE;
	exports.DEFAULT_STATE = core_1.__core_private__.DEFAULT_STATE;
	exports.EMPTY_STATE = core_1.__core_private__.EMPTY_STATE;
	exports.FILL_STYLE_FLAG = core_1.__core_private__.FILL_STYLE_FLAG;
	exports.prepareFinalAnimationStyles = core_1.__core_private__.prepareFinalAnimationStyles;
	exports.balanceAnimationKeyframes = core_1.__core_private__.balanceAnimationKeyframes;
	exports.flattenStyles = core_1.__core_private__.flattenStyles;
	exports.clearStyles = core_1.__core_private__.clearStyles;
	exports.collectAndResolveStyles = core_1.__core_private__.collectAndResolveStyles;
	exports.renderStyles = core_1.__core_private__.renderStyles;
	//# sourceMappingURL=core_private.js.map

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(10);
	exports.Map = lang_1.global.Map;
	exports.Set = lang_1.global.Set;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Map constructor.  We work around that by manually adding the items.
	var createMapFromPairs = (function () {
	    try {
	        if (new exports.Map([[1, 2]]).size === 1) {
	            return function createMapFromPairs(pairs) { return new exports.Map(pairs); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromPairs(pairs) {
	        var map = new exports.Map();
	        for (var i = 0; i < pairs.length; i++) {
	            var pair = pairs[i];
	            map.set(pair[0], pair[1]);
	        }
	        return map;
	    };
	})();
	var createMapFromMap = (function () {
	    try {
	        if (new exports.Map(new exports.Map())) {
	            return function createMapFromMap(m) { return new exports.Map(m); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromMap(m) {
	        var map = new exports.Map();
	        m.forEach(function (v, k) { map.set(k, v); });
	        return map;
	    };
	})();
	var _clearValues = (function () {
	    if ((new exports.Map()).keys().next) {
	        return function _clearValues(m) {
	            var keyIterator = m.keys();
	            var k;
	            while (!((k = keyIterator.next()).done)) {
	                m.set(k.value, null);
	            }
	        };
	    }
	    else {
	        return function _clearValuesWithForeEach(m) {
	            m.forEach(function (v, k) { m.set(k, null); });
	        };
	    }
	})();
	// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	// TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	var _arrayFromMap = (function () {
	    try {
	        if ((new exports.Map()).values().next) {
	            return function createArrayFromMap(m, getValues) {
	                return getValues ? Array.from(m.values()) : Array.from(m.keys());
	            };
	        }
	    }
	    catch (e) {
	    }
	    return function createArrayFromMapWithForeach(m, getValues) {
	        var res = ListWrapper.createFixedSize(m.size), i = 0;
	        m.forEach(function (v, k) {
	            res[i] = getValues ? v : k;
	            i++;
	        });
	        return res;
	    };
	})();
	var MapWrapper = (function () {
	    function MapWrapper() {
	    }
	    MapWrapper.clone = function (m) { return createMapFromMap(m); };
	    MapWrapper.createFromStringMap = function (stringMap) {
	        var result = new exports.Map();
	        for (var prop in stringMap) {
	            result.set(prop, stringMap[prop]);
	        }
	        return result;
	    };
	    MapWrapper.toStringMap = function (m) {
	        var r = {};
	        m.forEach(function (v, k) { return r[k] = v; });
	        return r;
	    };
	    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	    MapWrapper.clearValues = function (m) { _clearValues(m); };
	    MapWrapper.iterable = function (m) { return m; };
	    MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
	    MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
	    return MapWrapper;
	}());
	exports.MapWrapper = MapWrapper;
	/**
	 * Wraps Javascript Objects
	 */
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {
	    }
	    StringMapWrapper.create = function () {
	        // Note: We are not using Object.create(null) here due to
	        // performance!
	        // http://jsperf.com/ng2-object-create-null
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) {
	        return map.hasOwnProperty(key);
	    };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	    StringMapWrapper.keys = function (map) { return Object.keys(map); };
	    StringMapWrapper.values = function (map) {
	        return Object.keys(map).reduce(function (r, a) {
	            r.push(map[a]);
	            return r;
	        }, []);
	    };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper.delete = function (map, key) { delete map[key]; };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	}());
	exports.StringMapWrapper = StringMapWrapper;
	var ListWrapper = (function () {
	    function ListWrapper() {
	    }
	    // JS has no way to express a statically fixed size list, but dart does so we
	    // keep both methods.
	    ListWrapper.createFixedSize = function (size) { return new Array(size); };
	    ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	    ListWrapper.clone = function (array) { return array.slice(0); };
	    ListWrapper.forEachWithIndex = function (array, fn) {
	        for (var i = 0; i < array.length; i++) {
	            fn(array[i], i);
	        }
	    };
	    ListWrapper.first = function (array) {
	        if (!array)
	            return null;
	        return array[0];
	    };
	    ListWrapper.last = function (array) {
	        if (!array || array.length == 0)
	            return null;
	        return array[array.length - 1];
	    };
	    ListWrapper.indexOf = function (array, value, startIndex) {
	        if (startIndex === void 0) { startIndex = 0; }
	        return array.indexOf(value, startIndex);
	    };
	    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	    ListWrapper.reversed = function (array) {
	        var a = ListWrapper.clone(array);
	        return a.reverse();
	    };
	    ListWrapper.concat = function (a, b) { return a.concat(b); };
	    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	    ListWrapper.removeAt = function (list, index) {
	        var res = list[index];
	        list.splice(index, 1);
	        return res;
	    };
	    ListWrapper.removeAll = function (list, items) {
	        for (var i = 0; i < items.length; ++i) {
	            var index = list.indexOf(items[i]);
	            list.splice(index, 1);
	        }
	    };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    ListWrapper.clear = function (list) { list.length = 0; };
	    ListWrapper.isEmpty = function (list) { return list.length == 0; };
	    ListWrapper.fill = function (list, value, start, end) {
	        if (start === void 0) { start = 0; }
	        if (end === void 0) { end = null; }
	        list.fill(value, start, end === null ? list.length : end);
	    };
	    ListWrapper.equals = function (a, b) {
	        if (a.length != b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i] !== b[i])
	                return false;
	        }
	        return true;
	    };
	    ListWrapper.slice = function (l, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return l.slice(from, to === null ? undefined : to);
	    };
	    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	    ListWrapper.sort = function (l, compareFn) {
	        if (lang_1.isPresent(compareFn)) {
	            l.sort(compareFn);
	        }
	        else {
	            l.sort();
	        }
	    };
	    ListWrapper.toString = function (l) { return l.toString(); };
	    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	    ListWrapper.maximum = function (list, predicate) {
	        if (list.length == 0) {
	            return null;
	        }
	        var solution = null;
	        var maxValue = -Infinity;
	        for (var index = 0; index < list.length; index++) {
	            var candidate = list[index];
	            if (lang_1.isBlank(candidate)) {
	                continue;
	            }
	            var candidateValue = predicate(candidate);
	            if (candidateValue > maxValue) {
	                solution = candidate;
	                maxValue = candidateValue;
	            }
	        }
	        return solution;
	    };
	    ListWrapper.flatten = function (list) {
	        var target = [];
	        _flattenArray(list, target);
	        return target;
	    };
	    ListWrapper.addAll = function (list, source) {
	        for (var i = 0; i < source.length; i++) {
	            list.push(source[i]);
	        }
	    };
	    return ListWrapper;
	}());
	exports.ListWrapper = ListWrapper;
	function _flattenArray(source, target) {
	    if (lang_1.isPresent(source)) {
	        for (var i = 0; i < source.length; i++) {
	            var item = source[i];
	            if (lang_1.isArray(item)) {
	                _flattenArray(item, target);
	            }
	            else {
	                target.push(item);
	            }
	        }
	    }
	    return target;
	}
	function isListLikeIterable(obj) {
	    if (!lang_1.isJsObject(obj))
	        return false;
	    return lang_1.isArray(obj) ||
	        (!(obj instanceof exports.Map) &&
	            lang_1.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	}
	exports.isListLikeIterable = isListLikeIterable;
	function areIterablesEqual(a, b, comparator) {
	    var iterator1 = a[lang_1.getSymbolIterator()]();
	    var iterator2 = b[lang_1.getSymbolIterator()]();
	    while (true) {
	        var item1 = iterator1.next();
	        var item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	exports.areIterablesEqual = areIterablesEqual;
	function iterateListLike(obj, fn) {
	    if (lang_1.isArray(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[lang_1.getSymbolIterator()]();
	        var item;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	exports.iterateListLike = iterateListLike;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Set constructor.  We work around that by manually adding the items.
	var createSetFromList = (function () {
	    var test = new exports.Set([1, 2, 3]);
	    if (test.size === 3) {
	        return function createSetFromList(lst) { return new exports.Set(lst); };
	    }
	    else {
	        return function createSetAndPopulateFromList(lst) {
	            var res = new exports.Set(lst);
	            if (res.size !== lst.length) {
	                for (var i = 0; i < lst.length; i++) {
	                    res.add(lst[i]);
	                }
	            }
	            return res;
	        };
	    }
	})();
	var SetWrapper = (function () {
	    function SetWrapper() {
	    }
	    SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
	    SetWrapper.has = function (s, key) { return s.has(key); };
	    SetWrapper.delete = function (m, k) { m.delete(k); };
	    return SetWrapper;
	}());
	exports.SetWrapper = SetWrapper;
	//# sourceMappingURL=collection.js.map

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var base_wrapped_exception_1 = __webpack_require__(15);
	var exception_handler_1 = __webpack_require__(16);
	var exception_handler_2 = __webpack_require__(16);
	exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
	/**
	 * @stable
	 */
	var BaseException = (function (_super) {
	    __extends(BaseException, _super);
	    function BaseException(message) {
	        if (message === void 0) { message = '--'; }
	        _super.call(this, message);
	        this.message = message;
	        this.stack = (new Error(message)).stack;
	    }
	    BaseException.prototype.toString = function () { return this.message; };
	    return BaseException;
	}(Error));
	exports.BaseException = BaseException;
	/**
	 * Wraps an exception and provides additional context or information.
	 * @stable
	 */
	var WrappedException = (function (_super) {
	    __extends(WrappedException, _super);
	    function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
	        _super.call(this, _wrapperMessage);
	        this._wrapperMessage = _wrapperMessage;
	        this._originalException = _originalException;
	        this._originalStack = _originalStack;
	        this._context = _context;
	        this._wrapperStack = (new Error(_wrapperMessage)).stack;
	    }
	    Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
	        get: function () { return this._wrapperMessage; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "wrapperStack", {
	        get: function () { return this._wrapperStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalException", {
	        get: function () { return this._originalException; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalStack", {
	        get: function () { return this._originalStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "context", {
	        get: function () { return this._context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "message", {
	        get: function () { return exception_handler_1.ExceptionHandler.exceptionToString(this); },
	        enumerable: true,
	        configurable: true
	    });
	    WrappedException.prototype.toString = function () { return this.message; };
	    return WrappedException;
	}(base_wrapped_exception_1.BaseWrappedException));
	exports.WrappedException = WrappedException;
	function makeTypeError(message) {
	    return new TypeError(message);
	}
	exports.makeTypeError = makeTypeError;
	function unimplemented() {
	    throw new BaseException('unimplemented');
	}
	exports.unimplemented = unimplemented;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * A base class for the WrappedException that can be used to identify
	 * a WrappedException from ExceptionHandler without adding circular
	 * dependency.
	 */
	var BaseWrappedException = (function (_super) {
	    __extends(BaseWrappedException, _super);
	    function BaseWrappedException(message) {
	        _super.call(this, message);
	    }
	    Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
	        get: function () { return ''; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "originalException", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "context", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "message", {
	        get: function () { return ''; },
	        enumerable: true,
	        configurable: true
	    });
	    return BaseWrappedException;
	}(Error));
	exports.BaseWrappedException = BaseWrappedException;
	//# sourceMappingURL=base_wrapped_exception.js.map

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var base_wrapped_exception_1 = __webpack_require__(15);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var _ArrayLogger = (function () {
	    function _ArrayLogger() {
	        this.res = [];
	    }
	    _ArrayLogger.prototype.log = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logError = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroup = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroupEnd = function () { };
	    ;
	    return _ArrayLogger;
	}());
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
	 * intercept error handling,
	 * write a custom exception handler that replaces this default as appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```javascript
	 *
	 * class MyExceptionHandler implements ExceptionHandler {
	 *   call(error, stackTrace = null, reason = null) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * bootstrap(MyApp, {provide: ExceptionHandler, useClass: MyExceptionHandler}])
	 *
	 * ```
	 * @stable
	 */
	var ExceptionHandler = (function () {
	    function ExceptionHandler(_logger, _rethrowException) {
	        if (_rethrowException === void 0) { _rethrowException = true; }
	        this._logger = _logger;
	        this._rethrowException = _rethrowException;
	    }
	    ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var l = new _ArrayLogger();
	        var e = new ExceptionHandler(l, false);
	        e.call(exception, stackTrace, reason);
	        return l.res.join('\n');
	    };
	    ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var originalException = this._findOriginalException(exception);
	        var originalStack = this._findOriginalStack(exception);
	        var context = this._findContext(exception);
	        this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
	        if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
	            this._logger.logError('STACKTRACE:');
	            this._logger.logError(this._longStackTrace(stackTrace));
	        }
	        if (lang_1.isPresent(reason)) {
	            this._logger.logError("REASON: " + reason);
	        }
	        if (lang_1.isPresent(originalException)) {
	            this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
	        }
	        if (lang_1.isPresent(originalStack)) {
	            this._logger.logError('ORIGINAL STACKTRACE:');
	            this._logger.logError(this._longStackTrace(originalStack));
	        }
	        if (lang_1.isPresent(context)) {
	            this._logger.logError('ERROR CONTEXT:');
	            this._logger.logError(context);
	        }
	        this._logger.logGroupEnd();
	        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	        // when an exception happens. If we do not rethrow, bootstrap will always succeed.
	        if (this._rethrowException)
	            throw exception;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._extractMessage = function (exception) {
	        return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage :
	            exception.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
	        return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') :
	            stackTrace.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findContext = function (exception) {
	        try {
	            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
	                return null;
	            return lang_1.isPresent(exception.context) ? exception.context :
	                this._findContext(exception.originalException);
	        }
	        catch (e) {
	            // exception.context can throw an exception. if it happens, we ignore the context.
	            return null;
	        }
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalException = function (exception) {
	        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
	            return null;
	        var e = exception.originalException;
	        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	        }
	        return e;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalStack = function (exception) {
	        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
	            return null;
	        var e = exception;
	        var stack = exception.originalStack;
	        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	            if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
	                stack = e.originalStack;
	            }
	        }
	        return stack;
	    };
	    return ExceptionHandler;
	}());
	exports.ExceptionHandler = ExceptionHandler;
	//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(13);
	var AST = (function () {
	    function AST() {
	    }
	    AST.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return null;
	    };
	    AST.prototype.toString = function () { return 'AST'; };
	    return AST;
	}());
	exports.AST = AST;
	/**
	 * Represents a quoted expression of the form:
	 *
	 * quote = prefix `:` uninterpretedExpression
	 * prefix = identifier
	 * uninterpretedExpression = arbitrary string
	 *
	 * A quoted expression is meant to be pre-processed by an AST transformer that
	 * converts it into another AST that no longer contains quoted expressions.
	 * It is meant to allow third-party developers to extend Angular template
	 * expression language. The `uninterpretedExpression` part of the quote is
	 * therefore not interpreted by the Angular's own expression parser.
	 */
	var Quote = (function (_super) {
	    __extends(Quote, _super);
	    function Quote(prefix, uninterpretedExpression, location) {
	        _super.call(this);
	        this.prefix = prefix;
	        this.uninterpretedExpression = uninterpretedExpression;
	        this.location = location;
	    }
	    Quote.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitQuote(this, context);
	    };
	    Quote.prototype.toString = function () { return 'Quote'; };
	    return Quote;
	}(AST));
	exports.Quote = Quote;
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        _super.apply(this, arguments);
	    }
	    EmptyExpr.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        // do nothing
	    };
	    return EmptyExpr;
	}(AST));
	exports.EmptyExpr = EmptyExpr;
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        _super.apply(this, arguments);
	    }
	    ImplicitReceiver.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitImplicitReceiver(this, context);
	    };
	    return ImplicitReceiver;
	}(AST));
	exports.ImplicitReceiver = ImplicitReceiver;
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    function Chain(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    Chain.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitChain(this, context);
	    };
	    return Chain;
	}(AST));
	exports.Chain = Chain;
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    function Conditional(condition, trueExp, falseExp) {
	        _super.call(this);
	        this.condition = condition;
	        this.trueExp = trueExp;
	        this.falseExp = falseExp;
	    }
	    Conditional.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitConditional(this, context);
	    };
	    return Conditional;
	}(AST));
	exports.Conditional = Conditional;
	var PropertyRead = (function (_super) {
	    __extends(PropertyRead, _super);
	    function PropertyRead(receiver, name) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	    }
	    PropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyRead(this, context);
	    };
	    return PropertyRead;
	}(AST));
	exports.PropertyRead = PropertyRead;
	var PropertyWrite = (function (_super) {
	    __extends(PropertyWrite, _super);
	    function PropertyWrite(receiver, name, value) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.value = value;
	    }
	    PropertyWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyWrite(this, context);
	    };
	    return PropertyWrite;
	}(AST));
	exports.PropertyWrite = PropertyWrite;
	var SafePropertyRead = (function (_super) {
	    __extends(SafePropertyRead, _super);
	    function SafePropertyRead(receiver, name) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	    }
	    SafePropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafePropertyRead(this, context);
	    };
	    return SafePropertyRead;
	}(AST));
	exports.SafePropertyRead = SafePropertyRead;
	var KeyedRead = (function (_super) {
	    __extends(KeyedRead, _super);
	    function KeyedRead(obj, key) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	    }
	    KeyedRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedRead(this, context);
	    };
	    return KeyedRead;
	}(AST));
	exports.KeyedRead = KeyedRead;
	var KeyedWrite = (function (_super) {
	    __extends(KeyedWrite, _super);
	    function KeyedWrite(obj, key, value) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	        this.value = value;
	    }
	    KeyedWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedWrite(this, context);
	    };
	    return KeyedWrite;
	}(AST));
	exports.KeyedWrite = KeyedWrite;
	var BindingPipe = (function (_super) {
	    __extends(BindingPipe, _super);
	    function BindingPipe(exp, name, args) {
	        _super.call(this);
	        this.exp = exp;
	        this.name = name;
	        this.args = args;
	    }
	    BindingPipe.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPipe(this, context);
	    };
	    return BindingPipe;
	}(AST));
	exports.BindingPipe = BindingPipe;
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    function LiteralPrimitive(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    LiteralPrimitive.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralPrimitive(this, context);
	    };
	    return LiteralPrimitive;
	}(AST));
	exports.LiteralPrimitive = LiteralPrimitive;
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    function LiteralArray(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    LiteralArray.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralArray(this, context);
	    };
	    return LiteralArray;
	}(AST));
	exports.LiteralArray = LiteralArray;
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    function LiteralMap(keys, values) {
	        _super.call(this);
	        this.keys = keys;
	        this.values = values;
	    }
	    LiteralMap.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralMap(this, context);
	    };
	    return LiteralMap;
	}(AST));
	exports.LiteralMap = LiteralMap;
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    function Interpolation(strings, expressions) {
	        _super.call(this);
	        this.strings = strings;
	        this.expressions = expressions;
	    }
	    Interpolation.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitInterpolation(this, context);
	    };
	    return Interpolation;
	}(AST));
	exports.Interpolation = Interpolation;
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    function Binary(operation, left, right) {
	        _super.call(this);
	        this.operation = operation;
	        this.left = left;
	        this.right = right;
	    }
	    Binary.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitBinary(this, context);
	    };
	    return Binary;
	}(AST));
	exports.Binary = Binary;
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    function PrefixNot(expression) {
	        _super.call(this);
	        this.expression = expression;
	    }
	    PrefixNot.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPrefixNot(this, context);
	    };
	    return PrefixNot;
	}(AST));
	exports.PrefixNot = PrefixNot;
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    function MethodCall(receiver, name, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.args = args;
	    }
	    MethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitMethodCall(this, context);
	    };
	    return MethodCall;
	}(AST));
	exports.MethodCall = MethodCall;
	var SafeMethodCall = (function (_super) {
	    __extends(SafeMethodCall, _super);
	    function SafeMethodCall(receiver, name, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.args = args;
	    }
	    SafeMethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafeMethodCall(this, context);
	    };
	    return SafeMethodCall;
	}(AST));
	exports.SafeMethodCall = SafeMethodCall;
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    function FunctionCall(target, args) {
	        _super.call(this);
	        this.target = target;
	        this.args = args;
	    }
	    FunctionCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitFunctionCall(this, context);
	    };
	    return FunctionCall;
	}(AST));
	exports.FunctionCall = FunctionCall;
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    function ASTWithSource(ast, source, location) {
	        _super.call(this);
	        this.ast = ast;
	        this.source = source;
	        this.location = location;
	    }
	    ASTWithSource.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return this.ast.visit(visitor, context);
	    };
	    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	    return ASTWithSource;
	}(AST));
	exports.ASTWithSource = ASTWithSource;
	var TemplateBinding = (function () {
	    function TemplateBinding(key, keyIsVar, name, expression) {
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	}());
	exports.TemplateBinding = TemplateBinding;
	var RecursiveAstVisitor = (function () {
	    function RecursiveAstVisitor() {
	    }
	    RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	        ast.left.visit(this);
	        ast.right.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	    RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	        ast.condition.visit(this);
	        ast.trueExp.visit(this);
	        ast.falseExp.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	        ast.exp.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	        ast.target.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	    RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	        return this.visitAll(ast.expressions, context);
	    };
	    RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	        return this.visitAll(ast.expressions, context);
	    };
	    RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	    RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args, context);
	    };
	    RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	        ast.expression.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	        ast.receiver.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args, context);
	    };
	    RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	        var _this = this;
	        asts.forEach(function (ast) { return ast.visit(_this, context); });
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	    return RecursiveAstVisitor;
	}());
	exports.RecursiveAstVisitor = RecursiveAstVisitor;
	var AstTransformer = (function () {
	    function AstTransformer() {
	    }
	    AstTransformer.prototype.visitImplicitReceiver = function (ast, context) { return ast; };
	    AstTransformer.prototype.visitInterpolation = function (ast, context) {
	        return new Interpolation(ast.strings, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast, context) {
	        return new LiteralPrimitive(ast.value);
	    };
	    AstTransformer.prototype.visitPropertyRead = function (ast, context) {
	        return new PropertyRead(ast.receiver.visit(this), ast.name);
	    };
	    AstTransformer.prototype.visitPropertyWrite = function (ast, context) {
	        return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.value);
	    };
	    AstTransformer.prototype.visitSafePropertyRead = function (ast, context) {
	        return new SafePropertyRead(ast.receiver.visit(this), ast.name);
	    };
	    AstTransformer.prototype.visitMethodCall = function (ast, context) {
	        return new MethodCall(ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitSafeMethodCall = function (ast, context) {
	        return new SafeMethodCall(ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitFunctionCall = function (ast, context) {
	        return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitLiteralArray = function (ast, context) {
	        return new LiteralArray(this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralMap = function (ast, context) {
	        return new LiteralMap(ast.keys, this.visitAll(ast.values));
	    };
	    AstTransformer.prototype.visitBinary = function (ast, context) {
	        return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    AstTransformer.prototype.visitPrefixNot = function (ast, context) {
	        return new PrefixNot(ast.expression.visit(this));
	    };
	    AstTransformer.prototype.visitConditional = function (ast, context) {
	        return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    AstTransformer.prototype.visitPipe = function (ast, context) {
	        return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitKeyedRead = function (ast, context) {
	        return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
	    };
	    AstTransformer.prototype.visitKeyedWrite = function (ast, context) {
	        return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
	    };
	    AstTransformer.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    AstTransformer.prototype.visitChain = function (ast, context) { return new Chain(this.visitAll(ast.expressions)); };
	    AstTransformer.prototype.visitQuote = function (ast, context) {
	        return new Quote(ast.prefix, ast.uninterpretedExpression, ast.location);
	    };
	    return AstTransformer;
	}());
	exports.AstTransformer = AstTransformer;
	//# sourceMappingURL=ast.js.map

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var interpolation_config_1 = __webpack_require__(19);
	var ast_1 = __webpack_require__(17);
	var lexer_1 = __webpack_require__(20);
	var _implicitReceiver = new ast_1.ImplicitReceiver();
	var ParseException = (function (_super) {
	    __extends(ParseException, _super);
	    function ParseException(message, input, errLocation, ctxLocation) {
	        _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
	    }
	    return ParseException;
	}(exceptions_1.BaseException));
	var SplitInterpolation = (function () {
	    function SplitInterpolation(strings, expressions) {
	        this.strings = strings;
	        this.expressions = expressions;
	    }
	    return SplitInterpolation;
	}());
	exports.SplitInterpolation = SplitInterpolation;
	var TemplateBindingParseResult = (function () {
	    function TemplateBindingParseResult(templateBindings, warnings) {
	        this.templateBindings = templateBindings;
	        this.warnings = warnings;
	    }
	    return TemplateBindingParseResult;
	}());
	exports.TemplateBindingParseResult = TemplateBindingParseResult;
	function _createInterpolateRegExp(config) {
	    var regexp = lang_1.escapeRegExp(config.start) + '([\\s\\S]*?)' + lang_1.escapeRegExp(config.end);
	    return lang_1.RegExpWrapper.create(regexp, 'g');
	}
	var Parser = (function () {
	    function Parser(/** @internal */ _lexer) {
	        this._lexer = _lexer;
	    }
	    Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var tokens = this._lexer.tokenize(this._stripComments(input));
	        var ast = new _ParseAST(input, location, tokens, true).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        var ast = this._parseBindingAst(input, location, interpolationConfig);
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        var ast = this._parseBindingAst(input, location, interpolationConfig);
	        if (!SimpleExpressionChecker.check(ast)) {
	            throw new ParseException('Host binding expression can only contain field access and constants', input, location);
	        }
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	        // Quotes expressions use 3rd-party expression language. We don't want to use
	        // our lexer or parser for that, so we check for that ahead of time.
	        var quote = this._parseQuote(input, location);
	        if (lang_1.isPresent(quote)) {
	            return quote;
	        }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var tokens = this._lexer.tokenize(this._stripComments(input));
	        return new _ParseAST(input, location, tokens, false).parseChain();
	    };
	    Parser.prototype._parseQuote = function (input, location) {
	        if (lang_1.isBlank(input))
	            return null;
	        var prefixSeparatorIndex = input.indexOf(':');
	        if (prefixSeparatorIndex == -1)
	            return null;
	        var prefix = input.substring(0, prefixSeparatorIndex).trim();
	        if (!lexer_1.isIdentifier(prefix))
	            return null;
	        var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	        return new ast_1.Quote(prefix, uninterpretedExpression, location);
	    };
	    Parser.prototype.parseTemplateBindings = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        return new _ParseAST(input, location, tokens, false).parseTemplateBindings();
	    };
	    Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        var split = this.splitInterpolation(input, location, interpolationConfig);
	        if (split == null)
	            return null;
	        var expressions = [];
	        for (var i = 0; i < split.expressions.length; ++i) {
	            var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	            var ast = new _ParseAST(input, location, tokens, false).parseChain();
	            expressions.push(ast);
	        }
	        return new ast_1.ASTWithSource(new ast_1.Interpolation(split.strings, expressions), input, location);
	    };
	    Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        var regexp = _createInterpolateRegExp(interpolationConfig);
	        var parts = lang_1.StringWrapper.split(input, regexp);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var strings = [];
	        var expressions = [];
	        for (var i = 0; i < parts.length; i++) {
	            var part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                strings.push(part);
	            }
	            else if (part.trim().length > 0) {
	                expressions.push(part);
	            }
	            else {
	                throw new ParseException('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	            }
	        }
	        return new SplitInterpolation(strings, expressions);
	    };
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
	    };
	    Parser.prototype._stripComments = function (input) {
	        var i = this._commentStart(input);
	        return lang_1.isPresent(i) ? input.substring(0, i).trim() : input;
	    };
	    Parser.prototype._commentStart = function (input) {
	        var outerQuote = null;
	        for (var i = 0; i < input.length - 1; i++) {
	            var char = lang_1.StringWrapper.charCodeAt(input, i);
	            var nextChar = lang_1.StringWrapper.charCodeAt(input, i + 1);
	            if (char === lexer_1.$SLASH && nextChar == lexer_1.$SLASH && lang_1.isBlank(outerQuote))
	                return i;
	            if (outerQuote === char) {
	                outerQuote = null;
	            }
	            else if (lang_1.isBlank(outerQuote) && lexer_1.isQuote(char)) {
	                outerQuote = char;
	            }
	        }
	        return null;
	    };
	    Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	        var regexp = _createInterpolateRegExp(interpolationConfig);
	        var parts = lang_1.StringWrapper.split(input, regexp);
	        if (parts.length > 1) {
	            throw new ParseException("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	        }
	    };
	    Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	        var errLocation = '';
	        for (var j = 0; j < partInErrIdx; j++) {
	            errLocation += j % 2 === 0 ?
	                parts[j] :
	                "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	        }
	        return errLocation.length;
	    };
	    /** @nocollapse */
	    Parser.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    Parser.ctorParameters = [
	        { type: lexer_1.Lexer, },
	    ];
	    return Parser;
	}());
	exports.Parser = Parser;
	var _ParseAST = (function () {
	    function _ParseAST(input, location, tokens, parseAction) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.parseAction = parseAction;
	        this.index = 0;
	    }
	    _ParseAST.prototype.peek = function (offset) {
	        var i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        get: function () { return this.peek(0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index : this.input.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _ParseAST.prototype.advance = function () { this.index++; };
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	    _ParseAST.prototype.peekDeprecatedKeywordVar = function () { return this.next.isKeywordDeprecatedVar(); };
	    _ParseAST.prototype.peekDeprecatedOperatorHash = function () { return this.next.isOperator('#'); };
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code))
	            return;
	        this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
	    };
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.parseChain = function () {
	        var exprs = [];
	        while (this.index < this.tokens.length) {
	            var expr = this.parsePipe();
	            exprs.push(expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error('Binding expression cannot contain chained expression');
	                }
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    _ParseAST.prototype.parsePipe = function () {
	        var result = this.parseExpression();
	        if (this.optionalOperator('|')) {
	            if (this.parseAction) {
	                this.error('Cannot have a pipe in an action expression');
	            }
	            do {
	                var name = this.expectIdentifierOrKeyword();
	                var args = [];
	                while (this.optionalCharacter(lexer_1.$COLON)) {
	                    args.push(this.parseExpression());
	                }
	                result = new ast_1.BindingPipe(result, name, args);
	            } while (this.optionalOperator('|'));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	    _ParseAST.prototype.parseConditional = function () {
	        var start = this.inputIndex;
	        var result = this.parseLogicalOr();
	        if (this.optionalOperator('?')) {
	            var yes = this.parsePipe();
	            if (!this.optionalCharacter(lexer_1.$COLON)) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	            }
	            var no = this.parsePipe();
	            return new ast_1.Conditional(result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var result = this.parseLogicalAnd();
	        while (this.optionalOperator('||')) {
	            result = new ast_1.Binary('||', result, this.parseLogicalAnd());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var result = this.parseEquality();
	        while (this.optionalOperator('&&')) {
	            result = new ast_1.Binary('&&', result, this.parseEquality());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var result = this.parseRelational();
	        while (true) {
	            if (this.optionalOperator('==')) {
	                result = new ast_1.Binary('==', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('===')) {
	                result = new ast_1.Binary('===', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!=')) {
	                result = new ast_1.Binary('!=', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!==')) {
	                result = new ast_1.Binary('!==', result, this.parseRelational());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var result = this.parseAdditive();
	        while (true) {
	            if (this.optionalOperator('<')) {
	                result = new ast_1.Binary('<', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>')) {
	                result = new ast_1.Binary('>', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('<=')) {
	                result = new ast_1.Binary('<=', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>=')) {
	                result = new ast_1.Binary('>=', result, this.parseAdditive());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var result = this.parseMultiplicative();
	        while (true) {
	            if (this.optionalOperator('+')) {
	                result = new ast_1.Binary('+', result, this.parseMultiplicative());
	            }
	            else if (this.optionalOperator('-')) {
	                result = new ast_1.Binary('-', result, this.parseMultiplicative());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var result = this.parsePrefix();
	        while (true) {
	            if (this.optionalOperator('*')) {
	                result = new ast_1.Binary('*', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('%')) {
	                result = new ast_1.Binary('%', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('/')) {
	                result = new ast_1.Binary('/', result, this.parsePrefix());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.optionalOperator('+')) {
	            return this.parsePrefix();
	        }
	        else if (this.optionalOperator('-')) {
	            return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
	        }
	        else if (this.optionalOperator('!')) {
	            return new ast_1.PrefixNot(this.parsePrefix());
	        }
	        else {
	            return this.parseCallChain();
	        }
	    };
	    _ParseAST.prototype.parseCallChain = function () {
	        var result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter(lexer_1.$PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result, false);
	            }
	            else if (this.optionalOperator('?.')) {
	                result = this.parseAccessMemberOrMethodCall(result, true);
	            }
	            else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	                var key = this.parsePipe();
	                this.expectCharacter(lexer_1.$RBRACKET);
	                if (this.optionalOperator('=')) {
	                    var value = this.parseConditional();
	                    result = new ast_1.KeyedWrite(result, key, value);
	                }
	                else {
	                    result = new ast_1.KeyedRead(result, key);
	                }
	            }
	            else if (this.optionalCharacter(lexer_1.$LPAREN)) {
	                var args = this.parseCallArguments();
	                this.expectCharacter(lexer_1.$RPAREN);
	                result = new ast_1.FunctionCall(result, args);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrimary = function () {
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var result = this.parsePipe();
	            this.expectCharacter(lexer_1.$RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(null);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(false);
	        }
	        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	            var elements = this.parseExpressionList(lexer_1.$RBRACKET);
	            this.expectCharacter(lexer_1.$RBRACKET);
	            return new ast_1.LiteralArray(elements);
	        }
	        else if (this.next.isCharacter(lexer_1.$LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
	        }
	        else if (this.next.isNumber()) {
	            var value = this.next.toNumber();
	            this.advance();
	            return new ast_1.LiteralPrimitive(value);
	        }
	        else if (this.next.isString()) {
	            var literalValue = this.next.toString();
	            this.advance();
	            return new ast_1.LiteralPrimitive(literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	        }
	        // error() throws, so we don't reach here.
	        throw new exceptions_1.BaseException('Fell through all cases in parsePrimary');
	    };
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                result.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var keys = [];
	        var values = [];
	        this.expectCharacter(lexer_1.$LBRACE);
	        if (!this.optionalCharacter(lexer_1.$RBRACE)) {
	            do {
	                var key = this.expectIdentifierOrKeywordOrString();
	                keys.push(key);
	                this.expectCharacter(lexer_1.$COLON);
	                values.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	            this.expectCharacter(lexer_1.$RBRACE);
	        }
	        return new ast_1.LiteralMap(keys, values);
	    };
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	        if (isSafe === void 0) { isSafe = false; }
	        var id = this.expectIdentifierOrKeyword();
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var args = this.parseCallArguments();
	            this.expectCharacter(lexer_1.$RPAREN);
	            return isSafe ? new ast_1.SafeMethodCall(receiver, id, args) : new ast_1.MethodCall(receiver, id, args);
	        }
	        else {
	            if (isSafe) {
	                if (this.optionalOperator('=')) {
	                    this.error('The \'?.\' operator cannot be used in the assignment');
	                }
	                else {
	                    return new ast_1.SafePropertyRead(receiver, id);
	                }
	            }
	            else {
	                if (this.optionalOperator('=')) {
	                    if (!this.parseAction) {
	                        this.error('Bindings cannot contain assignments');
	                    }
	                    var value = this.parseConditional();
	                    return new ast_1.PropertyWrite(receiver, id, value);
	                }
	                else {
	                    return new ast_1.PropertyRead(receiver, id);
	                }
	            }
	        }
	        return null;
	    };
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter(lexer_1.$RPAREN))
	            return [];
	        var positionals = [];
	        do {
	            positionals.push(this.parsePipe());
	        } while (this.optionalCharacter(lexer_1.$COMMA));
	        return positionals;
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var result = '';
	        var operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var bindings = [];
	        var prefix = null;
	        var warnings = [];
	        while (this.index < this.tokens.length) {
	            var keyIsVar = this.peekKeywordLet();
	            if (!keyIsVar && this.peekDeprecatedKeywordVar()) {
	                keyIsVar = true;
	                warnings.push("\"var\" inside of expressions is deprecated. Use \"let\" instead!");
	            }
	            if (!keyIsVar && this.peekDeprecatedOperatorHash()) {
	                keyIsVar = true;
	                warnings.push("\"#\" inside of expressions is deprecated. Use \"let\" instead!");
	            }
	            if (keyIsVar) {
	                this.advance();
	            }
	            var key = this.expectTemplateBindingKey();
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                }
	                else {
	                    key = prefix + key[0].toUpperCase() + key.substring(1);
	                }
	            }
	            this.optionalCharacter(lexer_1.$COLON);
	            var name = null;
	            var expression = null;
	            if (keyIsVar) {
	                if (this.optionalOperator('=')) {
	                    name = this.expectTemplateBindingKey();
	                }
	                else {
	                    name = '\$implicit';
	                }
	            }
	            else if (this.next !== lexer_1.EOF && !this.peekKeywordLet() && !this.peekDeprecatedKeywordVar() &&
	                !this.peekDeprecatedOperatorHash()) {
	                var start = this.inputIndex;
	                var ast = this.parsePipe();
	                var source = this.input.substring(start, this.inputIndex);
	                expression = new ast_1.ASTWithSource(ast, source, this.location);
	            }
	            bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
	            if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                this.optionalCharacter(lexer_1.$COMMA);
	            }
	        }
	        return new TemplateBindingParseResult(bindings, warnings);
	    };
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        if (lang_1.isBlank(index))
	            index = this.index;
	        var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	        throw new ParseException(message, this.input, location, this.location);
	    };
	    return _ParseAST;
	}());
	exports._ParseAST = _ParseAST;
	var SimpleExpressionChecker = (function () {
	    function SimpleExpressionChecker() {
	        this.simple = true;
	    }
	    SimpleExpressionChecker.check = function (ast) {
	        var s = new SimpleExpressionChecker();
	        ast.visit(s);
	        return s.simple;
	    };
	    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	    SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    SimpleExpressionChecker.prototype.visitChain = function (ast, context) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { this.simple = false; };
	    return SimpleExpressionChecker;
	}());
	//# sourceMappingURL=parser.js.map

/***/ },
/* 19 */
/***/ function(module, exports) {

	"use strict";
	exports.DEFAULT_INTERPOLATION_CONFIG = {
	    start: '{{',
	    end: '}}'
	};
	//# sourceMappingURL=interpolation_config.js.map

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	(function (TokenType) {
	    TokenType[TokenType["Character"] = 0] = "Character";
	    TokenType[TokenType["Identifier"] = 1] = "Identifier";
	    TokenType[TokenType["Keyword"] = 2] = "Keyword";
	    TokenType[TokenType["String"] = 3] = "String";
	    TokenType[TokenType["Operator"] = 4] = "Operator";
	    TokenType[TokenType["Number"] = 5] = "Number";
	})(exports.TokenType || (exports.TokenType = {}));
	var TokenType = exports.TokenType;
	var Lexer = (function () {
	    function Lexer() {
	    }
	    Lexer.prototype.tokenize = function (text) {
	        var scanner = new _Scanner(text);
	        var tokens = [];
	        var token = scanner.scanToken();
	        while (token != null) {
	            tokens.push(token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    /** @nocollapse */
	    Lexer.decorators = [
	        { type: core_1.Injectable },
	    ];
	    return Lexer;
	}());
	exports.Lexer = Lexer;
	var Token = (function () {
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    Token.prototype.isCharacter = function (code) {
	        return (this.type == TokenType.Character && this.numValue == code);
	    };
	    Token.prototype.isNumber = function () { return (this.type == TokenType.Number); };
	    Token.prototype.isString = function () { return (this.type == TokenType.String); };
	    Token.prototype.isOperator = function (operater) {
	        return (this.type == TokenType.Operator && this.strValue == operater);
	    };
	    Token.prototype.isIdentifier = function () { return (this.type == TokenType.Identifier); };
	    Token.prototype.isKeyword = function () { return (this.type == TokenType.Keyword); };
	    Token.prototype.isKeywordDeprecatedVar = function () {
	        return (this.type == TokenType.Keyword && this.strValue == 'var');
	    };
	    Token.prototype.isKeywordLet = function () { return (this.type == TokenType.Keyword && this.strValue == 'let'); };
	    Token.prototype.isKeywordNull = function () { return (this.type == TokenType.Keyword && this.strValue == 'null'); };
	    Token.prototype.isKeywordUndefined = function () {
	        return (this.type == TokenType.Keyword && this.strValue == 'undefined');
	    };
	    Token.prototype.isKeywordTrue = function () { return (this.type == TokenType.Keyword && this.strValue == 'true'); };
	    Token.prototype.isKeywordFalse = function () { return (this.type == TokenType.Keyword && this.strValue == 'false'); };
	    Token.prototype.toNumber = function () {
	        // -1 instead of NULL ok?
	        return (this.type == TokenType.Number) ? this.numValue : -1;
	    };
	    Token.prototype.toString = function () {
	        switch (this.type) {
	            case TokenType.Character:
	            case TokenType.Identifier:
	            case TokenType.Keyword:
	            case TokenType.Operator:
	            case TokenType.String:
	                return this.strValue;
	            case TokenType.Number:
	                return this.numValue.toString();
	            default:
	                return null;
	        }
	    };
	    return Token;
	}());
	exports.Token = Token;
	function newCharacterToken(index, code) {
	    return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
	}
	function newIdentifierToken(index, text) {
	    return new Token(index, TokenType.Identifier, 0, text);
	}
	function newKeywordToken(index, text) {
	    return new Token(index, TokenType.Keyword, 0, text);
	}
	function newOperatorToken(index, text) {
	    return new Token(index, TokenType.Operator, 0, text);
	}
	function newStringToken(index, text) {
	    return new Token(index, TokenType.String, 0, text);
	}
	function newNumberToken(index, n) {
	    return new Token(index, TokenType.Number, n, '');
	}
	exports.EOF = new Token(-1, TokenType.Character, 0, '');
	exports.$EOF = 0;
	exports.$TAB = 9;
	exports.$LF = 10;
	exports.$VTAB = 11;
	exports.$FF = 12;
	exports.$CR = 13;
	exports.$SPACE = 32;
	exports.$BANG = 33;
	exports.$DQ = 34;
	exports.$HASH = 35;
	exports.$$ = 36;
	exports.$PERCENT = 37;
	exports.$AMPERSAND = 38;
	exports.$SQ = 39;
	exports.$LPAREN = 40;
	exports.$RPAREN = 41;
	exports.$STAR = 42;
	exports.$PLUS = 43;
	exports.$COMMA = 44;
	exports.$MINUS = 45;
	exports.$PERIOD = 46;
	exports.$SLASH = 47;
	exports.$COLON = 58;
	exports.$SEMICOLON = 59;
	exports.$LT = 60;
	exports.$EQ = 61;
	exports.$GT = 62;
	exports.$QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65, $E = 69, $Z = 90;
	exports.$LBRACKET = 91;
	exports.$BACKSLASH = 92;
	exports.$RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	exports.$BT = 96;
	var $a = 97, $e = 101, $f = 102;
	var $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
	exports.$LBRACE = 123;
	exports.$BAR = 124;
	exports.$RBRACE = 125;
	var $NBSP = 160;
	var ScannerError = (function (_super) {
	    __extends(ScannerError, _super);
	    function ScannerError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    ScannerError.prototype.toString = function () { return this.message; };
	    return ScannerError;
	}(exceptions_1.BaseException));
	exports.ScannerError = ScannerError;
	var _Scanner = (function () {
	    function _Scanner(input) {
	        this.input = input;
	        this.peek = 0;
	        this.index = -1;
	        this.length = input.length;
	        this.advance();
	    }
	    _Scanner.prototype.advance = function () {
	        this.peek =
	            ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
	    };
	    _Scanner.prototype.scanToken = function () {
	        var input = this.input, length = this.length, peek = this.peek, index = this.index;
	        // Skip whitespace.
	        while (peek <= exports.$SPACE) {
	            if (++index >= length) {
	                peek = exports.$EOF;
	                break;
	            }
	            else {
	                peek = lang_1.StringWrapper.charCodeAt(input, index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var start = index;
	        switch (peek) {
	            case exports.$PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
	            case exports.$LPAREN:
	            case exports.$RPAREN:
	            case exports.$LBRACE:
	            case exports.$RBRACE:
	            case exports.$LBRACKET:
	            case exports.$RBRACKET:
	            case exports.$COMMA:
	            case exports.$COLON:
	            case exports.$SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case exports.$SQ:
	            case exports.$DQ:
	                return this.scanString();
	            case exports.$HASH:
	            case exports.$PLUS:
	            case exports.$MINUS:
	            case exports.$STAR:
	            case exports.$SLASH:
	            case exports.$PERCENT:
	            case $CARET:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$QUESTION:
	                return this.scanComplexOperator(start, '?', exports.$PERIOD, '.');
	            case exports.$LT:
	            case exports.$GT:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=');
	            case exports.$BANG:
	            case exports.$EQ:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=', exports.$EQ, '=');
	            case exports.$AMPERSAND:
	                return this.scanComplexOperator(start, '&', exports.$AMPERSAND, '&');
	            case exports.$BAR:
	                return this.scanComplexOperator(start, '|', exports.$BAR, '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
	        return null;
	    };
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    _Scanner.prototype.scanOperator = function (start, str) {
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    /**
	     * Tokenize a 2/3 char long operator
	     *
	     * @param start start index in the expression
	     * @param one first symbol (always part of the operator)
	     * @param twoCode code point for the second symbol
	     * @param two second symbol (part of the operator when the second code point matches)
	     * @param threeCode code point for the third symbol
	     * @param three third symbol (part of the operator when provided and matches source expression)
	     * @returns {Token}
	     */
	    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	        this.advance();
	        var str = one;
	        if (this.peek == twoCode) {
	            this.advance();
	            str += two;
	        }
	        if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
	            this.advance();
	            str += three;
	        }
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanIdentifier = function () {
	        var start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var str = this.input.substring(start, this.index);
	        if (collection_1.SetWrapper.has(KEYWORDS, str)) {
	            return newKeywordToken(start, str);
	        }
	        else {
	            return newIdentifierToken(start, str);
	        }
	    };
	    _Scanner.prototype.scanNumber = function (start) {
	        var simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {
	            }
	            else if (this.peek == exports.$PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var str = this.input.substring(start, this.index);
	        // TODO
	        var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    _Scanner.prototype.scanString = function () {
	        var start = this.index;
	        var quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var buffer;
	        var marker = this.index;
	        var input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == exports.$BACKSLASH) {
	                if (buffer == null)
	                    buffer = new lang_1.StringJoiner();
	                buffer.add(input.substring(marker, this.index));
	                this.advance();
	                var unescapedCode;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var hex = input.substring(this.index + 1, this.index + 5);
	                    try {
	                        unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
	                    }
	                    catch (e) {
	                        this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
	                marker = this.index;
	            }
	            else if (this.peek == exports.$EOF) {
	                this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        // Compute the unescaped string value.
	        var unescaped = last;
	        if (buffer != null) {
	            buffer.add(last);
	            unescaped = buffer.toString();
	        }
	        return newStringToken(start, unescaped);
	    };
	    _Scanner.prototype.error = function (message, offset) {
	        var position = this.index + offset;
	        throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	}());
	function isWhitespace(code) {
	    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
	}
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
	}
	function isIdentifier(input) {
	    if (input.length == 0)
	        return false;
	    var scanner = new _Scanner(input);
	    if (!isIdentifierStart(scanner.peek))
	        return false;
	    scanner.advance();
	    while (scanner.peek !== exports.$EOF) {
	        if (!isIdentifierPart(scanner.peek))
	            return false;
	        scanner.advance();
	    }
	    return true;
	}
	exports.isIdentifier = isIdentifier;
	function isIdentifierPart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
	        (code == $_) || (code == exports.$$);
	}
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	function isExponentSign(code) {
	    return code == exports.$MINUS || code == exports.$PLUS;
	}
	function isQuote(code) {
	    return code === exports.$SQ || code === exports.$DQ || code === exports.$BT;
	}
	exports.isQuote = isQuote;
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return exports.$LF;
	        case $f:
	            return exports.$FF;
	        case $r:
	            return exports.$CR;
	        case $t:
	            return exports.$TAB;
	        case $v:
	            return exports.$VTAB;
	        default:
	            return code;
	    }
	}
	var OPERATORS = collection_1.SetWrapper.createFromList([
	    '+', '-', '*', '/', '%', '^', '=', '==', '!=', '===', '!==', '<',
	    '>', '<=', '>=', '&&', '||', '&', '|', '!', '?', '#', '?.'
	]);
	var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else']);
	//# sourceMappingURL=lexer.js.map

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(13);
	var html_ast_1 = __webpack_require__(22);
	var html_lexer_1 = __webpack_require__(23);
	var parse_util_1 = __webpack_require__(26);
	var html_tags_1 = __webpack_require__(25);
	var HtmlTreeError = (function (_super) {
	    __extends(HtmlTreeError, _super);
	    function HtmlTreeError(elementName, span, msg) {
	        _super.call(this, span, msg);
	        this.elementName = elementName;
	    }
	    HtmlTreeError.create = function (elementName, span, msg) {
	        return new HtmlTreeError(elementName, span, msg);
	    };
	    return HtmlTreeError;
	}(parse_util_1.ParseError));
	exports.HtmlTreeError = HtmlTreeError;
	var HtmlParseTreeResult = (function () {
	    function HtmlParseTreeResult(rootNodes, errors) {
	        this.rootNodes = rootNodes;
	        this.errors = errors;
	    }
	    return HtmlParseTreeResult;
	}());
	exports.HtmlParseTreeResult = HtmlParseTreeResult;
	var HtmlParser = (function () {
	    function HtmlParser() {
	    }
	    HtmlParser.prototype.parse = function (sourceContent, sourceUrl, parseExpansionForms) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        var tokensAndErrors = html_lexer_1.tokenizeHtml(sourceContent, sourceUrl, parseExpansionForms);
	        var treeAndErrors = new TreeBuilder(tokensAndErrors.tokens).build();
	        return new HtmlParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
	    };
	    /** @nocollapse */
	    HtmlParser.decorators = [
	        { type: core_1.Injectable },
	    ];
	    return HtmlParser;
	}());
	exports.HtmlParser = HtmlParser;
	var TreeBuilder = (function () {
	    function TreeBuilder(tokens) {
	        this.tokens = tokens;
	        this.index = -1;
	        this.rootNodes = [];
	        this.errors = [];
	        this.elementStack = [];
	        this._advance();
	    }
	    TreeBuilder.prototype.build = function () {
	        while (this.peek.type !== html_lexer_1.HtmlTokenType.EOF) {
	            if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_START) {
	                this._consumeStartTag(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_CLOSE) {
	                this._consumeEndTag(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.CDATA_START) {
	                this._closeVoidElement();
	                this._consumeCdata(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.COMMENT_START) {
	                this._closeVoidElement();
	                this._consumeComment(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.TEXT || this.peek.type === html_lexer_1.HtmlTokenType.RAW_TEXT ||
	                this.peek.type === html_lexer_1.HtmlTokenType.ESCAPABLE_RAW_TEXT) {
	                this._closeVoidElement();
	                this._consumeText(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_FORM_START) {
	                this._consumeExpansion(this._advance());
	            }
	            else {
	                // Skip all other tokens...
	                this._advance();
	            }
	        }
	        return new HtmlParseTreeResult(this.rootNodes, this.errors);
	    };
	    TreeBuilder.prototype._advance = function () {
	        var prev = this.peek;
	        if (this.index < this.tokens.length - 1) {
	            // Note: there is always an EOF token at the end
	            this.index++;
	        }
	        this.peek = this.tokens[this.index];
	        return prev;
	    };
	    TreeBuilder.prototype._advanceIf = function (type) {
	        if (this.peek.type === type) {
	            return this._advance();
	        }
	        return null;
	    };
	    TreeBuilder.prototype._consumeCdata = function (startToken) {
	        this._consumeText(this._advance());
	        this._advanceIf(html_lexer_1.HtmlTokenType.CDATA_END);
	    };
	    TreeBuilder.prototype._consumeComment = function (token) {
	        var text = this._advanceIf(html_lexer_1.HtmlTokenType.RAW_TEXT);
	        this._advanceIf(html_lexer_1.HtmlTokenType.COMMENT_END);
	        var value = lang_1.isPresent(text) ? text.parts[0].trim() : null;
	        this._addToParent(new html_ast_1.HtmlCommentAst(value, token.sourceSpan));
	    };
	    TreeBuilder.prototype._consumeExpansion = function (token) {
	        var switchValue = this._advance();
	        var type = this._advance();
	        var cases = [];
	        // read =
	        while (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_CASE_VALUE) {
	            var expCase = this._parseExpansionCase();
	            if (lang_1.isBlank(expCase))
	                return; // error
	            cases.push(expCase);
	        }
	        // read the final }
	        if (this.peek.type !== html_lexer_1.HtmlTokenType.EXPANSION_FORM_END) {
	            this.errors.push(HtmlTreeError.create(null, this.peek.sourceSpan, "Invalid expansion form. Missing '}'."));
	            return;
	        }
	        this._advance();
	        var mainSourceSpan = new parse_util_1.ParseSourceSpan(token.sourceSpan.start, this.peek.sourceSpan.end);
	        this._addToParent(new html_ast_1.HtmlExpansionAst(switchValue.parts[0], type.parts[0], cases, mainSourceSpan, switchValue.sourceSpan));
	    };
	    TreeBuilder.prototype._parseExpansionCase = function () {
	        var value = this._advance();
	        // read {
	        if (this.peek.type !== html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START) {
	            this.errors.push(HtmlTreeError.create(null, this.peek.sourceSpan, "Invalid expansion form. Missing '{'.,"));
	            return null;
	        }
	        // read until }
	        var start = this._advance();
	        var exp = this._collectExpansionExpTokens(start);
	        if (lang_1.isBlank(exp))
	            return null;
	        var end = this._advance();
	        exp.push(new html_lexer_1.HtmlToken(html_lexer_1.HtmlTokenType.EOF, [], end.sourceSpan));
	        // parse everything in between { and }
	        var parsedExp = new TreeBuilder(exp).build();
	        if (parsedExp.errors.length > 0) {
	            this.errors = this.errors.concat(parsedExp.errors);
	            return null;
	        }
	        var sourceSpan = new parse_util_1.ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	        var expSourceSpan = new parse_util_1.ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	        return new html_ast_1.HtmlExpansionCaseAst(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	    };
	    TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	        var exp = [];
	        var expansionFormStack = [html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START];
	        while (true) {
	            if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_FORM_START ||
	                this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START) {
	                expansionFormStack.push(this.peek.type);
	            }
	            if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_END) {
	                if (lastOnStack(expansionFormStack, html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START)) {
	                    expansionFormStack.pop();
	                    if (expansionFormStack.length == 0)
	                        return exp;
	                }
	                else {
	                    this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_FORM_END) {
	                if (lastOnStack(expansionFormStack, html_lexer_1.HtmlTokenType.EXPANSION_FORM_START)) {
	                    expansionFormStack.pop();
	                }
	                else {
	                    this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this.peek.type === html_lexer_1.HtmlTokenType.EOF) {
	                this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'."));
	                return null;
	            }
	            exp.push(this._advance());
	        }
	    };
	    TreeBuilder.prototype._consumeText = function (token) {
	        var text = token.parts[0];
	        if (text.length > 0 && text[0] == '\n') {
	            var parent_1 = this._getParentElement();
	            if (lang_1.isPresent(parent_1) && parent_1.children.length == 0 &&
	                html_tags_1.getHtmlTagDefinition(parent_1.name).ignoreFirstLf) {
	                text = text.substring(1);
	            }
	        }
	        if (text.length > 0) {
	            this._addToParent(new html_ast_1.HtmlTextAst(text, token.sourceSpan));
	        }
	    };
	    TreeBuilder.prototype._closeVoidElement = function () {
	        if (this.elementStack.length > 0) {
	            var el = collection_1.ListWrapper.last(this.elementStack);
	            if (html_tags_1.getHtmlTagDefinition(el.name).isVoid) {
	                this.elementStack.pop();
	            }
	        }
	    };
	    TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	        var prefix = startTagToken.parts[0];
	        var name = startTagToken.parts[1];
	        var attrs = [];
	        while (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_NAME) {
	            attrs.push(this._consumeAttr(this._advance()));
	        }
	        var fullName = getElementFullName(prefix, name, this._getParentElement());
	        var selfClosing = false;
	        // Note: There could have been a tokenizer error
	        // so that we don't get a token for the end tag...
	        if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END_VOID) {
	            this._advance();
	            selfClosing = true;
	            if (html_tags_1.getNsPrefix(fullName) == null && !html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
	                this.errors.push(HtmlTreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	            }
	        }
	        else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END) {
	            this._advance();
	            selfClosing = false;
	        }
	        var end = this.peek.sourceSpan.start;
	        var span = new parse_util_1.ParseSourceSpan(startTagToken.sourceSpan.start, end);
	        var el = new html_ast_1.HtmlElementAst(fullName, attrs, [], span, span, null);
	        this._pushElement(el);
	        if (selfClosing) {
	            this._popElement(fullName);
	            el.endSourceSpan = span;
	        }
	    };
	    TreeBuilder.prototype._pushElement = function (el) {
	        if (this.elementStack.length > 0) {
	            var parentEl = collection_1.ListWrapper.last(this.elementStack);
	            if (html_tags_1.getHtmlTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                this.elementStack.pop();
	            }
	        }
	        var tagDef = html_tags_1.getHtmlTagDefinition(el.name);
	        var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	        if (lang_1.isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
	            var newParent = new html_ast_1.HtmlElementAst(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	            this._insertBeforeContainer(parent, container, newParent);
	        }
	        this._addToParent(el);
	        this.elementStack.push(el);
	    };
	    TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	        var fullName = getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	        if (this._getParentElement()) {
	            this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	        }
	        if (html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
	            this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	        }
	        else if (!this._popElement(fullName)) {
	            this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
	        }
	    };
	    TreeBuilder.prototype._popElement = function (fullName) {
	        for (var stackIndex = this.elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	            var el = this.elementStack[stackIndex];
	            if (el.name == fullName) {
	                collection_1.ListWrapper.splice(this.elementStack, stackIndex, this.elementStack.length - stackIndex);
	                return true;
	            }
	            if (!html_tags_1.getHtmlTagDefinition(el.name).closedByParent) {
	                return false;
	            }
	        }
	        return false;
	    };
	    TreeBuilder.prototype._consumeAttr = function (attrName) {
	        var fullName = html_tags_1.mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	        var end = attrName.sourceSpan.end;
	        var value = '';
	        if (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_VALUE) {
	            var valueToken = this._advance();
	            value = valueToken.parts[0];
	            end = valueToken.sourceSpan.end;
	        }
	        return new html_ast_1.HtmlAttrAst(fullName, value, new parse_util_1.ParseSourceSpan(attrName.sourceSpan.start, end));
	    };
	    TreeBuilder.prototype._getParentElement = function () {
	        return this.elementStack.length > 0 ? collection_1.ListWrapper.last(this.elementStack) : null;
	    };
	    /**
	     * Returns the parent in the DOM and the container.
	     *
	     * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	     */
	    TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	        var container = null;
	        for (var i = this.elementStack.length - 1; i >= 0; i--) {
	            if (this.elementStack[i].name !== 'ng-container') {
	                return { parent: this.elementStack[i], container: container };
	            }
	            container = this.elementStack[i];
	        }
	        return { parent: collection_1.ListWrapper.last(this.elementStack), container: container };
	    };
	    TreeBuilder.prototype._addToParent = function (node) {
	        var parent = this._getParentElement();
	        if (lang_1.isPresent(parent)) {
	            parent.children.push(node);
	        }
	        else {
	            this.rootNodes.push(node);
	        }
	    };
	    /**
	     * Insert a node between the parent and the container.
	     * When no container is given, the node is appended as a child of the parent.
	     * Also updates the element stack accordingly.
	     *
	     * @internal
	     */
	    TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	        if (!container) {
	            this._addToParent(node);
	            this.elementStack.push(node);
	        }
	        else {
	            if (parent) {
	                // replace the container with the new node in the children
	                var index = parent.children.indexOf(container);
	                parent.children[index] = node;
	            }
	            else {
	                this.rootNodes.push(node);
	            }
	            node.children.push(container);
	            this.elementStack.splice(this.elementStack.indexOf(container), 0, node);
	        }
	    };
	    return TreeBuilder;
	}());
	function getElementFullName(prefix, localName, parentElement) {
	    if (lang_1.isBlank(prefix)) {
	        prefix = html_tags_1.getHtmlTagDefinition(localName).implicitNamespacePrefix;
	        if (lang_1.isBlank(prefix) && lang_1.isPresent(parentElement)) {
	            prefix = html_tags_1.getNsPrefix(parentElement.name);
	        }
	    }
	    return html_tags_1.mergeNsAndName(prefix, localName);
	}
	function lastOnStack(stack, element) {
	    return stack.length > 0 && stack[stack.length - 1] === element;
	}
	//# sourceMappingURL=html_parser.js.map

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(10);
	var HtmlTextAst = (function () {
	    function HtmlTextAst(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    HtmlTextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return HtmlTextAst;
	}());
	exports.HtmlTextAst = HtmlTextAst;
	var HtmlExpansionAst = (function () {
	    function HtmlExpansionAst(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	        this.switchValue = switchValue;
	        this.type = type;
	        this.cases = cases;
	        this.sourceSpan = sourceSpan;
	        this.switchValueSourceSpan = switchValueSourceSpan;
	    }
	    HtmlExpansionAst.prototype.visit = function (visitor, context) {
	        return visitor.visitExpansion(this, context);
	    };
	    return HtmlExpansionAst;
	}());
	exports.HtmlExpansionAst = HtmlExpansionAst;
	var HtmlExpansionCaseAst = (function () {
	    function HtmlExpansionCaseAst(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	        this.value = value;
	        this.expression = expression;
	        this.sourceSpan = sourceSpan;
	        this.valueSourceSpan = valueSourceSpan;
	        this.expSourceSpan = expSourceSpan;
	    }
	    HtmlExpansionCaseAst.prototype.visit = function (visitor, context) {
	        return visitor.visitExpansionCase(this, context);
	    };
	    return HtmlExpansionCaseAst;
	}());
	exports.HtmlExpansionCaseAst = HtmlExpansionCaseAst;
	var HtmlAttrAst = (function () {
	    function HtmlAttrAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    HtmlAttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return HtmlAttrAst;
	}());
	exports.HtmlAttrAst = HtmlAttrAst;
	var HtmlElementAst = (function () {
	    function HtmlElementAst(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.children = children;
	        this.sourceSpan = sourceSpan;
	        this.startSourceSpan = startSourceSpan;
	        this.endSourceSpan = endSourceSpan;
	    }
	    HtmlElementAst.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	    return HtmlElementAst;
	}());
	exports.HtmlElementAst = HtmlElementAst;
	var HtmlCommentAst = (function () {
	    function HtmlCommentAst(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    HtmlCommentAst.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	    return HtmlCommentAst;
	}());
	exports.HtmlCommentAst = HtmlCommentAst;
	function htmlVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    asts.forEach(function (ast) {
	        var astResult = ast.visit(visitor, context);
	        if (lang_1.isPresent(astResult)) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	exports.htmlVisitAll = htmlVisitAll;
	//# sourceMappingURL=html_ast.js.map

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var chars = __webpack_require__(24);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var html_tags_1 = __webpack_require__(25);
	var interpolation_config_1 = __webpack_require__(19);
	var parse_util_1 = __webpack_require__(26);
	(function (HtmlTokenType) {
	    HtmlTokenType[HtmlTokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
	    HtmlTokenType[HtmlTokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
	    HtmlTokenType[HtmlTokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
	    HtmlTokenType[HtmlTokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
	    HtmlTokenType[HtmlTokenType["TEXT"] = 4] = "TEXT";
	    HtmlTokenType[HtmlTokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
	    HtmlTokenType[HtmlTokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
	    HtmlTokenType[HtmlTokenType["COMMENT_START"] = 7] = "COMMENT_START";
	    HtmlTokenType[HtmlTokenType["COMMENT_END"] = 8] = "COMMENT_END";
	    HtmlTokenType[HtmlTokenType["CDATA_START"] = 9] = "CDATA_START";
	    HtmlTokenType[HtmlTokenType["CDATA_END"] = 10] = "CDATA_END";
	    HtmlTokenType[HtmlTokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
	    HtmlTokenType[HtmlTokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
	    HtmlTokenType[HtmlTokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
	    HtmlTokenType[HtmlTokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
	    HtmlTokenType[HtmlTokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
	    HtmlTokenType[HtmlTokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
	    HtmlTokenType[HtmlTokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
	    HtmlTokenType[HtmlTokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
	    HtmlTokenType[HtmlTokenType["EOF"] = 19] = "EOF";
	})(exports.HtmlTokenType || (exports.HtmlTokenType = {}));
	var HtmlTokenType = exports.HtmlTokenType;
	var HtmlToken = (function () {
	    function HtmlToken(type, parts, sourceSpan) {
	        this.type = type;
	        this.parts = parts;
	        this.sourceSpan = sourceSpan;
	    }
	    return HtmlToken;
	}());
	exports.HtmlToken = HtmlToken;
	var HtmlTokenError = (function (_super) {
	    __extends(HtmlTokenError, _super);
	    function HtmlTokenError(errorMsg, tokenType, span) {
	        _super.call(this, span, errorMsg);
	        this.tokenType = tokenType;
	    }
	    return HtmlTokenError;
	}(parse_util_1.ParseError));
	exports.HtmlTokenError = HtmlTokenError;
	var HtmlTokenizeResult = (function () {
	    function HtmlTokenizeResult(tokens, errors) {
	        this.tokens = tokens;
	        this.errors = errors;
	    }
	    return HtmlTokenizeResult;
	}());
	exports.HtmlTokenizeResult = HtmlTokenizeResult;
	function tokenizeHtml(sourceContent, sourceUrl, tokenizeExpansionForms, interpolationConfig) {
	    if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	    if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	    return new _HtmlTokenizer(new parse_util_1.ParseSourceFile(sourceContent, sourceUrl), tokenizeExpansionForms, interpolationConfig)
	        .tokenize();
	}
	exports.tokenizeHtml = tokenizeHtml;
	var CR_OR_CRLF_REGEXP = /\r\n?/g;
	function unexpectedCharacterErrorMsg(charCode) {
	    var char = charCode === chars.$EOF ? 'EOF' : lang_1.StringWrapper.fromCharCode(charCode);
	    return "Unexpected character \"" + char + "\"";
	}
	function unknownEntityErrorMsg(entitySrc) {
	    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	}
	var ControlFlowError = (function () {
	    function ControlFlowError(error) {
	        this.error = error;
	    }
	    return ControlFlowError;
	}());
	// See http://www.w3.org/TR/html51/syntax.html#writing
	var _HtmlTokenizer = (function () {
	    function _HtmlTokenizer(file, tokenizeExpansionForms, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        this.file = file;
	        this.tokenizeExpansionForms = tokenizeExpansionForms;
	        this.interpolationConfig = interpolationConfig;
	        // Note: this is always lowercase!
	        this._peek = -1;
	        this._nextPeek = -1;
	        this._index = -1;
	        this._line = 0;
	        this._column = -1;
	        this._expansionCaseStack = [];
	        this.tokens = [];
	        this.errors = [];
	        this._input = file.content;
	        this._length = file.content.length;
	        this._advance();
	    }
	    _HtmlTokenizer.prototype._processCarriageReturns = function (content) {
	        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	        // In order to keep the original position in the source, we can not
	        // pre-process it.
	        // Instead CRs are processed right before instantiating the tokens.
	        return lang_1.StringWrapper.replaceAll(content, CR_OR_CRLF_REGEXP, '\n');
	    };
	    _HtmlTokenizer.prototype.tokenize = function () {
	        while (this._peek !== chars.$EOF) {
	            var start = this._getLocation();
	            try {
	                if (this._attemptCharCode(chars.$LT)) {
	                    if (this._attemptCharCode(chars.$BANG)) {
	                        if (this._attemptCharCode(chars.$LBRACKET)) {
	                            this._consumeCdata(start);
	                        }
	                        else if (this._attemptCharCode(chars.$MINUS)) {
	                            this._consumeComment(start);
	                        }
	                        else {
	                            this._consumeDocType(start);
	                        }
	                    }
	                    else if (this._attemptCharCode(chars.$SLASH)) {
	                        this._consumeTagClose(start);
	                    }
	                    else {
	                        this._consumeTagOpen(start);
	                    }
	                }
	                else if (isExpansionFormStart(this._input, this._index, this.interpolationConfig.start) &&
	                    this.tokenizeExpansionForms) {
	                    this._consumeExpansionFormStart();
	                }
	                else if (isExpansionCaseStart(this._peek) && this._isInExpansionForm() &&
	                    this.tokenizeExpansionForms) {
	                    this._consumeExpansionCaseStart();
	                }
	                else if (this._peek === chars.$RBRACE && this._isInExpansionCase() &&
	                    this.tokenizeExpansionForms) {
	                    this._consumeExpansionCaseEnd();
	                }
	                else if (this._peek === chars.$RBRACE && this._isInExpansionForm() &&
	                    this.tokenizeExpansionForms) {
	                    this._consumeExpansionFormEnd();
	                }
	                else {
	                    this._consumeText();
	                }
	            }
	            catch (e) {
	                if (e instanceof ControlFlowError) {
	                    this.errors.push(e.error);
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        this._beginToken(HtmlTokenType.EOF);
	        this._endToken([]);
	        return new HtmlTokenizeResult(mergeTextTokens(this.tokens), this.errors);
	    };
	    _HtmlTokenizer.prototype._getLocation = function () {
	        return new parse_util_1.ParseLocation(this.file, this._index, this._line, this._column);
	    };
	    _HtmlTokenizer.prototype._getSpan = function (start, end) {
	        if (lang_1.isBlank(start)) {
	            start = this._getLocation();
	        }
	        if (lang_1.isBlank(end)) {
	            end = this._getLocation();
	        }
	        return new parse_util_1.ParseSourceSpan(start, end);
	    };
	    _HtmlTokenizer.prototype._beginToken = function (type, start) {
	        if (start === void 0) { start = null; }
	        if (lang_1.isBlank(start)) {
	            start = this._getLocation();
	        }
	        this._currentTokenStart = start;
	        this._currentTokenType = type;
	    };
	    _HtmlTokenizer.prototype._endToken = function (parts, end) {
	        if (end === void 0) { end = null; }
	        if (lang_1.isBlank(end)) {
	            end = this._getLocation();
	        }
	        var token = new HtmlToken(this._currentTokenType, parts, new parse_util_1.ParseSourceSpan(this._currentTokenStart, end));
	        this.tokens.push(token);
	        this._currentTokenStart = null;
	        this._currentTokenType = null;
	        return token;
	    };
	    _HtmlTokenizer.prototype._createError = function (msg, span) {
	        var error = new HtmlTokenError(msg, this._currentTokenType, span);
	        this._currentTokenStart = null;
	        this._currentTokenType = null;
	        return new ControlFlowError(error);
	    };
	    _HtmlTokenizer.prototype._advance = function () {
	        if (this._index >= this._length) {
	            throw this._createError(unexpectedCharacterErrorMsg(chars.$EOF), this._getSpan());
	        }
	        if (this._peek === chars.$LF) {
	            this._line++;
	            this._column = 0;
	        }
	        else if (this._peek !== chars.$LF && this._peek !== chars.$CR) {
	            this._column++;
	        }
	        this._index++;
	        this._peek = this._index >= this._length ? chars.$EOF :
	            lang_1.StringWrapper.charCodeAt(this._input, this._index);
	        this._nextPeek = this._index + 1 >= this._length ?
	            chars.$EOF :
	            lang_1.StringWrapper.charCodeAt(this._input, this._index + 1);
	    };
	    _HtmlTokenizer.prototype._attemptCharCode = function (charCode) {
	        if (this._peek === charCode) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    _HtmlTokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	        if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    _HtmlTokenizer.prototype._requireCharCode = function (charCode) {
	        var location = this._getLocation();
	        if (!this._attemptCharCode(charCode)) {
	            throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	        }
	    };
	    _HtmlTokenizer.prototype._attemptStr = function (chars) {
	        var initialPosition = this._savePosition();
	        for (var i = 0; i < chars.length; i++) {
	            if (!this._attemptCharCode(lang_1.StringWrapper.charCodeAt(chars, i))) {
	                // If attempting to parse the string fails, we want to reset the parser
	                // to where it was before the attempt
	                this._restorePosition(initialPosition);
	                return false;
	            }
	        }
	        return true;
	    };
	    _HtmlTokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	        for (var i = 0; i < chars.length; i++) {
	            if (!this._attemptCharCodeCaseInsensitive(lang_1.StringWrapper.charCodeAt(chars, i))) {
	                return false;
	            }
	        }
	        return true;
	    };
	    _HtmlTokenizer.prototype._requireStr = function (chars) {
	        var location = this._getLocation();
	        if (!this._attemptStr(chars)) {
	            throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	        }
	    };
	    _HtmlTokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	        while (!predicate(this._peek)) {
	            this._advance();
	        }
	    };
	    _HtmlTokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	        var start = this._getLocation();
	        this._attemptCharCodeUntilFn(predicate);
	        if (this._index - start.offset < len) {
	            throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	        }
	    };
	    _HtmlTokenizer.prototype._attemptUntilChar = function (char) {
	        while (this._peek !== char) {
	            this._advance();
	        }
	    };
	    _HtmlTokenizer.prototype._readChar = function (decodeEntities) {
	        if (decodeEntities && this._peek === chars.$AMPERSAND) {
	            return this._decodeEntity();
	        }
	        else {
	            var index = this._index;
	            this._advance();
	            return this._input[index];
	        }
	    };
	    _HtmlTokenizer.prototype._decodeEntity = function () {
	        var start = this._getLocation();
	        this._advance();
	        if (this._attemptCharCode(chars.$HASH)) {
	            var isHex = this._attemptCharCode(chars.$x) || this._attemptCharCode(chars.$X);
	            var numberStart = this._getLocation().offset;
	            this._attemptCharCodeUntilFn(isDigitEntityEnd);
	            if (this._peek != chars.$SEMICOLON) {
	                throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	            }
	            this._advance();
	            var strNum = this._input.substring(numberStart, this._index - 1);
	            try {
	                var charCode = lang_1.NumberWrapper.parseInt(strNum, isHex ? 16 : 10);
	                return lang_1.StringWrapper.fromCharCode(charCode);
	            }
	            catch (e) {
	                var entity = this._input.substring(start.offset + 1, this._index - 1);
	                throw this._createError(unknownEntityErrorMsg(entity), this._getSpan(start));
	            }
	        }
	        else {
	            var startPosition = this._savePosition();
	            this._attemptCharCodeUntilFn(isNamedEntityEnd);
	            if (this._peek != chars.$SEMICOLON) {
	                this._restorePosition(startPosition);
	                return '&';
	            }
	            this._advance();
	            var name_1 = this._input.substring(start.offset + 1, this._index - 1);
	            var char = html_tags_1.NAMED_ENTITIES[name_1];
	            if (lang_1.isBlank(char)) {
	                throw this._createError(unknownEntityErrorMsg(name_1), this._getSpan(start));
	            }
	            return char;
	        }
	    };
	    _HtmlTokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	        var tagCloseStart;
	        var textStart = this._getLocation();
	        this._beginToken(decodeEntities ? HtmlTokenType.ESCAPABLE_RAW_TEXT : HtmlTokenType.RAW_TEXT, textStart);
	        var parts = [];
	        while (true) {
	            tagCloseStart = this._getLocation();
	            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                break;
	            }
	            if (this._index > tagCloseStart.offset) {
	                parts.push(this._input.substring(tagCloseStart.offset, this._index));
	            }
	            while (this._peek !== firstCharOfEnd) {
	                parts.push(this._readChar(decodeEntities));
	            }
	        }
	        return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	    };
	    _HtmlTokenizer.prototype._consumeComment = function (start) {
	        var _this = this;
	        this._beginToken(HtmlTokenType.COMMENT_START, start);
	        this._requireCharCode(chars.$MINUS);
	        this._endToken([]);
	        var textToken = this._consumeRawText(false, chars.$MINUS, function () { return _this._attemptStr('->'); });
	        this._beginToken(HtmlTokenType.COMMENT_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    _HtmlTokenizer.prototype._consumeCdata = function (start) {
	        var _this = this;
	        this._beginToken(HtmlTokenType.CDATA_START, start);
	        this._requireStr('CDATA[');
	        this._endToken([]);
	        var textToken = this._consumeRawText(false, chars.$RBRACKET, function () { return _this._attemptStr(']>'); });
	        this._beginToken(HtmlTokenType.CDATA_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    _HtmlTokenizer.prototype._consumeDocType = function (start) {
	        this._beginToken(HtmlTokenType.DOC_TYPE, start);
	        this._attemptUntilChar(chars.$GT);
	        this._advance();
	        this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	    };
	    _HtmlTokenizer.prototype._consumePrefixAndName = function () {
	        var nameOrPrefixStart = this._index;
	        var prefix = null;
	        while (this._peek !== chars.$COLON && !isPrefixEnd(this._peek)) {
	            this._advance();
	        }
	        var nameStart;
	        if (this._peek === chars.$COLON) {
	            this._advance();
	            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	            nameStart = this._index;
	        }
	        else {
	            nameStart = nameOrPrefixStart;
	        }
	        this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	        var name = this._input.substring(nameStart, this._index);
	        return [prefix, name];
	    };
	    _HtmlTokenizer.prototype._consumeTagOpen = function (start) {
	        var savedPos = this._savePosition();
	        var lowercaseTagName;
	        try {
	            if (!isAsciiLetter(this._peek)) {
	                throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	            }
	            var nameStart = this._index;
	            this._consumeTagOpenStart(start);
	            lowercaseTagName = this._input.substring(nameStart, this._index).toLowerCase();
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            while (this._peek !== chars.$SLASH && this._peek !== chars.$GT) {
	                this._consumeAttributeName();
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	                if (this._attemptCharCode(chars.$EQ)) {
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                    this._consumeAttributeValue();
	                }
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	            }
	            this._consumeTagOpenEnd();
	        }
	        catch (e) {
	            if (e instanceof ControlFlowError) {
	                // When the start tag is invalid, assume we want a "<"
	                this._restorePosition(savedPos);
	                // Back to back text tokens are merged at the end
	                this._beginToken(HtmlTokenType.TEXT, start);
	                this._endToken(['<']);
	                return;
	            }
	            throw e;
	        }
	        var contentTokenType = html_tags_1.getHtmlTagDefinition(lowercaseTagName).contentType;
	        if (contentTokenType === html_tags_1.HtmlTagContentType.RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, false);
	        }
	        else if (contentTokenType === html_tags_1.HtmlTagContentType.ESCAPABLE_RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, true);
	        }
	    };
	    _HtmlTokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	        var _this = this;
	        var textToken = this._consumeRawText(decodeEntities, chars.$LT, function () {
	            if (!_this._attemptCharCode(chars.$SLASH))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            if (!_this._attemptCharCode(chars.$GT))
	                return false;
	            return true;
	        });
	        this._beginToken(HtmlTokenType.TAG_CLOSE, textToken.sourceSpan.end);
	        this._endToken([null, lowercaseTagName]);
	    };
	    _HtmlTokenizer.prototype._consumeTagOpenStart = function (start) {
	        this._beginToken(HtmlTokenType.TAG_OPEN_START, start);
	        var parts = this._consumePrefixAndName();
	        this._endToken(parts);
	    };
	    _HtmlTokenizer.prototype._consumeAttributeName = function () {
	        this._beginToken(HtmlTokenType.ATTR_NAME);
	        var prefixAndName = this._consumePrefixAndName();
	        this._endToken(prefixAndName);
	    };
	    _HtmlTokenizer.prototype._consumeAttributeValue = function () {
	        this._beginToken(HtmlTokenType.ATTR_VALUE);
	        var value;
	        if (this._peek === chars.$SQ || this._peek === chars.$DQ) {
	            var quoteChar = this._peek;
	            this._advance();
	            var parts = [];
	            while (this._peek !== quoteChar) {
	                parts.push(this._readChar(true));
	            }
	            value = parts.join('');
	            this._advance();
	        }
	        else {
	            var valueStart = this._index;
	            this._requireCharCodeUntilFn(isNameEnd, 1);
	            value = this._input.substring(valueStart, this._index);
	        }
	        this._endToken([this._processCarriageReturns(value)]);
	    };
	    _HtmlTokenizer.prototype._consumeTagOpenEnd = function () {
	        var tokenType = this._attemptCharCode(chars.$SLASH) ? HtmlTokenType.TAG_OPEN_END_VOID :
	            HtmlTokenType.TAG_OPEN_END;
	        this._beginToken(tokenType);
	        this._requireCharCode(chars.$GT);
	        this._endToken([]);
	    };
	    _HtmlTokenizer.prototype._consumeTagClose = function (start) {
	        this._beginToken(HtmlTokenType.TAG_CLOSE, start);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        var prefixAndName = this._consumePrefixAndName();
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._requireCharCode(chars.$GT);
	        this._endToken(prefixAndName);
	    };
	    _HtmlTokenizer.prototype._consumeExpansionFormStart = function () {
	        this._beginToken(HtmlTokenType.EXPANSION_FORM_START, this._getLocation());
	        this._requireCharCode(chars.$LBRACE);
	        this._endToken([]);
	        this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());
	        var condition = this._readUntil(chars.$COMMA);
	        this._endToken([condition], this._getLocation());
	        this._requireCharCode(chars.$COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());
	        var type = this._readUntil(chars.$COMMA);
	        this._endToken([type], this._getLocation());
	        this._requireCharCode(chars.$COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.push(HtmlTokenType.EXPANSION_FORM_START);
	    };
	    _HtmlTokenizer.prototype._consumeExpansionCaseStart = function () {
	        this._beginToken(HtmlTokenType.EXPANSION_CASE_VALUE, this._getLocation());
	        var value = this._readUntil(chars.$LBRACE).trim();
	        this._endToken([value], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_START, this._getLocation());
	        this._requireCharCode(chars.$LBRACE);
	        this._endToken([], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.push(HtmlTokenType.EXPANSION_CASE_EXP_START);
	    };
	    _HtmlTokenizer.prototype._consumeExpansionCaseEnd = function () {
	        this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_END, this._getLocation());
	        this._requireCharCode(chars.$RBRACE);
	        this._endToken([], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.pop();
	    };
	    _HtmlTokenizer.prototype._consumeExpansionFormEnd = function () {
	        this._beginToken(HtmlTokenType.EXPANSION_FORM_END, this._getLocation());
	        this._requireCharCode(chars.$RBRACE);
	        this._endToken([]);
	        this._expansionCaseStack.pop();
	    };
	    _HtmlTokenizer.prototype._consumeText = function () {
	        var start = this._getLocation();
	        this._beginToken(HtmlTokenType.TEXT, start);
	        var parts = [];
	        var interpolation = false;
	        do {
	            var savedPos = this._savePosition();
	            // _attemptStr advances the position when it is true.
	            // To push interpolation symbols, we have to reset it.
	            if (this._attemptStr(this.interpolationConfig.start)) {
	                this._restorePosition(savedPos);
	                for (var i = 0; i < this.interpolationConfig.start.length; i++) {
	                    parts.push(this._readChar(true));
	                }
	                interpolation = true;
	            }
	            else if (this._attemptStr(this.interpolationConfig.end) && interpolation) {
	                this._restorePosition(savedPos);
	                for (var i = 0; i < this.interpolationConfig.end.length; i++) {
	                    parts.push(this._readChar(true));
	                }
	                interpolation = false;
	            }
	            else {
	                this._restorePosition(savedPos);
	                parts.push(this._readChar(true));
	            }
	        } while (!this._isTextEnd(interpolation));
	        this._endToken([this._processCarriageReturns(parts.join(''))]);
	    };
	    _HtmlTokenizer.prototype._isTextEnd = function (interpolation) {
	        if (this._peek === chars.$LT || this._peek === chars.$EOF)
	            return true;
	        if (this.tokenizeExpansionForms) {
	            var savedPos = this._savePosition();
	            if (isExpansionFormStart(this._input, this._index, this.interpolationConfig.start))
	                return true;
	            this._restorePosition(savedPos);
	            if (this._peek === chars.$RBRACE && !interpolation &&
	                (this._isInExpansionCase() || this._isInExpansionForm()))
	                return true;
	        }
	        return false;
	    };
	    _HtmlTokenizer.prototype._savePosition = function () {
	        return [this._peek, this._index, this._column, this._line, this.tokens.length];
	    };
	    _HtmlTokenizer.prototype._readUntil = function (char) {
	        var start = this._index;
	        this._attemptUntilChar(char);
	        return this._input.substring(start, this._index);
	    };
	    _HtmlTokenizer.prototype._restorePosition = function (position) {
	        this._peek = position[0];
	        this._index = position[1];
	        this._column = position[2];
	        this._line = position[3];
	        var nbTokens = position[4];
	        if (nbTokens < this.tokens.length) {
	            // remove any extra tokens
	            this.tokens = collection_1.ListWrapper.slice(this.tokens, 0, nbTokens);
	        }
	    };
	    _HtmlTokenizer.prototype._isInExpansionCase = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                HtmlTokenType.EXPANSION_CASE_EXP_START;
	    };
	    _HtmlTokenizer.prototype._isInExpansionForm = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                HtmlTokenType.EXPANSION_FORM_START;
	    };
	    return _HtmlTokenizer;
	}());
	function isNotWhitespace(code) {
	    return !isWhitespace(code) || code === chars.$EOF;
	}
	function isWhitespace(code) {
	    return (code >= chars.$TAB && code <= chars.$SPACE) || (code === chars.$NBSP);
	}
	function isNameEnd(code) {
	    return isWhitespace(code) || code === chars.$GT || code === chars.$SLASH || code === chars.$SQ ||
	        code === chars.$DQ || code === chars.$EQ;
	}
	function isPrefixEnd(code) {
	    return (code < chars.$a || chars.$z < code) && (code < chars.$A || chars.$Z < code) &&
	        (code < chars.$0 || code > chars.$9);
	}
	function isDigitEntityEnd(code) {
	    return code == chars.$SEMICOLON || code == chars.$EOF || !isAsciiHexDigit(code);
	}
	function isNamedEntityEnd(code) {
	    return code == chars.$SEMICOLON || code == chars.$EOF || !isAsciiLetter(code);
	}
	function isExpansionFormStart(input, offset, interpolationStart) {
	    var substr = input.substring(offset);
	    return lang_1.StringWrapper.charCodeAt(substr, 0) === chars.$LBRACE &&
	        lang_1.StringWrapper.charCodeAt(substr, 1) !== chars.$LBRACE &&
	        !substr.startsWith(interpolationStart);
	}
	function isExpansionCaseStart(peek) {
	    return peek === chars.$EQ || isAsciiLetter(peek);
	}
	function isAsciiLetter(code) {
	    return code >= chars.$a && code <= chars.$z || code >= chars.$A && code <= chars.$Z;
	}
	function isAsciiHexDigit(code) {
	    return code >= chars.$a && code <= chars.$f || code >= chars.$A && code <= chars.$F ||
	        code >= chars.$0 && code <= chars.$9;
	}
	function compareCharCodeCaseInsensitive(code1, code2) {
	    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	}
	function toUpperCaseCharCode(code) {
	    return code >= chars.$a && code <= chars.$z ? code - chars.$a + chars.$A : code;
	}
	function mergeTextTokens(srcTokens) {
	    var dstTokens = [];
	    var lastDstToken;
	    for (var i = 0; i < srcTokens.length; i++) {
	        var token = srcTokens[i];
	        if (lang_1.isPresent(lastDstToken) && lastDstToken.type == HtmlTokenType.TEXT &&
	            token.type == HtmlTokenType.TEXT) {
	            lastDstToken.parts[0] += token.parts[0];
	            lastDstToken.sourceSpan.end = token.sourceSpan.end;
	        }
	        else {
	            lastDstToken = token;
	            dstTokens.push(lastDstToken);
	        }
	    }
	    return dstTokens;
	}
	//# sourceMappingURL=html_lexer.js.map

/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";
	exports.$EOF = 0;
	exports.$TAB = 9;
	exports.$LF = 10;
	exports.$VTAB = 11;
	exports.$FF = 12;
	exports.$CR = 13;
	exports.$SPACE = 32;
	exports.$BANG = 33;
	exports.$DQ = 34;
	exports.$HASH = 35;
	exports.$$ = 36;
	exports.$PERCENT = 37;
	exports.$AMPERSAND = 38;
	exports.$SQ = 39;
	exports.$LPAREN = 40;
	exports.$RPAREN = 41;
	exports.$STAR = 42;
	exports.$PLUS = 43;
	exports.$COMMA = 44;
	exports.$MINUS = 45;
	exports.$PERIOD = 46;
	exports.$SLASH = 47;
	exports.$COLON = 58;
	exports.$SEMICOLON = 59;
	exports.$LT = 60;
	exports.$EQ = 61;
	exports.$GT = 62;
	exports.$QUESTION = 63;
	exports.$0 = 48;
	exports.$9 = 57;
	exports.$A = 65;
	exports.$E = 69;
	exports.$F = 70;
	exports.$X = 88;
	exports.$Z = 90;
	exports.$LBRACKET = 91;
	exports.$BACKSLASH = 92;
	exports.$RBRACKET = 93;
	exports.$CARET = 94;
	exports.$_ = 95;
	exports.$a = 97;
	exports.$e = 101;
	exports.$f = 102;
	exports.$n = 110;
	exports.$r = 114;
	exports.$t = 116;
	exports.$u = 117;
	exports.$v = 118;
	exports.$x = 120;
	exports.$z = 122;
	exports.$LBRACE = 123;
	exports.$BAR = 124;
	exports.$RBRACE = 125;
	exports.$NBSP = 160;
	exports.$PIPE = 124;
	exports.$TILDA = 126;
	exports.$AT = 64;
	function isWhitespace(code) {
	    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == exports.$NBSP);
	}
	exports.isWhitespace = isWhitespace;
	//# sourceMappingURL=chars.js.map

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(10);
	// see http://www.w3.org/TR/html51/syntax.html#named-character-references
	// see https://html.spec.whatwg.org/multipage/entities.json
	// This list is not exhaustive to keep the compiler footprint low.
	// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	exports.NAMED_ENTITIES = {
	    'Aacute': '\u00C1',
	    'aacute': '\u00E1',
	    'Acirc': '\u00C2',
	    'acirc': '\u00E2',
	    'acute': '\u00B4',
	    'AElig': '\u00C6',
	    'aelig': '\u00E6',
	    'Agrave': '\u00C0',
	    'agrave': '\u00E0',
	    'alefsym': '\u2135',
	    'Alpha': '\u0391',
	    'alpha': '\u03B1',
	    'amp': '&',
	    'and': '\u2227',
	    'ang': '\u2220',
	    'apos': '\u0027',
	    'Aring': '\u00C5',
	    'aring': '\u00E5',
	    'asymp': '\u2248',
	    'Atilde': '\u00C3',
	    'atilde': '\u00E3',
	    'Auml': '\u00C4',
	    'auml': '\u00E4',
	    'bdquo': '\u201E',
	    'Beta': '\u0392',
	    'beta': '\u03B2',
	    'brvbar': '\u00A6',
	    'bull': '\u2022',
	    'cap': '\u2229',
	    'Ccedil': '\u00C7',
	    'ccedil': '\u00E7',
	    'cedil': '\u00B8',
	    'cent': '\u00A2',
	    'Chi': '\u03A7',
	    'chi': '\u03C7',
	    'circ': '\u02C6',
	    'clubs': '\u2663',
	    'cong': '\u2245',
	    'copy': '\u00A9',
	    'crarr': '\u21B5',
	    'cup': '\u222A',
	    'curren': '\u00A4',
	    'dagger': '\u2020',
	    'Dagger': '\u2021',
	    'darr': '\u2193',
	    'dArr': '\u21D3',
	    'deg': '\u00B0',
	    'Delta': '\u0394',
	    'delta': '\u03B4',
	    'diams': '\u2666',
	    'divide': '\u00F7',
	    'Eacute': '\u00C9',
	    'eacute': '\u00E9',
	    'Ecirc': '\u00CA',
	    'ecirc': '\u00EA',
	    'Egrave': '\u00C8',
	    'egrave': '\u00E8',
	    'empty': '\u2205',
	    'emsp': '\u2003',
	    'ensp': '\u2002',
	    'Epsilon': '\u0395',
	    'epsilon': '\u03B5',
	    'equiv': '\u2261',
	    'Eta': '\u0397',
	    'eta': '\u03B7',
	    'ETH': '\u00D0',
	    'eth': '\u00F0',
	    'Euml': '\u00CB',
	    'euml': '\u00EB',
	    'euro': '\u20AC',
	    'exist': '\u2203',
	    'fnof': '\u0192',
	    'forall': '\u2200',
	    'frac12': '\u00BD',
	    'frac14': '\u00BC',
	    'frac34': '\u00BE',
	    'frasl': '\u2044',
	    'Gamma': '\u0393',
	    'gamma': '\u03B3',
	    'ge': '\u2265',
	    'gt': '>',
	    'harr': '\u2194',
	    'hArr': '\u21D4',
	    'hearts': '\u2665',
	    'hellip': '\u2026',
	    'Iacute': '\u00CD',
	    'iacute': '\u00ED',
	    'Icirc': '\u00CE',
	    'icirc': '\u00EE',
	    'iexcl': '\u00A1',
	    'Igrave': '\u00CC',
	    'igrave': '\u00EC',
	    'image': '\u2111',
	    'infin': '\u221E',
	    'int': '\u222B',
	    'Iota': '\u0399',
	    'iota': '\u03B9',
	    'iquest': '\u00BF',
	    'isin': '\u2208',
	    'Iuml': '\u00CF',
	    'iuml': '\u00EF',
	    'Kappa': '\u039A',
	    'kappa': '\u03BA',
	    'Lambda': '\u039B',
	    'lambda': '\u03BB',
	    'lang': '\u27E8',
	    'laquo': '\u00AB',
	    'larr': '\u2190',
	    'lArr': '\u21D0',
	    'lceil': '\u2308',
	    'ldquo': '\u201C',
	    'le': '\u2264',
	    'lfloor': '\u230A',
	    'lowast': '\u2217',
	    'loz': '\u25CA',
	    'lrm': '\u200E',
	    'lsaquo': '\u2039',
	    'lsquo': '\u2018',
	    'lt': '<',
	    'macr': '\u00AF',
	    'mdash': '\u2014',
	    'micro': '\u00B5',
	    'middot': '\u00B7',
	    'minus': '\u2212',
	    'Mu': '\u039C',
	    'mu': '\u03BC',
	    'nabla': '\u2207',
	    'nbsp': '\u00A0',
	    'ndash': '\u2013',
	    'ne': '\u2260',
	    'ni': '\u220B',
	    'not': '\u00AC',
	    'notin': '\u2209',
	    'nsub': '\u2284',
	    'Ntilde': '\u00D1',
	    'ntilde': '\u00F1',
	    'Nu': '\u039D',
	    'nu': '\u03BD',
	    'Oacute': '\u00D3',
	    'oacute': '\u00F3',
	    'Ocirc': '\u00D4',
	    'ocirc': '\u00F4',
	    'OElig': '\u0152',
	    'oelig': '\u0153',
	    'Ograve': '\u00D2',
	    'ograve': '\u00F2',
	    'oline': '\u203E',
	    'Omega': '\u03A9',
	    'omega': '\u03C9',
	    'Omicron': '\u039F',
	    'omicron': '\u03BF',
	    'oplus': '\u2295',
	    'or': '\u2228',
	    'ordf': '\u00AA',
	    'ordm': '\u00BA',
	    'Oslash': '\u00D8',
	    'oslash': '\u00F8',
	    'Otilde': '\u00D5',
	    'otilde': '\u00F5',
	    'otimes': '\u2297',
	    'Ouml': '\u00D6',
	    'ouml': '\u00F6',
	    'para': '\u00B6',
	    'permil': '\u2030',
	    'perp': '\u22A5',
	    'Phi': '\u03A6',
	    'phi': '\u03C6',
	    'Pi': '\u03A0',
	    'pi': '\u03C0',
	    'piv': '\u03D6',
	    'plusmn': '\u00B1',
	    'pound': '\u00A3',
	    'prime': '\u2032',
	    'Prime': '\u2033',
	    'prod': '\u220F',
	    'prop': '\u221D',
	    'Psi': '\u03A8',
	    'psi': '\u03C8',
	    'quot': '\u0022',
	    'radic': '\u221A',
	    'rang': '\u27E9',
	    'raquo': '\u00BB',
	    'rarr': '\u2192',
	    'rArr': '\u21D2',
	    'rceil': '\u2309',
	    'rdquo': '\u201D',
	    'real': '\u211C',
	    'reg': '\u00AE',
	    'rfloor': '\u230B',
	    'Rho': '\u03A1',
	    'rho': '\u03C1',
	    'rlm': '\u200F',
	    'rsaquo': '\u203A',
	    'rsquo': '\u2019',
	    'sbquo': '\u201A',
	    'Scaron': '\u0160',
	    'scaron': '\u0161',
	    'sdot': '\u22C5',
	    'sect': '\u00A7',
	    'shy': '\u00AD',
	    'Sigma': '\u03A3',
	    'sigma': '\u03C3',
	    'sigmaf': '\u03C2',
	    'sim': '\u223C',
	    'spades': '\u2660',
	    'sub': '\u2282',
	    'sube': '\u2286',
	    'sum': '\u2211',
	    'sup': '\u2283',
	    'sup1': '\u00B9',
	    'sup2': '\u00B2',
	    'sup3': '\u00B3',
	    'supe': '\u2287',
	    'szlig': '\u00DF',
	    'Tau': '\u03A4',
	    'tau': '\u03C4',
	    'there4': '\u2234',
	    'Theta': '\u0398',
	    'theta': '\u03B8',
	    'thetasym': '\u03D1',
	    'thinsp': '\u2009',
	    'THORN': '\u00DE',
	    'thorn': '\u00FE',
	    'tilde': '\u02DC',
	    'times': '\u00D7',
	    'trade': '\u2122',
	    'Uacute': '\u00DA',
	    'uacute': '\u00FA',
	    'uarr': '\u2191',
	    'uArr': '\u21D1',
	    'Ucirc': '\u00DB',
	    'ucirc': '\u00FB',
	    'Ugrave': '\u00D9',
	    'ugrave': '\u00F9',
	    'uml': '\u00A8',
	    'upsih': '\u03D2',
	    'Upsilon': '\u03A5',
	    'upsilon': '\u03C5',
	    'Uuml': '\u00DC',
	    'uuml': '\u00FC',
	    'weierp': '\u2118',
	    'Xi': '\u039E',
	    'xi': '\u03BE',
	    'Yacute': '\u00DD',
	    'yacute': '\u00FD',
	    'yen': '\u00A5',
	    'yuml': '\u00FF',
	    'Yuml': '\u0178',
	    'Zeta': '\u0396',
	    'zeta': '\u03B6',
	    'zwj': '\u200D',
	    'zwnj': '\u200C',
	};
	(function (HtmlTagContentType) {
	    HtmlTagContentType[HtmlTagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
	    HtmlTagContentType[HtmlTagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
	    HtmlTagContentType[HtmlTagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
	})(exports.HtmlTagContentType || (exports.HtmlTagContentType = {}));
	var HtmlTagContentType = exports.HtmlTagContentType;
	var HtmlTagDefinition = (function () {
	    function HtmlTagDefinition(_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, contentType = _b.contentType, closedByParent = _b.closedByParent, isVoid = _b.isVoid, ignoreFirstLf = _b.ignoreFirstLf;
	        this.closedByChildren = {};
	        this.closedByParent = false;
	        if (lang_1.isPresent(closedByChildren) && closedByChildren.length > 0) {
	            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	        }
	        this.isVoid = lang_1.normalizeBool(isVoid);
	        this.closedByParent = lang_1.normalizeBool(closedByParent) || this.isVoid;
	        if (lang_1.isPresent(requiredParents) && requiredParents.length > 0) {
	            this.requiredParents = {};
	            this.parentToAdd = requiredParents[0];
	            requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	        }
	        this.implicitNamespacePrefix = implicitNamespacePrefix;
	        this.contentType = lang_1.isPresent(contentType) ? contentType : HtmlTagContentType.PARSABLE_DATA;
	        this.ignoreFirstLf = lang_1.normalizeBool(ignoreFirstLf);
	    }
	    HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	        if (lang_1.isBlank(this.requiredParents)) {
	            return false;
	        }
	        if (lang_1.isBlank(currentParent)) {
	            return true;
	        }
	        var lcParent = currentParent.toLowerCase();
	        return this.requiredParents[lcParent] != true && lcParent != 'template';
	    };
	    HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	        return this.isVoid || lang_1.normalizeBool(this.closedByChildren[name.toLowerCase()]);
	    };
	    return HtmlTagDefinition;
	}());
	exports.HtmlTagDefinition = HtmlTagDefinition;
	// see http://www.w3.org/TR/html51/syntax.html#optional-tags
	// This implementation does not fully conform to the HTML5 spec.
	var TAG_DEFINITIONS = {
	    'base': new HtmlTagDefinition({ isVoid: true }),
	    'meta': new HtmlTagDefinition({ isVoid: true }),
	    'area': new HtmlTagDefinition({ isVoid: true }),
	    'embed': new HtmlTagDefinition({ isVoid: true }),
	    'link': new HtmlTagDefinition({ isVoid: true }),
	    'img': new HtmlTagDefinition({ isVoid: true }),
	    'input': new HtmlTagDefinition({ isVoid: true }),
	    'param': new HtmlTagDefinition({ isVoid: true }),
	    'hr': new HtmlTagDefinition({ isVoid: true }),
	    'br': new HtmlTagDefinition({ isVoid: true }),
	    'source': new HtmlTagDefinition({ isVoid: true }),
	    'track': new HtmlTagDefinition({ isVoid: true }),
	    'wbr': new HtmlTagDefinition({ isVoid: true }),
	    'p': new HtmlTagDefinition({
	        closedByChildren: [
	            'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	            'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	        ],
	        closedByParent: true
	    }),
	    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	    'tr': new HtmlTagDefinition({
	        closedByChildren: ['tr'],
	        requiredParents: ['tbody', 'tfoot', 'thead'],
	        closedByParent: true
	    }),
	    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'style': new HtmlTagDefinition({ contentType: HtmlTagContentType.RAW_TEXT }),
	    'script': new HtmlTagDefinition({ contentType: HtmlTagContentType.RAW_TEXT }),
	    'title': new HtmlTagDefinition({ contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT }),
	    'textarea': new HtmlTagDefinition({ contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	};
	var DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	function getHtmlTagDefinition(tagName) {
	    var result = TAG_DEFINITIONS[tagName.toLowerCase()];
	    return lang_1.isPresent(result) ? result : DEFAULT_TAG_DEFINITION;
	}
	exports.getHtmlTagDefinition = getHtmlTagDefinition;
	var NS_PREFIX_RE = /^:([^:]+):(.+)/g;
	function splitNsName(elementName) {
	    if (elementName[0] != ':') {
	        return [null, elementName];
	    }
	    var match = lang_1.RegExpWrapper.firstMatch(NS_PREFIX_RE, elementName);
	    return [match[1], match[2]];
	}
	exports.splitNsName = splitNsName;
	function getNsPrefix(elementName) {
	    return splitNsName(elementName)[0];
	}
	exports.getNsPrefix = getNsPrefix;
	function mergeNsAndName(prefix, localName) {
	    return lang_1.isPresent(prefix) ? ":" + prefix + ":" + localName : localName;
	}
	exports.mergeNsAndName = mergeNsAndName;
	//# sourceMappingURL=html_tags.js.map

/***/ },
/* 26 */
/***/ function(module, exports) {

	"use strict";
	var ParseLocation = (function () {
	    function ParseLocation(file, offset, line, col) {
	        this.file = file;
	        this.offset = offset;
	        this.line = line;
	        this.col = col;
	    }
	    ParseLocation.prototype.toString = function () { return this.file.url + "@" + this.line + ":" + this.col; };
	    return ParseLocation;
	}());
	exports.ParseLocation = ParseLocation;
	var ParseSourceFile = (function () {
	    function ParseSourceFile(content, url) {
	        this.content = content;
	        this.url = url;
	    }
	    return ParseSourceFile;
	}());
	exports.ParseSourceFile = ParseSourceFile;
	var ParseSourceSpan = (function () {
	    function ParseSourceSpan(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    ParseSourceSpan.prototype.toString = function () {
	        return this.start.file.content.substring(this.start.offset, this.end.offset);
	    };
	    return ParseSourceSpan;
	}());
	exports.ParseSourceSpan = ParseSourceSpan;
	(function (ParseErrorLevel) {
	    ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
	    ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
	})(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));
	var ParseErrorLevel = exports.ParseErrorLevel;
	var ParseError = (function () {
	    function ParseError(span, msg, level) {
	        if (level === void 0) { level = ParseErrorLevel.FATAL; }
	        this.span = span;
	        this.msg = msg;
	        this.level = level;
	    }
	    ParseError.prototype.toString = function () {
	        var source = this.span.start.file.content;
	        var ctxStart = this.span.start.offset;
	        if (ctxStart > source.length - 1) {
	            ctxStart = source.length - 1;
	        }
	        var ctxEnd = ctxStart;
	        var ctxLen = 0;
	        var ctxLines = 0;
	        while (ctxLen < 100 && ctxStart > 0) {
	            ctxStart--;
	            ctxLen++;
	            if (source[ctxStart] == '\n') {
	                if (++ctxLines == 3) {
	                    break;
	                }
	            }
	        }
	        ctxLen = 0;
	        ctxLines = 0;
	        while (ctxLen < 100 && ctxEnd < source.length - 1) {
	            ctxEnd++;
	            ctxLen++;
	            if (source[ctxEnd] == '\n') {
	                if (++ctxLines == 3) {
	                    break;
	                }
	            }
	        }
	        var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' +
	            source.substring(this.span.start.offset, ctxEnd + 1);
	        return this.msg + " (\"" + context + "\"): " + this.span.start;
	    };
	    return ParseError;
	}());
	exports.ParseError = ParseError;
	//# sourceMappingURL=parse_util.js.map

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var _EMPTY_ATTR_VALUE = '';
	// TODO: Can't use `const` here as
	// in Dart this is not transpiled into `final` yet...
	var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' +
	    '([-\\w]+)|' +
	    '(?:\\.([-\\w]+))|' +
	    '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	    '(\\))|' +
	    '(\\s*,\\s*)'); // ","
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = [];
	        this.attrs = [];
	        this.notSelectors = [];
	    }
	    CssSelector.parse = function (selector) {
	        var results = [];
	        var _addResult = function (res, cssSel) {
	            if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) &&
	                collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
	                cssSel.element = '*';
	            }
	            res.push(cssSel);
	        };
	        var cssSelector = new CssSelector();
	        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	        var match;
	        var current = cssSelector;
	        var inNot = false;
	        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            if (lang_1.isPresent(match[1])) {
	                if (inNot) {
	                    throw new exceptions_1.BaseException('Nesting :not is not allowed in a selector');
	                }
	                inNot = true;
	                current = new CssSelector();
	                cssSelector.notSelectors.push(current);
	            }
	            if (lang_1.isPresent(match[2])) {
	                current.setElement(match[2]);
	            }
	            if (lang_1.isPresent(match[3])) {
	                current.addClassName(match[3]);
	            }
	            if (lang_1.isPresent(match[4])) {
	                current.addAttribute(match[4], match[5]);
	            }
	            if (lang_1.isPresent(match[6])) {
	                inNot = false;
	                current = cssSelector;
	            }
	            if (lang_1.isPresent(match[7])) {
	                if (inNot) {
	                    throw new exceptions_1.BaseException('Multiple selectors in :not are not supported');
	                }
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    CssSelector.prototype.isElementSelector = function () {
	        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) &&
	            collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
	    };
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        this.element = element;
	    };
	    /** Gets a template string for an element that matches the selector. */
	    CssSelector.prototype.getMatchingElementTemplate = function () {
	        var tagName = lang_1.isPresent(this.element) ? this.element : 'div';
	        var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	        var attrs = '';
	        for (var i = 0; i < this.attrs.length; i += 2) {
	            var attrName = this.attrs[i];
	            var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	            attrs += " " + attrName + attrValue;
	        }
	        return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	    };
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
	        this.attrs.push(name);
	        if (lang_1.isPresent(value)) {
	            value = value.toLowerCase();
	        }
	        else {
	            value = _EMPTY_ATTR_VALUE;
	        }
	        this.attrs.push(value);
	    };
	    CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	    CssSelector.prototype.toString = function () {
	        var res = '';
	        if (lang_1.isPresent(this.element)) {
	            res += this.element;
	        }
	        if (lang_1.isPresent(this.classNames)) {
	            for (var i = 0; i < this.classNames.length; i++) {
	                res += '.' + this.classNames[i];
	            }
	        }
	        if (lang_1.isPresent(this.attrs)) {
	            for (var i = 0; i < this.attrs.length;) {
	                var attrName = this.attrs[i++];
	                var attrValue = this.attrs[i++];
	                res += '[' + attrName;
	                if (attrValue.length > 0) {
	                    res += '=' + attrValue;
	                }
	                res += ']';
	            }
	        }
	        this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	        return res;
	    };
	    return CssSelector;
	}());
	exports.CssSelector = CssSelector;
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = new collection_1.Map();
	        this._elementPartialMap = new collection_1.Map();
	        this._classMap = new collection_1.Map();
	        this._classPartialMap = new collection_1.Map();
	        this._attrValueMap = new collection_1.Map();
	        this._attrValuePartialMap = new collection_1.Map();
	        this._listContexts = [];
	    }
	    SelectorMatcher.createNotMatcher = function (notSelectors) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher.addSelectables(notSelectors, null);
	        return notMatcher;
	    };
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            this._listContexts.push(listContext);
	        }
	        for (var i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param cssSelector A css selector
	     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var matcher = this;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (lang_1.isPresent(element)) {
	            var isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	                var className = classNames[index];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var isTerminal = index === attrs.length - 2;
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                if (isTerminal) {
	                    var terminalMap = matcher._attrValueMap;
	                    var terminalValuesMap = terminalMap.get(attrName);
	                    if (lang_1.isBlank(terminalValuesMap)) {
	                        terminalValuesMap = new collection_1.Map();
	                        terminalMap.set(attrName, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, attrValue, selectable);
	                }
	                else {
	                    var parttialMap = matcher._attrValuePartialMap;
	                    var partialValuesMap = parttialMap.get(attrName);
	                    if (lang_1.isBlank(partialValuesMap)) {
	                        partialValuesMap = new collection_1.Map();
	                        parttialMap.set(attrName, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, attrValue);
	                }
	            }
	        }
	    };
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var terminalList = map.get(name);
	        if (lang_1.isBlank(terminalList)) {
	            terminalList = [];
	            map.set(name, terminalList);
	        }
	        terminalList.push(selectable);
	    };
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var matcher = map.get(name);
	        if (lang_1.isBlank(matcher)) {
	            matcher = new SelectorMatcher();
	            map.set(name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param cssSelector A css selector
	     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return boolean true if a match was found
	    */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	        var result = false;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        for (var i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var className = classNames[index];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                var terminalValuesMap = this._attrValueMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
	                    result;
	                var partialValuesMap = this._attrValuePartialMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result =
	                    this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var selectables = map.get(name);
	        var starSelectables = map.get('*');
	        if (lang_1.isPresent(starSelectables)) {
	            selectables = selectables.concat(starSelectables);
	        }
	        if (lang_1.isBlank(selectables)) {
	            return false;
	        }
	        var selectable;
	        var result = false;
	        for (var index = 0; index < selectables.length; index++) {
	            selectable = selectables[index];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var nestedSelector = map.get(name);
	        if (lang_1.isBlank(nestedSelector)) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	}());
	exports.SelectorMatcher = SelectorMatcher;
	var SelectorListContext = (function () {
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	}());
	exports.SelectorListContext = SelectorListContext;
	// Store context to pass back selector and context when a selector is matched
	var SelectorContext = (function () {
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	        this.notSelectors = selector.notSelectors;
	    }
	    SelectorContext.prototype.finalize = function (cssSelector, callback) {
	        var result = true;
	        if (this.notSelectors.length > 0 &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && lang_1.isPresent(callback) &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            if (lang_1.isPresent(this.listContext)) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	}());
	exports.SelectorContext = SelectorContext;
	//# sourceMappingURL=selector.js.map

/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";
	var ElementSchemaRegistry = (function () {
	    function ElementSchemaRegistry() {
	    }
	    return ElementSchemaRegistry;
	}());
	exports.ElementSchemaRegistry = ElementSchemaRegistry;
	//# sourceMappingURL=element_schema_registry.js.map

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(10);
	var html_tags_1 = __webpack_require__(25);
	var NG_CONTENT_SELECT_ATTR = 'select';
	var NG_CONTENT_ELEMENT = 'ng-content';
	var LINK_ELEMENT = 'link';
	var LINK_STYLE_REL_ATTR = 'rel';
	var LINK_STYLE_HREF_ATTR = 'href';
	var LINK_STYLE_REL_VALUE = 'stylesheet';
	var STYLE_ELEMENT = 'style';
	var SCRIPT_ELEMENT = 'script';
	var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	var NG_PROJECT_AS = 'ngProjectAs';
	function preparseElement(ast) {
	    var selectAttr = null;
	    var hrefAttr = null;
	    var relAttr = null;
	    var nonBindable = false;
	    var projectAs = null;
	    ast.attrs.forEach(function (attr) {
	        var lcAttrName = attr.name.toLowerCase();
	        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	            selectAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	            hrefAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	            relAttr = attr.value;
	        }
	        else if (attr.name == NG_NON_BINDABLE_ATTR) {
	            nonBindable = true;
	        }
	        else if (attr.name == NG_PROJECT_AS) {
	            if (attr.value.length > 0) {
	                projectAs = attr.value;
	            }
	        }
	    });
	    selectAttr = normalizeNgContentSelect(selectAttr);
	    var nodeName = ast.name.toLowerCase();
	    var type = PreparsedElementType.OTHER;
	    if (html_tags_1.splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	        type = PreparsedElementType.NG_CONTENT;
	    }
	    else if (nodeName == STYLE_ELEMENT) {
	        type = PreparsedElementType.STYLE;
	    }
	    else if (nodeName == SCRIPT_ELEMENT) {
	        type = PreparsedElementType.SCRIPT;
	    }
	    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	        type = PreparsedElementType.STYLESHEET;
	    }
	    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	}
	exports.preparseElement = preparseElement;
	(function (PreparsedElementType) {
	    PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
	    PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
	    PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
	    PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
	    PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
	})(exports.PreparsedElementType || (exports.PreparsedElementType = {}));
	var PreparsedElementType = exports.PreparsedElementType;
	var PreparsedElement = (function () {
	    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	        this.type = type;
	        this.selectAttr = selectAttr;
	        this.hrefAttr = hrefAttr;
	        this.nonBindable = nonBindable;
	        this.projectAs = projectAs;
	    }
	    return PreparsedElement;
	}());
	exports.PreparsedElement = PreparsedElement;
	function normalizeNgContentSelect(selectAttr) {
	    if (lang_1.isBlank(selectAttr) || selectAttr.length === 0) {
	        return '*';
	    }
	    return selectAttr;
	}
	//# sourceMappingURL=template_preparser.js.map

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// Some of the code comes from WebComponents.JS
	// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
	"use strict";
	var lang_1 = __webpack_require__(10);
	var StyleWithImports = (function () {
	    function StyleWithImports(style, styleUrls) {
	        this.style = style;
	        this.styleUrls = styleUrls;
	    }
	    return StyleWithImports;
	}());
	exports.StyleWithImports = StyleWithImports;
	function isStyleUrlResolvable(url) {
	    if (lang_1.isBlank(url) || url.length === 0 || url[0] == '/')
	        return false;
	    var schemeMatch = lang_1.RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
	    return lang_1.isBlank(schemeMatch) || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	}
	exports.isStyleUrlResolvable = isStyleUrlResolvable;
	/**
	 * Rewrites stylesheets by resolving and removing the @import urls that
	 * are either relative or don't have a `package:` scheme
	 */
	function extractStyleUrls(resolver, baseUrl, cssText) {
	    var foundUrls = [];
	    var modifiedCssText = lang_1.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {
	        var url = lang_1.isPresent(m[1]) ? m[1] : m[2];
	        if (!isStyleUrlResolvable(url)) {
	            // Do not attempt to resolve non-package absolute URLs with URI scheme
	            return m[0];
	        }
	        foundUrls.push(resolver.resolve(baseUrl, url));
	        return '';
	    });
	    return new StyleWithImports(modifiedCssText, foundUrls);
	}
	exports.extractStyleUrls = extractStyleUrls;
	var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	// TODO: can't use /^[^:/?#.]+:/g due to clang-format bug:
	//       https://github.com/angular/angular/issues/4596
	var _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g;
	//# sourceMappingURL=style_url_resolver.js.map

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	exports.MODULE_SUFFIX = lang_1.IS_DART ? '.dart' : '';
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function splitAtColon(input, defaultValues) {
	    var parts = lang_1.StringWrapper.split(input.trim(), /\s*:\s*/g);
	    if (parts.length > 1) {
	        return parts;
	    }
	    else {
	        return defaultValues;
	    }
	}
	exports.splitAtColon = splitAtColon;
	function sanitizeIdentifier(name) {
	    return lang_1.StringWrapper.replaceAll(name, /\W/g, '_');
	}
	exports.sanitizeIdentifier = sanitizeIdentifier;
	function visitValue(value, visitor, context) {
	    if (lang_1.isArray(value)) {
	        return visitor.visitArray(value, context);
	    }
	    else if (lang_1.isStrictStringMap(value)) {
	        return visitor.visitStringMap(value, context);
	    }
	    else if (lang_1.isBlank(value) || lang_1.isPrimitive(value)) {
	        return visitor.visitPrimitive(value, context);
	    }
	    else {
	        return visitor.visitOther(value, context);
	    }
	}
	exports.visitValue = visitValue;
	var ValueTransformer = (function () {
	    function ValueTransformer() {
	    }
	    ValueTransformer.prototype.visitArray = function (arr, context) {
	        var _this = this;
	        return arr.map(function (value) { return visitValue(value, _this, context); });
	    };
	    ValueTransformer.prototype.visitStringMap = function (map, context) {
	        var _this = this;
	        var result = {};
	        collection_1.StringMapWrapper.forEach(map, function (value /** TODO #9100 */, key /** TODO #9100 */) {
	            result[key] = visitValue(value, _this, context);
	        });
	        return result;
	    };
	    ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	    ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	    return ValueTransformer;
	}());
	exports.ValueTransformer = ValueTransformer;
	function assetUrl(pkg, path, type) {
	    if (path === void 0) { path = null; }
	    if (type === void 0) { type = 'src'; }
	    if (lang_1.IS_DART) {
	        if (path == null) {
	            return "asset:angular2/" + pkg + "/" + pkg + ".dart";
	        }
	        else {
	            return "asset:angular2/lib/" + pkg + "/src/" + path + ".dart";
	        }
	    }
	    else {
	        if (path == null) {
	            return "asset:@angular/lib/" + pkg + "/index";
	        }
	        else {
	            return "asset:@angular/lib/" + pkg + "/src/" + path;
	        }
	    }
	}
	exports.assetUrl = assetUrl;
	//# sourceMappingURL=util.js.map

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var compile_metadata_1 = __webpack_require__(33);
	var util_1 = __webpack_require__(31);
	var APP_VIEW_MODULE_URL = util_1.assetUrl('core', 'linker/view');
	var VIEW_UTILS_MODULE_URL = util_1.assetUrl('core', 'linker/view_utils');
	var CD_MODULE_URL = util_1.assetUrl('core', 'change_detection/change_detection');
	// Reassign the imports to different variables so we can
	// define static variables with the name of the import.
	// (only needed for Dart).
	var impViewUtils = core_private_1.ViewUtils;
	var impAppView = core_private_1.AppView;
	var impDebugAppView = core_private_1.DebugAppView;
	var impDebugContext = core_private_1.DebugContext;
	var impAppElement = core_private_1.AppElement;
	var impElementRef = core_1.ElementRef;
	var impViewContainerRef = core_1.ViewContainerRef;
	var impChangeDetectorRef = core_1.ChangeDetectorRef;
	var impRenderComponentType = core_1.RenderComponentType;
	var impQueryList = core_1.QueryList;
	var impTemplateRef = core_1.TemplateRef;
	var impTemplateRef_ = core_private_1.TemplateRef_;
	var impValueUnwrapper = core_private_1.ValueUnwrapper;
	var impInjector = core_1.Injector;
	var impViewEncapsulation = core_1.ViewEncapsulation;
	var impViewType = core_private_1.ViewType;
	var impChangeDetectionStrategy = core_1.ChangeDetectionStrategy;
	var impStaticNodeDebugInfo = core_private_1.StaticNodeDebugInfo;
	var impRenderer = core_1.Renderer;
	var impSimpleChange = core_1.SimpleChange;
	var impUninitialized = core_private_1.uninitialized;
	var impChangeDetectorState = core_private_1.ChangeDetectorState;
	var impFlattenNestedViewRenderNodes = core_private_1.flattenNestedViewRenderNodes;
	var impDevModeEqual = core_private_1.devModeEqual;
	var impInterpolate = core_private_1.interpolate;
	var impCheckBinding = core_private_1.checkBinding;
	var impCastByValue = core_private_1.castByValue;
	var impEMPTY_ARRAY = core_private_1.EMPTY_ARRAY;
	var impEMPTY_MAP = core_private_1.EMPTY_MAP;
	var impAnimationGroupPlayer = core_private_1.AnimationGroupPlayer;
	var impAnimationSequencePlayer = core_private_1.AnimationSequencePlayer;
	var impAnimationKeyframe = core_private_1.AnimationKeyframe;
	var impAnimationStyles = core_private_1.AnimationStyles;
	var impNoOpAnimationPlayer = core_private_1.NoOpAnimationPlayer;
	var ANIMATION_STYLE_UTIL_ASSET_URL = util_1.assetUrl('core', 'animation/animation_style_util');
	var Identifiers = (function () {
	    function Identifiers() {
	    }
	    Identifiers.ViewUtils = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ViewUtils', moduleUrl: util_1.assetUrl('core', 'linker/view_utils'), runtime: impViewUtils });
	    Identifiers.AppView = new compile_metadata_1.CompileIdentifierMetadata({ name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: impAppView });
	    Identifiers.DebugAppView = new compile_metadata_1.CompileIdentifierMetadata({ name: 'DebugAppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: impDebugAppView });
	    Identifiers.AppElement = new compile_metadata_1.CompileIdentifierMetadata({ name: 'AppElement', moduleUrl: util_1.assetUrl('core', 'linker/element'), runtime: impAppElement });
	    Identifiers.ElementRef = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'ElementRef',
	        moduleUrl: util_1.assetUrl('core', 'linker/element_ref'),
	        runtime: impElementRef
	    });
	    Identifiers.ViewContainerRef = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'ViewContainerRef',
	        moduleUrl: util_1.assetUrl('core', 'linker/view_container_ref'),
	        runtime: impViewContainerRef
	    });
	    Identifiers.ChangeDetectorRef = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'ChangeDetectorRef',
	        moduleUrl: util_1.assetUrl('core', 'change_detection/change_detector_ref'),
	        runtime: impChangeDetectorRef
	    });
	    Identifiers.RenderComponentType = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'RenderComponentType',
	        moduleUrl: util_1.assetUrl('core', 'render/api'),
	        runtime: impRenderComponentType
	    });
	    Identifiers.QueryList = new compile_metadata_1.CompileIdentifierMetadata({ name: 'QueryList', moduleUrl: util_1.assetUrl('core', 'linker/query_list'), runtime: impQueryList });
	    Identifiers.TemplateRef = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'TemplateRef',
	        moduleUrl: util_1.assetUrl('core', 'linker/template_ref'),
	        runtime: impTemplateRef
	    });
	    Identifiers.TemplateRef_ = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'TemplateRef_',
	        moduleUrl: util_1.assetUrl('core', 'linker/template_ref'),
	        runtime: impTemplateRef_
	    });
	    Identifiers.ValueUnwrapper = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: impValueUnwrapper });
	    Identifiers.Injector = new compile_metadata_1.CompileIdentifierMetadata({ name: 'Injector', moduleUrl: util_1.assetUrl('core', 'di/injector'), runtime: impInjector });
	    Identifiers.ViewEncapsulation = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'ViewEncapsulation',
	        moduleUrl: util_1.assetUrl('core', 'metadata/view'),
	        runtime: impViewEncapsulation
	    });
	    Identifiers.ViewType = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ViewType', moduleUrl: util_1.assetUrl('core', 'linker/view_type'), runtime: impViewType });
	    Identifiers.ChangeDetectionStrategy = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'ChangeDetectionStrategy',
	        moduleUrl: CD_MODULE_URL,
	        runtime: impChangeDetectionStrategy
	    });
	    Identifiers.StaticNodeDebugInfo = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'StaticNodeDebugInfo',
	        moduleUrl: util_1.assetUrl('core', 'linker/debug_context'),
	        runtime: impStaticNodeDebugInfo
	    });
	    Identifiers.DebugContext = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'DebugContext',
	        moduleUrl: util_1.assetUrl('core', 'linker/debug_context'),
	        runtime: impDebugContext
	    });
	    Identifiers.Renderer = new compile_metadata_1.CompileIdentifierMetadata({ name: 'Renderer', moduleUrl: util_1.assetUrl('core', 'render/api'), runtime: impRenderer });
	    Identifiers.SimpleChange = new compile_metadata_1.CompileIdentifierMetadata({ name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: impSimpleChange });
	    Identifiers.uninitialized = new compile_metadata_1.CompileIdentifierMetadata({ name: 'uninitialized', moduleUrl: CD_MODULE_URL, runtime: impUninitialized });
	    Identifiers.ChangeDetectorState = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ChangeDetectorState', moduleUrl: CD_MODULE_URL, runtime: impChangeDetectorState });
	    Identifiers.checkBinding = new compile_metadata_1.CompileIdentifierMetadata({ name: 'checkBinding', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impCheckBinding });
	    Identifiers.flattenNestedViewRenderNodes = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'flattenNestedViewRenderNodes',
	        moduleUrl: VIEW_UTILS_MODULE_URL,
	        runtime: impFlattenNestedViewRenderNodes
	    });
	    Identifiers.devModeEqual = new compile_metadata_1.CompileIdentifierMetadata({ name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: impDevModeEqual });
	    Identifiers.interpolate = new compile_metadata_1.CompileIdentifierMetadata({ name: 'interpolate', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impInterpolate });
	    Identifiers.castByValue = new compile_metadata_1.CompileIdentifierMetadata({ name: 'castByValue', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impCastByValue });
	    Identifiers.EMPTY_ARRAY = new compile_metadata_1.CompileIdentifierMetadata({ name: 'EMPTY_ARRAY', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impEMPTY_ARRAY });
	    Identifiers.EMPTY_MAP = new compile_metadata_1.CompileIdentifierMetadata({ name: 'EMPTY_MAP', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impEMPTY_MAP });
	    Identifiers.pureProxies = [
	        null,
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy1 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy2 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy3 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy4 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy5 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy6 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy7 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy8 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy9 }),
	        new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy10 }),
	    ];
	    Identifiers.SecurityContext = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'SecurityContext',
	        moduleUrl: util_1.assetUrl('core', 'security'),
	        runtime: core_private_1.SecurityContext,
	    });
	    Identifiers.AnimationKeyframe = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'AnimationKeyframe',
	        moduleUrl: util_1.assetUrl('core', 'animation/animation_keyframe'),
	        runtime: impAnimationKeyframe
	    });
	    Identifiers.AnimationStyles = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'AnimationStyles',
	        moduleUrl: util_1.assetUrl('core', 'animation/animation_styles'),
	        runtime: impAnimationStyles
	    });
	    Identifiers.NoOpAnimationPlayer = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'NoOpAnimationPlayer',
	        moduleUrl: util_1.assetUrl('core', 'animation/animation_player'),
	        runtime: impNoOpAnimationPlayer
	    });
	    Identifiers.AnimationGroupPlayer = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'AnimationGroupPlayer',
	        moduleUrl: util_1.assetUrl('core', 'animation/animation_group_player'),
	        runtime: impAnimationGroupPlayer
	    });
	    Identifiers.AnimationSequencePlayer = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'AnimationSequencePlayer',
	        moduleUrl: util_1.assetUrl('core', 'animation/animation_sequence_player'),
	        runtime: impAnimationSequencePlayer
	    });
	    Identifiers.prepareFinalAnimationStyles = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'prepareFinalAnimationStyles',
	        moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	        runtime: core_private_1.prepareFinalAnimationStyles
	    });
	    Identifiers.balanceAnimationKeyframes = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'balanceAnimationKeyframes',
	        moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	        runtime: core_private_1.balanceAnimationKeyframes
	    });
	    Identifiers.clearStyles = new compile_metadata_1.CompileIdentifierMetadata({ name: 'clearStyles', moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: core_private_1.clearStyles });
	    Identifiers.renderStyles = new compile_metadata_1.CompileIdentifierMetadata({ name: 'renderStyles', moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: core_private_1.renderStyles });
	    Identifiers.collectAndResolveStyles = new compile_metadata_1.CompileIdentifierMetadata({
	        name: 'collectAndResolveStyles',
	        moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	        runtime: core_private_1.collectAndResolveStyles
	    });
	    return Identifiers;
	}());
	exports.Identifiers = Identifiers;
	function identifierToken(identifier) {
	    return new compile_metadata_1.CompileTokenMetadata({ identifier: identifier });
	}
	exports.identifierToken = identifierToken;
	//# sourceMappingURL=identifiers.js.map

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var selector_1 = __webpack_require__(27);
	var url_resolver_1 = __webpack_require__(34);
	var util_1 = __webpack_require__(31);
	// group 2: "event" from "(event)"
	var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
	var CompileMetadataWithIdentifier = (function () {
	    function CompileMetadataWithIdentifier() {
	    }
	    Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return CompileMetadataWithIdentifier;
	}());
	exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
	var CompileMetadataWithType = (function (_super) {
	    __extends(CompileMetadataWithType, _super);
	    function CompileMetadataWithType() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(CompileMetadataWithType.prototype, "type", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CompileMetadataWithType.prototype, "identifier", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return CompileMetadataWithType;
	}(CompileMetadataWithIdentifier));
	exports.CompileMetadataWithType = CompileMetadataWithType;
	function metadataFromJson(data) {
	    return _COMPILE_METADATA_FROM_JSON[data['class']](data);
	}
	exports.metadataFromJson = metadataFromJson;
	var CompileAnimationEntryMetadata = (function () {
	    function CompileAnimationEntryMetadata(name, definitions) {
	        if (name === void 0) { name = null; }
	        if (definitions === void 0) { definitions = null; }
	        this.name = name;
	        this.definitions = definitions;
	    }
	    CompileAnimationEntryMetadata.fromJson = function (data) {
	        var value = data['value'];
	        var defs = _arrayFromJson(value['definitions'], metadataFromJson);
	        return new CompileAnimationEntryMetadata(value['name'], defs);
	    };
	    CompileAnimationEntryMetadata.prototype.toJson = function () {
	        return {
	            'class': 'AnimationEntryMetadata',
	            'value': { 'name': this.name, 'definitions': _arrayToJson(this.definitions) }
	        };
	    };
	    return CompileAnimationEntryMetadata;
	}());
	exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
	var CompileAnimationStateMetadata = (function () {
	    function CompileAnimationStateMetadata() {
	    }
	    return CompileAnimationStateMetadata;
	}());
	exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
	var CompileAnimationStateDeclarationMetadata = (function (_super) {
	    __extends(CompileAnimationStateDeclarationMetadata, _super);
	    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	        _super.call(this);
	        this.stateNameExpr = stateNameExpr;
	        this.styles = styles;
	    }
	    CompileAnimationStateDeclarationMetadata.fromJson = function (data) {
	        var value = data['value'];
	        var styles = _objFromJson(value['styles'], metadataFromJson);
	        return new CompileAnimationStateDeclarationMetadata(value['stateNameExpr'], styles);
	    };
	    CompileAnimationStateDeclarationMetadata.prototype.toJson = function () {
	        return {
	            'class': 'AnimationStateDeclarationMetadata',
	            'value': { 'stateNameExpr': this.stateNameExpr, 'styles': this.styles.toJson() }
	        };
	    };
	    return CompileAnimationStateDeclarationMetadata;
	}(CompileAnimationStateMetadata));
	exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
	var CompileAnimationStateTransitionMetadata = (function (_super) {
	    __extends(CompileAnimationStateTransitionMetadata, _super);
	    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	        _super.call(this);
	        this.stateChangeExpr = stateChangeExpr;
	        this.steps = steps;
	    }
	    CompileAnimationStateTransitionMetadata.fromJson = function (data) {
	        var value = data['value'];
	        var steps = _objFromJson(value['steps'], metadataFromJson);
	        return new CompileAnimationStateTransitionMetadata(value['stateChangeExpr'], steps);
	    };
	    CompileAnimationStateTransitionMetadata.prototype.toJson = function () {
	        return {
	            'class': 'AnimationStateTransitionMetadata',
	            'value': { 'stateChangeExpr': this.stateChangeExpr, 'steps': this.steps.toJson() }
	        };
	    };
	    return CompileAnimationStateTransitionMetadata;
	}(CompileAnimationStateMetadata));
	exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
	var CompileAnimationMetadata = (function () {
	    function CompileAnimationMetadata() {
	    }
	    return CompileAnimationMetadata;
	}());
	exports.CompileAnimationMetadata = CompileAnimationMetadata;
	var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	    __extends(CompileAnimationKeyframesSequenceMetadata, _super);
	    function CompileAnimationKeyframesSequenceMetadata(steps) {
	        if (steps === void 0) { steps = []; }
	        _super.call(this);
	        this.steps = steps;
	    }
	    CompileAnimationKeyframesSequenceMetadata.fromJson = function (data) {
	        var steps = _arrayFromJson(data['value'], metadataFromJson);
	        return new CompileAnimationKeyframesSequenceMetadata(steps);
	    };
	    CompileAnimationKeyframesSequenceMetadata.prototype.toJson = function () {
	        return { 'class': 'AnimationKeyframesSequenceMetadata', 'value': _arrayToJson(this.steps) };
	    };
	    return CompileAnimationKeyframesSequenceMetadata;
	}(CompileAnimationMetadata));
	exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
	var CompileAnimationStyleMetadata = (function (_super) {
	    __extends(CompileAnimationStyleMetadata, _super);
	    function CompileAnimationStyleMetadata(offset, styles) {
	        if (styles === void 0) { styles = null; }
	        _super.call(this);
	        this.offset = offset;
	        this.styles = styles;
	    }
	    CompileAnimationStyleMetadata.fromJson = function (data) {
	        var value = data['value'];
	        var offsetVal = value['offset'];
	        var offset = lang_1.isPresent(offsetVal) ? lang_1.NumberWrapper.parseFloat(offsetVal) : null;
	        var styles = value['styles'];
	        return new CompileAnimationStyleMetadata(offset, styles);
	    };
	    CompileAnimationStyleMetadata.prototype.toJson = function () {
	        return {
	            'class': 'AnimationStyleMetadata',
	            'value': { 'offset': this.offset, 'styles': this.styles }
	        };
	    };
	    return CompileAnimationStyleMetadata;
	}(CompileAnimationMetadata));
	exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
	var CompileAnimationAnimateMetadata = (function (_super) {
	    __extends(CompileAnimationAnimateMetadata, _super);
	    function CompileAnimationAnimateMetadata(timings, styles) {
	        if (timings === void 0) { timings = 0; }
	        if (styles === void 0) { styles = null; }
	        _super.call(this);
	        this.timings = timings;
	        this.styles = styles;
	    }
	    CompileAnimationAnimateMetadata.fromJson = function (data) {
	        var value = data['value'];
	        var timings = value['timings'];
	        var styles = _objFromJson(value['styles'], metadataFromJson);
	        return new CompileAnimationAnimateMetadata(timings, styles);
	    };
	    CompileAnimationAnimateMetadata.prototype.toJson = function () {
	        return {
	            'class': 'AnimationAnimateMetadata',
	            'value': { 'timings': this.timings, 'styles': _objToJson(this.styles) }
	        };
	    };
	    return CompileAnimationAnimateMetadata;
	}(CompileAnimationMetadata));
	exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
	var CompileAnimationWithStepsMetadata = (function (_super) {
	    __extends(CompileAnimationWithStepsMetadata, _super);
	    function CompileAnimationWithStepsMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        _super.call(this);
	        this.steps = steps;
	    }
	    return CompileAnimationWithStepsMetadata;
	}(CompileAnimationMetadata));
	exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
	var CompileAnimationSequenceMetadata = (function (_super) {
	    __extends(CompileAnimationSequenceMetadata, _super);
	    function CompileAnimationSequenceMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        _super.call(this, steps);
	    }
	    CompileAnimationSequenceMetadata.fromJson = function (data) {
	        var steps = _arrayFromJson(data['value'], metadataFromJson);
	        return new CompileAnimationSequenceMetadata(steps);
	    };
	    CompileAnimationSequenceMetadata.prototype.toJson = function () {
	        return { 'class': 'AnimationSequenceMetadata', 'value': _arrayToJson(this.steps) };
	    };
	    return CompileAnimationSequenceMetadata;
	}(CompileAnimationWithStepsMetadata));
	exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
	var CompileAnimationGroupMetadata = (function (_super) {
	    __extends(CompileAnimationGroupMetadata, _super);
	    function CompileAnimationGroupMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        _super.call(this, steps);
	    }
	    CompileAnimationGroupMetadata.fromJson = function (data) {
	        var steps = _arrayFromJson(data['value'], metadataFromJson);
	        return new CompileAnimationGroupMetadata(steps);
	    };
	    CompileAnimationGroupMetadata.prototype.toJson = function () {
	        return { 'class': 'AnimationGroupMetadata', 'value': _arrayToJson(this.steps) };
	    };
	    return CompileAnimationGroupMetadata;
	}(CompileAnimationWithStepsMetadata));
	exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
	var CompileIdentifierMetadata = (function () {
	    function CompileIdentifierMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, value = _b.value;
	        this.runtime = runtime;
	        this.name = name;
	        this.prefix = prefix;
	        this.moduleUrl = moduleUrl;
	        this.value = value;
	    }
	    CompileIdentifierMetadata.fromJson = function (data) {
	        var value = lang_1.isArray(data['value']) ? _arrayFromJson(data['value'], metadataFromJson) :
	            _objFromJson(data['value'], metadataFromJson);
	        return new CompileIdentifierMetadata({ name: data['name'], prefix: data['prefix'], moduleUrl: data['moduleUrl'], value: value });
	    };
	    CompileIdentifierMetadata.prototype.toJson = function () {
	        var value = lang_1.isArray(this.value) ? _arrayToJson(this.value) : _objToJson(this.value);
	        return {
	            // Note: Runtime type can't be serialized...
	            'class': 'Identifier',
	            'name': this.name,
	            'moduleUrl': this.moduleUrl,
	            'prefix': this.prefix,
	            'value': value
	        };
	    };
	    Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    return CompileIdentifierMetadata;
	}());
	exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
	var CompileDiDependencyMetadata = (function () {
	    function CompileDiDependencyMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, isValue = _b.isValue, query = _b.query, viewQuery = _b.viewQuery, token = _b.token, value = _b.value;
	        this.isAttribute = lang_1.normalizeBool(isAttribute);
	        this.isSelf = lang_1.normalizeBool(isSelf);
	        this.isHost = lang_1.normalizeBool(isHost);
	        this.isSkipSelf = lang_1.normalizeBool(isSkipSelf);
	        this.isOptional = lang_1.normalizeBool(isOptional);
	        this.isValue = lang_1.normalizeBool(isValue);
	        this.query = query;
	        this.viewQuery = viewQuery;
	        this.token = token;
	        this.value = value;
	    }
	    CompileDiDependencyMetadata.fromJson = function (data) {
	        return new CompileDiDependencyMetadata({
	            token: _objFromJson(data['token'], CompileTokenMetadata.fromJson),
	            query: _objFromJson(data['query'], CompileQueryMetadata.fromJson),
	            viewQuery: _objFromJson(data['viewQuery'], CompileQueryMetadata.fromJson),
	            value: data['value'],
	            isAttribute: data['isAttribute'],
	            isSelf: data['isSelf'],
	            isHost: data['isHost'],
	            isSkipSelf: data['isSkipSelf'],
	            isOptional: data['isOptional'],
	            isValue: data['isValue']
	        });
	    };
	    CompileDiDependencyMetadata.prototype.toJson = function () {
	        return {
	            'token': _objToJson(this.token),
	            'query': _objToJson(this.query),
	            'viewQuery': _objToJson(this.viewQuery),
	            'value': this.value,
	            'isAttribute': this.isAttribute,
	            'isSelf': this.isSelf,
	            'isHost': this.isHost,
	            'isSkipSelf': this.isSkipSelf,
	            'isOptional': this.isOptional,
	            'isValue': this.isValue
	        };
	    };
	    return CompileDiDependencyMetadata;
	}());
	exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
	var CompileProviderMetadata = (function () {
	    function CompileProviderMetadata(_a) {
	        var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	        this.token = token;
	        this.useClass = useClass;
	        this.useValue = useValue;
	        this.useExisting = useExisting;
	        this.useFactory = useFactory;
	        this.deps = lang_1.normalizeBlank(deps);
	        this.multi = lang_1.normalizeBool(multi);
	    }
	    CompileProviderMetadata.fromJson = function (data) {
	        return new CompileProviderMetadata({
	            token: _objFromJson(data['token'], CompileTokenMetadata.fromJson),
	            useClass: _objFromJson(data['useClass'], CompileTypeMetadata.fromJson),
	            useExisting: _objFromJson(data['useExisting'], CompileTokenMetadata.fromJson),
	            useValue: _objFromJson(data['useValue'], CompileIdentifierMetadata.fromJson),
	            useFactory: _objFromJson(data['useFactory'], CompileFactoryMetadata.fromJson),
	            multi: data['multi'],
	            deps: _arrayFromJson(data['deps'], CompileDiDependencyMetadata.fromJson)
	        });
	    };
	    CompileProviderMetadata.prototype.toJson = function () {
	        return {
	            // Note: Runtime type can't be serialized...
	            'class': 'Provider',
	            'token': _objToJson(this.token),
	            'useClass': _objToJson(this.useClass),
	            'useExisting': _objToJson(this.useExisting),
	            'useValue': _objToJson(this.useValue),
	            'useFactory': _objToJson(this.useFactory),
	            'multi': this.multi,
	            'deps': _arrayToJson(this.deps)
	        };
	    };
	    return CompileProviderMetadata;
	}());
	exports.CompileProviderMetadata = CompileProviderMetadata;
	var CompileFactoryMetadata = (function () {
	    function CompileFactoryMetadata(_a) {
	        var runtime = _a.runtime, name = _a.name, moduleUrl = _a.moduleUrl, prefix = _a.prefix, diDeps = _a.diDeps, value = _a.value;
	        this.runtime = runtime;
	        this.name = name;
	        this.prefix = prefix;
	        this.moduleUrl = moduleUrl;
	        this.diDeps = _normalizeArray(diDeps);
	        this.value = value;
	    }
	    Object.defineProperty(CompileFactoryMetadata.prototype, "identifier", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    CompileFactoryMetadata.fromJson = function (data) {
	        return new CompileFactoryMetadata({
	            name: data['name'],
	            prefix: data['prefix'],
	            moduleUrl: data['moduleUrl'],
	            value: data['value'],
	            diDeps: _arrayFromJson(data['diDeps'], CompileDiDependencyMetadata.fromJson)
	        });
	    };
	    CompileFactoryMetadata.prototype.toJson = function () {
	        return {
	            'class': 'Factory',
	            'name': this.name,
	            'prefix': this.prefix,
	            'moduleUrl': this.moduleUrl,
	            'value': this.value,
	            'diDeps': _arrayToJson(this.diDeps)
	        };
	    };
	    return CompileFactoryMetadata;
	}());
	exports.CompileFactoryMetadata = CompileFactoryMetadata;
	var UNDEFINED = new Object();
	var CompileTokenMetadata = (function () {
	    function CompileTokenMetadata(_a) {
	        var value = _a.value, identifier = _a.identifier, identifierIsInstance = _a.identifierIsInstance;
	        this._assetCacheKey = UNDEFINED;
	        this.value = value;
	        this.identifier = identifier;
	        this.identifierIsInstance = lang_1.normalizeBool(identifierIsInstance);
	    }
	    CompileTokenMetadata.fromJson = function (data) {
	        return new CompileTokenMetadata({
	            value: data['value'],
	            identifier: _objFromJson(data['identifier'], CompileIdentifierMetadata.fromJson),
	            identifierIsInstance: data['identifierIsInstance']
	        });
	    };
	    CompileTokenMetadata.prototype.toJson = function () {
	        return {
	            'value': this.value,
	            'identifier': _objToJson(this.identifier),
	            'identifierIsInstance': this.identifierIsInstance
	        };
	    };
	    Object.defineProperty(CompileTokenMetadata.prototype, "runtimeCacheKey", {
	        get: function () {
	            if (lang_1.isPresent(this.identifier)) {
	                return this.identifier.runtime;
	            }
	            else {
	                return this.value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CompileTokenMetadata.prototype, "assetCacheKey", {
	        get: function () {
	            if (this._assetCacheKey === UNDEFINED) {
	                if (lang_1.isPresent(this.identifier)) {
	                    if (lang_1.isPresent(this.identifier.moduleUrl) &&
	                        lang_1.isPresent(url_resolver_1.getUrlScheme(this.identifier.moduleUrl))) {
	                        var uri = core_private_1.reflector.importUri({ 'filePath': this.identifier.moduleUrl, 'name': this.identifier.name });
	                        this._assetCacheKey = this.identifier.name + "|" + uri + "|" + this.identifierIsInstance;
	                    }
	                    else {
	                        this._assetCacheKey = null;
	                    }
	                }
	                else {
	                    this._assetCacheKey = this.value;
	                }
	            }
	            return this._assetCacheKey;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CompileTokenMetadata.prototype.equalsTo = function (token2) {
	        var rk = this.runtimeCacheKey;
	        var ak = this.assetCacheKey;
	        return (lang_1.isPresent(rk) && rk == token2.runtimeCacheKey) ||
	            (lang_1.isPresent(ak) && ak == token2.assetCacheKey);
	    };
	    Object.defineProperty(CompileTokenMetadata.prototype, "name", {
	        get: function () {
	            return lang_1.isPresent(this.value) ? util_1.sanitizeIdentifier(this.value) : this.identifier.name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CompileTokenMetadata;
	}());
	exports.CompileTokenMetadata = CompileTokenMetadata;
	var CompileTokenMap = (function () {
	    function CompileTokenMap() {
	        this._valueMap = new Map();
	        this._values = [];
	    }
	    CompileTokenMap.prototype.add = function (token, value) {
	        var existing = this.get(token);
	        if (lang_1.isPresent(existing)) {
	            throw new exceptions_1.BaseException("Can only add to a TokenMap! Token: " + token.name);
	        }
	        this._values.push(value);
	        var rk = token.runtimeCacheKey;
	        if (lang_1.isPresent(rk)) {
	            this._valueMap.set(rk, value);
	        }
	        var ak = token.assetCacheKey;
	        if (lang_1.isPresent(ak)) {
	            this._valueMap.set(ak, value);
	        }
	    };
	    CompileTokenMap.prototype.get = function (token) {
	        var rk = token.runtimeCacheKey;
	        var ak = token.assetCacheKey;
	        var result;
	        if (lang_1.isPresent(rk)) {
	            result = this._valueMap.get(rk);
	        }
	        if (lang_1.isBlank(result) && lang_1.isPresent(ak)) {
	            result = this._valueMap.get(ak);
	        }
	        return result;
	    };
	    CompileTokenMap.prototype.values = function () { return this._values; };
	    Object.defineProperty(CompileTokenMap.prototype, "size", {
	        get: function () { return this._values.length; },
	        enumerable: true,
	        configurable: true
	    });
	    return CompileTokenMap;
	}());
	exports.CompileTokenMap = CompileTokenMap;
	/**
	 * Metadata regarding compilation of a type.
	 */
	var CompileTypeMetadata = (function () {
	    function CompileTypeMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, value = _b.value, diDeps = _b.diDeps;
	        this.runtime = runtime;
	        this.name = name;
	        this.moduleUrl = moduleUrl;
	        this.prefix = prefix;
	        this.isHost = lang_1.normalizeBool(isHost);
	        this.value = value;
	        this.diDeps = _normalizeArray(diDeps);
	    }
	    CompileTypeMetadata.fromJson = function (data) {
	        return new CompileTypeMetadata({
	            name: data['name'],
	            moduleUrl: data['moduleUrl'],
	            prefix: data['prefix'],
	            isHost: data['isHost'],
	            value: data['value'],
	            diDeps: _arrayFromJson(data['diDeps'], CompileDiDependencyMetadata.fromJson)
	        });
	    };
	    Object.defineProperty(CompileTypeMetadata.prototype, "identifier", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CompileTypeMetadata.prototype, "type", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    CompileTypeMetadata.prototype.toJson = function () {
	        return {
	            // Note: Runtime type can't be serialized...
	            'class': 'Type',
	            'name': this.name,
	            'moduleUrl': this.moduleUrl,
	            'prefix': this.prefix,
	            'isHost': this.isHost,
	            'value': this.value,
	            'diDeps': _arrayToJson(this.diDeps)
	        };
	    };
	    return CompileTypeMetadata;
	}());
	exports.CompileTypeMetadata = CompileTypeMetadata;
	var CompileQueryMetadata = (function () {
	    function CompileQueryMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName, read = _b.read;
	        this.selectors = selectors;
	        this.descendants = lang_1.normalizeBool(descendants);
	        this.first = lang_1.normalizeBool(first);
	        this.propertyName = propertyName;
	        this.read = read;
	    }
	    CompileQueryMetadata.fromJson = function (data) {
	        return new CompileQueryMetadata({
	            selectors: _arrayFromJson(data['selectors'], CompileTokenMetadata.fromJson),
	            descendants: data['descendants'],
	            first: data['first'],
	            propertyName: data['propertyName'],
	            read: _objFromJson(data['read'], CompileTokenMetadata.fromJson)
	        });
	    };
	    CompileQueryMetadata.prototype.toJson = function () {
	        return {
	            'selectors': _arrayToJson(this.selectors),
	            'descendants': this.descendants,
	            'first': this.first,
	            'propertyName': this.propertyName,
	            'read': _objToJson(this.read)
	        };
	    };
	    return CompileQueryMetadata;
	}());
	exports.CompileQueryMetadata = CompileQueryMetadata;
	/**
	 * Metadata regarding compilation of a template.
	 */
	var CompileTemplateMetadata = (function () {
	    function CompileTemplateMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;
	        this.encapsulation = encapsulation;
	        this.template = template;
	        this.templateUrl = templateUrl;
	        this.styles = lang_1.isPresent(styles) ? styles : [];
	        this.styleUrls = lang_1.isPresent(styleUrls) ? styleUrls : [];
	        this.animations = lang_1.isPresent(animations) ? collection_1.ListWrapper.flatten(animations) : [];
	        this.ngContentSelectors = lang_1.isPresent(ngContentSelectors) ? ngContentSelectors : [];
	        if (lang_1.isPresent(interpolation) && interpolation.length != 2) {
	            throw new exceptions_1.BaseException("'interpolation' should have a start and an end symbol.");
	        }
	        this.interpolation = interpolation;
	    }
	    CompileTemplateMetadata.fromJson = function (data) {
	        var animations = _arrayFromJson(data['animations'], metadataFromJson);
	        return new CompileTemplateMetadata({
	            encapsulation: lang_1.isPresent(data['encapsulation']) ?
	                core_private_1.VIEW_ENCAPSULATION_VALUES[data['encapsulation']] :
	                data['encapsulation'],
	            template: data['template'],
	            templateUrl: data['templateUrl'],
	            styles: data['styles'],
	            styleUrls: data['styleUrls'],
	            animations: animations,
	            ngContentSelectors: data['ngContentSelectors'],
	            interpolation: data['interpolation']
	        });
	    };
	    CompileTemplateMetadata.prototype.toJson = function () {
	        return {
	            'encapsulation': lang_1.isPresent(this.encapsulation) ? lang_1.serializeEnum(this.encapsulation) :
	                this.encapsulation,
	            'template': this.template,
	            'templateUrl': this.templateUrl,
	            'styles': this.styles,
	            'styleUrls': this.styleUrls,
	            'animations': _objToJson(this.animations),
	            'ngContentSelectors': this.ngContentSelectors,
	            'interpolation': this.interpolation
	        };
	    };
	    return CompileTemplateMetadata;
	}());
	exports.CompileTemplateMetadata = CompileTemplateMetadata;
	/**
	 * Metadata regarding compilation of a directive.
	 */
	var CompileDirectiveMetadata = (function () {
	    function CompileDirectiveMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
	        this.type = type;
	        this.isComponent = isComponent;
	        this.selector = selector;
	        this.exportAs = exportAs;
	        this.changeDetection = changeDetection;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.lifecycleHooks = _normalizeArray(lifecycleHooks);
	        this.providers = _normalizeArray(providers);
	        this.viewProviders = _normalizeArray(viewProviders);
	        this.queries = _normalizeArray(queries);
	        this.viewQueries = _normalizeArray(viewQueries);
	        this.template = template;
	    }
	    CompileDirectiveMetadata.create = function (_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
	        var hostListeners = {};
	        var hostProperties = {};
	        var hostAttributes = {};
	        if (lang_1.isPresent(host)) {
	            collection_1.StringMapWrapper.forEach(host, function (value, key) {
	                var matches = lang_1.RegExpWrapper.firstMatch(HOST_REG_EXP, key);
	                if (lang_1.isBlank(matches)) {
	                    hostAttributes[key] = value;
	                }
	                else if (lang_1.isPresent(matches[1])) {
	                    hostProperties[matches[1]] = value;
	                }
	                else if (lang_1.isPresent(matches[2])) {
	                    hostListeners[matches[2]] = value;
	                }
	            });
	        }
	        var inputsMap = {};
	        if (lang_1.isPresent(inputs)) {
	            inputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                inputsMap[parts[0]] = parts[1];
	            });
	        }
	        var outputsMap = {};
	        if (lang_1.isPresent(outputs)) {
	            outputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                outputsMap[parts[0]] = parts[1];
	            });
	        }
	        return new CompileDirectiveMetadata({
	            type: type,
	            isComponent: lang_1.normalizeBool(isComponent),
	            selector: selector,
	            exportAs: exportAs,
	            changeDetection: changeDetection,
	            inputs: inputsMap,
	            outputs: outputsMap,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            lifecycleHooks: lang_1.isPresent(lifecycleHooks) ? lifecycleHooks : [],
	            providers: providers,
	            viewProviders: viewProviders,
	            queries: queries,
	            viewQueries: viewQueries,
	            template: template
	        });
	    };
	    Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
	        get: function () { return this.type; },
	        enumerable: true,
	        configurable: true
	    });
	    CompileDirectiveMetadata.fromJson = function (data) {
	        return new CompileDirectiveMetadata({
	            isComponent: data['isComponent'],
	            selector: data['selector'],
	            exportAs: data['exportAs'],
	            type: lang_1.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
	            changeDetection: lang_1.isPresent(data['changeDetection']) ?
	                core_private_1.CHANGE_DETECTION_STRATEGY_VALUES[data['changeDetection']] :
	                data['changeDetection'],
	            inputs: data['inputs'],
	            outputs: data['outputs'],
	            hostListeners: data['hostListeners'],
	            hostProperties: data['hostProperties'],
	            hostAttributes: data['hostAttributes'],
	            lifecycleHooks: data['lifecycleHooks'].map(function (hookValue) { return core_private_1.LIFECYCLE_HOOKS_VALUES[hookValue]; }),
	            template: lang_1.isPresent(data['template']) ? CompileTemplateMetadata.fromJson(data['template']) :
	                data['template'],
	            providers: _arrayFromJson(data['providers'], metadataFromJson),
	            viewProviders: _arrayFromJson(data['viewProviders'], metadataFromJson),
	            queries: _arrayFromJson(data['queries'], CompileQueryMetadata.fromJson),
	            viewQueries: _arrayFromJson(data['viewQueries'], CompileQueryMetadata.fromJson)
	        });
	    };
	    CompileDirectiveMetadata.prototype.toJson = function () {
	        return {
	            'class': 'Directive',
	            'isComponent': this.isComponent,
	            'selector': this.selector,
	            'exportAs': this.exportAs,
	            'type': lang_1.isPresent(this.type) ? this.type.toJson() : this.type,
	            'changeDetection': lang_1.isPresent(this.changeDetection) ? lang_1.serializeEnum(this.changeDetection) :
	                this.changeDetection,
	            'inputs': this.inputs,
	            'outputs': this.outputs,
	            'hostListeners': this.hostListeners,
	            'hostProperties': this.hostProperties,
	            'hostAttributes': this.hostAttributes,
	            'lifecycleHooks': this.lifecycleHooks.map(function (hook) { return lang_1.serializeEnum(hook); }),
	            'template': lang_1.isPresent(this.template) ? this.template.toJson() : this.template,
	            'providers': _arrayToJson(this.providers),
	            'viewProviders': _arrayToJson(this.viewProviders),
	            'queries': _arrayToJson(this.queries),
	            'viewQueries': _arrayToJson(this.viewQueries)
	        };
	    };
	    return CompileDirectiveMetadata;
	}());
	exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	/**
	 * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
	 */
	function createHostComponentMeta(componentType, componentSelector) {
	    var template = selector_1.CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
	    return CompileDirectiveMetadata.create({
	        type: new CompileTypeMetadata({
	            runtime: Object,
	            name: componentType.name + "_Host",
	            moduleUrl: componentType.moduleUrl,
	            isHost: true
	        }),
	        template: new CompileTemplateMetadata({
	            template: template,
	            templateUrl: '',
	            styles: [],
	            styleUrls: [],
	            ngContentSelectors: [],
	            animations: []
	        }),
	        changeDetection: core_1.ChangeDetectionStrategy.Default,
	        inputs: [],
	        outputs: [],
	        host: {},
	        lifecycleHooks: [],
	        isComponent: true,
	        selector: '*',
	        providers: [],
	        viewProviders: [],
	        queries: [],
	        viewQueries: []
	    });
	}
	exports.createHostComponentMeta = createHostComponentMeta;
	var CompilePipeMetadata = (function () {
	    function CompilePipeMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure, lifecycleHooks = _b.lifecycleHooks;
	        this.type = type;
	        this.name = name;
	        this.pure = lang_1.normalizeBool(pure);
	        this.lifecycleHooks = _normalizeArray(lifecycleHooks);
	    }
	    Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
	        get: function () { return this.type; },
	        enumerable: true,
	        configurable: true
	    });
	    CompilePipeMetadata.fromJson = function (data) {
	        return new CompilePipeMetadata({
	            type: lang_1.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
	            name: data['name'],
	            pure: data['pure']
	        });
	    };
	    CompilePipeMetadata.prototype.toJson = function () {
	        return {
	            'class': 'Pipe',
	            'type': lang_1.isPresent(this.type) ? this.type.toJson() : null,
	            'name': this.name,
	            'pure': this.pure
	        };
	    };
	    return CompilePipeMetadata;
	}());
	exports.CompilePipeMetadata = CompilePipeMetadata;
	var _COMPILE_METADATA_FROM_JSON = {
	    'Directive': CompileDirectiveMetadata.fromJson,
	    'Pipe': CompilePipeMetadata.fromJson,
	    'Type': CompileTypeMetadata.fromJson,
	    'Provider': CompileProviderMetadata.fromJson,
	    'Identifier': CompileIdentifierMetadata.fromJson,
	    'Factory': CompileFactoryMetadata.fromJson,
	    'AnimationEntryMetadata': CompileAnimationEntryMetadata.fromJson,
	    'AnimationStateDeclarationMetadata': CompileAnimationStateDeclarationMetadata.fromJson,
	    'AnimationStateTransitionMetadata': CompileAnimationStateTransitionMetadata.fromJson,
	    'AnimationSequenceMetadata': CompileAnimationSequenceMetadata.fromJson,
	    'AnimationGroupMetadata': CompileAnimationGroupMetadata.fromJson,
	    'AnimationAnimateMetadata': CompileAnimationAnimateMetadata.fromJson,
	    'AnimationStyleMetadata': CompileAnimationStyleMetadata.fromJson,
	    'AnimationKeyframesSequenceMetadata': CompileAnimationKeyframesSequenceMetadata.fromJson
	};
	function _arrayFromJson(obj, fn) {
	    return lang_1.isBlank(obj) ? null : obj.map(function (o) { return _objFromJson(o, fn); });
	}
	function _arrayToJson(obj) {
	    return lang_1.isBlank(obj) ? null : obj.map(_objToJson);
	}
	function _objFromJson(obj, fn) {
	    if (lang_1.isArray(obj))
	        return _arrayFromJson(obj, fn);
	    if (lang_1.isString(obj) || lang_1.isBlank(obj) || lang_1.isBoolean(obj) || lang_1.isNumber(obj))
	        return obj;
	    return fn(obj);
	}
	function _objToJson(obj) {
	    if (lang_1.isArray(obj))
	        return _arrayToJson(obj);
	    if (lang_1.isString(obj) || lang_1.isBlank(obj) || lang_1.isBoolean(obj) || lang_1.isNumber(obj))
	        return obj;
	    return obj.toJson();
	}
	function _normalizeArray(obj) {
	    return lang_1.isPresent(obj) ? obj : [];
	}
	//# sourceMappingURL=compile_metadata.js.map

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var lang_1 = __webpack_require__(10);
	var _ASSET_SCHEME = 'asset:';
	/**
	 * Create a {@link UrlResolver} with no package prefix.
	 */
	function createUrlResolverWithoutPackagePrefix() {
	    return new UrlResolver();
	}
	exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
	function createOfflineCompileUrlResolver() {
	    return new UrlResolver(_ASSET_SCHEME);
	}
	exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	/**
	 * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	 */
	exports.DEFAULT_PACKAGE_URL_PROVIDER = {
	    provide: core_1.PACKAGE_ROOT_URL,
	    useValue: '/'
	};
	var UrlResolver = (function () {
	    function UrlResolver(_packagePrefix) {
	        if (_packagePrefix === void 0) { _packagePrefix = null; }
	        this._packagePrefix = _packagePrefix;
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`:
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	     * returned as is (ignoring the `baseUrl`)
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) {
	        var resolvedUrl = url;
	        if (lang_1.isPresent(baseUrl) && baseUrl.length > 0) {
	            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	        }
	        var resolvedParts = _split(resolvedUrl);
	        var prefix = this._packagePrefix;
	        if (lang_1.isPresent(prefix) && lang_1.isPresent(resolvedParts) &&
	            resolvedParts[_ComponentIndex.Scheme] == 'package') {
	            var path = resolvedParts[_ComponentIndex.Path];
	            if (this._packagePrefix === _ASSET_SCHEME) {
	                var pathSegements = path.split(/\//);
	                resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
	            }
	            else {
	                prefix = lang_1.StringWrapper.stripRight(prefix, '/');
	                path = lang_1.StringWrapper.stripLeft(path, '/');
	                return prefix + "/" + path;
	            }
	        }
	        return resolvedUrl;
	    };
	    /** @nocollapse */
	    UrlResolver.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    UrlResolver.ctorParameters = [
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.PACKAGE_ROOT_URL,] },] },
	    ];
	    return UrlResolver;
	}());
	exports.UrlResolver = UrlResolver;
	/**
	 * Extract the scheme of a URL.
	 */
	function getUrlScheme(url) {
	    var match = _split(url);
	    return (match && match[_ComponentIndex.Scheme]) || '';
	}
	exports.getUrlScheme = getUrlScheme;
	// The code below is adapted from Traceur:
	// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
	/**
	 * Builds a URI string from already-encoded parts.
	 *
	 * No encoding is performed.  Any component may be omitted as either null or
	 * undefined.
	 *
	 * @param opt_scheme The scheme such as 'http'.
	 * @param opt_userInfo The user name before the '@'.
	 * @param opt_domain The domain such as 'www.google.com', already
	 *     URI-encoded.
	 * @param opt_port The port number.
	 * @param opt_path The path, already URI-encoded.  If it is not
	 *     empty, it must begin with a slash.
	 * @param opt_queryData The URI-encoded query data.
	 * @param opt_fragment The URI-encoded fragment identifier.
	 * @return The fully combined URI.
	 */
	function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var out = [];
	    if (lang_1.isPresent(opt_scheme)) {
	        out.push(opt_scheme + ':');
	    }
	    if (lang_1.isPresent(opt_domain)) {
	        out.push('//');
	        if (lang_1.isPresent(opt_userInfo)) {
	            out.push(opt_userInfo + '@');
	        }
	        out.push(opt_domain);
	        if (lang_1.isPresent(opt_port)) {
	            out.push(':' + opt_port);
	        }
	    }
	    if (lang_1.isPresent(opt_path)) {
	        out.push(opt_path);
	    }
	    if (lang_1.isPresent(opt_queryData)) {
	        out.push('?' + opt_queryData);
	    }
	    if (lang_1.isPresent(opt_fragment)) {
	        out.push('#' + opt_fragment);
	    }
	    return out.join('');
	}
	/**
	 * A regular expression for breaking a URI into its component parts.
	 *
	 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	 * As the "first-match-wins" algorithm is identical to the "greedy"
	 * disambiguation method used by POSIX regular expressions, it is natural and
	 * commonplace to use a regular expression for parsing the potential five
	 * components of a URI reference.
	 *
	 * The following line is the regular expression for breaking-down a
	 * well-formed URI reference into its components.
	 *
	 * <pre>
	 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	 *  12            3  4          5       6  7        8 9
	 * </pre>
	 *
	 * The numbers in the second line above are only to assist readability; they
	 * indicate the reference points for each subexpression (i.e., each paired
	 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	 * For example, matching the above expression to
	 * <pre>
	 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	 * </pre>
	 * results in the following subexpression matches:
	 * <pre>
	 *    $1 = http:
	 *    $2 = http
	 *    $3 = //www.ics.uci.edu
	 *    $4 = www.ics.uci.edu
	 *    $5 = /pub/ietf/uri/
	 *    $6 = <undefined>
	 *    $7 = <undefined>
	 *    $8 = #Related
	 *    $9 = Related
	 * </pre>
	 * where <undefined> indicates that the component is not present, as is the
	 * case for the query component in the above example. Therefore, we can
	 * determine the value of the five components as
	 * <pre>
	 *    scheme    = $2
	 *    authority = $4
	 *    path      = $5
	 *    query     = $7
	 *    fragment  = $9
	 * </pre>
	 *
	 * The regular expression has been modified slightly to expose the
	 * userInfo, domain, and port separately from the authority.
	 * The modified version yields
	 * <pre>
	 *    $1 = http              scheme
	 *    $2 = <undefined>       userInfo -\
	 *    $3 = www.ics.uci.edu   domain     | authority
	 *    $4 = <undefined>       port     -/
	 *    $5 = /pub/ietf/uri/    path
	 *    $6 = <undefined>       query without ?
	 *    $7 = Related           fragment without #
	 * </pre>
	 * @type {!RegExp}
	 * @internal
	 */
	var _splitRe = lang_1.RegExpWrapper.create('^' +
	    '(?:' +
	    '([^:/?#.]+)' +
	    // used by other URL parts such as :,
	    // ?, /, #, and .
	    ':)?' +
	    '(?://' +
	    '(?:([^/?#]*)@)?' +
	    '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	    // digits, dashes, dots, percent
	    // escapes, and unicode characters.
	    '(?::([0-9]+))?' +
	    ')?' +
	    '([^?#]+)?' +
	    '(?:\\?([^#]*))?' +
	    '(?:#(.*))?' +
	    '$');
	/**
	 * The index of each URI component in the return value of goog.uri.utils.split.
	 * @enum {number}
	 */
	var _ComponentIndex;
	(function (_ComponentIndex) {
	    _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
	    _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
	    _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
	    _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
	    _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
	    _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
	    _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
	})(_ComponentIndex || (_ComponentIndex = {}));
	/**
	 * Splits a URI into its component parts.
	 *
	 * Each component can be accessed via the component indices; for example:
	 * <pre>
	 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	 * </pre>
	 *
	 * @param uri The URI string to examine.
	 * @return Each component still URI-encoded.
	 *     Each component that is present will contain the encoded value, whereas
	 *     components that are not present will be undefined or empty, depending
	 *     on the browser's regular expression implementation.  Never null, since
	 *     arbitrary strings may still look like path names.
	 */
	function _split(uri) {
	    return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
	}
	/**
	  * Removes dot segments in given path component, as described in
	  * RFC 3986, section 5.2.4.
	  *
	  * @param path A non-empty path component.
	  * @return Path component with removed dot segments.
	  */
	function _removeDotSegments(path) {
	    if (path == '/')
	        return '/';
	    var leadingSlash = path[0] == '/' ? '/' : '';
	    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	    var segments = path.split('/');
	    var out = [];
	    var up = 0;
	    for (var pos = 0; pos < segments.length; pos++) {
	        var segment = segments[pos];
	        switch (segment) {
	            case '':
	            case '.':
	                break;
	            case '..':
	                if (out.length > 0) {
	                    out.pop();
	                }
	                else {
	                    up++;
	                }
	                break;
	            default:
	                out.push(segment);
	        }
	    }
	    if (leadingSlash == '') {
	        while (up-- > 0) {
	            out.unshift('..');
	        }
	        if (out.length === 0)
	            out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	}
	/**
	 * Takes an array of the parts from split and canonicalizes the path part
	 * and then joins all the parts.
	 */
	function _joinAndCanonicalizePath(parts) {
	    var path = parts[_ComponentIndex.Path];
	    path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
	    parts[_ComponentIndex.Path] = path;
	    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	}
	/**
	 * Resolves a URL.
	 * @param base The URL acting as the base URL.
	 * @param to The URL to resolve.
	 */
	function _resolveUrl(base, url) {
	    var parts = _split(encodeURI(url));
	    var baseParts = _split(base);
	    if (lang_1.isPresent(parts[_ComponentIndex.Scheme])) {
	        return _joinAndCanonicalizePath(parts);
	    }
	    else {
	        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	    }
	    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	        if (lang_1.isBlank(parts[i])) {
	            parts[i] = baseParts[i];
	        }
	    }
	    if (parts[_ComponentIndex.Path][0] == '/') {
	        return _joinAndCanonicalizePath(parts);
	    }
	    var path = baseParts[_ComponentIndex.Path];
	    if (lang_1.isBlank(path))
	        path = '/';
	    var index = path.lastIndexOf('/');
	    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	    parts[_ComponentIndex.Path] = path;
	    return _joinAndCanonicalizePath(parts);
	}
	//# sourceMappingURL=url_resolver.js.map

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var compile_metadata_1 = __webpack_require__(33);
	var identifiers_1 = __webpack_require__(32);
	var parse_util_1 = __webpack_require__(26);
	var template_ast_1 = __webpack_require__(9);
	var ProviderError = (function (_super) {
	    __extends(ProviderError, _super);
	    function ProviderError(message, span) {
	        _super.call(this, span, message);
	    }
	    return ProviderError;
	}(parse_util_1.ParseError));
	exports.ProviderError = ProviderError;
	var ProviderViewContext = (function () {
	    function ProviderViewContext(component, sourceSpan) {
	        var _this = this;
	        this.component = component;
	        this.sourceSpan = sourceSpan;
	        this.errors = [];
	        this.viewQueries = _getViewQueries(component);
	        this.viewProviders = new compile_metadata_1.CompileTokenMap();
	        _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function (provider) {
	            if (lang_1.isBlank(_this.viewProviders.get(provider.token))) {
	                _this.viewProviders.add(provider.token, true);
	            }
	        });
	    }
	    return ProviderViewContext;
	}());
	exports.ProviderViewContext = ProviderViewContext;
	var ProviderElementContext = (function () {
	    function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
	        var _this = this;
	        this._viewContext = _viewContext;
	        this._parent = _parent;
	        this._isViewRoot = _isViewRoot;
	        this._directiveAsts = _directiveAsts;
	        this._sourceSpan = _sourceSpan;
	        this._transformedProviders = new compile_metadata_1.CompileTokenMap();
	        this._seenProviders = new compile_metadata_1.CompileTokenMap();
	        this._hasViewContainer = false;
	        this._attrs = {};
	        attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	        var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	        this._allProviders =
	            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);
	        this._contentQueries = _getContentQueries(directivesMeta);
	        var queriedTokens = new compile_metadata_1.CompileTokenMap();
	        this._allProviders.values().forEach(function (provider) { _this._addQueryReadsTo(provider.token, queriedTokens); });
	        refs.forEach(function (refAst) {
	            _this._addQueryReadsTo(new compile_metadata_1.CompileTokenMetadata({ value: refAst.name }), queriedTokens);
	        });
	        if (lang_1.isPresent(queriedTokens.get(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef)))) {
	            this._hasViewContainer = true;
	        }
	        // create the providers that we know are eager first
	        this._allProviders.values().forEach(function (provider) {
	            var eager = provider.eager || lang_1.isPresent(queriedTokens.get(provider.token));
	            if (eager) {
	                _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	            }
	        });
	    }
	    ProviderElementContext.prototype.afterElement = function () {
	        var _this = this;
	        // collect lazy providers
	        this._allProviders.values().forEach(function (provider) {
	            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	        });
	    };
	    Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	        get: function () { return this._transformedProviders.values(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	        get: function () {
	            var sortedProviderTypes = this._transformedProviders.values().map(function (provider) { return provider.token.identifier; });
	            var sortedDirectives = collection_1.ListWrapper.clone(this._directiveAsts);
	            collection_1.ListWrapper.sort(sortedDirectives, function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                sortedProviderTypes.indexOf(dir2.directive.type); });
	            return sortedDirectives;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	        get: function () { return this._hasViewContainer; },
	        enumerable: true,
	        configurable: true
	    });
	    ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
	        this._getQueriesFor(token).forEach(function (query) {
	            var queryReadToken = lang_1.isPresent(query.read) ? query.read : token;
	            if (lang_1.isBlank(queryReadTokens.get(queryReadToken))) {
	                queryReadTokens.add(queryReadToken, true);
	            }
	        });
	    };
	    ProviderElementContext.prototype._getQueriesFor = function (token) {
	        var result = [];
	        var currentEl = this;
	        var distance = 0;
	        var queries;
	        while (currentEl !== null) {
	            queries = currentEl._contentQueries.get(token);
	            if (lang_1.isPresent(queries)) {
	                collection_1.ListWrapper.addAll(result, queries.filter(function (query) { return query.descendants || distance <= 1; }));
	            }
	            if (currentEl._directiveAsts.length > 0) {
	                distance++;
	            }
	            currentEl = currentEl._parent;
	        }
	        queries = this._viewContext.viewQueries.get(token);
	        if (lang_1.isPresent(queries)) {
	            collection_1.ListWrapper.addAll(result, queries);
	        }
	        return result;
	    };
	    ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	        var _this = this;
	        var resolvedProvider = this._allProviders.get(token);
	        if (lang_1.isBlank(resolvedProvider) ||
	            ((requestingProviderType === template_ast_1.ProviderAstType.Directive ||
	                requestingProviderType === template_ast_1.ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === template_ast_1.ProviderAstType.PrivateService) ||
	            ((requestingProviderType === template_ast_1.ProviderAstType.PrivateService ||
	                requestingProviderType === template_ast_1.ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === template_ast_1.ProviderAstType.Builtin)) {
	            return null;
	        }
	        var transformedProviderAst = this._transformedProviders.get(token);
	        if (lang_1.isPresent(transformedProviderAst)) {
	            return transformedProviderAst;
	        }
	        if (lang_1.isPresent(this._seenProviders.get(token))) {
	            this._viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
	            return null;
	        }
	        this._seenProviders.add(token, true);
	        var transformedProviders = resolvedProvider.providers.map(function (provider) {
	            var transformedUseValue = provider.useValue;
	            var transformedUseExisting = provider.useExisting;
	            var transformedDeps;
	            if (lang_1.isPresent(provider.useExisting)) {
	                var existingDiDep = _this._getDependency(resolvedProvider.providerType, new compile_metadata_1.CompileDiDependencyMetadata({ token: provider.useExisting }), eager);
	                if (lang_1.isPresent(existingDiDep.token)) {
	                    transformedUseExisting = existingDiDep.token;
	                }
	                else {
	                    transformedUseExisting = null;
	                    transformedUseValue = existingDiDep.value;
	                }
	            }
	            else if (lang_1.isPresent(provider.useFactory)) {
	                var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	            }
	            else if (lang_1.isPresent(provider.useClass)) {
	                var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	            }
	            return _transformProvider(provider, {
	                useExisting: transformedUseExisting,
	                useValue: transformedUseValue,
	                deps: transformedDeps
	            });
	        });
	        transformedProviderAst =
	            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	        this._transformedProviders.add(token, transformedProviderAst);
	        return transformedProviderAst;
	    };
	    ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = null; }
	        if (dep.isAttribute) {
	            var attrValue = this._attrs[dep.token.value];
	            return new compile_metadata_1.CompileDiDependencyMetadata({ isValue: true, value: lang_1.normalizeBlank(attrValue) });
	        }
	        if (lang_1.isPresent(dep.query) || lang_1.isPresent(dep.viewQuery)) {
	            return dep;
	        }
	        if (lang_1.isPresent(dep.token)) {
	            // access builtints
	            if ((requestingProviderType === template_ast_1.ProviderAstType.Directive ||
	                requestingProviderType === template_ast_1.ProviderAstType.Component)) {
	                if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Renderer)) ||
	                    dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ElementRef)) ||
	                    dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef)) ||
	                    dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef))) {
	                    return dep;
	                }
	                if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef))) {
	                    this._hasViewContainer = true;
	                }
	            }
	            // access the injector
	            if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector))) {
	                return dep;
	            }
	            // access providers
	            if (lang_1.isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
	                return dep;
	            }
	        }
	        return null;
	    };
	    ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = null; }
	        var currElement = this;
	        var currEager = eager;
	        var result = null;
	        if (!dep.isSkipSelf) {
	            result = this._getLocalDependency(requestingProviderType, dep, eager);
	        }
	        if (dep.isSelf) {
	            if (lang_1.isBlank(result) && dep.isOptional) {
	                result = new compile_metadata_1.CompileDiDependencyMetadata({ isValue: true, value: null });
	            }
	        }
	        else {
	            // check parent elements
	            while (lang_1.isBlank(result) && lang_1.isPresent(currElement._parent)) {
	                var prevElement = currElement;
	                currElement = currElement._parent;
	                if (prevElement._isViewRoot) {
	                    currEager = false;
	                }
	                result = currElement._getLocalDependency(template_ast_1.ProviderAstType.PublicService, dep, currEager);
	            }
	            // check @Host restriction
	            if (lang_1.isBlank(result)) {
	                if (!dep.isHost || this._viewContext.component.type.isHost ||
	                    identifiers_1.identifierToken(this._viewContext.component.type).equalsTo(dep.token) ||
	                    lang_1.isPresent(this._viewContext.viewProviders.get(dep.token))) {
	                    result = dep;
	                }
	                else {
	                    result = dep.isOptional ?
	                        result = new compile_metadata_1.CompileDiDependencyMetadata({ isValue: true, value: null }) :
	                        null;
	                }
	            }
	        }
	        if (lang_1.isBlank(result)) {
	            this._viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
	        }
	        return result;
	    };
	    return ProviderElementContext;
	}());
	exports.ProviderElementContext = ProviderElementContext;
	function _transformProvider(provider, _a) {
	    var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	    return new compile_metadata_1.CompileProviderMetadata({
	        token: provider.token,
	        useClass: provider.useClass,
	        useExisting: useExisting,
	        useFactory: provider.useFactory,
	        useValue: useValue,
	        deps: deps,
	        multi: provider.multi
	    });
	}
	function _transformProviderAst(provider, _a) {
	    var eager = _a.eager, providers = _a.providers;
	    return new template_ast_1.ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.sourceSpan);
	}
	function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
	    if (targetProviders === void 0) { targetProviders = null; }
	    if (lang_1.isBlank(targetProviders)) {
	        targetProviders = [];
	    }
	    if (lang_1.isPresent(providers)) {
	        providers.forEach(function (provider) {
	            if (lang_1.isArray(provider)) {
	                _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
	            }
	            else {
	                var normalizeProvider;
	                if (provider instanceof compile_metadata_1.CompileProviderMetadata) {
	                    normalizeProvider = provider;
	                }
	                else if (provider instanceof compile_metadata_1.CompileTypeMetadata) {
	                    normalizeProvider = new compile_metadata_1.CompileProviderMetadata({ token: new compile_metadata_1.CompileTokenMetadata({ identifier: provider }), useClass: provider });
	                }
	                else {
	                    targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
	                }
	                if (lang_1.isPresent(normalizeProvider)) {
	                    targetProviders.push(normalizeProvider);
	                }
	            }
	        });
	    }
	    return targetProviders;
	}
	function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	    var providersByToken = new compile_metadata_1.CompileTokenMap();
	    directives.forEach(function (directive) {
	        var dirProvider = new compile_metadata_1.CompileProviderMetadata({ token: new compile_metadata_1.CompileTokenMetadata({ identifier: directive.type }), useClass: directive.type });
	        _resolveProviders([dirProvider], directive.isComponent ? template_ast_1.ProviderAstType.Component : template_ast_1.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	    });
	    // Note: directives need to be able to overwrite providers of a component!
	    var directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	    directivesWithComponentFirst.forEach(function (directive) {
	        _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), template_ast_1.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	        _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), template_ast_1.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	    });
	    return providersByToken;
	}
	function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	    providers.forEach(function (provider) {
	        var resolvedProvider = targetProvidersByToken.get(provider.token);
	        if (lang_1.isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
	            targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
	        }
	        if (lang_1.isBlank(resolvedProvider)) {
	            resolvedProvider = new template_ast_1.ProviderAst(provider.token, provider.multi, eager, [provider], providerType, sourceSpan);
	            targetProvidersByToken.add(provider.token, resolvedProvider);
	        }
	        else {
	            if (!provider.multi) {
	                collection_1.ListWrapper.clear(resolvedProvider.providers);
	            }
	            resolvedProvider.providers.push(provider);
	        }
	    });
	}
	function _getViewQueries(component) {
	    var viewQueries = new compile_metadata_1.CompileTokenMap();
	    if (lang_1.isPresent(component.viewQueries)) {
	        component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query); });
	    }
	    component.type.diDeps.forEach(function (dep) {
	        if (lang_1.isPresent(dep.viewQuery)) {
	            _addQueryToTokenMap(viewQueries, dep.viewQuery);
	        }
	    });
	    return viewQueries;
	}
	function _getContentQueries(directives) {
	    var contentQueries = new compile_metadata_1.CompileTokenMap();
	    directives.forEach(function (directive) {
	        if (lang_1.isPresent(directive.queries)) {
	            directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query); });
	        }
	        directive.type.diDeps.forEach(function (dep) {
	            if (lang_1.isPresent(dep.query)) {
	                _addQueryToTokenMap(contentQueries, dep.query);
	            }
	        });
	    });
	    return contentQueries;
	}
	function _addQueryToTokenMap(map, query) {
	    query.selectors.forEach(function (token) {
	        var entry = map.get(token);
	        if (lang_1.isBlank(entry)) {
	            entry = [];
	            map.add(token, entry);
	        }
	        entry.push(query);
	    });
	}
	//# sourceMappingURL=provider_parser.js.map

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var exceptions_1 = __webpack_require__(14);
	var identifiers_1 = __webpack_require__(32);
	var CompilerConfig = (function () {
	    function CompilerConfig(_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? core_1.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e, _f = _b.platformDirectives, platformDirectives = _f === void 0 ? [] : _f, _g = _b.platformPipes, platformPipes = _g === void 0 ? [] : _g;
	        this.renderTypes = renderTypes;
	        this.defaultEncapsulation = defaultEncapsulation;
	        this._genDebugInfo = genDebugInfo;
	        this._logBindingUpdate = logBindingUpdate;
	        this.useJit = useJit;
	        this.platformDirectives = platformDirectives;
	        this.platformPipes = platformPipes;
	    }
	    Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
	        get: function () {
	            return this._genDebugInfo === void 0 ? core_1.isDevMode() : this._genDebugInfo;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
	        get: function () {
	            return this._logBindingUpdate === void 0 ? core_1.isDevMode() : this._logBindingUpdate;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CompilerConfig;
	}());
	exports.CompilerConfig = CompilerConfig;
	/**
	 * Types used for the renderer.
	 * Can be replaced to specialize the generated output to a specific renderer
	 * to help tree shaking.
	 */
	var RenderTypes = (function () {
	    function RenderTypes() {
	    }
	    Object.defineProperty(RenderTypes.prototype, "renderer", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderTypes.prototype, "renderText", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderTypes.prototype, "renderElement", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderTypes.prototype, "renderComment", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderTypes.prototype, "renderNode", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderTypes.prototype, "renderEvent", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return RenderTypes;
	}());
	exports.RenderTypes = RenderTypes;
	var DefaultRenderTypes = (function () {
	    function DefaultRenderTypes() {
	        this.renderer = identifiers_1.Identifiers.Renderer;
	        this.renderText = null;
	        this.renderElement = null;
	        this.renderComment = null;
	        this.renderNode = null;
	        this.renderEvent = null;
	    }
	    return DefaultRenderTypes;
	}());
	exports.DefaultRenderTypes = DefaultRenderTypes;
	//# sourceMappingURL=config.js.map

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var compile_metadata_1 = __webpack_require__(33);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var o = __webpack_require__(38);
	var util_1 = __webpack_require__(31);
	var _COMPONENT_FACTORY_IDENTIFIER = new compile_metadata_1.CompileIdentifierMetadata({
	    name: 'ComponentFactory',
	    runtime: core_1.ComponentFactory,
	    moduleUrl: util_1.assetUrl('core', 'linker/component_factory')
	});
	var SourceModule = (function () {
	    function SourceModule(moduleUrl, source) {
	        this.moduleUrl = moduleUrl;
	        this.source = source;
	    }
	    return SourceModule;
	}());
	exports.SourceModule = SourceModule;
	var StyleSheetSourceWithImports = (function () {
	    function StyleSheetSourceWithImports(source, importedUrls) {
	        this.source = source;
	        this.importedUrls = importedUrls;
	    }
	    return StyleSheetSourceWithImports;
	}());
	exports.StyleSheetSourceWithImports = StyleSheetSourceWithImports;
	var NormalizedComponentWithViewDirectives = (function () {
	    function NormalizedComponentWithViewDirectives(component, directives, pipes) {
	        this.component = component;
	        this.directives = directives;
	        this.pipes = pipes;
	    }
	    return NormalizedComponentWithViewDirectives;
	}());
	exports.NormalizedComponentWithViewDirectives = NormalizedComponentWithViewDirectives;
	var OfflineCompiler = (function () {
	    function OfflineCompiler(_directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _outputEmitter, _xhr) {
	        this._directiveNormalizer = _directiveNormalizer;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._outputEmitter = _outputEmitter;
	        this._xhr = _xhr;
	    }
	    OfflineCompiler.prototype.normalizeDirectiveMetadata = function (directive) {
	        return this._directiveNormalizer.normalizeDirective(directive);
	    };
	    OfflineCompiler.prototype.compileTemplates = function (components) {
	        var _this = this;
	        if (components.length === 0) {
	            throw new exceptions_1.BaseException('No components given');
	        }
	        var statements = [];
	        var exportedVars = [];
	        var moduleUrl = _templateModuleUrl(components[0].component);
	        components.forEach(function (componentWithDirs) {
	            var compMeta = componentWithDirs.component;
	            _assertComponent(compMeta);
	            var compViewFactoryVar = _this._compileComponent(compMeta, componentWithDirs.directives, componentWithDirs.pipes, statements);
	            exportedVars.push(compViewFactoryVar);
	            var hostMeta = compile_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
	            var hostViewFactoryVar = _this._compileComponent(hostMeta, [compMeta], [], statements);
	            var compFactoryVar = compMeta.type.name + "NgFactory";
	            statements.push(o.variable(compFactoryVar)
	                .set(o.importExpr(_COMPONENT_FACTORY_IDENTIFIER, [o.importType(compMeta.type)])
	                .instantiate([
	                o.literal(compMeta.selector), o.variable(hostViewFactoryVar),
	                o.importExpr(compMeta.type)
	            ], o.importType(_COMPONENT_FACTORY_IDENTIFIER, [o.importType(compMeta.type)], [o.TypeModifier.Const])))
	                .toDeclStmt(null, [o.StmtModifier.Final]));
	            exportedVars.push(compFactoryVar);
	        });
	        return this._codegenSourceModule(moduleUrl, statements, exportedVars);
	    };
	    OfflineCompiler.prototype.loadAndCompileStylesheet = function (stylesheetUrl, shim, suffix) {
	        var _this = this;
	        return this._xhr.get(stylesheetUrl).then(function (cssText) {
	            var compileResult = _this._styleCompiler.compileStylesheet(stylesheetUrl, cssText, shim);
	            var importedUrls = [];
	            compileResult.dependencies.forEach(function (dep) {
	                importedUrls.push(dep.moduleUrl);
	                dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, suffix);
	            });
	            return new StyleSheetSourceWithImports(_this._codgenStyles(stylesheetUrl, shim, suffix, compileResult), importedUrls);
	        });
	    };
	    OfflineCompiler.prototype._compileComponent = function (compMeta, directives, pipes, targetStatements) {
	        var styleResult = this._styleCompiler.compileComponent(compMeta);
	        var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, compMeta.type.name);
	        var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, o.variable(styleResult.stylesVar), pipes);
	        collection_1.ListWrapper.addAll(targetStatements, _resolveStyleStatements(compMeta.type.moduleUrl, styleResult));
	        collection_1.ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult));
	        return viewResult.viewFactoryVar;
	    };
	    OfflineCompiler.prototype._codgenStyles = function (inputUrl, shim, suffix, stylesCompileResult) {
	        return this._codegenSourceModule(_stylesModuleUrl(inputUrl, shim, suffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	    };
	    OfflineCompiler.prototype._codegenSourceModule = function (moduleUrl, statements, exportedVars) {
	        return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
	    };
	    return OfflineCompiler;
	}());
	exports.OfflineCompiler = OfflineCompiler;
	function _resolveViewStatements(compileResult) {
	    compileResult.dependencies.forEach(function (dep) { dep.factoryPlaceholder.moduleUrl = _templateModuleUrl(dep.comp); });
	    return compileResult.statements;
	}
	function _resolveStyleStatements(containingModuleUrl, compileResult) {
	    var containingSuffix = _splitSuffix(containingModuleUrl)[1];
	    compileResult.dependencies.forEach(function (dep) {
	        dep.valuePlaceholder.moduleUrl =
	            _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, containingSuffix);
	    });
	    return compileResult.statements;
	}
	function _templateModuleUrl(comp) {
	    var urlWithSuffix = _splitSuffix(comp.type.moduleUrl);
	    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	}
	function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	    return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
	}
	function _assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
	    }
	}
	function _splitSuffix(path) {
	    var lastDot = path.lastIndexOf('.');
	    if (lastDot !== -1) {
	        return [path.substring(0, lastDot), path.substring(lastDot)];
	    }
	    else {
	        return [path, ''];
	    }
	}
	//# sourceMappingURL=offline_compiler.js.map

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	//// Types
	(function (TypeModifier) {
	    TypeModifier[TypeModifier["Const"] = 0] = "Const";
	})(exports.TypeModifier || (exports.TypeModifier = {}));
	var TypeModifier = exports.TypeModifier;
	var Type = (function () {
	    function Type(modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        this.modifiers = modifiers;
	        if (lang_1.isBlank(modifiers)) {
	            this.modifiers = [];
	        }
	    }
	    Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	    return Type;
	}());
	exports.Type = Type;
	(function (BuiltinTypeName) {
	    BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
	    BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
	    BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
	    BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
	    BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
	    BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
	})(exports.BuiltinTypeName || (exports.BuiltinTypeName = {}));
	var BuiltinTypeName = exports.BuiltinTypeName;
	var BuiltinType = (function (_super) {
	    __extends(BuiltinType, _super);
	    function BuiltinType(name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, modifiers);
	        this.name = name;
	    }
	    BuiltinType.prototype.visitType = function (visitor, context) {
	        return visitor.visitBuiltintType(this, context);
	    };
	    return BuiltinType;
	}(Type));
	exports.BuiltinType = BuiltinType;
	var ExternalType = (function (_super) {
	    __extends(ExternalType, _super);
	    function ExternalType(value, typeParams, modifiers) {
	        if (typeParams === void 0) { typeParams = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, modifiers);
	        this.value = value;
	        this.typeParams = typeParams;
	    }
	    ExternalType.prototype.visitType = function (visitor, context) {
	        return visitor.visitExternalType(this, context);
	    };
	    return ExternalType;
	}(Type));
	exports.ExternalType = ExternalType;
	var ArrayType = (function (_super) {
	    __extends(ArrayType, _super);
	    function ArrayType(of, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, modifiers);
	        this.of = of;
	    }
	    ArrayType.prototype.visitType = function (visitor, context) {
	        return visitor.visitArrayType(this, context);
	    };
	    return ArrayType;
	}(Type));
	exports.ArrayType = ArrayType;
	var MapType = (function (_super) {
	    __extends(MapType, _super);
	    function MapType(valueType, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, modifiers);
	        this.valueType = valueType;
	    }
	    MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	    return MapType;
	}(Type));
	exports.MapType = MapType;
	exports.DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	exports.BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	exports.INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	exports.NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	exports.STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	exports.FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	///// Expressions
	(function (BinaryOperator) {
	    BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
	    BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
	    BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
	    BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
	    BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
	    BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
	    BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
	    BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
	    BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
	    BinaryOperator[BinaryOperator["And"] = 9] = "And";
	    BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
	    BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
	    BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
	    BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
	    BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
	})(exports.BinaryOperator || (exports.BinaryOperator = {}));
	var BinaryOperator = exports.BinaryOperator;
	var Expression = (function () {
	    function Expression(type) {
	        this.type = type;
	    }
	    Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name); };
	    Expression.prototype.key = function (index, type) {
	        if (type === void 0) { type = null; }
	        return new ReadKeyExpr(this, index, type);
	    };
	    Expression.prototype.callMethod = function (name, params) {
	        return new InvokeMethodExpr(this, name, params);
	    };
	    Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params); };
	    Expression.prototype.instantiate = function (params, type) {
	        if (type === void 0) { type = null; }
	        return new InstantiateExpr(this, params, type);
	    };
	    Expression.prototype.conditional = function (trueCase, falseCase) {
	        if (falseCase === void 0) { falseCase = null; }
	        return new ConditionalExpr(this, trueCase, falseCase);
	    };
	    Expression.prototype.equals = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
	    };
	    Expression.prototype.notEquals = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
	    };
	    Expression.prototype.identical = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
	    };
	    Expression.prototype.notIdentical = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
	    };
	    Expression.prototype.minus = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
	    };
	    Expression.prototype.plus = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
	    };
	    Expression.prototype.divide = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
	    };
	    Expression.prototype.multiply = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
	    };
	    Expression.prototype.modulo = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
	    };
	    Expression.prototype.and = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
	    };
	    Expression.prototype.or = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
	    };
	    Expression.prototype.lower = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
	    };
	    Expression.prototype.lowerEquals = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
	    };
	    Expression.prototype.bigger = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
	    };
	    Expression.prototype.biggerEquals = function (rhs) {
	        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
	    };
	    Expression.prototype.isBlank = function () {
	        // Note: We use equals by purpose here to compare to null and undefined in JS.
	        return this.equals(exports.NULL_EXPR);
	    };
	    Expression.prototype.cast = function (type) { return new CastExpr(this, type); };
	    Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };
	    return Expression;
	}());
	exports.Expression = Expression;
	(function (BuiltinVar) {
	    BuiltinVar[BuiltinVar["This"] = 0] = "This";
	    BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
	    BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
	    BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
	})(exports.BuiltinVar || (exports.BuiltinVar = {}));
	var BuiltinVar = exports.BuiltinVar;
	var ReadVarExpr = (function (_super) {
	    __extends(ReadVarExpr, _super);
	    function ReadVarExpr(name, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        if (lang_1.isString(name)) {
	            this.name = name;
	            this.builtin = null;
	        }
	        else {
	            this.name = null;
	            this.builtin = name;
	        }
	    }
	    ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadVarExpr(this, context);
	    };
	    ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value); };
	    return ReadVarExpr;
	}(Expression));
	exports.ReadVarExpr = ReadVarExpr;
	var WriteVarExpr = (function (_super) {
	    __extends(WriteVarExpr, _super);
	    function WriteVarExpr(name, value, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, lang_1.isPresent(type) ? type : value.type);
	        this.name = name;
	        this.value = value;
	    }
	    WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteVarExpr(this, context);
	    };
	    WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        return new DeclareVarStmt(this.name, this.value, type, modifiers);
	    };
	    return WriteVarExpr;
	}(Expression));
	exports.WriteVarExpr = WriteVarExpr;
	var WriteKeyExpr = (function (_super) {
	    __extends(WriteKeyExpr, _super);
	    function WriteKeyExpr(receiver, index, value, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, lang_1.isPresent(type) ? type : value.type);
	        this.receiver = receiver;
	        this.index = index;
	        this.value = value;
	    }
	    WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteKeyExpr(this, context);
	    };
	    return WriteKeyExpr;
	}(Expression));
	exports.WriteKeyExpr = WriteKeyExpr;
	var WritePropExpr = (function (_super) {
	    __extends(WritePropExpr, _super);
	    function WritePropExpr(receiver, name, value, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, lang_1.isPresent(type) ? type : value.type);
	        this.receiver = receiver;
	        this.name = name;
	        this.value = value;
	    }
	    WritePropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWritePropExpr(this, context);
	    };
	    return WritePropExpr;
	}(Expression));
	exports.WritePropExpr = WritePropExpr;
	(function (BuiltinMethod) {
	    BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
	    BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
	    BuiltinMethod[BuiltinMethod["bind"] = 2] = "bind";
	})(exports.BuiltinMethod || (exports.BuiltinMethod = {}));
	var BuiltinMethod = exports.BuiltinMethod;
	var InvokeMethodExpr = (function (_super) {
	    __extends(InvokeMethodExpr, _super);
	    function InvokeMethodExpr(receiver, method, args, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.receiver = receiver;
	        this.args = args;
	        if (lang_1.isString(method)) {
	            this.name = method;
	            this.builtin = null;
	        }
	        else {
	            this.name = null;
	            this.builtin = method;
	        }
	    }
	    InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeMethodExpr(this, context);
	    };
	    return InvokeMethodExpr;
	}(Expression));
	exports.InvokeMethodExpr = InvokeMethodExpr;
	var InvokeFunctionExpr = (function (_super) {
	    __extends(InvokeFunctionExpr, _super);
	    function InvokeFunctionExpr(fn, args, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.fn = fn;
	        this.args = args;
	    }
	    InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeFunctionExpr(this, context);
	    };
	    return InvokeFunctionExpr;
	}(Expression));
	exports.InvokeFunctionExpr = InvokeFunctionExpr;
	var InstantiateExpr = (function (_super) {
	    __extends(InstantiateExpr, _super);
	    function InstantiateExpr(classExpr, args, type) {
	        _super.call(this, type);
	        this.classExpr = classExpr;
	        this.args = args;
	    }
	    InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInstantiateExpr(this, context);
	    };
	    return InstantiateExpr;
	}(Expression));
	exports.InstantiateExpr = InstantiateExpr;
	var LiteralExpr = (function (_super) {
	    __extends(LiteralExpr, _super);
	    function LiteralExpr(value, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.value = value;
	    }
	    LiteralExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralExpr(this, context);
	    };
	    return LiteralExpr;
	}(Expression));
	exports.LiteralExpr = LiteralExpr;
	var ExternalExpr = (function (_super) {
	    __extends(ExternalExpr, _super);
	    function ExternalExpr(value, type, typeParams) {
	        if (type === void 0) { type = null; }
	        if (typeParams === void 0) { typeParams = null; }
	        _super.call(this, type);
	        this.value = value;
	        this.typeParams = typeParams;
	    }
	    ExternalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitExternalExpr(this, context);
	    };
	    return ExternalExpr;
	}(Expression));
	exports.ExternalExpr = ExternalExpr;
	var ConditionalExpr = (function (_super) {
	    __extends(ConditionalExpr, _super);
	    function ConditionalExpr(condition, trueCase, falseCase, type) {
	        if (falseCase === void 0) { falseCase = null; }
	        if (type === void 0) { type = null; }
	        _super.call(this, lang_1.isPresent(type) ? type : trueCase.type);
	        this.condition = condition;
	        this.falseCase = falseCase;
	        this.trueCase = trueCase;
	    }
	    ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitConditionalExpr(this, context);
	    };
	    return ConditionalExpr;
	}(Expression));
	exports.ConditionalExpr = ConditionalExpr;
	var NotExpr = (function (_super) {
	    __extends(NotExpr, _super);
	    function NotExpr(condition) {
	        _super.call(this, exports.BOOL_TYPE);
	        this.condition = condition;
	    }
	    NotExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitNotExpr(this, context);
	    };
	    return NotExpr;
	}(Expression));
	exports.NotExpr = NotExpr;
	var CastExpr = (function (_super) {
	    __extends(CastExpr, _super);
	    function CastExpr(value, type) {
	        _super.call(this, type);
	        this.value = value;
	    }
	    CastExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitCastExpr(this, context);
	    };
	    return CastExpr;
	}(Expression));
	exports.CastExpr = CastExpr;
	var FnParam = (function () {
	    function FnParam(name, type) {
	        if (type === void 0) { type = null; }
	        this.name = name;
	        this.type = type;
	    }
	    return FnParam;
	}());
	exports.FnParam = FnParam;
	var FunctionExpr = (function (_super) {
	    __extends(FunctionExpr, _super);
	    function FunctionExpr(params, statements, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.params = params;
	        this.statements = statements;
	    }
	    FunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitFunctionExpr(this, context);
	    };
	    FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
	    };
	    return FunctionExpr;
	}(Expression));
	exports.FunctionExpr = FunctionExpr;
	var BinaryOperatorExpr = (function (_super) {
	    __extends(BinaryOperatorExpr, _super);
	    function BinaryOperatorExpr(operator, lhs, rhs, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, lang_1.isPresent(type) ? type : lhs.type);
	        this.operator = operator;
	        this.rhs = rhs;
	        this.lhs = lhs;
	    }
	    BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitBinaryOperatorExpr(this, context);
	    };
	    return BinaryOperatorExpr;
	}(Expression));
	exports.BinaryOperatorExpr = BinaryOperatorExpr;
	var ReadPropExpr = (function (_super) {
	    __extends(ReadPropExpr, _super);
	    function ReadPropExpr(receiver, name, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.receiver = receiver;
	        this.name = name;
	    }
	    ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadPropExpr(this, context);
	    };
	    ReadPropExpr.prototype.set = function (value) {
	        return new WritePropExpr(this.receiver, this.name, value);
	    };
	    return ReadPropExpr;
	}(Expression));
	exports.ReadPropExpr = ReadPropExpr;
	var ReadKeyExpr = (function (_super) {
	    __extends(ReadKeyExpr, _super);
	    function ReadKeyExpr(receiver, index, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.receiver = receiver;
	        this.index = index;
	    }
	    ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadKeyExpr(this, context);
	    };
	    ReadKeyExpr.prototype.set = function (value) {
	        return new WriteKeyExpr(this.receiver, this.index, value);
	    };
	    return ReadKeyExpr;
	}(Expression));
	exports.ReadKeyExpr = ReadKeyExpr;
	var LiteralArrayExpr = (function (_super) {
	    __extends(LiteralArrayExpr, _super);
	    function LiteralArrayExpr(entries, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.entries = entries;
	    }
	    LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralArrayExpr(this, context);
	    };
	    return LiteralArrayExpr;
	}(Expression));
	exports.LiteralArrayExpr = LiteralArrayExpr;
	var LiteralMapExpr = (function (_super) {
	    __extends(LiteralMapExpr, _super);
	    function LiteralMapExpr(entries, type) {
	        if (type === void 0) { type = null; }
	        _super.call(this, type);
	        this.entries = entries;
	        this.valueType = null;
	        if (lang_1.isPresent(type)) {
	            this.valueType = type.valueType;
	        }
	    }
	    LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralMapExpr(this, context);
	    };
	    return LiteralMapExpr;
	}(Expression));
	exports.LiteralMapExpr = LiteralMapExpr;
	exports.THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
	exports.SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
	exports.CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
	exports.CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
	exports.NULL_EXPR = new LiteralExpr(null, null);
	//// Statements
	(function (StmtModifier) {
	    StmtModifier[StmtModifier["Final"] = 0] = "Final";
	    StmtModifier[StmtModifier["Private"] = 1] = "Private";
	})(exports.StmtModifier || (exports.StmtModifier = {}));
	var StmtModifier = exports.StmtModifier;
	var Statement = (function () {
	    function Statement(modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        this.modifiers = modifiers;
	        if (lang_1.isBlank(modifiers)) {
	            this.modifiers = [];
	        }
	    }
	    Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	    return Statement;
	}());
	exports.Statement = Statement;
	var DeclareVarStmt = (function (_super) {
	    __extends(DeclareVarStmt, _super);
	    function DeclareVarStmt(name, value, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, modifiers);
	        this.name = name;
	        this.value = value;
	        this.type = lang_1.isPresent(type) ? type : value.type;
	    }
	    DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareVarStmt(this, context);
	    };
	    return DeclareVarStmt;
	}(Statement));
	exports.DeclareVarStmt = DeclareVarStmt;
	var DeclareFunctionStmt = (function (_super) {
	    __extends(DeclareFunctionStmt, _super);
	    function DeclareFunctionStmt(name, params, statements, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, modifiers);
	        this.name = name;
	        this.params = params;
	        this.statements = statements;
	        this.type = type;
	    }
	    DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareFunctionStmt(this, context);
	    };
	    return DeclareFunctionStmt;
	}(Statement));
	exports.DeclareFunctionStmt = DeclareFunctionStmt;
	var ExpressionStatement = (function (_super) {
	    __extends(ExpressionStatement, _super);
	    function ExpressionStatement(expr) {
	        _super.call(this);
	        this.expr = expr;
	    }
	    ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitExpressionStmt(this, context);
	    };
	    return ExpressionStatement;
	}(Statement));
	exports.ExpressionStatement = ExpressionStatement;
	var ReturnStatement = (function (_super) {
	    __extends(ReturnStatement, _super);
	    function ReturnStatement(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    ReturnStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitReturnStmt(this, context);
	    };
	    return ReturnStatement;
	}(Statement));
	exports.ReturnStatement = ReturnStatement;
	var AbstractClassPart = (function () {
	    function AbstractClassPart(type, modifiers) {
	        if (type === void 0) { type = null; }
	        this.type = type;
	        this.modifiers = modifiers;
	        if (lang_1.isBlank(modifiers)) {
	            this.modifiers = [];
	        }
	    }
	    AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	    return AbstractClassPart;
	}());
	exports.AbstractClassPart = AbstractClassPart;
	var ClassField = (function (_super) {
	    __extends(ClassField, _super);
	    function ClassField(name, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, type, modifiers);
	        this.name = name;
	    }
	    return ClassField;
	}(AbstractClassPart));
	exports.ClassField = ClassField;
	var ClassMethod = (function (_super) {
	    __extends(ClassMethod, _super);
	    function ClassMethod(name, params, body, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, type, modifiers);
	        this.name = name;
	        this.params = params;
	        this.body = body;
	    }
	    return ClassMethod;
	}(AbstractClassPart));
	exports.ClassMethod = ClassMethod;
	var ClassGetter = (function (_super) {
	    __extends(ClassGetter, _super);
	    function ClassGetter(name, body, type, modifiers) {
	        if (type === void 0) { type = null; }
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, type, modifiers);
	        this.name = name;
	        this.body = body;
	    }
	    return ClassGetter;
	}(AbstractClassPart));
	exports.ClassGetter = ClassGetter;
	var ClassStmt = (function (_super) {
	    __extends(ClassStmt, _super);
	    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        _super.call(this, modifiers);
	        this.name = name;
	        this.parent = parent;
	        this.fields = fields;
	        this.getters = getters;
	        this.constructorMethod = constructorMethod;
	        this.methods = methods;
	    }
	    ClassStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareClassStmt(this, context);
	    };
	    return ClassStmt;
	}(Statement));
	exports.ClassStmt = ClassStmt;
	var IfStmt = (function (_super) {
	    __extends(IfStmt, _super);
	    function IfStmt(condition, trueCase, falseCase) {
	        if (falseCase === void 0) { falseCase = []; }
	        _super.call(this);
	        this.condition = condition;
	        this.trueCase = trueCase;
	        this.falseCase = falseCase;
	    }
	    IfStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitIfStmt(this, context);
	    };
	    return IfStmt;
	}(Statement));
	exports.IfStmt = IfStmt;
	var CommentStmt = (function (_super) {
	    __extends(CommentStmt, _super);
	    function CommentStmt(comment) {
	        _super.call(this);
	        this.comment = comment;
	    }
	    CommentStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitCommentStmt(this, context);
	    };
	    return CommentStmt;
	}(Statement));
	exports.CommentStmt = CommentStmt;
	var TryCatchStmt = (function (_super) {
	    __extends(TryCatchStmt, _super);
	    function TryCatchStmt(bodyStmts, catchStmts) {
	        _super.call(this);
	        this.bodyStmts = bodyStmts;
	        this.catchStmts = catchStmts;
	    }
	    TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitTryCatchStmt(this, context);
	    };
	    return TryCatchStmt;
	}(Statement));
	exports.TryCatchStmt = TryCatchStmt;
	var ThrowStmt = (function (_super) {
	    __extends(ThrowStmt, _super);
	    function ThrowStmt(error) {
	        _super.call(this);
	        this.error = error;
	    }
	    ThrowStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitThrowStmt(this, context);
	    };
	    return ThrowStmt;
	}(Statement));
	exports.ThrowStmt = ThrowStmt;
	var ExpressionTransformer = (function () {
	    function ExpressionTransformer() {
	    }
	    ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	    ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
	        return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
	        return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
	        return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
	        var method = lang_1.isPresent(ast.builtin) ? ast.builtin : ast.name;
	        return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
	    };
	    ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	    };
	    ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
	        return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	    };
	    ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	    ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };
	    ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
	        return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
	        return new NotExpr(ast.condition.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
	        return new CastExpr(ast.value.visitExpression(this, context), context);
	    };
	    ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
	        // Don't descend into nested functions
	        return ast;
	    };
	    ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
	    };
	    ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
	        return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
	    };
	    ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
	        return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
	    };
	    ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
	        return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
	    };
	    ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        return new LiteralMapExpr(ast.entries.map(function (entry) { return [entry[0], entry[1].visitExpression(_this, context)]; }));
	    };
	    ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
	        return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
	    };
	    ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        // Don't descend into nested functions
	        return stmt;
	    };
	    ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
	        return new ExpressionStatement(stmt.expr.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
	        return new ReturnStatement(stmt.value.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
	        // Don't descend into nested functions
	        return stmt;
	    };
	    ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
	        return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
	    };
	    ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
	        return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
	    };
	    ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
	        return new ThrowStmt(stmt.error.visitExpression(this, context));
	    };
	    ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	    ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return ExpressionTransformer;
	}());
	exports.ExpressionTransformer = ExpressionTransformer;
	var RecursiveExpressionVisitor = (function () {
	    function RecursiveExpressionVisitor() {
	    }
	    RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	    RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
	        expr.receiver.visitExpression(this, context);
	        expr.index.visitExpression(this, context);
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
	        expr.receiver.visitExpression(this, context);
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        ast.fn.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
	        ast.classExpr.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	    RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };
	    RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        ast.trueCase.visitExpression(this, context);
	        ast.falseCase.visitExpression(this, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
	        ast.value.visitExpression(this, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };
	    RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        ast.lhs.visitExpression(this, context);
	        ast.rhs.visitExpression(this, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        ast.index.visitExpression(this, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	        this.visitAllExpressions(ast.entries, context);
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        ast.entries.forEach(function (entry) { return entry[1].visitExpression(_this, context); });
	        return ast;
	    };
	    RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
	        stmt.value.visitExpression(this, context);
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        // Don't descend into nested functions
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
	        stmt.expr.visitExpression(this, context);
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
	        stmt.value.visitExpression(this, context);
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	        // Don't descend into nested functions
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
	        stmt.condition.visitExpression(this, context);
	        this.visitAllStatements(stmt.trueCase, context);
	        this.visitAllStatements(stmt.falseCase, context);
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
	        this.visitAllStatements(stmt.bodyStmts, context);
	        this.visitAllStatements(stmt.catchStmts, context);
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
	        stmt.error.visitExpression(this, context);
	        return stmt;
	    };
	    RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	    RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return RecursiveExpressionVisitor;
	}());
	exports.RecursiveExpressionVisitor = RecursiveExpressionVisitor;
	function replaceVarInExpression(varName, newValue, expression) {
	    var transformer = new _ReplaceVariableTransformer(varName, newValue);
	    return expression.visitExpression(transformer, null);
	}
	exports.replaceVarInExpression = replaceVarInExpression;
	var _ReplaceVariableTransformer = (function (_super) {
	    __extends(_ReplaceVariableTransformer, _super);
	    function _ReplaceVariableTransformer(_varName, _newValue) {
	        _super.call(this);
	        this._varName = _varName;
	        this._newValue = _newValue;
	    }
	    _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
	        return ast.name == this._varName ? this._newValue : ast;
	    };
	    return _ReplaceVariableTransformer;
	}(ExpressionTransformer));
	function findReadVarNames(stmts) {
	    var finder = new _VariableFinder();
	    finder.visitAllStatements(stmts, null);
	    return finder.varNames;
	}
	exports.findReadVarNames = findReadVarNames;
	var _VariableFinder = (function (_super) {
	    __extends(_VariableFinder, _super);
	    function _VariableFinder() {
	        _super.apply(this, arguments);
	        this.varNames = new Set();
	    }
	    _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
	        this.varNames.add(ast.name);
	        return null;
	    };
	    return _VariableFinder;
	}(RecursiveExpressionVisitor));
	function variable(name, type) {
	    if (type === void 0) { type = null; }
	    return new ReadVarExpr(name, type);
	}
	exports.variable = variable;
	function importExpr(id, typeParams) {
	    if (typeParams === void 0) { typeParams = null; }
	    return new ExternalExpr(id, null, typeParams);
	}
	exports.importExpr = importExpr;
	function importType(id, typeParams, typeModifiers) {
	    if (typeParams === void 0) { typeParams = null; }
	    if (typeModifiers === void 0) { typeModifiers = null; }
	    return lang_1.isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
	}
	exports.importType = importType;
	function literal(value, type) {
	    if (type === void 0) { type = null; }
	    return new LiteralExpr(value, type);
	}
	exports.literal = literal;
	function literalArr(values, type) {
	    if (type === void 0) { type = null; }
	    return new LiteralArrayExpr(values, type);
	}
	exports.literalArr = literalArr;
	function literalMap(values, type) {
	    if (type === void 0) { type = null; }
	    return new LiteralMapExpr(values, type);
	}
	exports.literalMap = literalMap;
	function not(expr) {
	    return new NotExpr(expr);
	}
	exports.not = not;
	function fn(params, body, type) {
	    if (type === void 0) { type = null; }
	    return new FunctionExpr(params, body, type);
	}
	exports.fn = fn;
	//# sourceMappingURL=output_ast.js.map

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(13);
	var async_1 = __webpack_require__(40);
	var compile_metadata_1 = __webpack_require__(33);
	var style_compiler_1 = __webpack_require__(63);
	var view_compiler_1 = __webpack_require__(65);
	var template_parser_1 = __webpack_require__(11);
	var directive_normalizer_1 = __webpack_require__(85);
	var metadata_resolver_1 = __webpack_require__(87);
	var config_1 = __webpack_require__(36);
	var ir = __webpack_require__(38);
	var output_jit_1 = __webpack_require__(93);
	var output_interpreter_1 = __webpack_require__(96);
	var interpretive_view_1 = __webpack_require__(99);
	var xhr_1 = __webpack_require__(86);
	var RuntimeCompiler = (function () {
	    function RuntimeCompiler(_metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _xhr, _genConfig) {
	        this._metadataResolver = _metadataResolver;
	        this._templateNormalizer = _templateNormalizer;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._xhr = _xhr;
	        this._genConfig = _genConfig;
	        this._styleCache = new Map();
	        this._hostCacheKeys = new Map();
	        this._compiledTemplateCache = new Map();
	        this._compiledTemplateDone = new Map();
	    }
	    RuntimeCompiler.prototype.resolveComponent = function (component) {
	        if (lang_1.isString(component)) {
	            return async_1.PromiseWrapper.reject(new exceptions_1.BaseException("Cannot resolve component using '" + component + "'."), null);
	        }
	        var componentType = component;
	        var compMeta = this._metadataResolver.getDirectiveMetadata(componentType);
	        var hostCacheKey = this._hostCacheKeys.get(componentType);
	        if (lang_1.isBlank(hostCacheKey)) {
	            hostCacheKey = new Object();
	            this._hostCacheKeys.set(componentType, hostCacheKey);
	            assertComponent(compMeta);
	            var hostMeta = compile_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
	            this._loadAndCompileComponent(hostCacheKey, hostMeta, [compMeta], [], []);
	        }
	        return this._compiledTemplateDone.get(hostCacheKey)
	            .then(function (compiledTemplate) { return new core_1.ComponentFactory(compMeta.selector, compiledTemplate.viewFactory, componentType); });
	    };
	    RuntimeCompiler.prototype.clearCache = function () {
	        this._styleCache.clear();
	        this._compiledTemplateCache.clear();
	        this._compiledTemplateDone.clear();
	        this._hostCacheKeys.clear();
	    };
	    RuntimeCompiler.prototype._loadAndCompileComponent = function (cacheKey, compMeta, viewDirectives, pipes, compilingComponentsPath) {
	        var _this = this;
	        var compiledTemplate = this._compiledTemplateCache.get(cacheKey);
	        var done = this._compiledTemplateDone.get(cacheKey);
	        if (lang_1.isBlank(compiledTemplate)) {
	            compiledTemplate = new CompiledTemplate();
	            this._compiledTemplateCache.set(cacheKey, compiledTemplate);
	            done =
	                async_1.PromiseWrapper
	                    .all([this._compileComponentStyles(compMeta)].concat(viewDirectives.map(function (dirMeta) { return _this._templateNormalizer.normalizeDirective(dirMeta); })))
	                    .then(function (stylesAndNormalizedViewDirMetas) {
	                    var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);
	                    var styles = stylesAndNormalizedViewDirMetas[0];
	                    var parsedTemplate = _this._templateParser.parse(compMeta, compMeta.template.template, normalizedViewDirMetas, pipes, compMeta.type.name);
	                    var childPromises = [];
	                    compiledTemplate.init(_this._compileComponent(compMeta, parsedTemplate, styles, pipes, compilingComponentsPath, childPromises));
	                    return async_1.PromiseWrapper.all(childPromises).then(function (_) { return compiledTemplate; });
	                });
	            this._compiledTemplateDone.set(cacheKey, done);
	        }
	        return compiledTemplate;
	    };
	    RuntimeCompiler.prototype._compileComponent = function (compMeta, parsedTemplate, styles, pipes, compilingComponentsPath, childPromises) {
	        var _this = this;
	        var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, new ir.ExternalExpr(new compile_metadata_1.CompileIdentifierMetadata({ runtime: styles })), pipes);
	        compileResult.dependencies.forEach(function (dep) {
	            var childCompilingComponentsPath = collection_1.ListWrapper.clone(compilingComponentsPath);
	            var childCacheKey = dep.comp.type.runtime;
	            var childViewDirectives = _this._metadataResolver.getViewDirectivesMetadata(dep.comp.type.runtime);
	            var childViewPipes = _this._metadataResolver.getViewPipesMetadata(dep.comp.type.runtime);
	            var childIsRecursive = collection_1.ListWrapper.contains(childCompilingComponentsPath, childCacheKey);
	            childCompilingComponentsPath.push(childCacheKey);
	            var childComp = _this._loadAndCompileComponent(dep.comp.type.runtime, dep.comp, childViewDirectives, childViewPipes, childCompilingComponentsPath);
	            dep.factoryPlaceholder.runtime = childComp.proxyViewFactory;
	            dep.factoryPlaceholder.name = "viewFactory_" + dep.comp.type.name;
	            if (!childIsRecursive) {
	                // Only wait for a child if it is not a cycle
	                childPromises.push(_this._compiledTemplateDone.get(childCacheKey));
	            }
	        });
	        var factory;
	        if (lang_1.IS_DART || !this._genConfig.useJit) {
	            factory = output_interpreter_1.interpretStatements(compileResult.statements, compileResult.viewFactoryVar, new interpretive_view_1.InterpretiveAppViewInstanceFactory());
	        }
	        else {
	            factory = output_jit_1.jitStatements(compMeta.type.name + ".template.js", compileResult.statements, compileResult.viewFactoryVar);
	        }
	        return factory;
	    };
	    RuntimeCompiler.prototype._compileComponentStyles = function (compMeta) {
	        var compileResult = this._styleCompiler.compileComponent(compMeta);
	        return this._resolveStylesCompileResult(compMeta.type.name, compileResult);
	    };
	    RuntimeCompiler.prototype._resolveStylesCompileResult = function (sourceUrl, result) {
	        var _this = this;
	        var promises = result.dependencies.map(function (dep) { return _this._loadStylesheetDep(dep); });
	        return async_1.PromiseWrapper.all(promises)
	            .then(function (cssTexts) {
	            var nestedCompileResultPromises = [];
	            for (var i = 0; i < result.dependencies.length; i++) {
	                var dep = result.dependencies[i];
	                var cssText = cssTexts[i];
	                var nestedCompileResult = _this._styleCompiler.compileStylesheet(dep.moduleUrl, cssText, dep.isShimmed);
	                nestedCompileResultPromises.push(_this._resolveStylesCompileResult(dep.moduleUrl, nestedCompileResult));
	            }
	            return async_1.PromiseWrapper.all(nestedCompileResultPromises);
	        })
	            .then(function (nestedStylesArr) {
	            for (var i = 0; i < result.dependencies.length; i++) {
	                var dep = result.dependencies[i];
	                dep.valuePlaceholder.runtime = nestedStylesArr[i];
	                dep.valuePlaceholder.name = "importedStyles" + i;
	            }
	            if (lang_1.IS_DART || !_this._genConfig.useJit) {
	                return output_interpreter_1.interpretStatements(result.statements, result.stylesVar, new interpretive_view_1.InterpretiveAppViewInstanceFactory());
	            }
	            else {
	                return output_jit_1.jitStatements(sourceUrl + ".css.js", result.statements, result.stylesVar);
	            }
	        });
	    };
	    RuntimeCompiler.prototype._loadStylesheetDep = function (dep) {
	        var cacheKey = "" + dep.moduleUrl + (dep.isShimmed ? '.shim' : '');
	        var cssTextPromise = this._styleCache.get(cacheKey);
	        if (lang_1.isBlank(cssTextPromise)) {
	            cssTextPromise = this._xhr.get(dep.moduleUrl);
	            this._styleCache.set(cacheKey, cssTextPromise);
	        }
	        return cssTextPromise;
	    };
	    /** @nocollapse */
	    RuntimeCompiler.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    RuntimeCompiler.ctorParameters = [
	        { type: metadata_resolver_1.CompileMetadataResolver, },
	        { type: directive_normalizer_1.DirectiveNormalizer, },
	        { type: template_parser_1.TemplateParser, },
	        { type: style_compiler_1.StyleCompiler, },
	        { type: view_compiler_1.ViewCompiler, },
	        { type: xhr_1.XHR, },
	        { type: config_1.CompilerConfig, },
	    ];
	    return RuntimeCompiler;
	}());
	exports.RuntimeCompiler = RuntimeCompiler;
	var CompiledTemplate = (function () {
	    function CompiledTemplate() {
	        var _this = this;
	        this.viewFactory = null;
	        this.proxyViewFactory =
	            function (viewUtils /** TODO #9100 */, childInjector /** TODO #9100 */, contextEl /** TODO #9100 */) {
	                return _this.viewFactory(viewUtils, childInjector, contextEl);
	            };
	    }
	    CompiledTemplate.prototype.init = function (viewFactory) { this.viewFactory = viewFactory; };
	    return CompiledTemplate;
	}());
	function assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
	    }
	}
	//# sourceMappingURL=runtime_compiler.js.map

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(41);
	var PromiseObservable_1 = __webpack_require__(60);
	var toPromise_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(10);
	var Observable_1 = __webpack_require__(42);
	exports.Observable = Observable_1.Observable;
	var Subject_2 = __webpack_require__(41);
	exports.Subject = Subject_2.Subject;
	var promise_1 = __webpack_require__(62);
	exports.PromiseCompleter = promise_1.PromiseCompleter;
	exports.PromiseWrapper = promise_1.PromiseWrapper;
	var TimerWrapper = (function () {
	    function TimerWrapper() {
	    }
	    TimerWrapper.setTimeout = function (fn, millis) {
	        return lang_1.global.setTimeout(fn, millis);
	    };
	    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };
	    TimerWrapper.setInterval = function (fn, millis) {
	        return lang_1.global.setInterval(fn, millis);
	    };
	    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };
	    return TimerWrapper;
	}());
	exports.TimerWrapper = TimerWrapper;
	var ObservableWrapper = (function () {
	    function ObservableWrapper() {
	    }
	    // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg
	    ObservableWrapper.subscribe = function (emitter, onNext, onError, onComplete) {
	        if (onComplete === void 0) { onComplete = function () { }; }
	        onError = (typeof onError === 'function') && onError || lang_1.noop;
	        onComplete = (typeof onComplete === 'function') && onComplete || lang_1.noop;
	        return emitter.subscribe({ next: onNext, error: onError, complete: onComplete });
	    };
	    ObservableWrapper.isObservable = function (obs) { return !!obs.subscribe; };
	    /**
	     * Returns whether `obs` has any subscribers listening to events.
	     */
	    ObservableWrapper.hasSubscribers = function (obs) { return obs.observers.length > 0; };
	    ObservableWrapper.dispose = function (subscription) { subscription.unsubscribe(); };
	    /**
	     * @deprecated - use callEmit() instead
	     */
	    ObservableWrapper.callNext = function (emitter, value) { emitter.emit(value); };
	    ObservableWrapper.callEmit = function (emitter, value) { emitter.emit(value); };
	    ObservableWrapper.callError = function (emitter, error) { emitter.error(error); };
	    ObservableWrapper.callComplete = function (emitter) { emitter.complete(); };
	    ObservableWrapper.fromPromise = function (promise) {
	        return PromiseObservable_1.PromiseObservable.create(promise);
	    };
	    ObservableWrapper.toPromise = function (obj) { return toPromise_1.toPromise.call(obj); };
	    return ObservableWrapper;
	}());
	exports.ObservableWrapper = ObservableWrapper;
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * @Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   @Output() open: EventEmitter<any> = new EventEmitter();
	 *   @Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * The events payload can be accessed by the parameter `$event` on the components output event
	 * handler:
	 *
	 * ```
	 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	 * ```
	 *
	 * Uses Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 * @stable
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of [EventEmitter], which depending on [isAsync],
	     * delivers events synchronously or asynchronously.
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = false; }
	        _super.call(this);
	        this.__isAsync = isAsync;
	    }
	    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	    /**
	     * @deprecated - use .emit(value) instead
	     */
	    EventEmitter.prototype.next = function (value) { _super.prototype.next.call(this, value); };
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var schedulerFn;
	        var errorFn = function (err) { return null; };
	        var completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
	                setTimeout(function () { return generatorOrNext.next(value); });
	            } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };
	            if (generatorOrNext.error) {
	                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                    function (err) { generatorOrNext.error(err); };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                    function () { generatorOrNext.complete(); };
	            }
	        }
	        else {
	            schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
	                setTimeout(function () { return generatorOrNext(value); });
	            } : function (value /** TODO #9100 */) { generatorOrNext(value); };
	            if (error) {
	                errorFn =
	                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	            }
	            if (complete) {
	                completeFn =
	                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	            }
	        }
	        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	    };
	    return EventEmitter;
	}(Subject_1.Subject));
	exports.EventEmitter = EventEmitter;
	//# sourceMappingURL=async.js.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(42);
	var Subscriber_1 = __webpack_require__(47);
	var Subscription_1 = __webpack_require__(49);
	var SubjectSubscription_1 = __webpack_require__(57);
	var rxSubscriber_1 = __webpack_require__(55);
	var throwError_1 = __webpack_require__(58);
	var ObjectUnsubscribedError_1 = __webpack_require__(59);
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	        this.observers = [];
	        this.isUnsubscribed = false;
	        this.isStopped = false;
	        this.hasErrored = false;
	        this.dispatching = false;
	        this.hasCompleted = false;
	        this.source = source;
	    }
	    Subject.prototype.lift = function (operator) {
	        var subject = new Subject(this.destination || this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.add = function (subscription) {
	        return Subscription_1.Subscription.prototype.add.call(this, subscription);
	    };
	    Subject.prototype.remove = function (subscription) {
	        Subscription_1.Subscription.prototype.remove.call(this, subscription);
	    };
	    Subject.prototype.unsubscribe = function () {
	        Subscription_1.Subscription.prototype.unsubscribe.call(this);
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            if (subscriber.isUnsubscribed) {
	                return;
	            }
	            else if (this.hasErrored) {
	                return subscriber.error(this.errorValue);
	            }
	            else if (this.hasCompleted) {
	                return subscriber.complete();
	            }
	            this.throwIfUnsubscribed();
	            var subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	            this.observers.push(subscriber);
	            return subscription;
	        }
	    };
	    Subject.prototype._unsubscribe = function () {
	        this.source = null;
	        this.isStopped = true;
	        this.observers = null;
	        this.destination = null;
	    };
	    Subject.prototype.next = function (value) {
	        this.throwIfUnsubscribed();
	        if (this.isStopped) {
	            return;
	        }
	        this.dispatching = true;
	        this._next(value);
	        this.dispatching = false;
	        if (this.hasErrored) {
	            this._error(this.errorValue);
	        }
	        else if (this.hasCompleted) {
	            this._complete();
	        }
	    };
	    Subject.prototype.error = function (err) {
	        this.throwIfUnsubscribed();
	        if (this.isStopped) {
	            return;
	        }
	        this.isStopped = true;
	        this.hasErrored = true;
	        this.errorValue = err;
	        if (this.dispatching) {
	            return;
	        }
	        this._error(err);
	    };
	    Subject.prototype.complete = function () {
	        this.throwIfUnsubscribed();
	        if (this.isStopped) {
	            return;
	        }
	        this.isStopped = true;
	        this.hasCompleted = true;
	        if (this.dispatching) {
	            return;
	        }
	        this._complete();
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new SubjectObservable(this);
	        return observable;
	    };
	    Subject.prototype._next = function (value) {
	        if (this.destination) {
	            this.destination.next(value);
	        }
	        else {
	            this._finalNext(value);
	        }
	    };
	    Subject.prototype._finalNext = function (value) {
	        var index = -1;
	        var observers = this.observers.slice(0);
	        var len = observers.length;
	        while (++index < len) {
	            observers[index].next(value);
	        }
	    };
	    Subject.prototype._error = function (err) {
	        if (this.destination) {
	            this.destination.error(err);
	        }
	        else {
	            this._finalError(err);
	        }
	    };
	    Subject.prototype._finalError = function (err) {
	        var index = -1;
	        var observers = this.observers;
	        // optimization to block our SubjectSubscriptions from
	        // splicing themselves out of the observers list one by one.
	        this.observers = null;
	        this.isUnsubscribed = true;
	        if (observers) {
	            var len = observers.length;
	            while (++index < len) {
	                observers[index].error(err);
	            }
	        }
	        this.isUnsubscribed = false;
	        this.unsubscribe();
	    };
	    Subject.prototype._complete = function () {
	        if (this.destination) {
	            this.destination.complete();
	        }
	        else {
	            this._finalComplete();
	        }
	    };
	    Subject.prototype._finalComplete = function () {
	        var index = -1;
	        var observers = this.observers;
	        // optimization to block our SubjectSubscriptions from
	        // splicing themselves out of the observers list one by one.
	        this.observers = null;
	        this.isUnsubscribed = true;
	        if (observers) {
	            var len = observers.length;
	            while (++index < len) {
	                observers[index].complete();
	            }
	        }
	        this.isUnsubscribed = false;
	        this.unsubscribe();
	    };
	    Subject.prototype.throwIfUnsubscribed = function () {
	        if (this.isUnsubscribed) {
	            throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
	        }
	    };
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new Subscriber_1.Subscriber(this);
	    };
	    Subject.create = function (destination, source) {
	        return new Subject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectObservable = (function (_super) {
	    __extends(SubjectObservable, _super);
	    function SubjectObservable(source) {
	        _super.call(this);
	        this.source = source;
	    }
	    return SubjectObservable;
	}(Observable_1.Observable));
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(43);
	var observable_1 = __webpack_require__(45);
	var toSubscriber_1 = __webpack_require__(46);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    /**
	     * Registers handlers for handling emitted values, error and completions from the observable, and
	     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
	     * @method subscribe
	     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
	     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
	     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
	     *  the error will be thrown as unhandled
	     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
	     * @return {ISubscription} a subscription reference to the registered handlers
	     */
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        sink.add(operator ? operator.call(sink, this) : this._subscribe(sink));
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` imple will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {"use strict";
	var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	};
	exports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);
	/* tslint:disable:no-unused-variable */
	var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
	var freeGlobal = objectTypes[typeof global] && global;
	if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    exports.root = freeGlobal;
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(44)(module), (function() { return this; }())))

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(43);
	var Symbol = root_1.root.Symbol;
	if (typeof Symbol === 'function') {
	    if (Symbol.observable) {
	        exports.$$observable = Symbol.observable;
	    }
	    else {
	        if (typeof Symbol.for === 'function') {
	            exports.$$observable = Symbol.for('observable');
	        }
	        else {
	            exports.$$observable = Symbol('observable');
	        }
	        Symbol.observable = exports.$$observable;
	    }
	}
	else {
	    exports.$$observable = '@@observable';
	}
	//# sourceMappingURL=observable.js.map

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(47);
	var rxSubscriber_1 = __webpack_require__(55);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver && typeof nextOrObserver === 'object') {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        else if (typeof nextOrObserver[rxSubscriber_1.$$rxSubscriber] === 'function') {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(48);
	var Subscription_1 = __webpack_require__(49);
	var rxSubscriber_1 = __webpack_require__(55);
	var Observer_1 = __webpack_require__(56);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return this;
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parent, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parent = _parent;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parent = this._parent;
	            if (!_parent.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parent, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._error) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parent.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parent.syncErrorValue = err;
	                _parent.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._complete) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parent = this._parent;
	        this._context = null;
	        this._parent = null;
	        _parent.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 48 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(50);
	var isObject_1 = __webpack_require__(51);
	var isFunction_1 = __webpack_require__(48);
	var tryCatch_1 = __webpack_require__(52);
	var errorObject_1 = __webpack_require__(53);
	var UnsubscriptionError_1 = __webpack_require__(54);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.isUnsubscribed = false;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.isUnsubscribed = true;
	        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this._subscriptions = null;
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                (errors = errors || []).push(errorObject_1.errorObject.e);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(err.errors);
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `isUnsubscribed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === this) || (teardown === Subscription.EMPTY)) {
	            return;
	        }
	        var sub = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                sub = new Subscription(teardown);
	            case 'object':
	                if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {
	                    break;
	                }
	                else if (this.isUnsubscribed) {
	                    sub.unsubscribe();
	                }
	                else {
	                    (this._subscriptions || (this._subscriptions = [])).push(sub);
	                }
	                break;
	            default:
	                throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        return sub;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        // HACK: This might be redundant because of the logic in `add()`
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.isUnsubscribed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 50 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 51 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(53);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 53 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 54 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        this.name = 'UnsubscriptionError';
	        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n') : '';
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(43);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    isUnsubscribed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(49);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, observer) {
	        _super.call(this);
	        this.subject = subject;
	        this.observer = observer;
	        this.isUnsubscribed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.isUnsubscribed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isUnsubscribed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.observer);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 58 */
/***/ function(module, exports) {

	"use strict";
	function throwError(e) { throw e; }
	exports.throwError = throwError;
	//# sourceMappingURL=throwError.js.map

/***/ },
/* 59 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        _super.call(this, 'object unsubscribed');
	        this.name = 'ObjectUnsubscribedError';
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(43);
	var Observable_1 = __webpack_require__(42);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var PromiseObservable = (function (_super) {
	    __extends(PromiseObservable, _super);
	    function PromiseObservable(promise, scheduler) {
	        if (scheduler === void 0) { scheduler = null; }
	        _super.call(this);
	        this.promise = promise;
	        this.scheduler = scheduler;
	    }
	    /**
	     * @param promise
	     * @param scheduler
	     * @return {PromiseObservable}
	     * @static true
	     * @name fromPromise
	     * @owner Observable
	     */
	    PromiseObservable.create = function (promise, scheduler) {
	        if (scheduler === void 0) { scheduler = null; }
	        return new PromiseObservable(promise, scheduler);
	    };
	    PromiseObservable.prototype._subscribe = function (subscriber) {
	        var _this = this;
	        var promise = this.promise;
	        var scheduler = this.scheduler;
	        if (scheduler == null) {
	            if (this._isScalar) {
	                if (!subscriber.isUnsubscribed) {
	                    subscriber.next(this.value);
	                    subscriber.complete();
	                }
	            }
	            else {
	                promise.then(function (value) {
	                    _this.value = value;
	                    _this._isScalar = true;
	                    if (!subscriber.isUnsubscribed) {
	                        subscriber.next(value);
	                        subscriber.complete();
	                    }
	                }, function (err) {
	                    if (!subscriber.isUnsubscribed) {
	                        subscriber.error(err);
	                    }
	                })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    root_1.root.setTimeout(function () { throw err; });
	                });
	            }
	        }
	        else {
	            if (this._isScalar) {
	                if (!subscriber.isUnsubscribed) {
	                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
	                }
	            }
	            else {
	                promise.then(function (value) {
	                    _this.value = value;
	                    _this._isScalar = true;
	                    if (!subscriber.isUnsubscribed) {
	                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
	                    }
	                }, function (err) {
	                    if (!subscriber.isUnsubscribed) {
	                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
	                    }
	                })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    root_1.root.setTimeout(function () { throw err; });
	                });
	            }
	        }
	    };
	    return PromiseObservable;
	}(Observable_1.Observable));
	exports.PromiseObservable = PromiseObservable;
	function dispatchNext(arg) {
	    var value = arg.value, subscriber = arg.subscriber;
	    if (!subscriber.isUnsubscribed) {
	        subscriber.next(value);
	        subscriber.complete();
	    }
	}
	function dispatchError(arg) {
	    var err = arg.err, subscriber = arg.subscriber;
	    if (!subscriber.isUnsubscribed) {
	        subscriber.error(err);
	    }
	}
	//# sourceMappingURL=PromiseObservable.js.map

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(43);
	/**
	 * @param PromiseCtor
	 * @return {Promise<T>}
	 * @method toPromise
	 * @owner Observable
	 */
	function toPromise(PromiseCtor) {
	    var _this = this;
	    if (!PromiseCtor) {
	        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	            PromiseCtor = root_1.root.Rx.config.Promise;
	        }
	        else if (root_1.root.Promise) {
	            PromiseCtor = root_1.root.Promise;
	        }
	    }
	    if (!PromiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return new PromiseCtor(function (resolve, reject) {
	        var value;
	        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	    });
	}
	exports.toPromise = toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 62 */
/***/ function(module, exports) {

	"use strict";
	var PromiseCompleter = (function () {
	    function PromiseCompleter() {
	        var _this = this;
	        this.promise = new Promise(function (res, rej) {
	            _this.resolve = res;
	            _this.reject = rej;
	        });
	    }
	    return PromiseCompleter;
	}());
	exports.PromiseCompleter = PromiseCompleter;
	var PromiseWrapper = (function () {
	    function PromiseWrapper() {
	    }
	    PromiseWrapper.resolve = function (obj) { return Promise.resolve(obj); };
	    PromiseWrapper.reject = function (obj, _) { return Promise.reject(obj); };
	    // Note: We can't rename this method into `catch`, as this is not a valid
	    // method name in Dart.
	    PromiseWrapper.catchError = function (promise, onError) {
	        return promise.catch(onError);
	    };
	    PromiseWrapper.all = function (promises) {
	        if (promises.length == 0)
	            return Promise.resolve([]);
	        return Promise.all(promises);
	    };
	    PromiseWrapper.then = function (promise, success, rejection) {
	        return promise.then(success, rejection);
	    };
	    PromiseWrapper.wrap = function (computation) {
	        return new Promise(function (res, rej) {
	            try {
	                res(computation());
	            }
	            catch (e) {
	                rej(e);
	            }
	        });
	    };
	    PromiseWrapper.scheduleMicrotask = function (computation) {
	        PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function (_) { });
	    };
	    PromiseWrapper.completer = function () { return new PromiseCompleter(); };
	    return PromiseWrapper;
	}());
	exports.PromiseWrapper = PromiseWrapper;
	//# sourceMappingURL=promise.js.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var lang_1 = __webpack_require__(10);
	var compile_metadata_1 = __webpack_require__(33);
	var o = __webpack_require__(38);
	var shadow_css_1 = __webpack_require__(64);
	var style_url_resolver_1 = __webpack_require__(30);
	var url_resolver_1 = __webpack_require__(34);
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	var StylesCompileDependency = (function () {
	    function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
	        this.moduleUrl = moduleUrl;
	        this.isShimmed = isShimmed;
	        this.valuePlaceholder = valuePlaceholder;
	    }
	    return StylesCompileDependency;
	}());
	exports.StylesCompileDependency = StylesCompileDependency;
	var StylesCompileResult = (function () {
	    function StylesCompileResult(statements, stylesVar, dependencies) {
	        this.statements = statements;
	        this.stylesVar = stylesVar;
	        this.dependencies = dependencies;
	    }
	    return StylesCompileResult;
	}());
	exports.StylesCompileResult = StylesCompileResult;
	var StyleCompiler = (function () {
	    function StyleCompiler(_urlResolver) {
	        this._urlResolver = _urlResolver;
	        this._shadowCss = new shadow_css_1.ShadowCss();
	    }
	    StyleCompiler.prototype.compileComponent = function (comp) {
	        var shim = comp.template.encapsulation === core_1.ViewEncapsulation.Emulated;
	        return this._compileStyles(getStylesVarName(comp), comp.template.styles, comp.template.styleUrls, shim);
	    };
	    StyleCompiler.prototype.compileStylesheet = function (stylesheetUrl, cssText, isShimmed) {
	        var styleWithImports = style_url_resolver_1.extractStyleUrls(this._urlResolver, stylesheetUrl, cssText);
	        return this._compileStyles(getStylesVarName(null), [styleWithImports.style], styleWithImports.styleUrls, isShimmed);
	    };
	    StyleCompiler.prototype._compileStyles = function (stylesVar, plainStyles, absUrls, shim) {
	        var _this = this;
	        var styleExpressions = plainStyles.map(function (plainStyle) { return o.literal(_this._shimIfNeeded(plainStyle, shim)); });
	        var dependencies = [];
	        for (var i = 0; i < absUrls.length; i++) {
	            var identifier = new compile_metadata_1.CompileIdentifierMetadata({ name: getStylesVarName(null) });
	            dependencies.push(new StylesCompileDependency(absUrls[i], shim, identifier));
	            styleExpressions.push(new o.ExternalExpr(identifier));
	        }
	        // styles variable contains plain strings and arrays of other styles arrays (recursive),
	        // so we set its type to dynamic.
	        var stmt = o.variable(stylesVar)
	            .set(o.literalArr(styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])))
	            .toDeclStmt(null, [o.StmtModifier.Final]);
	        return new StylesCompileResult([stmt], stylesVar, dependencies);
	    };
	    StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	    };
	    /** @nocollapse */
	    StyleCompiler.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    StyleCompiler.ctorParameters = [
	        { type: url_resolver_1.UrlResolver, },
	    ];
	    return StyleCompiler;
	}());
	exports.StyleCompiler = StyleCompiler;
	function getStylesVarName(component) {
	    var result = "styles";
	    if (lang_1.isPresent(component)) {
	        result += "_" + component.type.name;
	    }
	    return result;
	}
	//# sourceMappingURL=style_compiler.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	/**
	 * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	 *
	 * Please make sure to keep to edits in sync with the source file.
	 *
	 * Source:
	 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	 *
	 * The original file level comment is reproduced below
	 */
	/*
	  This is a limited shim for ShadowDOM css styling.
	  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	  The intention here is to support only the styling features which can be
	  relatively simply implemented. The goal is to allow users to avoid the
	  most obvious pitfalls and do so without compromising performance significantly.
	  For ShadowDOM styling that's not covered here, a set of best practices
	  can be provided that should allow users to accomplish more complex styling.

	  The following is a list of specific ShadowDOM styling features and a brief
	  discussion of the approach used to shim.

	  Shimmed features:

	  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	  element using the :host rule. To shim this feature, the :host styles are
	  reformatted and prefixed with a given scope name and promoted to a
	  document level stylesheet.
	  For example, given a scope name of .foo, a rule like this:

	    :host {
	        background: red;
	      }
	    }

	  becomes:

	    .foo {
	      background: red;
	    }

	  * encapsultion: Styles defined within ShadowDOM, apply only to
	  dom inside the ShadowDOM. Polymer uses one of two techniques to implement
	  this feature.

	  By default, rules are prefixed with the host element tag name
	  as a descendant selector. This ensures styling does not leak out of the 'top'
	  of the element's ShadowDOM. For example,

	  div {
	      font-weight: bold;
	    }

	  becomes:

	  x-foo div {
	      font-weight: bold;
	    }

	  becomes:


	  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	  selectors are scoped by adding an attribute selector suffix to each
	  simple selector that contains the host element tag name. Each element
	  in the element's ShadowDOM template is also given the scope attribute.
	  Thus, these rules match only elements that have the scope attribute.
	  For example, given a scope name of x-foo, a rule like this:

	    div {
	      font-weight: bold;
	    }

	  becomes:

	    div[x-foo] {
	      font-weight: bold;
	    }

	  Note that elements that are dynamically added to a scope must have the scope
	  selector added to them manually.

	  * upper/lower bound encapsulation: Styles which are defined outside a
	  shadowRoot should not cross the ShadowDOM boundary and should not apply
	  inside a shadowRoot.

	  This styling behavior is not emulated. Some possible ways to do this that
	  were rejected due to complexity and/or performance concerns include: (1) reset
	  every possible property for every possible selector for a given scope name;
	  (2) re-implement css in javascript.

	  As an alternative, users should make sure to use selectors
	  specific to the scope in which they are working.

	  * ::distributed: This behavior is not emulated. It's often not necessary
	  to style the contents of a specific insertion point and instead, descendants
	  of the host element can be styled selectively. Users can also create an
	  extra node around an insertion point and style that node's contents
	  via descendent selectors. For example, with a shadowRoot like this:

	    <style>
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <content></content>

	  could become:

	    <style>
	      / *@polyfill .content-container div * /
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <div class="content-container">
	      <content></content>
	    </div>

	  Note the use of @polyfill in the comment above a ShadowDOM specific style
	  declaration. This is a directive to the styling shim to use the selector
	  in comments in lieu of the next selector when running under polyfill.
	*/
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /*
	    * Shim some cssText with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    *
	    * When strictStyling is true:
	    * - selector is the attribute added to all elements inside the host,
	    * - hostSelector is the attribute added to the host itself.
	    */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        cssText = stripComments(cssText);
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector);
	    };
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /*
	     * Process styles to convert native ShadowDOM rules that will trip
	     * up the css parser; we rely on decorating the stylesheet with inert rules.
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-next-selector { content: ':host menu-item'; }
	     * ::content menu-item {
	     *
	     * to this:
	     *
	     * scopeName menu-item {
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m /** TODO #9100 */) { return m[1] + '{'; });
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-rule {
	     *   content: ':host menu-item';
	     * ...
	     * }
	     *
	     * to this:
	     *
	     * scopeName menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m /** TODO #9100 */) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[1], '');
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            return m[3] + rule;
	        });
	    };
	    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	     *
	     *  .foo {... }
	     *
	     *  and converts this to
	     *
	     *  scopeName .foo { ... }
	    */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (lang_1.isPresent(scopeSelector)) {
	            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	        }
	        cssText = cssText + '\n' + unscoped;
	        return cssText.trim();
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	     * occasions, e.g. -webkit-calc on Safari.)
	     * For example, we convert this rule:
	     *
	     * @polyfill-unscoped-rule {
	     *   content: 'menu-item';
	     * ... }
	     *
	     * to this:
	     *
	     * menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var r = '', m;
	        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
	            r += rule + '\n\n';
	        }
	        return r;
	    };
	    /*
	     * convert a rule like :host(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar
	    */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /*
	     * convert a rule like :host-context(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar, .foo scopeName > .bar { }
	     *
	     * and
	     *
	     * :host-context(.foo:host) .bar { ... }
	     *
	     * to
	     *
	     * scopeName.foo .bar { ... }
	    */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // p1 = :host, p2 = contents of (), p3 rest of rule
	        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m /** TODO #9100 */) {
	            if (lang_1.isPresent(m[2])) {
	                var parts = m[2].split(','), r = [];
	                for (var i = 0; i < parts.length; i++) {
	                    var p = parts[i];
	                    if (lang_1.isBlank(p))
	                        break;
	                    p = p.trim();
	                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
	    };
	    /*
	     * Convert combinators like ::shadow and pseudo-elements like ::content
	     * by replacing with space.
	    */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	            cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	        }
	        return cssText;
	    };
	    // change a selector like 'div' to 'name div'
	    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        return processRules(cssText, function (rule) {
	            var selector = rule.selector;
	            var content = rule.content;
	            if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {
	                selector =
	                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	            }
	            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports')) {
	                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	            }
	            return new CssRule(selector, content);
	        });
	    };
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var r = [], parts = selector.split(',');
	        for (var i = 0; i < parts.length; i++) {
	            var p = parts[i].trim();
	            var deepParts = lang_1.StringWrapper.split(p, _shadowDeepSelectors);
	            var shallowPart = deepParts[0];
	            if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                deepParts[0] = strict && !lang_1.StringWrapper.contains(shallowPart, _polyfillHostNoCombinator) ?
	                    this._applyStrictSelectorScope(shallowPart, scopeSelector) :
	                    this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	            }
	            // replace /deep/ with a space for child selectors
	            r.push(deepParts.join(' '));
	        }
	        return r.join(', ');
	    };
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var re = this._makeScopeMatcher(scopeSelector);
	        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
	    };
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var lre = /\[/g;
	        var rre = /\]/g;
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponentsjs: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    // scope via name and [is=name]
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	            return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
	        }
	        else {
	            return scopeSelector + ' ' + selector;
	        }
	    };
	    // return a selector with [name] suffix on each simple selector
	    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
	        var isRe = /\[is=([^\]]*)\]/g;
	        scopeSelector =
	            lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m /** TODO #9100 */) { return m[1]; });
	        var splits = [' ', '>', '+', '~'], scoped = selector, attrName = '[' + scopeSelector + ']';
	        for (var i = 0; i < splits.length; i++) {
	            var sep = splits[i];
	            var parts = scoped.split(sep);
	            scoped = parts
	                .map(function (p) {
	                // remove :host since it should be unnecessary
	                var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	                if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) &&
	                    !lang_1.StringWrapper.contains(t, attrName)) {
	                    var re = /([^:]*)(:*)(.*)/g;
	                    var m = lang_1.RegExpWrapper.firstMatch(re, t);
	                    if (lang_1.isPresent(m)) {
	                        p = m[1] + attrName + m[2] + m[3];
	                    }
	                }
	                return p;
	            })
	                .join(sep);
	        }
	        return scoped;
	    };
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	        return selector;
	    };
	    return ShadowCss;
	}());
	exports.ShadowCss = ShadowCss;
	var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
	var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [
	    /::shadow/g, /::content/g,
	    // Deprecated selectors
	    // TODO(vicb): see https://github.com/angular/clang-format/issues/16
	    // clang-format off
	    /\/shadow-deep\//g,
	    /\/shadow\//g,
	];
	var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = /:host/gim;
	var _colonHostContextRe = /:host-context/gim;
	var _commentRe = /\/\*[\s\S]*?\*\//g;
	function stripComments(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, _commentRe, function (_ /** TODO #9100 */) { return ''; });
	}
	var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	var _curlyRe = /([{}])/g;
	var OPEN_CURLY = '{';
	var CLOSE_CURLY = '}';
	var BLOCK_PLACEHOLDER = '%BLOCK%';
	var CssRule = (function () {
	    function CssRule(selector, content) {
	        this.selector = selector;
	        this.content = content;
	    }
	    return CssRule;
	}());
	exports.CssRule = CssRule;
	function processRules(input, ruleCallback) {
	    var inputWithEscapedBlocks = escapeBlocks(input);
	    var nextBlockIndex = 0;
	    return lang_1.StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function (m /** TODO #9100 */) {
	        var selector = m[2];
	        var content = '';
	        var suffix = m[4];
	        var contentPrefix = '';
	        if (lang_1.isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {
	            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	            suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
	            contentPrefix = '{';
	        }
	        var rule = ruleCallback(new CssRule(selector, content));
	        return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	    });
	}
	exports.processRules = processRules;
	var StringWithEscapedBlocks = (function () {
	    function StringWithEscapedBlocks(escapedString, blocks) {
	        this.escapedString = escapedString;
	        this.blocks = blocks;
	    }
	    return StringWithEscapedBlocks;
	}());
	function escapeBlocks(input) {
	    var inputParts = lang_1.StringWrapper.split(input, _curlyRe);
	    var resultParts = [];
	    var escapedBlocks = [];
	    var bracketCount = 0;
	    var currentBlockParts = [];
	    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
	        var part = inputParts[partIndex];
	        if (part == CLOSE_CURLY) {
	            bracketCount--;
	        }
	        if (bracketCount > 0) {
	            currentBlockParts.push(part);
	        }
	        else {
	            if (currentBlockParts.length > 0) {
	                escapedBlocks.push(currentBlockParts.join(''));
	                resultParts.push(BLOCK_PLACEHOLDER);
	                currentBlockParts = [];
	            }
	            resultParts.push(part);
	        }
	        if (part == OPEN_CURLY) {
	            bracketCount++;
	        }
	    }
	    if (currentBlockParts.length > 0) {
	        escapedBlocks.push(currentBlockParts.join(''));
	        resultParts.push(BLOCK_PLACEHOLDER);
	    }
	    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	}
	//# sourceMappingURL=shadow_css.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var animation_compiler_1 = __webpack_require__(66);
	var config_1 = __webpack_require__(36);
	var compile_element_1 = __webpack_require__(71);
	var compile_view_1 = __webpack_require__(76);
	var view_binder_1 = __webpack_require__(78);
	var view_builder_1 = __webpack_require__(84);
	var ViewCompileResult = (function () {
	    function ViewCompileResult(statements, viewFactoryVar, dependencies) {
	        this.statements = statements;
	        this.viewFactoryVar = viewFactoryVar;
	        this.dependencies = dependencies;
	    }
	    return ViewCompileResult;
	}());
	exports.ViewCompileResult = ViewCompileResult;
	var ViewCompiler = (function () {
	    function ViewCompiler(_genConfig) {
	        this._genConfig = _genConfig;
	        this._animationCompiler = new animation_compiler_1.AnimationCompiler();
	    }
	    ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes) {
	        var dependencies = [];
	        var compiledAnimations = this._animationCompiler.compileComponent(component);
	        var statements = [];
	        compiledAnimations.map(function (entry) {
	            statements.push(entry.statesMapStatement);
	            statements.push(entry.fnStatement);
	        });
	        var view = new compile_view_1.CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, compile_element_1.CompileElement.createNull(), []);
	        view_builder_1.buildView(view, template, dependencies);
	        // Need to separate binding from creation to be able to refer to
	        // variables that have been declared after usage.
	        view_binder_1.bindView(view, template);
	        view_builder_1.finishView(view, statements);
	        return new ViewCompileResult(statements, view.viewFactory.name, dependencies);
	    };
	    /** @nocollapse */
	    ViewCompiler.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    ViewCompiler.ctorParameters = [
	        { type: config_1.CompilerConfig, },
	    ];
	    return ViewCompiler;
	}());
	exports.ViewCompiler = ViewCompiler;
	//# sourceMappingURL=view_compiler.js.map

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var animation_ast_1 = __webpack_require__(67);
	var animation_parser_1 = __webpack_require__(68);
	var CompiledAnimation = (function () {
	    function CompiledAnimation(name, statesMapStatement, statesVariableName, fnStatement, fnVariable) {
	        this.name = name;
	        this.statesMapStatement = statesMapStatement;
	        this.statesVariableName = statesVariableName;
	        this.fnStatement = fnStatement;
	        this.fnVariable = fnVariable;
	    }
	    return CompiledAnimation;
	}());
	exports.CompiledAnimation = CompiledAnimation;
	var AnimationCompiler = (function () {
	    function AnimationCompiler() {
	    }
	    AnimationCompiler.prototype.compileComponent = function (component) {
	        var compiledAnimations = [];
	        var index = 0;
	        component.template.animations.forEach(function (entry) {
	            var result = animation_parser_1.parseAnimationEntry(entry);
	            if (result.errors.length > 0) {
	                var errorMessage = '';
	                result.errors.forEach(function (error) { errorMessage += '\n- ' + error.msg; });
	                // todo (matsko): include the component name when throwing
	                throw new exceptions_1.BaseException(("Unable to parse the animation sequence for \"" + entry.name + "\" due to the following errors: ") +
	                    errorMessage);
	            }
	            var factoryName = component.type.name + "_" + entry.name + "_" + index;
	            index++;
	            var visitor = new _AnimationBuilder(entry.name, factoryName);
	            compiledAnimations.push(visitor.build(result.ast));
	        });
	        return compiledAnimations;
	    };
	    return AnimationCompiler;
	}());
	exports.AnimationCompiler = AnimationCompiler;
	var _ANIMATION_FACTORY_ELEMENT_VAR = o.variable('element');
	var _ANIMATION_DEFAULT_STATE_VAR = o.variable('defaultStateStyles');
	var _ANIMATION_FACTORY_VIEW_VAR = o.variable('view');
	var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
	var _ANIMATION_CURRENT_STATE_VAR = o.variable('currentState');
	var _ANIMATION_NEXT_STATE_VAR = o.variable('nextState');
	var _ANIMATION_PLAYER_VAR = o.variable('player');
	var _ANIMATION_START_STATE_STYLES_VAR = o.variable('startStateStyles');
	var _ANIMATION_END_STATE_STYLES_VAR = o.variable('endStateStyles');
	var _ANIMATION_COLLECTED_STYLES = o.variable('collectedStyles');
	var EMPTY_MAP = o.literalMap([]);
	var _AnimationBuilder = (function () {
	    function _AnimationBuilder(animationName, factoryName) {
	        this.animationName = animationName;
	        this._fnVarName = factoryName + '_factory';
	        this._statesMapVarName = factoryName + '_states';
	        this._statesMapVar = o.variable(this._statesMapVarName);
	    }
	    _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
	        var stylesArr = [];
	        if (context.isExpectingFirstStyleStep) {
	            stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
	            context.isExpectingFirstStyleStep = false;
	        }
	        ast.styles.forEach(function (entry) {
	            stylesArr.push(o.literalMap(collection_1.StringMapWrapper.keys(entry).map(function (key) { return [key, o.literal(entry[key])]; })));
	        });
	        return o.importExpr(identifiers_1.Identifiers.AnimationStyles).instantiate([
	            o.importExpr(identifiers_1.Identifiers.collectAndResolveStyles).callFn([
	                _ANIMATION_COLLECTED_STYLES, o.literalArr(stylesArr)
	            ])
	        ]);
	    };
	    _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
	        return o.importExpr(identifiers_1.Identifiers.AnimationKeyframe).instantiate([
	            o.literal(ast.offset), ast.styles.visit(this, context)
	        ]);
	    };
	    _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
	        var _this = this;
	        if (context.endStateAnimateStep === ast) {
	            return this._visitEndStateAnimation(ast, context);
	        }
	        var startingStylesExpr = ast.startingStyles.visit(this, context);
	        var keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });
	        return this._callAnimateMethod(ast, startingStylesExpr, o.literalArr(keyframeExpressions));
	    };
	    /** @internal */
	    _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
	        var _this = this;
	        var startingStylesExpr = ast.startingStyles.visit(this, context);
	        var keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });
	        var keyframesExpr = o.importExpr(identifiers_1.Identifiers.balanceAnimationKeyframes).callFn([
	            _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,
	            o.literalArr(keyframeExpressions)
	        ]);
	        return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr);
	    };
	    /** @internal */
	    _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr) {
	        return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [
	            _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, o.literal(ast.duration),
	            o.literal(ast.delay), o.literal(ast.easing)
	        ]);
	    };
	    _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
	        var _this = this;
	        var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	        return o.importExpr(identifiers_1.Identifiers.AnimationSequencePlayer).instantiate([o.literalArr(playerExprs)]);
	    };
	    _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
	        var _this = this;
	        var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	        return o.importExpr(identifiers_1.Identifiers.AnimationGroupPlayer).instantiate([o.literalArr(playerExprs)]);
	    };
	    _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
	        var flatStyles = {};
	        _getStylesArray(ast).forEach(function (entry) {
	            collection_1.StringMapWrapper.forEach(entry, function (value, key) { flatStyles[key] = value; });
	        });
	        context.stateMap.registerState(ast.stateName, flatStyles);
	    };
	    _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
	        var steps = ast.animation.steps;
	        var lastStep = steps[steps.length - 1];
	        if (_isEndStateAnimateStep(lastStep)) {
	            context.endStateAnimateStep = lastStep;
	        }
	        context.isExpectingFirstStyleStep = true;
	        var stateChangePreconditions = [];
	        ast.stateChanges.forEach(function (stateChange) {
	            stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)
	                .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
	            if (stateChange.fromState != core_private_1.ANY_STATE) {
	                context.stateMap.registerState(stateChange.fromState);
	            }
	            if (stateChange.toState != core_private_1.ANY_STATE) {
	                context.stateMap.registerState(stateChange.toState);
	            }
	        });
	        var animationPlayerExpr = ast.animation.visit(this, context);
	        var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });
	        var precondition = _ANIMATION_PLAYER_VAR.equals(o.NULL_EXPR).and(reducedStateChangesPrecondition);
	        return new o.IfStmt(precondition, [_ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt()]);
	    };
	    _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
	        var _this = this;
	        // visit each of the declarations first to build the context state map
	        ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });
	        // this should always be defined even if the user overrides it
	        context.stateMap.registerState(core_private_1.DEFAULT_STATE, {});
	        var statements = [];
	        statements.push(_ANIMATION_FACTORY_VIEW_VAR
	            .callMethod('cancelActiveAnimation', [
	            _ANIMATION_FACTORY_ELEMENT_VAR, o.literal(this.animationName),
	            _ANIMATION_NEXT_STATE_VAR.equals(o.literal(core_private_1.EMPTY_STATE))
	        ])
	            .toStmt());
	        statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP).toDeclStmt());
	        statements.push(_ANIMATION_PLAYER_VAR.set(o.NULL_EXPR).toDeclStmt());
	        statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(o.literal(core_private_1.DEFAULT_STATE)))
	            .toDeclStmt());
	        statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))
	            .toDeclStmt());
	        statements.push(new o.IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(o.NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	        statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))
	            .toDeclStmt());
	        statements.push(new o.IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(o.NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	        var RENDER_STYLES_FN = o.importExpr(identifiers_1.Identifiers.renderStyles);
	        // before we start any animation we want to clear out the starting
	        // styles from the element's style property (since they were placed
	        // there at the end of the last animation
	        statements.push(RENDER_STYLES_FN
	            .callFn([
	            _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	            o.importExpr(identifiers_1.Identifiers.clearStyles).callFn([_ANIMATION_START_STATE_STYLES_VAR])
	        ])
	            .toStmt());
	        ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });
	        // this check ensures that the animation factory always returns a player
	        // so that the onDone callback can be used for tracking
	        statements.push(new o.IfStmt(_ANIMATION_PLAYER_VAR.equals(o.NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(o.importExpr(identifiers_1.Identifiers.NoOpAnimationPlayer).instantiate([]))
	                .toStmt()]));
	        // once complete we want to apply the styles on the element
	        // since the destination state's values should persist once
	        // the animation sequence has completed.
	        statements.push(_ANIMATION_PLAYER_VAR
	            .callMethod('onDone', [o.fn([], [RENDER_STYLES_FN
	                    .callFn([
	                    _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                    o.importExpr(identifiers_1.Identifiers.prepareFinalAnimationStyles).callFn([
	                        _ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR
	                    ])
	                ])
	                    .toStmt()])])
	            .toStmt());
	        statements.push(_ANIMATION_FACTORY_VIEW_VAR
	            .callMethod('registerAndStartAnimation', [
	            _ANIMATION_FACTORY_ELEMENT_VAR, o.literal(this.animationName),
	            _ANIMATION_PLAYER_VAR
	        ])
	            .toStmt());
	        return o.fn([
	            new o.FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, o.importType(identifiers_1.Identifiers.AppView, [o.DYNAMIC_TYPE])),
	            new o.FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, o.DYNAMIC_TYPE),
	            new o.FnParam(_ANIMATION_CURRENT_STATE_VAR.name, o.DYNAMIC_TYPE),
	            new o.FnParam(_ANIMATION_NEXT_STATE_VAR.name, o.DYNAMIC_TYPE)
	        ], statements);
	    };
	    _AnimationBuilder.prototype.build = function (ast) {
	        var context = new _AnimationBuilderContext();
	        var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
	        var fnVariable = o.variable(this._fnVarName);
	        var lookupMap = [];
	        collection_1.StringMapWrapper.forEach(context.stateMap.states, function (value, stateName) {
	            var variableValue = EMPTY_MAP;
	            if (lang_1.isPresent(value)) {
	                var styleMap_1 = [];
	                collection_1.StringMapWrapper.forEach(value, function (value, key) {
	                    styleMap_1.push([key, o.literal(value)]);
	                });
	                variableValue = o.literalMap(styleMap_1);
	            }
	            lookupMap.push([stateName, variableValue]);
	        });
	        var compiledStatesMapExpr = this._statesMapVar.set(o.literalMap(lookupMap)).toDeclStmt();
	        return new CompiledAnimation(this.animationName, compiledStatesMapExpr, this._statesMapVarName, fnStatement, fnVariable);
	    };
	    return _AnimationBuilder;
	}());
	var _AnimationBuilderContext = (function () {
	    function _AnimationBuilderContext() {
	        this.stateMap = new _AnimationBuilderStateMap();
	        this.endStateAnimateStep = null;
	        this.isExpectingFirstStyleStep = false;
	    }
	    return _AnimationBuilderContext;
	}());
	var _AnimationBuilderStateMap = (function () {
	    function _AnimationBuilderStateMap() {
	        this._states = {};
	    }
	    Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
	        get: function () { return this._states; },
	        enumerable: true,
	        configurable: true
	    });
	    _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
	        if (value === void 0) { value = null; }
	        var existingEntry = this._states[name];
	        if (lang_1.isBlank(existingEntry)) {
	            this._states[name] = value;
	        }
	    };
	    return _AnimationBuilderStateMap;
	}());
	function _compareToAnimationStateExpr(value, animationState) {
	    var emptyStateLiteral = o.literal(core_private_1.EMPTY_STATE);
	    switch (animationState) {
	        case core_private_1.EMPTY_STATE:
	            return value.equals(emptyStateLiteral);
	        case core_private_1.ANY_STATE:
	            return o.literal(true);
	        default:
	            return value.equals(o.literal(animationState));
	    }
	}
	function _isEndStateAnimateStep(step) {
	    // the final animation step is characterized by having only TWO
	    // keyframe values and it must have zero styles for both keyframes
	    if (step instanceof animation_ast_1.AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
	        var styles1 = _getStylesArray(step.keyframes[0])[0];
	        var styles2 = _getStylesArray(step.keyframes[1])[0];
	        return collection_1.StringMapWrapper.isEmpty(styles1) && collection_1.StringMapWrapper.isEmpty(styles2);
	    }
	    return false;
	}
	function _getStylesArray(obj) {
	    return obj.styles.styles;
	}
	//# sourceMappingURL=animation_compiler.js.map

/***/ },
/* 67 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AnimationAst = (function () {
	    function AnimationAst() {
	        this.startTime = 0;
	        this.playTime = 0;
	    }
	    return AnimationAst;
	}());
	exports.AnimationAst = AnimationAst;
	var AnimationStateAst = (function (_super) {
	    __extends(AnimationStateAst, _super);
	    function AnimationStateAst() {
	        _super.apply(this, arguments);
	    }
	    return AnimationStateAst;
	}(AnimationAst));
	exports.AnimationStateAst = AnimationStateAst;
	var AnimationEntryAst = (function (_super) {
	    __extends(AnimationEntryAst, _super);
	    function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
	        _super.call(this);
	        this.name = name;
	        this.stateDeclarations = stateDeclarations;
	        this.stateTransitions = stateTransitions;
	    }
	    AnimationEntryAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationEntry(this, context);
	    };
	    return AnimationEntryAst;
	}(AnimationAst));
	exports.AnimationEntryAst = AnimationEntryAst;
	var AnimationStateDeclarationAst = (function (_super) {
	    __extends(AnimationStateDeclarationAst, _super);
	    function AnimationStateDeclarationAst(stateName, styles) {
	        _super.call(this);
	        this.stateName = stateName;
	        this.styles = styles;
	    }
	    AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationStateDeclaration(this, context);
	    };
	    return AnimationStateDeclarationAst;
	}(AnimationStateAst));
	exports.AnimationStateDeclarationAst = AnimationStateDeclarationAst;
	var AnimationStateTransitionExpression = (function () {
	    function AnimationStateTransitionExpression(fromState, toState) {
	        this.fromState = fromState;
	        this.toState = toState;
	    }
	    return AnimationStateTransitionExpression;
	}());
	exports.AnimationStateTransitionExpression = AnimationStateTransitionExpression;
	var AnimationStateTransitionAst = (function (_super) {
	    __extends(AnimationStateTransitionAst, _super);
	    function AnimationStateTransitionAst(stateChanges, animation) {
	        _super.call(this);
	        this.stateChanges = stateChanges;
	        this.animation = animation;
	    }
	    AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationStateTransition(this, context);
	    };
	    return AnimationStateTransitionAst;
	}(AnimationStateAst));
	exports.AnimationStateTransitionAst = AnimationStateTransitionAst;
	var AnimationStepAst = (function (_super) {
	    __extends(AnimationStepAst, _super);
	    function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
	        _super.call(this);
	        this.startingStyles = startingStyles;
	        this.keyframes = keyframes;
	        this.duration = duration;
	        this.delay = delay;
	        this.easing = easing;
	    }
	    AnimationStepAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationStep(this, context);
	    };
	    return AnimationStepAst;
	}(AnimationAst));
	exports.AnimationStepAst = AnimationStepAst;
	var AnimationStylesAst = (function (_super) {
	    __extends(AnimationStylesAst, _super);
	    function AnimationStylesAst(styles) {
	        _super.call(this);
	        this.styles = styles;
	    }
	    AnimationStylesAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationStyles(this, context);
	    };
	    return AnimationStylesAst;
	}(AnimationAst));
	exports.AnimationStylesAst = AnimationStylesAst;
	var AnimationKeyframeAst = (function (_super) {
	    __extends(AnimationKeyframeAst, _super);
	    function AnimationKeyframeAst(offset, styles) {
	        _super.call(this);
	        this.offset = offset;
	        this.styles = styles;
	    }
	    AnimationKeyframeAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationKeyframe(this, context);
	    };
	    return AnimationKeyframeAst;
	}(AnimationAst));
	exports.AnimationKeyframeAst = AnimationKeyframeAst;
	var AnimationWithStepsAst = (function (_super) {
	    __extends(AnimationWithStepsAst, _super);
	    function AnimationWithStepsAst(steps) {
	        _super.call(this);
	        this.steps = steps;
	    }
	    return AnimationWithStepsAst;
	}(AnimationAst));
	exports.AnimationWithStepsAst = AnimationWithStepsAst;
	var AnimationGroupAst = (function (_super) {
	    __extends(AnimationGroupAst, _super);
	    function AnimationGroupAst(steps) {
	        _super.call(this, steps);
	    }
	    AnimationGroupAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationGroup(this, context);
	    };
	    return AnimationGroupAst;
	}(AnimationWithStepsAst));
	exports.AnimationGroupAst = AnimationGroupAst;
	var AnimationSequenceAst = (function (_super) {
	    __extends(AnimationSequenceAst, _super);
	    function AnimationSequenceAst(steps) {
	        _super.call(this, steps);
	    }
	    AnimationSequenceAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAnimationSequence(this, context);
	    };
	    return AnimationSequenceAst;
	}(AnimationWithStepsAst));
	exports.AnimationSequenceAst = AnimationSequenceAst;
	//# sourceMappingURL=animation_ast.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_private_1 = __webpack_require__(12);
	var compile_metadata_1 = __webpack_require__(33);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var math_1 = __webpack_require__(69);
	var parse_util_1 = __webpack_require__(26);
	var animation_ast_1 = __webpack_require__(67);
	var styles_collection_1 = __webpack_require__(70);
	var _INITIAL_KEYFRAME = 0;
	var _TERMINAL_KEYFRAME = 1;
	var _ONE_SECOND = 1000;
	var AnimationParseError = (function (_super) {
	    __extends(AnimationParseError, _super);
	    function AnimationParseError(message /** TODO #9100 */) {
	        _super.call(this, null, message);
	    }
	    AnimationParseError.prototype.toString = function () { return "" + this.msg; };
	    return AnimationParseError;
	}(parse_util_1.ParseError));
	exports.AnimationParseError = AnimationParseError;
	var ParsedAnimationResult = (function () {
	    function ParsedAnimationResult(ast, errors) {
	        this.ast = ast;
	        this.errors = errors;
	    }
	    return ParsedAnimationResult;
	}());
	exports.ParsedAnimationResult = ParsedAnimationResult;
	function parseAnimationEntry(entry) {
	    var errors = [];
	    var stateStyles = {};
	    var transitions = [];
	    var stateDeclarationAsts = [];
	    entry.definitions.forEach(function (def) {
	        if (def instanceof compile_metadata_1.CompileAnimationStateDeclarationMetadata) {
	            _parseAnimationDeclarationStates(def, errors).forEach(function (ast) {
	                stateDeclarationAsts.push(ast);
	                stateStyles[ast.stateName] = ast.styles;
	            });
	        }
	        else {
	            transitions.push(def);
	        }
	    });
	    var stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, errors); });
	    var ast = new animation_ast_1.AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
	    return new ParsedAnimationResult(ast, errors);
	}
	exports.parseAnimationEntry = parseAnimationEntry;
	function _parseAnimationDeclarationStates(stateMetadata, errors) {
	    var styleValues = [];
	    stateMetadata.styles.styles.forEach(function (stylesEntry) {
	        // TODO (matsko): change this when we get CSS class integration support
	        if (lang_1.isStringMap(stylesEntry)) {
	            styleValues.push(stylesEntry);
	        }
	        else {
	            errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
	        }
	    });
	    var defStyles = new animation_ast_1.AnimationStylesAst(styleValues);
	    var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
	    return states.map(function (state) { return new animation_ast_1.AnimationStateDeclarationAst(state, defStyles); });
	}
	function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {
	    var styles = new styles_collection_1.StylesCollection();
	    var transitionExprs = [];
	    var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
	    transitionStates.forEach(function (expr) {
	        _parseAnimationTransitionExpr(expr, errors).forEach(function (transExpr) {
	            transitionExprs.push(transExpr);
	        });
	    });
	    var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
	    var animation = _normalizeStyleSteps(entry, stateStyles, errors);
	    var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
	    if (errors.length == 0) {
	        _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
	    }
	    var sequenceAst = (animationAst instanceof animation_ast_1.AnimationSequenceAst) ?
	        animationAst :
	        new animation_ast_1.AnimationSequenceAst([animationAst]);
	    return new animation_ast_1.AnimationStateTransitionAst(transitionExprs, sequenceAst);
	}
	function _parseAnimationTransitionExpr(eventStr, errors) {
	    var expressions = [];
	    var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
	    if (!lang_1.isPresent(match) || match.length < 4) {
	        errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
	        return expressions;
	    }
	    var fromState = match[1];
	    var separator = match[2];
	    var toState = match[3];
	    expressions.push(new animation_ast_1.AnimationStateTransitionExpression(fromState, toState));
	    var isFullAnyStateExpr = fromState == core_private_1.ANY_STATE && toState == core_private_1.ANY_STATE;
	    if (separator[0] == '<' && !isFullAnyStateExpr) {
	        expressions.push(new animation_ast_1.AnimationStateTransitionExpression(toState, fromState));
	    }
	    return expressions;
	}
	function _fetchSylesFromState(stateName, stateStyles) {
	    var entry = stateStyles[stateName];
	    if (lang_1.isPresent(entry)) {
	        var styles = entry.styles;
	        return new compile_metadata_1.CompileAnimationStyleMetadata(0, styles);
	    }
	    return null;
	}
	function _normalizeAnimationEntry(entry) {
	    return lang_1.isArray(entry) ? new compile_metadata_1.CompileAnimationSequenceMetadata(entry) :
	        entry;
	}
	function _normalizeStyleMetadata(entry, stateStyles, errors) {
	    var normalizedStyles = [];
	    entry.styles.forEach(function (styleEntry) {
	        if (lang_1.isString(styleEntry)) {
	            collection_1.ListWrapper.addAll(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
	        }
	        else {
	            normalizedStyles.push(styleEntry);
	        }
	    });
	    return normalizedStyles;
	}
	function _normalizeStyleSteps(entry, stateStyles, errors) {
	    var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);
	    return new compile_metadata_1.CompileAnimationSequenceMetadata(steps);
	}
	function _mergeAnimationStyles(stylesList, newItem) {
	    if (lang_1.isStringMap(newItem) && stylesList.length > 0) {
	        var lastIndex = stylesList.length - 1;
	        var lastItem = stylesList[lastIndex];
	        if (lang_1.isStringMap(lastItem)) {
	            stylesList[lastIndex] = collection_1.StringMapWrapper.merge(lastItem, newItem);
	            return;
	        }
	    }
	    stylesList.push(newItem);
	}
	function _normalizeStyleStepEntry(entry, stateStyles, errors) {
	    var steps;
	    if (entry instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
	        steps = entry.steps;
	    }
	    else {
	        return [entry];
	    }
	    var newSteps = [];
	    var combinedStyles;
	    steps.forEach(function (step) {
	        if (step instanceof compile_metadata_1.CompileAnimationStyleMetadata) {
	            // this occurs when a style step is followed by a previous style step
	            // or when the first style step is run. We want to concatenate all subsequent
	            // style steps together into a single style step such that we have the correct
	            // starting keyframe data to pass into the animation player.
	            if (!lang_1.isPresent(combinedStyles)) {
	                combinedStyles = [];
	            }
	            _normalizeStyleMetadata(step, stateStyles, errors)
	                .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });
	        }
	        else {
	            // it is important that we create a metadata entry of the combined styles
	            // before we go on an process the animate, sequence or group metadata steps.
	            // This will ensure that the AST will have the previous styles painted on
	            // screen before any further animations that use the styles take place.
	            if (lang_1.isPresent(combinedStyles)) {
	                newSteps.push(new compile_metadata_1.CompileAnimationStyleMetadata(0, combinedStyles));
	                combinedStyles = null;
	            }
	            if (step instanceof compile_metadata_1.CompileAnimationAnimateMetadata) {
	                // we do not recurse into CompileAnimationAnimateMetadata since
	                // those style steps are not going to be squashed
	                var animateStyleValue = step.styles;
	                if (animateStyleValue instanceof compile_metadata_1.CompileAnimationStyleMetadata) {
	                    animateStyleValue.styles =
	                        _normalizeStyleMetadata(animateStyleValue, stateStyles, errors);
	                }
	                else if (animateStyleValue instanceof compile_metadata_1.CompileAnimationKeyframesSequenceMetadata) {
	                    animateStyleValue.steps.forEach(function (step) { step.styles = _normalizeStyleMetadata(step, stateStyles, errors); });
	                }
	            }
	            else if (step instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
	                var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);
	                step = step instanceof compile_metadata_1.CompileAnimationGroupMetadata ?
	                    new compile_metadata_1.CompileAnimationGroupMetadata(innerSteps) :
	                    new compile_metadata_1.CompileAnimationSequenceMetadata(innerSteps);
	            }
	            newSteps.push(step);
	        }
	    });
	    // this happens when only styles were animated within the sequence
	    if (lang_1.isPresent(combinedStyles)) {
	        newSteps.push(new compile_metadata_1.CompileAnimationStyleMetadata(0, combinedStyles));
	    }
	    return newSteps;
	}
	function _resolveStylesFromState(stateName, stateStyles, errors) {
	    var styles = [];
	    if (stateName[0] != ':') {
	        errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
	    }
	    else {
	        var normalizedStateName = stateName.substring(1);
	        var value = stateStyles[normalizedStateName];
	        if (!lang_1.isPresent(value)) {
	            errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
	        }
	        else {
	            value.styles.forEach(function (stylesEntry) {
	                if (lang_1.isStringMap(stylesEntry)) {
	                    styles.push(stylesEntry);
	                }
	            });
	        }
	    }
	    return styles;
	}
	var _AnimationTimings = (function () {
	    function _AnimationTimings(duration, delay, easing) {
	        this.duration = duration;
	        this.delay = delay;
	        this.easing = easing;
	    }
	    return _AnimationTimings;
	}());
	function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
	    var totalEntries = keyframeSequence.steps.length;
	    var totalOffsets = 0;
	    keyframeSequence.steps.forEach(function (step) { return totalOffsets += (lang_1.isPresent(step.offset) ? 1 : 0); });
	    if (totalOffsets > 0 && totalOffsets < totalEntries) {
	        errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
	        totalOffsets = totalEntries;
	    }
	    var limit = totalEntries - 1;
	    var margin = totalOffsets == 0 ? (1 / limit) : 0;
	    var rawKeyframes = [];
	    var index = 0;
	    var doSortKeyframes = false;
	    var lastOffset = 0;
	    keyframeSequence.steps.forEach(function (styleMetadata) {
	        var offset = styleMetadata.offset;
	        var keyframeStyles = {};
	        styleMetadata.styles.forEach(function (entry) {
	            collection_1.StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	                if (prop != 'offset') {
	                    keyframeStyles[prop] = value;
	                }
	            });
	        });
	        if (lang_1.isPresent(offset)) {
	            doSortKeyframes = doSortKeyframes || (offset < lastOffset);
	        }
	        else {
	            offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
	        }
	        rawKeyframes.push([offset, keyframeStyles]);
	        lastOffset = offset;
	        index++;
	    });
	    if (doSortKeyframes) {
	        collection_1.ListWrapper.sort(rawKeyframes, function (a, b) { return a[0] <= b[0] ? -1 : 1; });
	    }
	    var i;
	    var firstKeyframe = rawKeyframes[0];
	    if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
	        collection_1.ListWrapper.insert(rawKeyframes, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
	    }
	    var firstKeyframeStyles = firstKeyframe[1];
	    var limit = rawKeyframes.length - 1;
	    var lastKeyframe = rawKeyframes[limit];
	    if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
	        rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
	        limit++;
	    }
	    var lastKeyframeStyles = lastKeyframe[1];
	    for (i = 1; i <= limit; i++) {
	        var entry = rawKeyframes[i];
	        var styles = entry[1];
	        collection_1.StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	            if (!lang_1.isPresent(firstKeyframeStyles[prop])) {
	                firstKeyframeStyles[prop] = core_private_1.FILL_STYLE_FLAG;
	            }
	        });
	    }
	    for (i = limit - 1; i >= 0; i--) {
	        var entry = rawKeyframes[i];
	        var styles = entry[1];
	        collection_1.StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	            if (!lang_1.isPresent(lastKeyframeStyles[prop])) {
	                lastKeyframeStyles[prop] = value;
	            }
	        });
	    }
	    return rawKeyframes.map(function (entry) { return new animation_ast_1.AnimationKeyframeAst(entry[0], new animation_ast_1.AnimationStylesAst([entry[1]])); });
	}
	function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
	    var ast;
	    var playTime = 0;
	    var startingTime = currentTime;
	    if (entry instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
	        var maxDuration = 0;
	        var steps = [];
	        var isGroup = entry instanceof compile_metadata_1.CompileAnimationGroupMetadata;
	        var previousStyles;
	        entry.steps.forEach(function (entry) {
	            // these will get picked up by the next step...
	            var time = isGroup ? startingTime : currentTime;
	            if (entry instanceof compile_metadata_1.CompileAnimationStyleMetadata) {
	                entry.styles.forEach(function (stylesEntry) {
	                    // by this point we know that we only have stringmap values
	                    var map = stylesEntry;
	                    collection_1.StringMapWrapper.forEach(map, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	                        collectedStyles.insertAtTime(prop, time, value);
	                    });
	                });
	                previousStyles = entry.styles;
	                return;
	            }
	            var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
	            if (lang_1.isPresent(previousStyles)) {
	                if (entry instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
	                    var startingStyles = new animation_ast_1.AnimationStylesAst(previousStyles);
	                    steps.push(new animation_ast_1.AnimationStepAst(startingStyles, [], 0, 0, ''));
	                }
	                else {
	                    var innerStep = innerAst;
	                    collection_1.ListWrapper.addAll(innerStep.startingStyles.styles, previousStyles);
	                }
	                previousStyles = null;
	            }
	            var astDuration = innerAst.playTime;
	            currentTime += astDuration;
	            playTime += astDuration;
	            maxDuration = math_1.Math.max(astDuration, maxDuration);
	            steps.push(innerAst);
	        });
	        if (lang_1.isPresent(previousStyles)) {
	            var startingStyles = new animation_ast_1.AnimationStylesAst(previousStyles);
	            steps.push(new animation_ast_1.AnimationStepAst(startingStyles, [], 0, 0, ''));
	        }
	        if (isGroup) {
	            ast = new animation_ast_1.AnimationGroupAst(steps);
	            playTime = maxDuration;
	            currentTime = startingTime + playTime;
	        }
	        else {
	            ast = new animation_ast_1.AnimationSequenceAst(steps);
	        }
	    }
	    else if (entry instanceof compile_metadata_1.CompileAnimationAnimateMetadata) {
	        var timings = _parseTimeExpression(entry.timings, errors);
	        var styles = entry.styles;
	        var keyframes;
	        if (styles instanceof compile_metadata_1.CompileAnimationKeyframesSequenceMetadata) {
	            keyframes =
	                _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
	        }
	        else {
	            var styleData = styles;
	            var offset = _TERMINAL_KEYFRAME;
	            var styleAst = new animation_ast_1.AnimationStylesAst(styleData.styles);
	            var keyframe = new animation_ast_1.AnimationKeyframeAst(offset, styleAst);
	            keyframes = [keyframe];
	        }
	        ast = new animation_ast_1.AnimationStepAst(new animation_ast_1.AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
	        playTime = timings.duration + timings.delay;
	        currentTime += playTime;
	        keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return collection_1.StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	            return collectedStyles.insertAtTime(prop, currentTime, value);
	        }); }); });
	    }
	    else {
	        // if the code reaches this stage then an error
	        // has already been populated within the _normalizeStyleSteps()
	        // operation...
	        ast = new animation_ast_1.AnimationStepAst(null, [], 0, 0, '');
	    }
	    ast.playTime = playTime;
	    ast.startTime = startingTime;
	    return ast;
	}
	function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
	    // steps that only contain style will not be filled
	    if ((ast instanceof animation_ast_1.AnimationStepAst) && ast.keyframes.length > 0) {
	        var keyframes = ast.keyframes;
	        if (keyframes.length == 1) {
	            var endKeyframe = keyframes[0];
	            var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
	            ast.keyframes = [startKeyframe, endKeyframe];
	        }
	    }
	    else if (ast instanceof animation_ast_1.AnimationWithStepsAst) {
	        ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });
	    }
	}
	function _parseTimeExpression(exp, errors) {
	    var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/gi;
	    var duration;
	    var delay = 0;
	    var easing = null;
	    if (lang_1.isString(exp)) {
	        var matches = lang_1.RegExpWrapper.firstMatch(regex, exp);
	        if (!lang_1.isPresent(matches)) {
	            errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
	            return new _AnimationTimings(0, 0, null);
	        }
	        var durationMatch = lang_1.NumberWrapper.parseFloat(matches[1]);
	        var durationUnit = matches[2];
	        if (durationUnit == 's') {
	            durationMatch *= _ONE_SECOND;
	        }
	        duration = math_1.Math.floor(durationMatch);
	        var delayMatch = matches[3];
	        var delayUnit = matches[4];
	        if (lang_1.isPresent(delayMatch)) {
	            var delayVal = lang_1.NumberWrapper.parseFloat(delayMatch);
	            if (lang_1.isPresent(delayUnit) && delayUnit == 's') {
	                delayVal *= _ONE_SECOND;
	            }
	            delay = math_1.Math.floor(delayVal);
	        }
	        var easingVal = matches[5];
	        if (!lang_1.isBlank(easingVal)) {
	            easing = easingVal;
	        }
	    }
	    else {
	        duration = exp;
	    }
	    return new _AnimationTimings(duration, delay, easing);
	}
	function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
	    var values = {};
	    var endTime = startTime + duration;
	    endKeyframe.styles.styles.forEach(function (styleData) {
	        collection_1.StringMapWrapper.forEach(styleData, function (val /** TODO #9100 */, prop /** TODO #9100 */) {
	            if (prop == 'offset')
	                return;
	            var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
	            var resultEntry /** TODO #9100 */, nextEntry /** TODO #9100 */, value;
	            if (lang_1.isPresent(resultIndex)) {
	                resultEntry = collectedStyles.getByIndex(prop, resultIndex);
	                value = resultEntry.value;
	                nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
	            }
	            else {
	                // this is a flag that the runtime code uses to pass
	                // in a value either from the state declaration styles
	                // or using the AUTO_STYLE value (e.g. getComputedStyle)
	                value = core_private_1.FILL_STYLE_FLAG;
	            }
	            if (lang_1.isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
	                errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
	            }
	            values[prop] = value;
	        });
	    });
	    return new animation_ast_1.AnimationKeyframeAst(_INITIAL_KEYFRAME, new animation_ast_1.AnimationStylesAst([values]));
	}
	//# sourceMappingURL=animation_parser.js.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(10);
	exports.Math = lang_1.global.Math;
	exports.NaN = typeof exports.NaN;
	//# sourceMappingURL=math.js.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var StylesCollectionEntry = (function () {
	    function StylesCollectionEntry(time, value) {
	        this.time = time;
	        this.value = value;
	    }
	    StylesCollectionEntry.prototype.matches = function (time, value) {
	        return time == this.time && value == this.value;
	    };
	    return StylesCollectionEntry;
	}());
	exports.StylesCollectionEntry = StylesCollectionEntry;
	var StylesCollection = (function () {
	    function StylesCollection() {
	        this.styles = {};
	    }
	    StylesCollection.prototype.insertAtTime = function (property, time, value) {
	        var tuple = new StylesCollectionEntry(time, value);
	        var entries = this.styles[property];
	        if (!lang_1.isPresent(entries)) {
	            entries = this.styles[property] = [];
	        }
	        // insert this at the right stop in the array
	        // this way we can keep it sorted
	        var insertionIndex = 0;
	        for (var i = entries.length - 1; i >= 0; i--) {
	            if (entries[i].time <= time) {
	                insertionIndex = i + 1;
	                break;
	            }
	        }
	        collection_1.ListWrapper.insert(entries, insertionIndex, tuple);
	    };
	    StylesCollection.prototype.getByIndex = function (property, index) {
	        var items = this.styles[property];
	        if (lang_1.isPresent(items)) {
	            return index >= items.length ? null : items[index];
	        }
	        return null;
	    };
	    StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
	        var entries = this.styles[property];
	        if (lang_1.isPresent(entries)) {
	            for (var i = entries.length - 1; i >= 0; i--) {
	                if (entries[i].time <= time)
	                    return i;
	            }
	        }
	        return null;
	    };
	    return StylesCollection;
	}());
	exports.StylesCollection = StylesCollection;
	//# sourceMappingURL=styles_collection.js.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var template_ast_1 = __webpack_require__(9);
	var constants_1 = __webpack_require__(72);
	var compile_metadata_1 = __webpack_require__(33);
	var util_1 = __webpack_require__(73);
	var compile_query_1 = __webpack_require__(74);
	var compile_method_1 = __webpack_require__(75);
	var util_2 = __webpack_require__(31);
	var CompileNode = (function () {
	    function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
	        this.parent = parent;
	        this.view = view;
	        this.nodeIndex = nodeIndex;
	        this.renderNode = renderNode;
	        this.sourceAst = sourceAst;
	    }
	    CompileNode.prototype.isNull = function () { return lang_1.isBlank(this.renderNode); };
	    CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };
	    return CompileNode;
	}());
	exports.CompileNode = CompileNode;
	var CompileElement = (function (_super) {
	    __extends(CompileElement, _super);
	    function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
	        var _this = this;
	        _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
	        this.component = component;
	        this._directives = _directives;
	        this._resolvedProvidersArray = _resolvedProvidersArray;
	        this.hasViewContainer = hasViewContainer;
	        this.hasEmbeddedView = hasEmbeddedView;
	        this._compViewExpr = null;
	        this._instances = new compile_metadata_1.CompileTokenMap();
	        this._queryCount = 0;
	        this._queries = new compile_metadata_1.CompileTokenMap();
	        this._componentConstructorViewQueryLists = [];
	        this.contentNodesByNgContentIndex = null;
	        this.referenceTokens = {};
	        references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });
	        this.elementRef = o.importExpr(identifiers_1.Identifiers.ElementRef).instantiate([this.renderNode]);
	        this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.ElementRef), this.elementRef);
	        this.injector = o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]);
	        this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector), this.injector);
	        this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.Renderer), o.THIS_EXPR.prop('renderer'));
	        if (this.hasViewContainer || this.hasEmbeddedView || lang_1.isPresent(this.component)) {
	            this._createAppElement();
	        }
	    }
	    CompileElement.createNull = function () {
	        return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
	    };
	    CompileElement.prototype._createAppElement = function () {
	        var fieldName = "_appEl_" + this.nodeIndex;
	        var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
	        // private is fine here as no child view will reference an AppElement
	        this.view.fields.push(new o.ClassField(fieldName, o.importType(identifiers_1.Identifiers.AppElement), [o.StmtModifier.Private]));
	        var statement = o.THIS_EXPR.prop(fieldName)
	            .set(o.importExpr(identifiers_1.Identifiers.AppElement).instantiate([
	            o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode
	        ]))
	            .toStmt();
	        this.view.createMethod.addStmt(statement);
	        this.appElement = o.THIS_EXPR.prop(fieldName);
	        this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.AppElement), this.appElement);
	    };
	    CompileElement.prototype.setComponentView = function (compViewExpr) {
	        this._compViewExpr = compViewExpr;
	        this.contentNodesByNgContentIndex =
	            collection_1.ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);
	        for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
	            this.contentNodesByNgContentIndex[i] = [];
	        }
	    };
	    CompileElement.prototype.setEmbeddedView = function (embeddedView) {
	        this.embeddedView = embeddedView;
	        if (lang_1.isPresent(embeddedView)) {
	            var createTemplateRefExpr = o.importExpr(identifiers_1.Identifiers.TemplateRef_).instantiate([
	                this.appElement, this.embeddedView.viewFactory
	            ]);
	            var provider = new compile_metadata_1.CompileProviderMetadata({ token: identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef), useValue: createTemplateRefExpr });
	            // Add TemplateRef as first provider as it does not have deps on other providers
	            this._resolvedProvidersArray.unshift(new template_ast_1.ProviderAst(provider.token, false, true, [provider], template_ast_1.ProviderAstType.Builtin, this.sourceAst.sourceSpan));
	        }
	    };
	    CompileElement.prototype.beforeChildren = function () {
	        var _this = this;
	        if (this.hasViewContainer) {
	            this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef), this.appElement.prop('vcRef'));
	        }
	        this._resolvedProviders = new compile_metadata_1.CompileTokenMap();
	        this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.add(provider.token, provider); });
	        // create all the provider instances, some in the view constructor,
	        // some as getters. We rely on the fact that they are already sorted topologically.
	        this._resolvedProviders.values().forEach(function (resolvedProvider) {
	            var providerValueExpressions = resolvedProvider.providers.map(function (provider) {
	                if (lang_1.isPresent(provider.useExisting)) {
	                    return _this._getDependency(resolvedProvider.providerType, new compile_metadata_1.CompileDiDependencyMetadata({ token: provider.useExisting }));
	                }
	                else if (lang_1.isPresent(provider.useFactory)) {
	                    var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
	                    var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                    return o.importExpr(provider.useFactory).callFn(depsExpr);
	                }
	                else if (lang_1.isPresent(provider.useClass)) {
	                    var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
	                    var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                    return o.importExpr(provider.useClass)
	                        .instantiate(depsExpr, o.importType(provider.useClass));
	                }
	                else {
	                    return _convertValueToOutputAst(provider.useValue);
	                }
	            });
	            var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this._instances.size;
	            var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
	            _this._instances.add(resolvedProvider.token, instance);
	        });
	        this.directiveInstances =
	            this._directives.map(function (directive) { return _this._instances.get(identifiers_1.identifierToken(directive.type)); });
	        for (var i = 0; i < this.directiveInstances.length; i++) {
	            var directiveInstance = this.directiveInstances[i];
	            var directive = this._directives[i];
	            directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });
	        }
	        var queriesWithReads = [];
	        this._resolvedProviders.values().forEach(function (resolvedProvider) {
	            var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
	            collection_1.ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, resolvedProvider.token); }));
	        });
	        collection_1.StringMapWrapper.forEach(this.referenceTokens, function (_ /** TODO #9100 */, varName /** TODO #9100 */) {
	            var token = _this.referenceTokens[varName];
	            var varValue;
	            if (lang_1.isPresent(token)) {
	                varValue = _this._instances.get(token);
	            }
	            else {
	                varValue = _this.renderNode;
	            }
	            _this.view.locals.set(varName, varValue);
	            var varToken = new compile_metadata_1.CompileTokenMetadata({ value: varName });
	            collection_1.ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));
	        });
	        queriesWithReads.forEach(function (queryWithRead) {
	            var value;
	            if (lang_1.isPresent(queryWithRead.read.identifier)) {
	                // query for an identifier
	                value = _this._instances.get(queryWithRead.read);
	            }
	            else {
	                // query for a reference
	                var token = _this.referenceTokens[queryWithRead.read.value];
	                if (lang_1.isPresent(token)) {
	                    value = _this._instances.get(token);
	                }
	                else {
	                    value = _this.elementRef;
	                }
	            }
	            if (lang_1.isPresent(value)) {
	                queryWithRead.query.addValue(value, _this.view);
	            }
	        });
	        if (lang_1.isPresent(this.component)) {
	            var componentConstructorViewQueryList = lang_1.isPresent(this.component) ?
	                o.literalArr(this._componentConstructorViewQueryLists) :
	                o.NULL_EXPR;
	            var compExpr = lang_1.isPresent(this.getComponent()) ? this.getComponent() : o.NULL_EXPR;
	            this.view.createMethod.addStmt(this.appElement
	                .callMethod('initComponent', [compExpr, componentConstructorViewQueryList, this._compViewExpr])
	                .toStmt());
	        }
	    };
	    CompileElement.prototype.afterChildren = function (childNodeCount) {
	        var _this = this;
	        this._resolvedProviders.values().forEach(function (resolvedProvider) {
	            // Note: afterChildren is called after recursing into children.
	            // This is good so that an injector match in an element that is closer to a requesting element
	            // matches first.
	            var providerExpr = _this._instances.get(resolvedProvider.token);
	            // Note: view providers are only visible on the injector of that element.
	            // This is not fully correct as the rules during codegen don't allow a directive
	            // to get hold of a view provdier on the same element. We still do this semantic
	            // as it simplifies our model to having only one runtime injector per element.
	            var providerChildNodeCount = resolvedProvider.providerType === template_ast_1.ProviderAstType.PrivateService ? 0 : childNodeCount;
	            _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
	        });
	        this._queries.values().forEach(function (queries) { return queries.forEach(function (query) {
	            return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
	        }); });
	    };
	    CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
	        this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
	    };
	    CompileElement.prototype.getComponent = function () {
	        return lang_1.isPresent(this.component) ? this._instances.get(identifiers_1.identifierToken(this.component.type)) :
	            null;
	    };
	    CompileElement.prototype.getProviderTokens = function () {
	        return this._resolvedProviders.values().map(function (resolvedProvider) { return util_1.createDiTokenExpression(resolvedProvider.token); });
	    };
	    CompileElement.prototype._getQueriesFor = function (token) {
	        var result = [];
	        var currentEl = this;
	        var distance = 0;
	        var queries;
	        while (!currentEl.isNull()) {
	            queries = currentEl._queries.get(token);
	            if (lang_1.isPresent(queries)) {
	                collection_1.ListWrapper.addAll(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	            }
	            if (currentEl._directives.length > 0) {
	                distance++;
	            }
	            currentEl = currentEl.parent;
	        }
	        queries = this.view.componentView.viewQueries.get(token);
	        if (lang_1.isPresent(queries)) {
	            collection_1.ListWrapper.addAll(result, queries);
	        }
	        return result;
	    };
	    CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
	        var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
	        var queryList = compile_query_1.createQueryList(queryMeta, directiveInstance, propName, this.view);
	        var query = new compile_query_1.CompileQuery(queryMeta, queryList, directiveInstance, this.view);
	        compile_query_1.addQueryToTokenMap(this._queries, query);
	        return query;
	    };
	    CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
	        var result = null;
	        // constructor content query
	        if (lang_1.isBlank(result) && lang_1.isPresent(dep.query)) {
	            result = this._addQuery(dep.query, null).queryList;
	        }
	        // constructor view query
	        if (lang_1.isBlank(result) && lang_1.isPresent(dep.viewQuery)) {
	            result = compile_query_1.createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view);
	            this._componentConstructorViewQueryLists.push(result);
	        }
	        if (lang_1.isPresent(dep.token)) {
	            // access builtins with special visibility
	            if (lang_1.isBlank(result)) {
	                if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef))) {
	                    if (requestingProviderType === template_ast_1.ProviderAstType.Component) {
	                        return this._compViewExpr.prop('ref');
	                    }
	                    else {
	                        return util_1.getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);
	                    }
	                }
	            }
	            // access regular providers on the element
	            if (lang_1.isBlank(result)) {
	                result = this._instances.get(dep.token);
	            }
	        }
	        return result;
	    };
	    CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
	        var currElement = this;
	        var result = null;
	        if (dep.isValue) {
	            result = o.literal(dep.value);
	        }
	        if (lang_1.isBlank(result) && !dep.isSkipSelf) {
	            result = this._getLocalDependency(requestingProviderType, dep);
	        }
	        // check parent elements
	        while (lang_1.isBlank(result) && !currElement.parent.isNull()) {
	            currElement = currElement.parent;
	            result = currElement._getLocalDependency(template_ast_1.ProviderAstType.PublicService, new compile_metadata_1.CompileDiDependencyMetadata({ token: dep.token }));
	        }
	        if (lang_1.isBlank(result)) {
	            result = util_1.injectFromViewParentInjector(dep.token, dep.isOptional);
	        }
	        if (lang_1.isBlank(result)) {
	            result = o.NULL_EXPR;
	        }
	        return util_1.getPropertyInView(result, this.view, currElement.view);
	    };
	    return CompileElement;
	}(CompileNode));
	exports.CompileElement = CompileElement;
	function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
	    var indexCondition;
	    if (childNodeCount > 0) {
	        indexCondition = o.literal(nodeIndex)
	            .lowerEquals(constants_1.InjectMethodVars.requestNodeIndex)
	            .and(constants_1.InjectMethodVars.requestNodeIndex.lowerEquals(o.literal(nodeIndex + childNodeCount)));
	    }
	    else {
	        indexCondition = o.literal(nodeIndex).identical(constants_1.InjectMethodVars.requestNodeIndex);
	    }
	    return new o.IfStmt(constants_1.InjectMethodVars.token.identical(util_1.createDiTokenExpression(provider.token)).and(indexCondition), [new o.ReturnStatement(providerExpr)]);
	}
	function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
	    var view = compileElement.view;
	    var resolvedProviderValueExpr;
	    var type;
	    if (isMulti) {
	        resolvedProviderValueExpr = o.literalArr(providerValueExpressions);
	        type = new o.ArrayType(o.DYNAMIC_TYPE);
	    }
	    else {
	        resolvedProviderValueExpr = providerValueExpressions[0];
	        type = providerValueExpressions[0].type;
	    }
	    if (lang_1.isBlank(type)) {
	        type = o.DYNAMIC_TYPE;
	    }
	    if (isEager) {
	        view.fields.push(new o.ClassField(propName, type));
	        view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	    }
	    else {
	        var internalField = "_" + propName;
	        view.fields.push(new o.ClassField(internalField, type));
	        var getter = new compile_method_1.CompileMethod(view);
	        getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        // Note: Equals is important for JS so that it also checks the undefined case!
	        getter.addStmt(new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(), [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
	        getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));
	        view.getters.push(new o.ClassGetter(propName, getter.finish(), type));
	    }
	    return o.THIS_EXPR.prop(propName);
	}
	var _QueryWithRead = (function () {
	    function _QueryWithRead(query, match) {
	        this.query = query;
	        this.read = lang_1.isPresent(query.meta.read) ? query.meta.read : match;
	    }
	    return _QueryWithRead;
	}());
	function _convertValueToOutputAst(value) {
	    return util_2.visitValue(value, new _ValueOutputAstTransformer(), null);
	}
	var _ValueOutputAstTransformer = (function (_super) {
	    __extends(_ValueOutputAstTransformer, _super);
	    function _ValueOutputAstTransformer() {
	        _super.apply(this, arguments);
	    }
	    _ValueOutputAstTransformer.prototype.visitArray = function (arr, context) {
	        var _this = this;
	        return o.literalArr(arr.map(function (value) { return util_2.visitValue(value, _this, context); }));
	    };
	    _ValueOutputAstTransformer.prototype.visitStringMap = function (map, context) {
	        var _this = this;
	        var entries = [];
	        collection_1.StringMapWrapper.forEach(map, function (value /** TODO #9100 */, key /** TODO #9100 */) {
	            entries.push([key, util_2.visitValue(value, _this, context)]);
	        });
	        return o.literalMap(entries);
	    };
	    _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, context) { return o.literal(value); };
	    _ValueOutputAstTransformer.prototype.visitOther = function (value, context) {
	        if (value instanceof compile_metadata_1.CompileIdentifierMetadata) {
	            return o.importExpr(value);
	        }
	        else if (value instanceof o.Expression) {
	            return value;
	        }
	        else {
	            throw new core_1.BaseException("Illegal state: Don't now how to compile value " + value);
	        }
	    };
	    return _ValueOutputAstTransformer;
	}(util_2.ValueTransformer));
	//# sourceMappingURL=compile_element.js.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var compile_metadata_1 = __webpack_require__(33);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	function _enumExpression(classIdentifier, value) {
	    if (lang_1.isBlank(value))
	        return o.NULL_EXPR;
	    var name = lang_1.resolveEnumToken(classIdentifier.runtime, value);
	    return o.importExpr(new compile_metadata_1.CompileIdentifierMetadata({
	        name: classIdentifier.name + "." + name,
	        moduleUrl: classIdentifier.moduleUrl,
	        runtime: value
	    }));
	}
	var ViewTypeEnum = (function () {
	    function ViewTypeEnum() {
	    }
	    ViewTypeEnum.fromValue = function (value) {
	        return _enumExpression(identifiers_1.Identifiers.ViewType, value);
	    };
	    ViewTypeEnum.HOST = ViewTypeEnum.fromValue(core_private_1.ViewType.HOST);
	    ViewTypeEnum.COMPONENT = ViewTypeEnum.fromValue(core_private_1.ViewType.COMPONENT);
	    ViewTypeEnum.EMBEDDED = ViewTypeEnum.fromValue(core_private_1.ViewType.EMBEDDED);
	    return ViewTypeEnum;
	}());
	exports.ViewTypeEnum = ViewTypeEnum;
	var ViewEncapsulationEnum = (function () {
	    function ViewEncapsulationEnum() {
	    }
	    ViewEncapsulationEnum.fromValue = function (value) {
	        return _enumExpression(identifiers_1.Identifiers.ViewEncapsulation, value);
	    };
	    ViewEncapsulationEnum.Emulated = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.Emulated);
	    ViewEncapsulationEnum.Native = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.Native);
	    ViewEncapsulationEnum.None = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.None);
	    return ViewEncapsulationEnum;
	}());
	exports.ViewEncapsulationEnum = ViewEncapsulationEnum;
	var ChangeDetectorStateEnum = (function () {
	    function ChangeDetectorStateEnum() {
	    }
	    ChangeDetectorStateEnum.fromValue = function (value) {
	        return _enumExpression(identifiers_1.Identifiers.ChangeDetectorState, value);
	    };
	    ChangeDetectorStateEnum.NeverChecked = ChangeDetectorStateEnum.fromValue(core_private_1.ChangeDetectorState.NeverChecked);
	    ChangeDetectorStateEnum.CheckedBefore = ChangeDetectorStateEnum.fromValue(core_private_1.ChangeDetectorState.CheckedBefore);
	    ChangeDetectorStateEnum.Errored = ChangeDetectorStateEnum.fromValue(core_private_1.ChangeDetectorState.Errored);
	    return ChangeDetectorStateEnum;
	}());
	exports.ChangeDetectorStateEnum = ChangeDetectorStateEnum;
	var ChangeDetectionStrategyEnum = (function () {
	    function ChangeDetectionStrategyEnum() {
	    }
	    ChangeDetectionStrategyEnum.fromValue = function (value) {
	        return _enumExpression(identifiers_1.Identifiers.ChangeDetectionStrategy, value);
	    };
	    ChangeDetectionStrategyEnum.CheckOnce = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.CheckOnce);
	    ChangeDetectionStrategyEnum.Checked = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.Checked);
	    ChangeDetectionStrategyEnum.CheckAlways = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.CheckAlways);
	    ChangeDetectionStrategyEnum.Detached = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.Detached);
	    ChangeDetectionStrategyEnum.OnPush = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.OnPush);
	    ChangeDetectionStrategyEnum.Default = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.Default);
	    return ChangeDetectionStrategyEnum;
	}());
	exports.ChangeDetectionStrategyEnum = ChangeDetectionStrategyEnum;
	var ViewConstructorVars = (function () {
	    function ViewConstructorVars() {
	    }
	    ViewConstructorVars.viewUtils = o.variable('viewUtils');
	    ViewConstructorVars.parentInjector = o.variable('parentInjector');
	    ViewConstructorVars.declarationEl = o.variable('declarationEl');
	    return ViewConstructorVars;
	}());
	exports.ViewConstructorVars = ViewConstructorVars;
	var ViewProperties = (function () {
	    function ViewProperties() {
	    }
	    ViewProperties.renderer = o.THIS_EXPR.prop('renderer');
	    ViewProperties.projectableNodes = o.THIS_EXPR.prop('projectableNodes');
	    ViewProperties.viewUtils = o.THIS_EXPR.prop('viewUtils');
	    return ViewProperties;
	}());
	exports.ViewProperties = ViewProperties;
	var EventHandlerVars = (function () {
	    function EventHandlerVars() {
	    }
	    EventHandlerVars.event = o.variable('$event');
	    return EventHandlerVars;
	}());
	exports.EventHandlerVars = EventHandlerVars;
	var InjectMethodVars = (function () {
	    function InjectMethodVars() {
	    }
	    InjectMethodVars.token = o.variable('token');
	    InjectMethodVars.requestNodeIndex = o.variable('requestNodeIndex');
	    InjectMethodVars.notFoundResult = o.variable('notFoundResult');
	    return InjectMethodVars;
	}());
	exports.InjectMethodVars = InjectMethodVars;
	var DetectChangesVars = (function () {
	    function DetectChangesVars() {
	    }
	    DetectChangesVars.throwOnChange = o.variable("throwOnChange");
	    DetectChangesVars.changes = o.variable("changes");
	    DetectChangesVars.changed = o.variable("changed");
	    DetectChangesVars.valUnwrapper = o.variable("valUnwrapper");
	    return DetectChangesVars;
	}());
	exports.DetectChangesVars = DetectChangesVars;
	//# sourceMappingURL=constants.js.map

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var o = __webpack_require__(38);
	var identifiers_1 = __webpack_require__(32);
	function getPropertyInView(property, callingView, definedView) {
	    if (callingView === definedView) {
	        return property;
	    }
	    else {
	        var viewProp = o.THIS_EXPR;
	        var currView = callingView;
	        while (currView !== definedView && lang_1.isPresent(currView.declarationElement.view)) {
	            currView = currView.declarationElement.view;
	            viewProp = viewProp.prop('parent');
	        }
	        if (currView !== definedView) {
	            throw new exceptions_1.BaseException("Internal error: Could not calculate a property in a parent view: " + property);
	        }
	        if (property instanceof o.ReadPropExpr) {
	            var readPropExpr_1 = property;
	            // Note: Don't cast for members of the AppView base class...
	            if (definedView.fields.some(function (field) { return field.name == readPropExpr_1.name; }) ||
	                definedView.getters.some(function (field) { return field.name == readPropExpr_1.name; })) {
	                viewProp = viewProp.cast(definedView.classType);
	            }
	        }
	        return o.replaceVarInExpression(o.THIS_EXPR.name, viewProp, property);
	    }
	}
	exports.getPropertyInView = getPropertyInView;
	function injectFromViewParentInjector(token, optional) {
	    var args = [createDiTokenExpression(token)];
	    if (optional) {
	        args.push(o.NULL_EXPR);
	    }
	    return o.THIS_EXPR.prop('parentInjector').callMethod('get', args);
	}
	exports.injectFromViewParentInjector = injectFromViewParentInjector;
	function getViewFactoryName(component, embeddedTemplateIndex) {
	    return "viewFactory_" + component.type.name + embeddedTemplateIndex;
	}
	exports.getViewFactoryName = getViewFactoryName;
	function createDiTokenExpression(token) {
	    if (lang_1.isPresent(token.value)) {
	        return o.literal(token.value);
	    }
	    else if (token.identifierIsInstance) {
	        return o.importExpr(token.identifier)
	            .instantiate([], o.importType(token.identifier, [], [o.TypeModifier.Const]));
	    }
	    else {
	        return o.importExpr(token.identifier);
	    }
	}
	exports.createDiTokenExpression = createDiTokenExpression;
	function createFlatArray(expressions) {
	    var lastNonArrayExpressions = [];
	    var result = o.literalArr([]);
	    for (var i = 0; i < expressions.length; i++) {
	        var expr = expressions[i];
	        if (expr.type instanceof o.ArrayType) {
	            if (lastNonArrayExpressions.length > 0) {
	                result =
	                    result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);
	                lastNonArrayExpressions = [];
	            }
	            result = result.callMethod(o.BuiltinMethod.ConcatArray, [expr]);
	        }
	        else {
	            lastNonArrayExpressions.push(expr);
	        }
	    }
	    if (lastNonArrayExpressions.length > 0) {
	        result =
	            result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);
	    }
	    return result;
	}
	exports.createFlatArray = createFlatArray;
	function createPureProxy(fn, argCount, pureProxyProp, view) {
	    view.fields.push(new o.ClassField(pureProxyProp.name, null));
	    var pureProxyId = argCount < identifiers_1.Identifiers.pureProxies.length ? identifiers_1.Identifiers.pureProxies[argCount] : null;
	    if (lang_1.isBlank(pureProxyId)) {
	        throw new exceptions_1.BaseException("Unsupported number of argument for pure functions: " + argCount);
	    }
	    view.createMethod.addStmt(o.THIS_EXPR.prop(pureProxyProp.name).set(o.importExpr(pureProxyId).callFn([fn])).toStmt());
	}
	exports.createPureProxy = createPureProxy;
	//# sourceMappingURL=util.js.map

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var util_1 = __webpack_require__(73);
	var ViewQueryValues = (function () {
	    function ViewQueryValues(view, values) {
	        this.view = view;
	        this.values = values;
	    }
	    return ViewQueryValues;
	}());
	var CompileQuery = (function () {
	    function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
	        this.meta = meta;
	        this.queryList = queryList;
	        this.ownerDirectiveExpression = ownerDirectiveExpression;
	        this.view = view;
	        this._values = new ViewQueryValues(view, []);
	    }
	    CompileQuery.prototype.addValue = function (value, view) {
	        var currentView = view;
	        var elPath = [];
	        while (lang_1.isPresent(currentView) && currentView !== this.view) {
	            var parentEl = currentView.declarationElement;
	            elPath.unshift(parentEl);
	            currentView = parentEl.view;
	        }
	        var queryListForDirtyExpr = util_1.getPropertyInView(this.queryList, view, this.view);
	        var viewValues = this._values;
	        elPath.forEach(function (el) {
	            var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
	            if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
	                viewValues = last;
	            }
	            else {
	                var newViewValues = new ViewQueryValues(el.embeddedView, []);
	                viewValues.values.push(newViewValues);
	                viewValues = newViewValues;
	            }
	        });
	        viewValues.values.push(value);
	        if (elPath.length > 0) {
	            view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
	        }
	    };
	    CompileQuery.prototype._isStatic = function () {
	        return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });
	    };
	    CompileQuery.prototype.afterChildren = function (targetStaticMethod /** TODO #9100 */, targetDynamicMethod) {
	        var values = createQueryValues(this._values);
	        var updateStmts = [this.queryList.callMethod('reset', [o.literalArr(values)]).toStmt()];
	        if (lang_1.isPresent(this.ownerDirectiveExpression)) {
	            var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
	            updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
	        }
	        if (!this.meta.first) {
	            updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
	        }
	        if (this.meta.first && this._isStatic()) {
	            // for queries that don't change and the user asked for a single element,
	            // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
	            // we don't do this for QueryLists for now as this would break the timing when
	            // we call QueryList listeners...
	            targetStaticMethod.addStmts(updateStmts);
	        }
	        else {
	            targetDynamicMethod.addStmt(new o.IfStmt(this.queryList.prop('dirty'), updateStmts));
	        }
	    };
	    return CompileQuery;
	}());
	exports.CompileQuery = CompileQuery;
	function createQueryValues(viewValues) {
	    return collection_1.ListWrapper.flatten(viewValues.values.map(function (entry) {
	        if (entry instanceof ViewQueryValues) {
	            return mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry));
	        }
	        else {
	            return entry;
	        }
	    }));
	}
	function mapNestedViews(declarationAppElement, view, expressions) {
	    var adjustedExpressions = expressions.map(function (expr) {
	        return o.replaceVarInExpression(o.THIS_EXPR.name, o.variable('nestedView'), expr);
	    });
	    return declarationAppElement.callMethod('mapNestedViews', [
	        o.variable(view.className), o.fn([new o.FnParam('nestedView', view.classType)], [new o.ReturnStatement(o.literalArr(adjustedExpressions))])
	    ]);
	}
	function createQueryList(query, directiveInstance, propertyName, compileView) {
	    compileView.fields.push(new o.ClassField(propertyName, o.importType(identifiers_1.Identifiers.QueryList, [o.DYNAMIC_TYPE])));
	    var expr = o.THIS_EXPR.prop(propertyName);
	    compileView.createMethod.addStmt(o.THIS_EXPR.prop(propertyName)
	        .set(o.importExpr(identifiers_1.Identifiers.QueryList, [o.DYNAMIC_TYPE]).instantiate([]))
	        .toStmt());
	    return expr;
	}
	exports.createQueryList = createQueryList;
	function addQueryToTokenMap(map, query) {
	    query.meta.selectors.forEach(function (selector) {
	        var entry = map.get(selector);
	        if (lang_1.isBlank(entry)) {
	            entry = [];
	            map.add(selector, entry);
	        }
	        entry.push(query);
	    });
	}
	exports.addQueryToTokenMap = addQueryToTokenMap;
	//# sourceMappingURL=compile_query.js.map

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var o = __webpack_require__(38);
	var _DebugState = (function () {
	    function _DebugState(nodeIndex, sourceAst) {
	        this.nodeIndex = nodeIndex;
	        this.sourceAst = sourceAst;
	    }
	    return _DebugState;
	}());
	var NULL_DEBUG_STATE = new _DebugState(null, null);
	var CompileMethod = (function () {
	    function CompileMethod(_view) {
	        this._view = _view;
	        this._newState = NULL_DEBUG_STATE;
	        this._currState = NULL_DEBUG_STATE;
	        this._bodyStatements = [];
	        this._debugEnabled = this._view.genConfig.genDebugInfo;
	    }
	    CompileMethod.prototype._updateDebugContextIfNeeded = function () {
	        if (this._newState.nodeIndex !== this._currState.nodeIndex ||
	            this._newState.sourceAst !== this._currState.sourceAst) {
	            var expr = this._updateDebugContext(this._newState);
	            if (lang_1.isPresent(expr)) {
	                this._bodyStatements.push(expr.toStmt());
	            }
	        }
	    };
	    CompileMethod.prototype._updateDebugContext = function (newState) {
	        this._currState = this._newState = newState;
	        if (this._debugEnabled) {
	            var sourceLocation = lang_1.isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
	            return o.THIS_EXPR.callMethod('debug', [
	                o.literal(newState.nodeIndex),
	                lang_1.isPresent(sourceLocation) ? o.literal(sourceLocation.line) : o.NULL_EXPR,
	                lang_1.isPresent(sourceLocation) ? o.literal(sourceLocation.col) : o.NULL_EXPR
	            ]);
	        }
	        else {
	            return null;
	        }
	    };
	    CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
	        var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
	        return lang_1.isPresent(res) ? res : o.NULL_EXPR;
	    };
	    CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
	        this._newState = new _DebugState(nodeIndex, templateAst);
	    };
	    CompileMethod.prototype.addStmt = function (stmt) {
	        this._updateDebugContextIfNeeded();
	        this._bodyStatements.push(stmt);
	    };
	    CompileMethod.prototype.addStmts = function (stmts) {
	        this._updateDebugContextIfNeeded();
	        collection_1.ListWrapper.addAll(this._bodyStatements, stmts);
	    };
	    CompileMethod.prototype.finish = function () { return this._bodyStatements; };
	    CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };
	    return CompileMethod;
	}());
	exports.CompileMethod = CompileMethod;
	//# sourceMappingURL=compile_method.js.map

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_private_1 = __webpack_require__(12);
	var compile_metadata_1 = __webpack_require__(33);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var compile_method_1 = __webpack_require__(75);
	var compile_pipe_1 = __webpack_require__(77);
	var compile_query_1 = __webpack_require__(74);
	var constants_1 = __webpack_require__(72);
	var util_1 = __webpack_require__(73);
	var CompileView = (function () {
	    function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
	        var _this = this;
	        this.component = component;
	        this.genConfig = genConfig;
	        this.pipeMetas = pipeMetas;
	        this.styles = styles;
	        this.viewIndex = viewIndex;
	        this.declarationElement = declarationElement;
	        this.templateVariableBindings = templateVariableBindings;
	        this.nodes = [];
	        // root nodes or AppElements for ViewContainers
	        this.rootNodesOrAppElements = [];
	        this.bindings = [];
	        this.classStatements = [];
	        this.eventHandlerMethods = [];
	        this.fields = [];
	        this.getters = [];
	        this.disposables = [];
	        this.subscriptions = [];
	        this.purePipes = new Map();
	        this.pipes = [];
	        this.locals = new Map();
	        this.literalArrayCount = 0;
	        this.literalMapCount = 0;
	        this.pipeCount = 0;
	        this.animations = new Map();
	        animations.forEach(function (entry) { return _this.animations.set(entry.name, entry); });
	        this.createMethod = new compile_method_1.CompileMethod(this);
	        this.injectorGetMethod = new compile_method_1.CompileMethod(this);
	        this.updateContentQueriesMethod = new compile_method_1.CompileMethod(this);
	        this.dirtyParentQueriesMethod = new compile_method_1.CompileMethod(this);
	        this.updateViewQueriesMethod = new compile_method_1.CompileMethod(this);
	        this.detectChangesInInputsMethod = new compile_method_1.CompileMethod(this);
	        this.detectChangesRenderPropertiesMethod = new compile_method_1.CompileMethod(this);
	        this.afterContentLifecycleCallbacksMethod = new compile_method_1.CompileMethod(this);
	        this.afterViewLifecycleCallbacksMethod = new compile_method_1.CompileMethod(this);
	        this.destroyMethod = new compile_method_1.CompileMethod(this);
	        this.detachMethod = new compile_method_1.CompileMethod(this);
	        this.viewType = getViewType(component, viewIndex);
	        this.className = "_View_" + component.type.name + viewIndex;
	        this.classType = o.importType(new compile_metadata_1.CompileIdentifierMetadata({ name: this.className }));
	        this.viewFactory = o.variable(util_1.getViewFactoryName(component, viewIndex));
	        if (this.viewType === core_private_1.ViewType.COMPONENT || this.viewType === core_private_1.ViewType.HOST) {
	            this.componentView = this;
	        }
	        else {
	            this.componentView = this.declarationElement.view.componentView;
	        }
	        this.componentContext =
	            util_1.getPropertyInView(o.THIS_EXPR.prop('context'), this, this.componentView);
	        var viewQueries = new compile_metadata_1.CompileTokenMap();
	        if (this.viewType === core_private_1.ViewType.COMPONENT) {
	            var directiveInstance = o.THIS_EXPR.prop('context');
	            collection_1.ListWrapper.forEachWithIndex(this.component.viewQueries, function (queryMeta, queryIndex) {
	                var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
	                var queryList = compile_query_1.createQueryList(queryMeta, directiveInstance, propName, _this);
	                var query = new compile_query_1.CompileQuery(queryMeta, queryList, directiveInstance, _this);
	                compile_query_1.addQueryToTokenMap(viewQueries, query);
	            });
	            var constructorViewQueryCount = 0;
	            this.component.type.diDeps.forEach(function (dep) {
	                if (lang_1.isPresent(dep.viewQuery)) {
	                    var queryList = o.THIS_EXPR.prop('declarationAppElement')
	                        .prop('componentConstructorViewQueries')
	                        .key(o.literal(constructorViewQueryCount++));
	                    var query = new compile_query_1.CompileQuery(dep.viewQuery, queryList, null, _this);
	                    compile_query_1.addQueryToTokenMap(viewQueries, query);
	                }
	            });
	        }
	        this.viewQueries = viewQueries;
	        templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], o.THIS_EXPR.prop('context').prop(entry[0])); });
	        if (!this.declarationElement.isNull()) {
	            this.declarationElement.setEmbeddedView(this);
	        }
	    }
	    CompileView.prototype.callPipe = function (name, input, args) {
	        return compile_pipe_1.CompilePipe.call(this, name, [input].concat(args));
	    };
	    CompileView.prototype.getLocal = function (name) {
	        if (name == constants_1.EventHandlerVars.event.name) {
	            return constants_1.EventHandlerVars.event;
	        }
	        var currView = this;
	        var result = currView.locals.get(name);
	        while (lang_1.isBlank(result) && lang_1.isPresent(currView.declarationElement.view)) {
	            currView = currView.declarationElement.view;
	            result = currView.locals.get(name);
	        }
	        if (lang_1.isPresent(result)) {
	            return util_1.getPropertyInView(result, this, currView);
	        }
	        else {
	            return null;
	        }
	    };
	    CompileView.prototype.createLiteralArray = function (values) {
	        if (values.length === 0) {
	            return o.importExpr(identifiers_1.Identifiers.EMPTY_ARRAY);
	        }
	        var proxyExpr = o.THIS_EXPR.prop("_arr_" + this.literalArrayCount++);
	        var proxyParams = [];
	        var proxyReturnEntries = [];
	        for (var i = 0; i < values.length; i++) {
	            var paramName = "p" + i;
	            proxyParams.push(new o.FnParam(paramName));
	            proxyReturnEntries.push(o.variable(paramName));
	        }
	        util_1.createPureProxy(o.fn(proxyParams, [new o.ReturnStatement(o.literalArr(proxyReturnEntries))], new o.ArrayType(o.DYNAMIC_TYPE)), values.length, proxyExpr, this);
	        return proxyExpr.callFn(values);
	    };
	    CompileView.prototype.createLiteralMap = function (entries) {
	        if (entries.length === 0) {
	            return o.importExpr(identifiers_1.Identifiers.EMPTY_MAP);
	        }
	        var proxyExpr = o.THIS_EXPR.prop("_map_" + this.literalMapCount++);
	        var proxyParams = [];
	        var proxyReturnEntries = [];
	        var values = [];
	        for (var i = 0; i < entries.length; i++) {
	            var paramName = "p" + i;
	            proxyParams.push(new o.FnParam(paramName));
	            proxyReturnEntries.push([entries[i][0], o.variable(paramName)]);
	            values.push(entries[i][1]);
	        }
	        util_1.createPureProxy(o.fn(proxyParams, [new o.ReturnStatement(o.literalMap(proxyReturnEntries))], new o.MapType(o.DYNAMIC_TYPE)), entries.length, proxyExpr, this);
	        return proxyExpr.callFn(values);
	    };
	    CompileView.prototype.afterNodes = function () {
	        var _this = this;
	        this.pipes.forEach(function (pipe) { return pipe.create(); });
	        this.viewQueries.values().forEach(function (queries) { return queries.forEach(function (query) { return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod); }); });
	    };
	    return CompileView;
	}());
	exports.CompileView = CompileView;
	function getViewType(component, embeddedTemplateIndex) {
	    if (embeddedTemplateIndex > 0) {
	        return core_private_1.ViewType.EMBEDDED;
	    }
	    else if (component.type.isHost) {
	        return core_private_1.ViewType.HOST;
	    }
	    else {
	        return core_private_1.ViewType.COMPONENT;
	    }
	}
	//# sourceMappingURL=compile_view.js.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var util_1 = __webpack_require__(73);
	var _PurePipeProxy = (function () {
	    function _PurePipeProxy(view, instance, argCount) {
	        this.view = view;
	        this.instance = instance;
	        this.argCount = argCount;
	    }
	    return _PurePipeProxy;
	}());
	var CompilePipe = (function () {
	    function CompilePipe(view, meta) {
	        this.view = view;
	        this.meta = meta;
	        this._purePipeProxies = [];
	        this.instance = o.THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
	    }
	    CompilePipe.call = function (view, name, args) {
	        var compView = view.componentView;
	        var meta = _findPipeMeta(compView, name);
	        var pipe;
	        if (meta.pure) {
	            // pure pipes live on the component view
	            pipe = compView.purePipes.get(name);
	            if (lang_1.isBlank(pipe)) {
	                pipe = new CompilePipe(compView, meta);
	                compView.purePipes.set(name, pipe);
	                compView.pipes.push(pipe);
	            }
	        }
	        else {
	            // Non pure pipes live on the view that called it
	            pipe = new CompilePipe(view, meta);
	            view.pipes.push(pipe);
	        }
	        return pipe._call(view, args);
	    };
	    Object.defineProperty(CompilePipe.prototype, "pure", {
	        get: function () { return this.meta.pure; },
	        enumerable: true,
	        configurable: true
	    });
	    CompilePipe.prototype.create = function () {
	        var _this = this;
	        var deps = this.meta.type.diDeps.map(function (diDep) {
	            if (diDep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef))) {
	                return util_1.getPropertyInView(o.THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
	            }
	            return util_1.injectFromViewParentInjector(diDep.token, false);
	        });
	        this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));
	        this.view.createMethod.resetDebugInfo(null, null);
	        this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name)
	            .set(o.importExpr(this.meta.type).instantiate(deps))
	            .toStmt());
	        this._purePipeProxies.forEach(function (purePipeProxy) {
	            var pipeInstanceSeenFromPureProxy = util_1.getPropertyInView(_this.instance, purePipeProxy.view, _this.view);
	            util_1.createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')
	                .callMethod(o.BuiltinMethod.bind, [pipeInstanceSeenFromPureProxy]), purePipeProxy.argCount, purePipeProxy.instance, purePipeProxy.view);
	        });
	    };
	    CompilePipe.prototype._call = function (callingView, args) {
	        if (this.meta.pure) {
	            // PurePipeProxies live on the view that called them.
	            var purePipeProxy = new _PurePipeProxy(callingView, o.THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxies.length), args.length);
	            this._purePipeProxies.push(purePipeProxy);
	            return o.importExpr(identifiers_1.Identifiers.castByValue)
	                .callFn([
	                purePipeProxy.instance,
	                util_1.getPropertyInView(this.instance.prop('transform'), callingView, this.view)
	            ])
	                .callFn(args);
	        }
	        else {
	            return util_1.getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
	        }
	    };
	    return CompilePipe;
	}());
	exports.CompilePipe = CompilePipe;
	function _findPipeMeta(view, name) {
	    var pipeMeta = null;
	    for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
	        var localPipeMeta = view.pipeMetas[i];
	        if (localPipeMeta.name == name) {
	            pipeMeta = localPipeMeta;
	            break;
	        }
	    }
	    if (lang_1.isBlank(pipeMeta)) {
	        throw new exceptions_1.BaseException("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
	    }
	    return pipeMeta;
	}
	//# sourceMappingURL=compile_pipe.js.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var template_ast_1 = __webpack_require__(9);
	var property_binder_1 = __webpack_require__(79);
	var event_binder_1 = __webpack_require__(82);
	var lifecycle_binder_1 = __webpack_require__(83);
	function bindView(view, parsedTemplate) {
	    var visitor = new ViewBinderVisitor(view);
	    template_ast_1.templateVisitAll(visitor, parsedTemplate);
	    view.pipes.forEach(function (pipe) { lifecycle_binder_1.bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });
	}
	exports.bindView = bindView;
	var ViewBinderVisitor = (function () {
	    function ViewBinderVisitor(view) {
	        this.view = view;
	        this._nodeIndex = 0;
	    }
	    ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
	        var node = this.view.nodes[this._nodeIndex++];
	        property_binder_1.bindRenderText(ast, node, this.view);
	        return null;
	    };
	    ViewBinderVisitor.prototype.visitText = function (ast, parent) {
	        this._nodeIndex++;
	        return null;
	    };
	    ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };
	    ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
	        var compileElement = this.view.nodes[this._nodeIndex++];
	        var eventListeners = event_binder_1.collectEventListeners(ast.outputs, ast.directives, compileElement);
	        property_binder_1.bindRenderInputs(ast.inputs, compileElement);
	        event_binder_1.bindRenderOutputs(eventListeners);
	        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
	            var directiveInstance = compileElement.directiveInstances[index];
	            property_binder_1.bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
	            lifecycle_binder_1.bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
	            property_binder_1.bindDirectiveHostProps(directiveAst, directiveInstance, compileElement);
	            event_binder_1.bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
	        });
	        template_ast_1.templateVisitAll(this, ast.children, compileElement);
	        // afterContent and afterView lifecycles need to be called bottom up
	        // so that children are notified before parents
	        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
	            var directiveInstance = compileElement.directiveInstances[index];
	            lifecycle_binder_1.bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	            lifecycle_binder_1.bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	            lifecycle_binder_1.bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	        });
	        return null;
	    };
	    ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	        var compileElement = this.view.nodes[this._nodeIndex++];
	        var eventListeners = event_binder_1.collectEventListeners(ast.outputs, ast.directives, compileElement);
	        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
	            var directiveInstance = compileElement.directiveInstances[index];
	            property_binder_1.bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
	            lifecycle_binder_1.bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
	            event_binder_1.bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
	            lifecycle_binder_1.bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	            lifecycle_binder_1.bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	            lifecycle_binder_1.bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	        });
	        bindView(compileElement.embeddedView, ast.children);
	        return null;
	    };
	    ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	    ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	    ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	        return null;
	    };
	    ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	    ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	    ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	    ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	    return ViewBinderVisitor;
	}());
	//# sourceMappingURL=view_binder.js.map

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_private_1 = __webpack_require__(12);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var constants_1 = __webpack_require__(72);
	var template_ast_1 = __webpack_require__(9);
	var util_1 = __webpack_require__(31);
	var expression_converter_1 = __webpack_require__(80);
	var compile_binding_1 = __webpack_require__(81);
	var core_1 = __webpack_require__(8);
	function createBindFieldExpr(exprIndex) {
	    return o.THIS_EXPR.prop("_expr_" + exprIndex);
	}
	function createCurrValueExpr(exprIndex) {
	    return o.variable("currVal_" + exprIndex); // fix syntax highlighting: `
	}
	function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method) {
	    var checkExpression = expression_converter_1.convertCdExpressionToIr(view, context, parsedExpression, constants_1.DetectChangesVars.valUnwrapper);
	    if (lang_1.isBlank(checkExpression.expression)) {
	        // e.g. an empty expression was given
	        return;
	    }
	    // private is fine here as no child view will reference the cached value...
	    view.fields.push(new o.ClassField(fieldExpr.name, null, [o.StmtModifier.Private]));
	    view.createMethod.addStmt(o.THIS_EXPR.prop(fieldExpr.name).set(o.importExpr(identifiers_1.Identifiers.uninitialized)).toStmt());
	    if (checkExpression.needsValueUnwrapper) {
	        var initValueUnwrapperStmt = constants_1.DetectChangesVars.valUnwrapper.callMethod('reset', []).toStmt();
	        method.addStmt(initValueUnwrapperStmt);
	    }
	    method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [o.StmtModifier.Final]));
	    var condition = o.importExpr(identifiers_1.Identifiers.checkBinding).callFn([
	        constants_1.DetectChangesVars.throwOnChange, fieldExpr, currValExpr
	    ]);
	    if (checkExpression.needsValueUnwrapper) {
	        condition = constants_1.DetectChangesVars.valUnwrapper.prop('hasWrappedValue').or(condition);
	    }
	    method.addStmt(new o.IfStmt(condition, actions.concat([o.THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt()])));
	}
	function bindRenderText(boundText, compileNode, view) {
	    var bindingIndex = view.bindings.length;
	    view.bindings.push(new compile_binding_1.CompileBinding(compileNode, boundText));
	    var currValExpr = createCurrValueExpr(bindingIndex);
	    var valueField = createBindFieldExpr(bindingIndex);
	    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
	    bind(view, currValExpr, valueField, boundText.value, view.componentContext, [o.THIS_EXPR.prop('renderer')
	            .callMethod('setText', [compileNode.renderNode, currValExpr])
	            .toStmt()], view.detectChangesRenderPropertiesMethod);
	}
	exports.bindRenderText = bindRenderText;
	function bindAndWriteToRenderer(boundProps, context, compileElement) {
	    var view = compileElement.view;
	    var renderNode = compileElement.renderNode;
	    boundProps.forEach(function (boundProp) {
	        var bindingIndex = view.bindings.length;
	        view.bindings.push(new compile_binding_1.CompileBinding(compileElement, boundProp));
	        view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
	        var fieldExpr = createBindFieldExpr(bindingIndex);
	        var currValExpr = createCurrValueExpr(bindingIndex);
	        var renderMethod;
	        var oldRenderValue = sanitizedValue(boundProp, fieldExpr);
	        var renderValue = sanitizedValue(boundProp, currValExpr);
	        var updateStmts = [];
	        switch (boundProp.type) {
	            case template_ast_1.PropertyBindingType.Property:
	                if (view.genConfig.logBindingUpdate) {
	                    updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, renderValue));
	                }
	                updateStmts.push(o.THIS_EXPR.prop('renderer')
	                    .callMethod('setElementProperty', [renderNode, o.literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case template_ast_1.PropertyBindingType.Attribute:
	                renderValue =
	                    renderValue.isBlank().conditional(o.NULL_EXPR, renderValue.callMethod('toString', []));
	                updateStmts.push(o.THIS_EXPR.prop('renderer')
	                    .callMethod('setElementAttribute', [renderNode, o.literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case template_ast_1.PropertyBindingType.Class:
	                updateStmts.push(o.THIS_EXPR.prop('renderer')
	                    .callMethod('setElementClass', [renderNode, o.literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case template_ast_1.PropertyBindingType.Style:
	                var strValue = renderValue.callMethod('toString', []);
	                if (lang_1.isPresent(boundProp.unit)) {
	                    strValue = strValue.plus(o.literal(boundProp.unit));
	                }
	                renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, strValue);
	                updateStmts.push(o.THIS_EXPR.prop('renderer')
	                    .callMethod('setElementStyle', [renderNode, o.literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case template_ast_1.PropertyBindingType.Animation:
	                var animationName = boundProp.name;
	                var animation = view.componentView.animations.get(animationName);
	                if (!lang_1.isPresent(animation)) {
	                    throw new core_1.BaseException("Internal Error: couldn't find an animation entry for " + boundProp.name);
	                }
	                // it's important to normalize the void value as `void` explicitly
	                // so that the styles data can be obtained from the stringmap
	                var emptyStateValue = o.literal(core_private_1.EMPTY_STATE);
	                // void => ...
	                var oldRenderVar = o.variable('oldRenderVar');
	                updateStmts.push(oldRenderVar.set(oldRenderValue).toDeclStmt());
	                updateStmts.push(new o.IfStmt(oldRenderVar.equals(o.importExpr(identifiers_1.Identifiers.uninitialized)), [oldRenderVar.set(emptyStateValue).toStmt()]));
	                // ... => void
	                var newRenderVar = o.variable('newRenderVar');
	                updateStmts.push(newRenderVar.set(renderValue).toDeclStmt());
	                updateStmts.push(new o.IfStmt(newRenderVar.equals(o.importExpr(identifiers_1.Identifiers.uninitialized)), [newRenderVar.set(emptyStateValue).toStmt()]));
	                updateStmts.push(animation.fnVariable.callFn([o.THIS_EXPR, renderNode, oldRenderVar, newRenderVar])
	                    .toStmt());
	                view.detachMethod.addStmt(animation.fnVariable.callFn([o.THIS_EXPR, renderNode, oldRenderValue, emptyStateValue])
	                    .toStmt());
	                break;
	        }
	        bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, view.detectChangesRenderPropertiesMethod);
	    });
	}
	function sanitizedValue(boundProp, renderValue) {
	    var enumValue;
	    switch (boundProp.securityContext) {
	        case core_private_1.SecurityContext.NONE:
	            return renderValue; // No sanitization needed.
	        case core_private_1.SecurityContext.HTML:
	            enumValue = 'HTML';
	            break;
	        case core_private_1.SecurityContext.STYLE:
	            enumValue = 'STYLE';
	            break;
	        case core_private_1.SecurityContext.SCRIPT:
	            enumValue = 'SCRIPT';
	            break;
	        case core_private_1.SecurityContext.URL:
	            enumValue = 'URL';
	            break;
	        case core_private_1.SecurityContext.RESOURCE_URL:
	            enumValue = 'RESOURCE_URL';
	            break;
	        default:
	            throw new Error("internal error, unexpected SecurityContext " + boundProp.securityContext + ".");
	    }
	    var ctx = constants_1.ViewProperties.viewUtils.prop('sanitizer');
	    var args = [o.importExpr(identifiers_1.Identifiers.SecurityContext).prop(enumValue), renderValue];
	    return ctx.callMethod('sanitize', args);
	}
	function bindRenderInputs(boundProps, compileElement) {
	    bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement);
	}
	exports.bindRenderInputs = bindRenderInputs;
	function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {
	    bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement);
	}
	exports.bindDirectiveHostProps = bindDirectiveHostProps;
	function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {
	    if (directiveAst.inputs.length === 0) {
	        return;
	    }
	    var view = compileElement.view;
	    var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	    detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	    var lifecycleHooks = directiveAst.directive.lifecycleHooks;
	    var calcChangesMap = lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnChanges) !== -1;
	    var isOnPushComp = directiveAst.directive.isComponent &&
	        !core_private_1.isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
	    if (calcChangesMap) {
	        detectChangesInInputsMethod.addStmt(constants_1.DetectChangesVars.changes.set(o.NULL_EXPR).toStmt());
	    }
	    if (isOnPushComp) {
	        detectChangesInInputsMethod.addStmt(constants_1.DetectChangesVars.changed.set(o.literal(false)).toStmt());
	    }
	    directiveAst.inputs.forEach(function (input) {
	        var bindingIndex = view.bindings.length;
	        view.bindings.push(new compile_binding_1.CompileBinding(compileElement, input));
	        detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
	        var fieldExpr = createBindFieldExpr(bindingIndex);
	        var currValExpr = createCurrValueExpr(bindingIndex);
	        var statements = [directiveInstance.prop(input.directiveName).set(currValExpr).toStmt()];
	        if (calcChangesMap) {
	            statements.push(new o.IfStmt(constants_1.DetectChangesVars.changes.identical(o.NULL_EXPR), [constants_1.DetectChangesVars.changes
	                    .set(o.literalMap([], new o.MapType(o.importType(identifiers_1.Identifiers.SimpleChange))))
	                    .toStmt()]));
	            statements.push(constants_1.DetectChangesVars.changes.key(o.literal(input.directiveName))
	                .set(o.importExpr(identifiers_1.Identifiers.SimpleChange).instantiate([fieldExpr, currValExpr]))
	                .toStmt());
	        }
	        if (isOnPushComp) {
	            statements.push(constants_1.DetectChangesVars.changed.set(o.literal(true)).toStmt());
	        }
	        if (view.genConfig.logBindingUpdate) {
	            statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr));
	        }
	        bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod);
	    });
	    if (isOnPushComp) {
	        detectChangesInInputsMethod.addStmt(new o.IfStmt(constants_1.DetectChangesVars.changed, [
	            compileElement.appElement.prop('componentView').callMethod('markAsCheckOnce', []).toStmt()
	        ]));
	    }
	}
	exports.bindDirectiveInputs = bindDirectiveInputs;
	function logBindingUpdateStmt(renderNode, propName, value) {
	    return o.THIS_EXPR.prop('renderer')
	        .callMethod('setBindingDebugInfo', [
	        renderNode, o.literal("ng-reflect-" + util_1.camelCaseToDashCase(propName)),
	        value.isBlank().conditional(o.NULL_EXPR, value.callMethod('toString', []))
	    ])
	        .toStmt();
	}
	//# sourceMappingURL=property_binder.js.map

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var IMPLICIT_RECEIVER = o.variable('#implicit');
	var ExpressionWithWrappedValueInfo = (function () {
	    function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper) {
	        this.expression = expression;
	        this.needsValueUnwrapper = needsValueUnwrapper;
	    }
	    return ExpressionWithWrappedValueInfo;
	}());
	exports.ExpressionWithWrappedValueInfo = ExpressionWithWrappedValueInfo;
	function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper) {
	    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper);
	    var irAst = expression.visit(visitor, _Mode.Expression);
	    return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper);
	}
	exports.convertCdExpressionToIr = convertCdExpressionToIr;
	function convertCdStatementToIr(nameResolver, implicitReceiver, stmt) {
	    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null);
	    var statements = [];
	    flattenStatements(stmt.visit(visitor, _Mode.Statement), statements);
	    return statements;
	}
	exports.convertCdStatementToIr = convertCdStatementToIr;
	var _Mode;
	(function (_Mode) {
	    _Mode[_Mode["Statement"] = 0] = "Statement";
	    _Mode[_Mode["Expression"] = 1] = "Expression";
	})(_Mode || (_Mode = {}));
	function ensureStatementMode(mode, ast) {
	    if (mode !== _Mode.Statement) {
	        throw new exceptions_1.BaseException("Expected a statement, but saw " + ast);
	    }
	}
	function ensureExpressionMode(mode, ast) {
	    if (mode !== _Mode.Expression) {
	        throw new exceptions_1.BaseException("Expected an expression, but saw " + ast);
	    }
	}
	function convertToStatementIfNeeded(mode, expr) {
	    if (mode === _Mode.Statement) {
	        return expr.toStmt();
	    }
	    else {
	        return expr;
	    }
	}
	var _AstToIrVisitor = (function () {
	    function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper) {
	        this._nameResolver = _nameResolver;
	        this._implicitReceiver = _implicitReceiver;
	        this._valueUnwrapper = _valueUnwrapper;
	        this.needsValueUnwrapper = false;
	    }
	    _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	        var op;
	        switch (ast.operation) {
	            case '+':
	                op = o.BinaryOperator.Plus;
	                break;
	            case '-':
	                op = o.BinaryOperator.Minus;
	                break;
	            case '*':
	                op = o.BinaryOperator.Multiply;
	                break;
	            case '/':
	                op = o.BinaryOperator.Divide;
	                break;
	            case '%':
	                op = o.BinaryOperator.Modulo;
	                break;
	            case '&&':
	                op = o.BinaryOperator.And;
	                break;
	            case '||':
	                op = o.BinaryOperator.Or;
	                break;
	            case '==':
	                op = o.BinaryOperator.Equals;
	                break;
	            case '!=':
	                op = o.BinaryOperator.NotEquals;
	                break;
	            case '===':
	                op = o.BinaryOperator.Identical;
	                break;
	            case '!==':
	                op = o.BinaryOperator.NotIdentical;
	                break;
	            case '<':
	                op = o.BinaryOperator.Lower;
	                break;
	            case '>':
	                op = o.BinaryOperator.Bigger;
	                break;
	            case '<=':
	                op = o.BinaryOperator.LowerEquals;
	                break;
	            case '>=':
	                op = o.BinaryOperator.BiggerEquals;
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unsupported operation " + ast.operation);
	        }
	        return convertToStatementIfNeeded(mode, new o.BinaryOperatorExpr(op, ast.left.visit(this, _Mode.Expression), ast.right.visit(this, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	        ensureStatementMode(mode, ast);
	        return this.visitAll(ast.expressions, mode);
	    };
	    _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	        var value = ast.condition.visit(this, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, value.conditional(ast.trueExp.visit(this, _Mode.Expression), ast.falseExp.visit(this, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	        var input = ast.exp.visit(this, _Mode.Expression);
	        var args = this.visitAll(ast.args, _Mode.Expression);
	        var value = this._nameResolver.callPipe(ast.name, input, args);
	        this.needsValueUnwrapper = true;
	        return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
	    };
	    _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, ast.target.visit(this, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        return IMPLICIT_RECEIVER;
	    };
	    _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        var args = [o.literal(ast.expressions.length)];
	        for (var i = 0; i < ast.strings.length - 1; i++) {
	            args.push(o.literal(ast.strings[i]));
	            args.push(ast.expressions[i].visit(this, _Mode.Expression));
	        }
	        args.push(o.literal(ast.strings[ast.strings.length - 1]));
	        return o.importExpr(identifiers_1.Identifiers.interpolate).callFn(args);
	    };
	    _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, ast.obj.visit(this, _Mode.Expression).key(ast.key.visit(this, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	        var obj = ast.obj.visit(this, _Mode.Expression);
	        var key = ast.key.visit(this, _Mode.Expression);
	        var value = ast.value.visit(this, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	    };
	    _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));
	    };
	    _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	        var parts = [];
	        for (var i = 0; i < ast.keys.length; i++) {
	            parts.push([ast.keys[i], ast.values[i].visit(this, _Mode.Expression)]);
	        }
	        return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));
	    };
	    _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, o.literal(ast.value));
	    };
	    _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	        var args = this.visitAll(ast.args, _Mode.Expression);
	        var result = null;
	        var receiver = ast.receiver.visit(this, _Mode.Expression);
	        if (receiver === IMPLICIT_RECEIVER) {
	            var varExpr = this._nameResolver.getLocal(ast.name);
	            if (lang_1.isPresent(varExpr)) {
	                result = varExpr.callFn(args);
	            }
	            else {
	                receiver = this._implicitReceiver;
	            }
	        }
	        if (lang_1.isBlank(result)) {
	            result = receiver.callMethod(ast.name, args);
	        }
	        return convertToStatementIfNeeded(mode, result);
	    };
	    _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, o.not(ast.expression.visit(this, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	        var result = null;
	        var receiver = ast.receiver.visit(this, _Mode.Expression);
	        if (receiver === IMPLICIT_RECEIVER) {
	            result = this._nameResolver.getLocal(ast.name);
	            if (lang_1.isBlank(result)) {
	                receiver = this._implicitReceiver;
	            }
	        }
	        if (lang_1.isBlank(result)) {
	            result = receiver.prop(ast.name);
	        }
	        return convertToStatementIfNeeded(mode, result);
	    };
	    _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	        var receiver = ast.receiver.visit(this, _Mode.Expression);
	        if (receiver === IMPLICIT_RECEIVER) {
	            var varExpr = this._nameResolver.getLocal(ast.name);
	            if (lang_1.isPresent(varExpr)) {
	                throw new exceptions_1.BaseException('Cannot assign to a reference or variable!');
	            }
	            receiver = this._implicitReceiver;
	        }
	        return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(ast.value.visit(this, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	        var receiver = ast.receiver.visit(this, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, receiver.isBlank().conditional(o.NULL_EXPR, receiver.prop(ast.name)));
	    };
	    _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	        var receiver = ast.receiver.visit(this, _Mode.Expression);
	        var args = this.visitAll(ast.args, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, receiver.isBlank().conditional(o.NULL_EXPR, receiver.callMethod(ast.name, args)));
	    };
	    _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	        var _this = this;
	        return asts.map(function (ast) { return ast.visit(_this, mode); });
	    };
	    _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	        throw new exceptions_1.BaseException('Quotes are not supported for evaluation!');
	    };
	    return _AstToIrVisitor;
	}());
	function flattenStatements(arg, output) {
	    if (lang_1.isArray(arg)) {
	        arg.forEach(function (entry) { return flattenStatements(entry, output); });
	    }
	    else {
	        output.push(arg);
	    }
	}
	//# sourceMappingURL=expression_converter.js.map

/***/ },
/* 81 */
/***/ function(module, exports) {

	"use strict";
	var CompileBinding = (function () {
	    function CompileBinding(node, sourceAst) {
	        this.node = node;
	        this.sourceAst = sourceAst;
	    }
	    return CompileBinding;
	}());
	exports.CompileBinding = CompileBinding;
	//# sourceMappingURL=compile_binding.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var o = __webpack_require__(38);
	var compile_binding_1 = __webpack_require__(81);
	var compile_method_1 = __webpack_require__(75);
	var constants_1 = __webpack_require__(72);
	var expression_converter_1 = __webpack_require__(80);
	var CompileEventListener = (function () {
	    function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {
	        this.compileElement = compileElement;
	        this.eventTarget = eventTarget;
	        this.eventName = eventName;
	        this._hasComponentHostListener = false;
	        this._actionResultExprs = [];
	        this._method = new compile_method_1.CompileMethod(compileElement.view);
	        this._methodName =
	            "_handle_" + santitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex;
	        this._eventParam = new o.FnParam(constants_1.EventHandlerVars.event.name, o.importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
	    }
	    CompileEventListener.getOrCreate = function (compileElement, eventTarget, eventName, targetEventListeners) {
	        var listener = targetEventListeners.find(function (listener) { return listener.eventTarget == eventTarget && listener.eventName == eventName; });
	        if (lang_1.isBlank(listener)) {
	            listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length);
	            targetEventListeners.push(listener);
	        }
	        return listener;
	    };
	    CompileEventListener.prototype.addAction = function (hostEvent, directive, directiveInstance) {
	        if (lang_1.isPresent(directive) && directive.isComponent) {
	            this._hasComponentHostListener = true;
	        }
	        this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
	        var context = lang_1.isPresent(directiveInstance) ? directiveInstance :
	            this.compileElement.view.componentContext;
	        var actionStmts = expression_converter_1.convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler);
	        var lastIndex = actionStmts.length - 1;
	        if (lastIndex >= 0) {
	            var lastStatement = actionStmts[lastIndex];
	            var returnExpr = convertStmtIntoExpression(lastStatement);
	            var preventDefaultVar = o.variable("pd_" + this._actionResultExprs.length);
	            this._actionResultExprs.push(preventDefaultVar);
	            if (lang_1.isPresent(returnExpr)) {
	                // Note: We need to cast the result of the method call to dynamic,
	                // as it might be a void method!
	                actionStmts[lastIndex] =
	                    preventDefaultVar.set(returnExpr.cast(o.DYNAMIC_TYPE).notIdentical(o.literal(false)))
	                        .toDeclStmt(null, [o.StmtModifier.Final]);
	            }
	        }
	        this._method.addStmts(actionStmts);
	    };
	    CompileEventListener.prototype.finishMethod = function () {
	        var markPathToRootStart = this._hasComponentHostListener ?
	            this.compileElement.appElement.prop('componentView') :
	            o.THIS_EXPR;
	        var resultExpr = o.literal(true);
	        this._actionResultExprs.forEach(function (expr) { resultExpr = resultExpr.and(expr); });
	        var stmts = [markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt()]
	            .concat(this._method.finish())
	            .concat([new o.ReturnStatement(resultExpr)]);
	        // private is fine here as no child view will reference the event handler...
	        this.compileElement.view.eventHandlerMethods.push(new o.ClassMethod(this._methodName, [this._eventParam], stmts, o.BOOL_TYPE, [o.StmtModifier.Private]));
	    };
	    CompileEventListener.prototype.listenToRenderer = function () {
	        var listenExpr;
	        var eventListener = o.THIS_EXPR.callMethod('eventHandler', [o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.bind, [o.THIS_EXPR])]);
	        if (lang_1.isPresent(this.eventTarget)) {
	            listenExpr = constants_1.ViewProperties.renderer.callMethod('listenGlobal', [o.literal(this.eventTarget), o.literal(this.eventName), eventListener]);
	        }
	        else {
	            listenExpr = constants_1.ViewProperties.renderer.callMethod('listen', [this.compileElement.renderNode, o.literal(this.eventName), eventListener]);
	        }
	        var disposable = o.variable("disposable_" + this.compileElement.view.disposables.length);
	        this.compileElement.view.disposables.push(disposable);
	        // private is fine here as no child view will reference the event handler...
	        this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(o.FUNCTION_TYPE, [o.StmtModifier.Private]));
	    };
	    CompileEventListener.prototype.listenToDirective = function (directiveInstance, observablePropName) {
	        var subscription = o.variable("subscription_" + this.compileElement.view.subscriptions.length);
	        this.compileElement.view.subscriptions.push(subscription);
	        var eventListener = o.THIS_EXPR.callMethod('eventHandler', [o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.bind, [o.THIS_EXPR])]);
	        this.compileElement.view.createMethod.addStmt(subscription
	            .set(directiveInstance.prop(observablePropName)
	            .callMethod(o.BuiltinMethod.SubscribeObservable, [eventListener]))
	            .toDeclStmt(null, [o.StmtModifier.Final]));
	    };
	    return CompileEventListener;
	}());
	exports.CompileEventListener = CompileEventListener;
	function collectEventListeners(hostEvents, dirs, compileElement) {
	    var eventListeners = [];
	    hostEvents.forEach(function (hostEvent) {
	        compileElement.view.bindings.push(new compile_binding_1.CompileBinding(compileElement, hostEvent));
	        var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
	        listener.addAction(hostEvent, null, null);
	    });
	    collection_1.ListWrapper.forEachWithIndex(dirs, function (directiveAst, i) {
	        var directiveInstance = compileElement.directiveInstances[i];
	        directiveAst.hostEvents.forEach(function (hostEvent) {
	            compileElement.view.bindings.push(new compile_binding_1.CompileBinding(compileElement, hostEvent));
	            var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
	            listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
	        });
	    });
	    eventListeners.forEach(function (listener) { return listener.finishMethod(); });
	    return eventListeners;
	}
	exports.collectEventListeners = collectEventListeners;
	function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
	    collection_1.StringMapWrapper.forEach(directiveAst.directive.outputs, function (eventName /** TODO #9100 */, observablePropName /** TODO #9100 */) {
	        eventListeners.filter(function (listener) { return listener.eventName == eventName; }).forEach(function (listener) {
	            listener.listenToDirective(directiveInstance, observablePropName);
	        });
	    });
	}
	exports.bindDirectiveOutputs = bindDirectiveOutputs;
	function bindRenderOutputs(eventListeners) {
	    eventListeners.forEach(function (listener) { return listener.listenToRenderer(); });
	}
	exports.bindRenderOutputs = bindRenderOutputs;
	function convertStmtIntoExpression(stmt) {
	    if (stmt instanceof o.ExpressionStatement) {
	        return stmt.expr;
	    }
	    else if (stmt instanceof o.ReturnStatement) {
	        return stmt.value;
	    }
	    return null;
	}
	function santitizeEventName(name) {
	    return lang_1.StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, '_');
	}
	//# sourceMappingURL=event_binder.js.map

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_private_1 = __webpack_require__(12);
	var o = __webpack_require__(38);
	var constants_1 = __webpack_require__(72);
	var STATE_IS_NEVER_CHECKED = o.THIS_EXPR.prop('cdState').identical(constants_1.ChangeDetectorStateEnum.NeverChecked);
	var NOT_THROW_ON_CHANGES = o.not(constants_1.DetectChangesVars.throwOnChange);
	function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {
	    var view = compileElement.view;
	    var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	    var lifecycleHooks = directiveAst.directive.lifecycleHooks;
	    if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0) {
	        detectChangesInInputsMethod.addStmt(new o.IfStmt(constants_1.DetectChangesVars.changes.notIdentical(o.NULL_EXPR), [directiveInstance.callMethod('ngOnChanges', [constants_1.DetectChangesVars.changes]).toStmt()]));
	    }
	    if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnInit) !== -1) {
	        detectChangesInInputsMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [directiveInstance.callMethod('ngOnInit', []).toStmt()]));
	    }
	    if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.DoCheck) !== -1) {
	        detectChangesInInputsMethod.addStmt(new o.IfStmt(NOT_THROW_ON_CHANGES, [directiveInstance.callMethod('ngDoCheck', []).toStmt()]));
	    }
	}
	exports.bindDirectiveDetectChangesLifecycleCallbacks = bindDirectiveDetectChangesLifecycleCallbacks;
	function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	    var view = compileElement.view;
	    var lifecycleHooks = directiveMeta.lifecycleHooks;
	    var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
	    afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	    if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterContentInit) !== -1) {
	        afterContentLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
	    }
	    if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterContentChecked) !== -1) {
	        afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
	    }
	}
	exports.bindDirectiveAfterContentLifecycleCallbacks = bindDirectiveAfterContentLifecycleCallbacks;
	function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	    var view = compileElement.view;
	    var lifecycleHooks = directiveMeta.lifecycleHooks;
	    var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
	    afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	    if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterViewInit) !== -1) {
	        afterViewLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
	    }
	    if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterViewChecked) !== -1) {
	        afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
	    }
	}
	exports.bindDirectiveAfterViewLifecycleCallbacks = bindDirectiveAfterViewLifecycleCallbacks;
	function bindDirectiveDestroyLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	    var onDestroyMethod = compileElement.view.destroyMethod;
	    onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	    if (directiveMeta.lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnDestroy) !== -1) {
	        onDestroyMethod.addStmt(directiveInstance.callMethod('ngOnDestroy', []).toStmt());
	    }
	}
	exports.bindDirectiveDestroyLifecycleCallbacks = bindDirectiveDestroyLifecycleCallbacks;
	function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
	    var onDestroyMethod = view.destroyMethod;
	    if (pipeMeta.lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnDestroy) !== -1) {
	        onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
	    }
	}
	exports.bindPipeDestroyLifecycleCallbacks = bindPipeDestroyLifecycleCallbacks;
	//# sourceMappingURL=lifecycle_binder.js.map

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var identifiers_1 = __webpack_require__(32);
	var o = __webpack_require__(38);
	var compile_element_1 = __webpack_require__(71);
	var compile_view_1 = __webpack_require__(76);
	var constants_1 = __webpack_require__(72);
	var template_ast_1 = __webpack_require__(9);
	var util_1 = __webpack_require__(73);
	var compile_metadata_1 = __webpack_require__(33);
	var animation_compiler_1 = __webpack_require__(66);
	var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	var CLASS_ATTR = 'class';
	var STYLE_ATTR = 'style';
	var NG_CONTAINER_TAG = 'ng-container';
	var parentRenderNodeVar = o.variable('parentRenderNode');
	var rootSelectorVar = o.variable('rootSelector');
	var ViewCompileDependency = (function () {
	    function ViewCompileDependency(comp, factoryPlaceholder) {
	        this.comp = comp;
	        this.factoryPlaceholder = factoryPlaceholder;
	    }
	    return ViewCompileDependency;
	}());
	exports.ViewCompileDependency = ViewCompileDependency;
	function buildView(view, template, targetDependencies) {
	    var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
	    template_ast_1.templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent);
	    return builderVisitor.nestedViewCount;
	}
	exports.buildView = buildView;
	function finishView(view, targetStatements) {
	    view.afterNodes();
	    createViewTopLevelStmts(view, targetStatements);
	    view.nodes.forEach(function (node) {
	        if (node instanceof compile_element_1.CompileElement && node.hasEmbeddedView) {
	            finishView(node.embeddedView, targetStatements);
	        }
	    });
	}
	exports.finishView = finishView;
	var ViewBuilderVisitor = (function () {
	    function ViewBuilderVisitor(view, targetDependencies) {
	        this.view = view;
	        this.targetDependencies = targetDependencies;
	        this.nestedViewCount = 0;
	        this._animationCompiler = new animation_compiler_1.AnimationCompiler();
	    }
	    ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };
	    ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
	        var projectedNode = _getOuterContainerOrSelf(node);
	        var parent = projectedNode.parent;
	        var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
	        var vcAppEl = (node instanceof compile_element_1.CompileElement && node.hasViewContainer) ? node.appElement : null;
	        if (this._isRootNode(parent)) {
	            // store appElement as root node only for ViewContainers
	            if (this.view.viewType !== core_private_1.ViewType.COMPONENT) {
	                this.view.rootNodesOrAppElements.push(lang_1.isPresent(vcAppEl) ? vcAppEl : node.renderNode);
	            }
	        }
	        else if (lang_1.isPresent(parent.component) && lang_1.isPresent(ngContentIndex)) {
	            parent.addContentNode(ngContentIndex, lang_1.isPresent(vcAppEl) ? vcAppEl : node.renderNode);
	        }
	    };
	    ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
	        parent = _getOuterContainerParentOrSelf(parent);
	        if (this._isRootNode(parent)) {
	            if (this.view.viewType === core_private_1.ViewType.COMPONENT) {
	                return parentRenderNodeVar;
	            }
	            else {
	                // root node of an embedded/host view
	                return o.NULL_EXPR;
	            }
	        }
	        else {
	            return lang_1.isPresent(parent.component) &&
	                parent.component.template.encapsulation !== core_1.ViewEncapsulation.Native ?
	                o.NULL_EXPR :
	                parent.renderNode;
	        }
	    };
	    ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
	        return this._visitText(ast, '', parent);
	    };
	    ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
	        return this._visitText(ast, ast.value, parent);
	    };
	    ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
	        var fieldName = "_text_" + this.view.nodes.length;
	        this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderText)));
	        var renderNode = o.THIS_EXPR.prop(fieldName);
	        var compileNode = new compile_element_1.CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
	        var createRenderNode = o.THIS_EXPR.prop(fieldName)
	            .set(constants_1.ViewProperties.renderer.callMethod('createText', [
	            this._getParentRenderNode(parent), o.literal(value),
	            this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)
	        ]))
	            .toStmt();
	        this.view.nodes.push(compileNode);
	        this.view.createMethod.addStmt(createRenderNode);
	        this._addRootNodeAndProject(compileNode);
	        return renderNode;
	    };
	    ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
	        // the projected nodes originate from a different view, so we don't
	        // have debug information for them...
	        this.view.createMethod.resetDebugInfo(null, ast);
	        var parentRenderNode = this._getParentRenderNode(parent);
	        var nodesExpression = constants_1.ViewProperties.projectableNodes.key(o.literal(ast.index), new o.ArrayType(o.importType(this.view.genConfig.renderTypes.renderNode)));
	        if (parentRenderNode !== o.NULL_EXPR) {
	            this.view.createMethod.addStmt(constants_1.ViewProperties.renderer
	                .callMethod('projectNodes', [
	                parentRenderNode,
	                o.importExpr(identifiers_1.Identifiers.flattenNestedViewRenderNodes).callFn([nodesExpression])
	            ])
	                .toStmt());
	        }
	        else if (this._isRootNode(parent)) {
	            if (this.view.viewType !== core_private_1.ViewType.COMPONENT) {
	                // store root nodes only for embedded/host views
	                this.view.rootNodesOrAppElements.push(nodesExpression);
	            }
	        }
	        else {
	            if (lang_1.isPresent(parent.component) && lang_1.isPresent(ast.ngContentIndex)) {
	                parent.addContentNode(ast.ngContentIndex, nodesExpression);
	            }
	        }
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
	        var nodeIndex = this.view.nodes.length;
	        var createRenderNodeExpr;
	        var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
	        if (nodeIndex === 0 && this.view.viewType === core_private_1.ViewType.HOST) {
	            createRenderNodeExpr = o.THIS_EXPR.callMethod('selectOrCreateHostElement', [o.literal(ast.name), rootSelectorVar, debugContextExpr]);
	        }
	        else {
	            if (ast.name === NG_CONTAINER_TAG) {
	                createRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
	            }
	            else {
	                createRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod('createElement', [this._getParentRenderNode(parent), o.literal(ast.name), debugContextExpr]);
	            }
	        }
	        var fieldName = "_el_" + nodeIndex;
	        this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderElement)));
	        this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
	        var renderNode = o.THIS_EXPR.prop(fieldName);
	        var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	        var component = directives.find(function (directive) { return directive.isComponent; });
	        var htmlAttrs = _readHtmlAttrs(ast.attrs);
	        var attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives);
	        for (var i = 0; i < attrNameAndValues.length; i++) {
	            var attrName = attrNameAndValues[i][0];
	            var attrValue = attrNameAndValues[i][1];
	            this.view.createMethod.addStmt(constants_1.ViewProperties.renderer
	                .callMethod('setElementAttribute', [renderNode, o.literal(attrName), o.literal(attrValue)])
	                .toStmt());
	        }
	        var compileElement = new compile_element_1.CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
	        this.view.nodes.push(compileElement);
	        var compViewExpr = null;
	        if (lang_1.isPresent(component)) {
	            var nestedComponentIdentifier = new compile_metadata_1.CompileIdentifierMetadata({ name: util_1.getViewFactoryName(component, 0) });
	            this.targetDependencies.push(new ViewCompileDependency(component, nestedComponentIdentifier));
	            compViewExpr = o.variable("compView_" + nodeIndex); // fix highlighting: `
	            compileElement.setComponentView(compViewExpr);
	            this.view.createMethod.addStmt(compViewExpr
	                .set(o.importExpr(nestedComponentIdentifier).callFn([
	                constants_1.ViewProperties.viewUtils, compileElement.injector, compileElement.appElement
	            ]))
	                .toDeclStmt());
	        }
	        compileElement.beforeChildren();
	        this._addRootNodeAndProject(compileElement);
	        template_ast_1.templateVisitAll(this, ast.children, compileElement);
	        compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
	        if (lang_1.isPresent(compViewExpr)) {
	            var codeGenContentNodes;
	            if (this.view.component.type.isHost) {
	                codeGenContentNodes = constants_1.ViewProperties.projectableNodes;
	            }
	            else {
	                codeGenContentNodes = o.literalArr(compileElement.contentNodesByNgContentIndex.map(function (nodes) { return util_1.createFlatArray(nodes); }));
	            }
	            this.view.createMethod.addStmt(compViewExpr
	                .callMethod('create', [compileElement.getComponent(), codeGenContentNodes, o.NULL_EXPR])
	                .toStmt());
	        }
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	        var nodeIndex = this.view.nodes.length;
	        var fieldName = "_anchor_" + nodeIndex;
	        this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderComment)));
	        this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName)
	            .set(constants_1.ViewProperties.renderer.callMethod('createTemplateAnchor', [
	            this._getParentRenderNode(parent),
	            this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)
	        ]))
	            .toStmt());
	        var renderNode = o.THIS_EXPR.prop(fieldName);
	        var templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
	        var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	        var compileElement = new compile_element_1.CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
	        this.view.nodes.push(compileElement);
	        var compiledAnimations = this._animationCompiler.compileComponent(this.view.component);
	        this.nestedViewCount++;
	        var embeddedView = new compile_view_1.CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, o.NULL_EXPR, compiledAnimations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
	        this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
	        compileElement.beforeChildren();
	        this._addRootNodeAndProject(compileElement);
	        compileElement.afterChildren(0);
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	    ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	    return ViewBuilderVisitor;
	}());
	/**
	 * Walks up the nodes while the direct parent is a container.
	 *
	 * Returns the outer container or the node itself when it is not a direct child of a container.
	 *
	 * @internal
	 */
	function _getOuterContainerOrSelf(node) {
	    var view = node.view;
	    while (_isNgContainer(node.parent, view)) {
	        node = node.parent;
	    }
	    return node;
	}
	/**
	 * Walks up the nodes while they are container and returns the first parent which is not.
	 *
	 * Returns the parent of the outer container or the node itself when it is not a container.
	 *
	 * @internal
	 */
	function _getOuterContainerParentOrSelf(el) {
	    var view = el.view;
	    while (_isNgContainer(el, view)) {
	        el = el.parent;
	    }
	    return el;
	}
	function _isNgContainer(node, view) {
	    return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG &&
	        node.view === view;
	}
	function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
	    var result = {};
	    collection_1.StringMapWrapper.forEach(declaredHtmlAttrs, function (value, key) { result[key] = value; });
	    directives.forEach(function (directiveMeta) {
	        collection_1.StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {
	            var prevValue = result[name];
	            result[name] = lang_1.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	        });
	    });
	    return mapToKeyValueArray(result);
	}
	function _readHtmlAttrs(attrs) {
	    var htmlAttrs = {};
	    attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });
	    return htmlAttrs;
	}
	function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	    if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
	        return attrValue1 + " " + attrValue2;
	    }
	    else {
	        return attrValue2;
	    }
	}
	function mapToKeyValueArray(data) {
	    var entryArray = [];
	    collection_1.StringMapWrapper.forEach(data, function (value, name) {
	        entryArray.push([name, value]);
	    });
	    // We need to sort to get a defined output order
	    // for tests and for caching generated artifacts...
	    collection_1.ListWrapper.sort(entryArray, function (entry1, entry2) { return lang_1.StringWrapper.compare(entry1[0], entry2[0]); });
	    return entryArray;
	}
	function createViewTopLevelStmts(view, targetStatements) {
	    var nodeDebugInfosVar = o.NULL_EXPR;
	    if (view.genConfig.genDebugInfo) {
	        nodeDebugInfosVar = o.variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex); // fix highlighting: `
	        targetStatements.push(nodeDebugInfosVar
	            .set(o.literalArr(view.nodes.map(createStaticNodeDebugInfo), new o.ArrayType(new o.ExternalType(identifiers_1.Identifiers.StaticNodeDebugInfo), [o.TypeModifier.Const])))
	            .toDeclStmt(null, [o.StmtModifier.Final]));
	    }
	    var renderCompTypeVar = o.variable("renderType_" + view.component.type.name); // fix highlighting: `
	    if (view.viewIndex === 0) {
	        targetStatements.push(renderCompTypeVar.set(o.NULL_EXPR)
	            .toDeclStmt(o.importType(identifiers_1.Identifiers.RenderComponentType)));
	    }
	    var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
	    targetStatements.push(viewClass);
	    targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
	}
	function createStaticNodeDebugInfo(node) {
	    var compileElement = node instanceof compile_element_1.CompileElement ? node : null;
	    var providerTokens = [];
	    var componentToken = o.NULL_EXPR;
	    var varTokenEntries = [];
	    if (lang_1.isPresent(compileElement)) {
	        providerTokens = compileElement.getProviderTokens();
	        if (lang_1.isPresent(compileElement.component)) {
	            componentToken = util_1.createDiTokenExpression(identifiers_1.identifierToken(compileElement.component.type));
	        }
	        collection_1.StringMapWrapper.forEach(compileElement.referenceTokens, function (token, varName) {
	            varTokenEntries.push([varName, lang_1.isPresent(token) ? util_1.createDiTokenExpression(token) : o.NULL_EXPR]);
	        });
	    }
	    return o.importExpr(identifiers_1.Identifiers.StaticNodeDebugInfo)
	        .instantiate([
	        o.literalArr(providerTokens, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])),
	        componentToken,
	        o.literalMap(varTokenEntries, new o.MapType(o.DYNAMIC_TYPE, [o.TypeModifier.Const]))
	    ], o.importType(identifiers_1.Identifiers.StaticNodeDebugInfo, null, [o.TypeModifier.Const]));
	}
	function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
	    var viewConstructorArgs = [
	        new o.FnParam(constants_1.ViewConstructorVars.viewUtils.name, o.importType(identifiers_1.Identifiers.ViewUtils)),
	        new o.FnParam(constants_1.ViewConstructorVars.parentInjector.name, o.importType(identifiers_1.Identifiers.Injector)),
	        new o.FnParam(constants_1.ViewConstructorVars.declarationEl.name, o.importType(identifiers_1.Identifiers.AppElement))
	    ];
	    var superConstructorArgs = [
	        o.variable(view.className), renderCompTypeVar, constants_1.ViewTypeEnum.fromValue(view.viewType),
	        constants_1.ViewConstructorVars.viewUtils, constants_1.ViewConstructorVars.parentInjector,
	        constants_1.ViewConstructorVars.declarationEl,
	        constants_1.ChangeDetectionStrategyEnum.fromValue(getChangeDetectionMode(view))
	    ];
	    if (view.genConfig.genDebugInfo) {
	        superConstructorArgs.push(nodeDebugInfosVar);
	    }
	    var viewConstructor = new o.ClassMethod(null, viewConstructorArgs, [o.SUPER_EXPR.callFn(superConstructorArgs).toStmt()]);
	    var viewMethods = [
	        new o.ClassMethod('createInternal', [new o.FnParam(rootSelectorVar.name, o.STRING_TYPE)], generateCreateMethod(view), o.importType(identifiers_1.Identifiers.AppElement)),
	        new o.ClassMethod('injectorGetInternal', [
	            new o.FnParam(constants_1.InjectMethodVars.token.name, o.DYNAMIC_TYPE),
	            // Note: Can't use o.INT_TYPE here as the method in AppView uses number
	            new o.FnParam(constants_1.InjectMethodVars.requestNodeIndex.name, o.NUMBER_TYPE),
	            new o.FnParam(constants_1.InjectMethodVars.notFoundResult.name, o.DYNAMIC_TYPE)
	        ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), constants_1.InjectMethodVars.notFoundResult), o.DYNAMIC_TYPE),
	        new o.ClassMethod('detectChangesInternal', [new o.FnParam(constants_1.DetectChangesVars.throwOnChange.name, o.BOOL_TYPE)], generateDetectChangesMethod(view)),
	        new o.ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),
	        new o.ClassMethod('destroyInternal', [], view.destroyMethod.finish()),
	        new o.ClassMethod('detachInternal', [], view.detachMethod.finish())
	    ].concat(view.eventHandlerMethods);
	    var superClass = view.genConfig.genDebugInfo ? identifiers_1.Identifiers.DebugAppView : identifiers_1.Identifiers.AppView;
	    var viewClass = new o.ClassStmt(view.className, o.importExpr(superClass, [getContextType(view)]), view.fields, view.getters, viewConstructor, viewMethods.filter(function (method) { return method.body.length > 0; }));
	    return viewClass;
	}
	function createViewFactory(view, viewClass, renderCompTypeVar) {
	    var viewFactoryArgs = [
	        new o.FnParam(constants_1.ViewConstructorVars.viewUtils.name, o.importType(identifiers_1.Identifiers.ViewUtils)),
	        new o.FnParam(constants_1.ViewConstructorVars.parentInjector.name, o.importType(identifiers_1.Identifiers.Injector)),
	        new o.FnParam(constants_1.ViewConstructorVars.declarationEl.name, o.importType(identifiers_1.Identifiers.AppElement))
	    ];
	    var initRenderCompTypeStmts = [];
	    var templateUrlInfo;
	    if (view.component.template.templateUrl == view.component.type.moduleUrl) {
	        templateUrlInfo =
	            view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
	    }
	    else {
	        templateUrlInfo = view.component.template.templateUrl;
	    }
	    if (view.viewIndex === 0) {
	        initRenderCompTypeStmts = [new o.IfStmt(renderCompTypeVar.identical(o.NULL_EXPR), [
	                renderCompTypeVar
	                    .set(constants_1.ViewConstructorVars.viewUtils.callMethod('createRenderComponentType', [
	                    o.literal(templateUrlInfo),
	                    o.literal(view.component.template.ngContentSelectors.length),
	                    constants_1.ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles
	                ]))
	                    .toStmt()
	            ])];
	    }
	    return o
	        .fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new o.ReturnStatement(o.variable(viewClass.name)
	            .instantiate(viewClass.constructorMethod.params.map(function (param) { return o.variable(param.name); })))]), o.importType(identifiers_1.Identifiers.AppView, [getContextType(view)]))
	        .toDeclStmt(view.viewFactory.name, [o.StmtModifier.Final]);
	}
	function generateCreateMethod(view) {
	    var parentRenderNodeExpr = o.NULL_EXPR;
	    var parentRenderNodeStmts = [];
	    if (view.viewType === core_private_1.ViewType.COMPONENT) {
	        parentRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod('createViewRoot', [o.THIS_EXPR.prop('declarationAppElement').prop('nativeElement')]);
	        parentRenderNodeStmts =
	            [parentRenderNodeVar.set(parentRenderNodeExpr)
	                    .toDeclStmt(o.importType(view.genConfig.renderTypes.renderNode), [o.StmtModifier.Final])];
	    }
	    var resultExpr;
	    if (view.viewType === core_private_1.ViewType.HOST) {
	        resultExpr = view.nodes[0].appElement;
	    }
	    else {
	        resultExpr = o.NULL_EXPR;
	    }
	    return parentRenderNodeStmts.concat(view.createMethod.finish(), [
	        o.THIS_EXPR
	            .callMethod('init', [
	            util_1.createFlatArray(view.rootNodesOrAppElements),
	            o.literalArr(view.nodes.map(function (node) { return node.renderNode; })), o.literalArr(view.disposables),
	            o.literalArr(view.subscriptions)
	        ])
	            .toStmt(),
	        new o.ReturnStatement(resultExpr)
	    ]);
	}
	function generateDetectChangesMethod(view) {
	    var stmts = [];
	    if (view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() &&
	        view.afterContentLifecycleCallbacksMethod.isEmpty() &&
	        view.detectChangesRenderPropertiesMethod.isEmpty() &&
	        view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty()) {
	        return stmts;
	    }
	    collection_1.ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish());
	    stmts.push(o.THIS_EXPR.callMethod('detectContentChildrenChanges', [constants_1.DetectChangesVars.throwOnChange])
	        .toStmt());
	    var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
	    if (afterContentStmts.length > 0) {
	        stmts.push(new o.IfStmt(o.not(constants_1.DetectChangesVars.throwOnChange), afterContentStmts));
	    }
	    collection_1.ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish());
	    stmts.push(o.THIS_EXPR.callMethod('detectViewChildrenChanges', [constants_1.DetectChangesVars.throwOnChange])
	        .toStmt());
	    var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
	    if (afterViewStmts.length > 0) {
	        stmts.push(new o.IfStmt(o.not(constants_1.DetectChangesVars.throwOnChange), afterViewStmts));
	    }
	    var varStmts = [];
	    var readVars = o.findReadVarNames(stmts);
	    if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.changed.name)) {
	        varStmts.push(constants_1.DetectChangesVars.changed.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE));
	    }
	    if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.changes.name)) {
	        varStmts.push(constants_1.DetectChangesVars.changes.set(o.NULL_EXPR)
	            .toDeclStmt(new o.MapType(o.importType(identifiers_1.Identifiers.SimpleChange))));
	    }
	    if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.valUnwrapper.name)) {
	        varStmts.push(constants_1.DetectChangesVars.valUnwrapper.set(o.importExpr(identifiers_1.Identifiers.ValueUnwrapper).instantiate([]))
	            .toDeclStmt(null, [o.StmtModifier.Final]));
	    }
	    return varStmts.concat(stmts);
	}
	function addReturnValuefNotEmpty(statements, value) {
	    if (statements.length > 0) {
	        return statements.concat([new o.ReturnStatement(value)]);
	    }
	    else {
	        return statements;
	    }
	}
	function getContextType(view) {
	    if (view.viewType === core_private_1.ViewType.COMPONENT) {
	        return o.importType(view.component.type);
	    }
	    return o.DYNAMIC_TYPE;
	}
	function getChangeDetectionMode(view) {
	    var mode;
	    if (view.viewType === core_private_1.ViewType.COMPONENT) {
	        mode = core_private_1.isDefaultChangeDetectionStrategy(view.component.changeDetection) ?
	            core_1.ChangeDetectionStrategy.CheckAlways :
	            core_1.ChangeDetectionStrategy.CheckOnce;
	    }
	    else {
	        mode = core_1.ChangeDetectionStrategy.CheckAlways;
	    }
	    return mode;
	}
	//# sourceMappingURL=view_builder.js.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var async_1 = __webpack_require__(40);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var compile_metadata_1 = __webpack_require__(33);
	var xhr_1 = __webpack_require__(86);
	var url_resolver_1 = __webpack_require__(34);
	var style_url_resolver_1 = __webpack_require__(30);
	var html_ast_1 = __webpack_require__(22);
	var html_parser_1 = __webpack_require__(21);
	var config_1 = __webpack_require__(36);
	var template_preparser_1 = __webpack_require__(29);
	var DirectiveNormalizer = (function () {
	    function DirectiveNormalizer(_xhr, _urlResolver, _htmlParser, _config) {
	        this._xhr = _xhr;
	        this._urlResolver = _urlResolver;
	        this._htmlParser = _htmlParser;
	        this._config = _config;
	    }
	    DirectiveNormalizer.prototype.normalizeDirective = function (directive) {
	        if (!directive.isComponent) {
	            // For non components there is nothing to be normalized yet.
	            return async_1.PromiseWrapper.resolve(directive);
	        }
	        return this.normalizeTemplate(directive.type, directive.template)
	            .then(function (normalizedTemplate) { return new compile_metadata_1.CompileDirectiveMetadata({
	            type: directive.type,
	            isComponent: directive.isComponent,
	            selector: directive.selector,
	            exportAs: directive.exportAs,
	            changeDetection: directive.changeDetection,
	            inputs: directive.inputs,
	            outputs: directive.outputs,
	            hostListeners: directive.hostListeners,
	            hostProperties: directive.hostProperties,
	            hostAttributes: directive.hostAttributes,
	            lifecycleHooks: directive.lifecycleHooks,
	            providers: directive.providers,
	            viewProviders: directive.viewProviders,
	            queries: directive.queries,
	            viewQueries: directive.viewQueries,
	            template: normalizedTemplate
	        }); });
	    };
	    DirectiveNormalizer.prototype.normalizeTemplate = function (directiveType, template) {
	        var _this = this;
	        if (lang_1.isPresent(template.template)) {
	            return async_1.PromiseWrapper.resolve(this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl));
	        }
	        else if (lang_1.isPresent(template.templateUrl)) {
	            var sourceAbsUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
	            return this._xhr.get(sourceAbsUrl)
	                .then(function (templateContent) { return _this.normalizeLoadedTemplate(directiveType, template, templateContent, sourceAbsUrl); });
	        }
	        else {
	            throw new exceptions_1.BaseException("No template specified for component " + directiveType.name);
	        }
	    };
	    DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {
	        var _this = this;
	        var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name);
	        if (rootNodesAndErrors.errors.length > 0) {
	            var errorString = rootNodesAndErrors.errors.join('\n');
	            throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
	        }
	        var visitor = new TemplatePreparseVisitor();
	        html_ast_1.htmlVisitAll(visitor, rootNodesAndErrors.rootNodes);
	        var allStyles = templateMeta.styles.concat(visitor.styles);
	        var allStyleAbsUrls = visitor.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(templateAbsUrl, url); })
	            .concat(templateMeta.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(directiveType.moduleUrl, url); }));
	        var allResolvedStyles = allStyles.map(function (style) {
	            var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, templateAbsUrl, style);
	            styleWithImports.styleUrls.forEach(function (styleUrl) { return allStyleAbsUrls.push(styleUrl); });
	            return styleWithImports.style;
	        });
	        var encapsulation = templateMeta.encapsulation;
	        if (lang_1.isBlank(encapsulation)) {
	            encapsulation = this._config.defaultEncapsulation;
	        }
	        if (encapsulation === core_1.ViewEncapsulation.Emulated && allResolvedStyles.length === 0 &&
	            allStyleAbsUrls.length === 0) {
	            encapsulation = core_1.ViewEncapsulation.None;
	        }
	        return new compile_metadata_1.CompileTemplateMetadata({
	            encapsulation: encapsulation,
	            template: template,
	            templateUrl: templateAbsUrl,
	            styles: allResolvedStyles,
	            styleUrls: allStyleAbsUrls,
	            ngContentSelectors: visitor.ngContentSelectors,
	            animations: templateMeta.animations,
	            interpolation: templateMeta.interpolation
	        });
	    };
	    /** @nocollapse */
	    DirectiveNormalizer.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    DirectiveNormalizer.ctorParameters = [
	        { type: xhr_1.XHR, },
	        { type: url_resolver_1.UrlResolver, },
	        { type: html_parser_1.HtmlParser, },
	        { type: config_1.CompilerConfig, },
	    ];
	    return DirectiveNormalizer;
	}());
	exports.DirectiveNormalizer = DirectiveNormalizer;
	var TemplatePreparseVisitor = (function () {
	    function TemplatePreparseVisitor() {
	        this.ngContentSelectors = [];
	        this.styles = [];
	        this.styleUrls = [];
	        this.ngNonBindableStackCount = 0;
	    }
	    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	        var preparsedElement = template_preparser_1.preparseElement(ast);
	        switch (preparsedElement.type) {
	            case template_preparser_1.PreparsedElementType.NG_CONTENT:
	                if (this.ngNonBindableStackCount === 0) {
	                    this.ngContentSelectors.push(preparsedElement.selectAttr);
	                }
	                break;
	            case template_preparser_1.PreparsedElementType.STYLE:
	                var textContent = '';
	                ast.children.forEach(function (child) {
	                    if (child instanceof html_ast_1.HtmlTextAst) {
	                        textContent += child.value;
	                    }
	                });
	                this.styles.push(textContent);
	                break;
	            case template_preparser_1.PreparsedElementType.STYLESHEET:
	                this.styleUrls.push(preparsedElement.hrefAttr);
	                break;
	            default:
	                // DDC reports this as error. See:
	                // https://github.com/dart-lang/dev_compiler/issues/428
	                break;
	        }
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount++;
	        }
	        html_ast_1.htmlVisitAll(this, ast.children);
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount--;
	        }
	        return null;
	    };
	    TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	    TemplatePreparseVisitor.prototype.visitAttr = function (ast, context) { return null; };
	    TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	    TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { return null; };
	    TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };
	    return TemplatePreparseVisitor;
	}());
	//# sourceMappingURL=directive_normalizer.js.map

/***/ },
/* 86 */
/***/ function(module, exports) {

	"use strict";
	// TODO: vsavkin rename it into TemplateLoader
	/**
	 * An interface for retrieving documents by URL that the compiler uses
	 * to load templates.
	 */
	var XHR = (function () {
	    function XHR() {
	    }
	    XHR.prototype.get = function (url) { return null; };
	    return XHR;
	}());
	exports.XHR = XHR;
	//# sourceMappingURL=xhr.js.map

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var assertions_1 = __webpack_require__(88);
	var cpl = __webpack_require__(33);
	var config_1 = __webpack_require__(36);
	var directive_lifecycle_reflector_1 = __webpack_require__(89);
	var directive_resolver_1 = __webpack_require__(90);
	var pipe_resolver_1 = __webpack_require__(91);
	var url_resolver_1 = __webpack_require__(34);
	var util_1 = __webpack_require__(31);
	var view_resolver_1 = __webpack_require__(92);
	var CompileMetadataResolver = (function () {
	    function CompileMetadataResolver(_directiveResolver, _pipeResolver, _viewResolver, _config, _reflector) {
	        if (_reflector === void 0) { _reflector = core_private_1.reflector; }
	        this._directiveResolver = _directiveResolver;
	        this._pipeResolver = _pipeResolver;
	        this._viewResolver = _viewResolver;
	        this._config = _config;
	        this._reflector = _reflector;
	        this._directiveCache = new Map();
	        this._pipeCache = new Map();
	        this._anonymousTypes = new Map();
	        this._anonymousTypeIndex = 0;
	    }
	    CompileMetadataResolver.prototype.sanitizeTokenName = function (token) {
	        var identifier = lang_1.stringify(token);
	        if (identifier.indexOf('(') >= 0) {
	            // case: anonymous functions!
	            var found = this._anonymousTypes.get(token);
	            if (lang_1.isBlank(found)) {
	                this._anonymousTypes.set(token, this._anonymousTypeIndex++);
	                found = this._anonymousTypes.get(token);
	            }
	            identifier = "anonymous_token_" + found + "_";
	        }
	        return util_1.sanitizeIdentifier(identifier);
	    };
	    CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
	        var _this = this;
	        var defs = entry.definitions.map(function (def) { return _this.getAnimationStateMetadata(def); });
	        return new cpl.CompileAnimationEntryMetadata(entry.name, defs);
	    };
	    CompileMetadataResolver.prototype.getAnimationStateMetadata = function (value) {
	        if (value instanceof core_1.AnimationStateDeclarationMetadata) {
	            var styles = this.getAnimationStyleMetadata(value.styles);
	            return new cpl.CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
	        }
	        else if (value instanceof core_1.AnimationStateTransitionMetadata) {
	            return new cpl.CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps));
	        }
	        return null;
	    };
	    CompileMetadataResolver.prototype.getAnimationStyleMetadata = function (value) {
	        return new cpl.CompileAnimationStyleMetadata(value.offset, value.styles);
	    };
	    CompileMetadataResolver.prototype.getAnimationMetadata = function (value) {
	        var _this = this;
	        if (value instanceof core_1.AnimationStyleMetadata) {
	            return this.getAnimationStyleMetadata(value);
	        }
	        else if (value instanceof core_1.AnimationKeyframesSequenceMetadata) {
	            return new cpl.CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this.getAnimationStyleMetadata(entry); }));
	        }
	        else if (value instanceof core_1.AnimationAnimateMetadata) {
	            var animateData = this
	                .getAnimationMetadata(value.styles);
	            return new cpl.CompileAnimationAnimateMetadata(value.timings, animateData);
	        }
	        else if (value instanceof core_1.AnimationWithStepsMetadata) {
	            var steps = value.steps.map(function (step) { return _this.getAnimationMetadata(step); });
	            if (value instanceof core_1.AnimationGroupMetadata) {
	                return new cpl.CompileAnimationGroupMetadata(steps);
	            }
	            else {
	                return new cpl.CompileAnimationSequenceMetadata(steps);
	            }
	        }
	        return null;
	    };
	    CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	        var _this = this;
	        var meta = this._directiveCache.get(directiveType);
	        if (lang_1.isBlank(meta)) {
	            var dirMeta = this._directiveResolver.resolve(directiveType);
	            var templateMeta = null;
	            var changeDetectionStrategy = null;
	            var viewProviders = [];
	            var moduleUrl = staticTypeModuleUrl(directiveType);
	            if (dirMeta instanceof core_1.ComponentMetadata) {
	                assertions_1.assertArrayOfStrings('styles', dirMeta.styles);
	                var cmpMeta = dirMeta;
	                var viewMeta = this._viewResolver.resolve(directiveType);
	                assertions_1.assertArrayOfStrings('styles', viewMeta.styles);
	                assertions_1.assertInterpolationSymbols('interpolation', viewMeta.interpolation);
	                var animations = lang_1.isPresent(viewMeta.animations) ?
	                    viewMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e); }) :
	                    null;
	                templateMeta = new cpl.CompileTemplateMetadata({
	                    encapsulation: viewMeta.encapsulation,
	                    template: viewMeta.template,
	                    templateUrl: viewMeta.templateUrl,
	                    styles: viewMeta.styles,
	                    styleUrls: viewMeta.styleUrls,
	                    animations: animations,
	                    interpolation: viewMeta.interpolation
	                });
	                changeDetectionStrategy = cmpMeta.changeDetection;
	                if (lang_1.isPresent(dirMeta.viewProviders)) {
	                    viewProviders = this.getProvidersMetadata(dirMeta.viewProviders);
	                }
	                moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta);
	            }
	            var providers = [];
	            if (lang_1.isPresent(dirMeta.providers)) {
	                providers = this.getProvidersMetadata(dirMeta.providers);
	            }
	            var queries = [];
	            var viewQueries = [];
	            if (lang_1.isPresent(dirMeta.queries)) {
	                queries = this.getQueriesMetadata(dirMeta.queries, false, directiveType);
	                viewQueries = this.getQueriesMetadata(dirMeta.queries, true, directiveType);
	            }
	            meta = cpl.CompileDirectiveMetadata.create({
	                selector: dirMeta.selector,
	                exportAs: dirMeta.exportAs,
	                isComponent: lang_1.isPresent(templateMeta),
	                type: this.getTypeMetadata(directiveType, moduleUrl),
	                template: templateMeta,
	                changeDetection: changeDetectionStrategy,
	                inputs: dirMeta.inputs,
	                outputs: dirMeta.outputs,
	                host: dirMeta.host,
	                lifecycleHooks: core_private_1.LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return directive_lifecycle_reflector_1.hasLifecycleHook(hook, directiveType); }),
	                providers: providers,
	                viewProviders: viewProviders,
	                queries: queries,
	                viewQueries: viewQueries
	            });
	            this._directiveCache.set(directiveType, meta);
	        }
	        return meta;
	    };
	    /**
	     * @param someType a symbol which may or may not be a directive type
	     * @returns {cpl.CompileDirectiveMetadata} if possible, otherwise null.
	     */
	    CompileMetadataResolver.prototype.maybeGetDirectiveMetadata = function (someType) {
	        try {
	            return this.getDirectiveMetadata(someType);
	        }
	        catch (e) {
	            if (e.message.indexOf('No Directive annotation') !== -1) {
	                return null;
	            }
	            throw e;
	        }
	    };
	    CompileMetadataResolver.prototype.getTypeMetadata = function (type, moduleUrl, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        return new cpl.CompileTypeMetadata({
	            name: this.sanitizeTokenName(type),
	            moduleUrl: moduleUrl,
	            runtime: type,
	            diDeps: this.getDependenciesMetadata(type, dependencies)
	        });
	    };
	    CompileMetadataResolver.prototype.getFactoryMetadata = function (factory, moduleUrl, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        return new cpl.CompileFactoryMetadata({
	            name: this.sanitizeTokenName(factory),
	            moduleUrl: moduleUrl,
	            runtime: factory,
	            diDeps: this.getDependenciesMetadata(factory, dependencies)
	        });
	    };
	    CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	        var meta = this._pipeCache.get(pipeType);
	        if (lang_1.isBlank(meta)) {
	            var pipeMeta = this._pipeResolver.resolve(pipeType);
	            meta = new cpl.CompilePipeMetadata({
	                type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
	                name: pipeMeta.name,
	                pure: pipeMeta.pure,
	                lifecycleHooks: core_private_1.LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return directive_lifecycle_reflector_1.hasLifecycleHook(hook, pipeType); }),
	            });
	            this._pipeCache.set(pipeType, meta);
	        }
	        return meta;
	    };
	    CompileMetadataResolver.prototype.getViewDirectivesMetadata = function (component) {
	        var _this = this;
	        var view = this._viewResolver.resolve(component);
	        var directives = flattenDirectives(view, this._config.platformDirectives);
	        for (var i = 0; i < directives.length; i++) {
	            if (!isValidType(directives[i])) {
	                throw new exceptions_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        return directives.map(function (type) { return _this.getDirectiveMetadata(type); });
	    };
	    CompileMetadataResolver.prototype.getViewPipesMetadata = function (component) {
	        var _this = this;
	        var view = this._viewResolver.resolve(component);
	        var pipes = flattenPipes(view, this._config.platformPipes);
	        for (var i = 0; i < pipes.length; i++) {
	            if (!isValidType(pipes[i])) {
	                throw new exceptions_1.BaseException("Unexpected piped value '" + lang_1.stringify(pipes[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        return pipes.map(function (type) { return _this.getPipeMetadata(type); });
	    };
	    CompileMetadataResolver.prototype.getDependenciesMetadata = function (typeOrFunc, dependencies) {
	        var _this = this;
	        var hasUnknownDeps = false;
	        var params = lang_1.isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);
	        if (lang_1.isBlank(params)) {
	            params = [];
	        }
	        var dependenciesMetadata = params.map(function (param) {
	            var isAttribute = false;
	            var isHost = false;
	            var isSelf = false;
	            var isSkipSelf = false;
	            var isOptional = false;
	            var query = null;
	            var viewQuery = null;
	            var token = null;
	            if (lang_1.isArray(param)) {
	                param.forEach(function (paramEntry) {
	                    if (paramEntry instanceof core_1.HostMetadata) {
	                        isHost = true;
	                    }
	                    else if (paramEntry instanceof core_1.SelfMetadata) {
	                        isSelf = true;
	                    }
	                    else if (paramEntry instanceof core_1.SkipSelfMetadata) {
	                        isSkipSelf = true;
	                    }
	                    else if (paramEntry instanceof core_1.OptionalMetadata) {
	                        isOptional = true;
	                    }
	                    else if (paramEntry instanceof core_1.AttributeMetadata) {
	                        isAttribute = true;
	                        token = paramEntry.attributeName;
	                    }
	                    else if (paramEntry instanceof core_1.QueryMetadata) {
	                        if (paramEntry.isViewQuery) {
	                            viewQuery = paramEntry;
	                        }
	                        else {
	                            query = paramEntry;
	                        }
	                    }
	                    else if (paramEntry instanceof core_1.InjectMetadata) {
	                        token = paramEntry.token;
	                    }
	                    else if (isValidType(paramEntry) && lang_1.isBlank(token)) {
	                        token = paramEntry;
	                    }
	                });
	            }
	            else {
	                token = param;
	            }
	            if (lang_1.isBlank(token)) {
	                hasUnknownDeps = true;
	                return null;
	            }
	            return new cpl.CompileDiDependencyMetadata({
	                isAttribute: isAttribute,
	                isHost: isHost,
	                isSelf: isSelf,
	                isSkipSelf: isSkipSelf,
	                isOptional: isOptional,
	                query: lang_1.isPresent(query) ? _this.getQueryMetadata(query, null, typeOrFunc) : null,
	                viewQuery: lang_1.isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,
	                token: _this.getTokenMetadata(token)
	            });
	        });
	        if (hasUnknownDeps) {
	            var depsTokens = dependenciesMetadata.map(function (dep) { return dep ? lang_1.stringify(dep.token) : '?'; })
	                .join(', ');
	            throw new exceptions_1.BaseException("Can't resolve all parameters for " + lang_1.stringify(typeOrFunc) + ": (" + depsTokens + ").");
	        }
	        return dependenciesMetadata;
	    };
	    CompileMetadataResolver.prototype.getTokenMetadata = function (token) {
	        token = core_1.resolveForwardRef(token);
	        var compileToken;
	        if (lang_1.isString(token)) {
	            compileToken = new cpl.CompileTokenMetadata({ value: token });
	        }
	        else {
	            compileToken = new cpl.CompileTokenMetadata({
	                identifier: new cpl.CompileIdentifierMetadata({
	                    runtime: token,
	                    name: this.sanitizeTokenName(token),
	                    moduleUrl: staticTypeModuleUrl(token)
	                })
	            });
	        }
	        return compileToken;
	    };
	    CompileMetadataResolver.prototype.getProvidersMetadata = function (providers) {
	        var _this = this;
	        return providers.map(function (provider) {
	            provider = core_1.resolveForwardRef(provider);
	            if (lang_1.isArray(provider)) {
	                return _this.getProvidersMetadata(provider);
	            }
	            else if (provider instanceof core_1.Provider) {
	                return _this.getProviderMetadata(provider);
	            }
	            else if (core_private_1.isProviderLiteral(provider)) {
	                return _this.getProviderMetadata(core_private_1.createProvider(provider));
	            }
	            else {
	                return _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
	            }
	        });
	    };
	    CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	        var compileDeps;
	        var compileTypeMetadata = null;
	        var compileFactoryMetadata = null;
	        if (lang_1.isPresent(provider.useClass)) {
	            compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
	            compileDeps = compileTypeMetadata.diDeps;
	        }
	        else if (lang_1.isPresent(provider.useFactory)) {
	            compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
	            compileDeps = compileFactoryMetadata.diDeps;
	        }
	        return new cpl.CompileProviderMetadata({
	            token: this.getTokenMetadata(provider.token),
	            useClass: compileTypeMetadata,
	            useValue: convertToCompileValue(provider.useValue),
	            useFactory: compileFactoryMetadata,
	            useExisting: lang_1.isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) :
	                null,
	            deps: compileDeps,
	            multi: provider.multi
	        });
	    };
	    CompileMetadataResolver.prototype.getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	        var _this = this;
	        var compileQueries = [];
	        collection_1.StringMapWrapper.forEach(queries, function (query /** TODO #9100 */, propertyName /** TODO #9100 */) {
	            if (query.isViewQuery === isViewQuery) {
	                compileQueries.push(_this.getQueryMetadata(query, propertyName, directiveType));
	            }
	        });
	        return compileQueries;
	    };
	    CompileMetadataResolver.prototype.getQueryMetadata = function (q, propertyName, typeOrFunc) {
	        var _this = this;
	        var selectors;
	        if (q.isVarBindingQuery) {
	            selectors = q.varBindings.map(function (varName) { return _this.getTokenMetadata(varName); });
	        }
	        else {
	            if (!lang_1.isPresent(q.selector)) {
	                throw new exceptions_1.BaseException("Can't construct a query for the property \"" + propertyName + "\" of \"" + lang_1.stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
	            }
	            selectors = [this.getTokenMetadata(q.selector)];
	        }
	        return new cpl.CompileQueryMetadata({
	            selectors: selectors,
	            first: q.first,
	            descendants: q.descendants,
	            propertyName: propertyName,
	            read: lang_1.isPresent(q.read) ? this.getTokenMetadata(q.read) : null
	        });
	    };
	    /** @nocollapse */
	    CompileMetadataResolver.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    CompileMetadataResolver.ctorParameters = [
	        { type: directive_resolver_1.DirectiveResolver, },
	        { type: pipe_resolver_1.PipeResolver, },
	        { type: view_resolver_1.ViewResolver, },
	        { type: config_1.CompilerConfig, },
	        { type: core_private_1.ReflectorReader, },
	    ];
	    return CompileMetadataResolver;
	}());
	exports.CompileMetadataResolver = CompileMetadataResolver;
	function flattenDirectives(view, platformDirectives) {
	    var directives = [];
	    if (lang_1.isPresent(platformDirectives)) {
	        flattenArray(platformDirectives, directives);
	    }
	    if (lang_1.isPresent(view.directives)) {
	        flattenArray(view.directives, directives);
	    }
	    return directives;
	}
	function flattenPipes(view, platformPipes) {
	    var pipes = [];
	    if (lang_1.isPresent(platformPipes)) {
	        flattenArray(platformPipes, pipes);
	    }
	    if (lang_1.isPresent(view.pipes)) {
	        flattenArray(view.pipes, pipes);
	    }
	    return pipes;
	}
	function flattenArray(tree, out) {
	    for (var i = 0; i < tree.length; i++) {
	        var item = core_1.resolveForwardRef(tree[i]);
	        if (lang_1.isArray(item)) {
	            flattenArray(item, out);
	        }
	        else {
	            out.push(item);
	        }
	    }
	}
	function isStaticType(value) {
	    return lang_1.isStringMap(value) && lang_1.isPresent(value['name']) && lang_1.isPresent(value['filePath']);
	}
	function isValidType(value) {
	    return isStaticType(value) || (value instanceof lang_1.Type);
	}
	function staticTypeModuleUrl(value) {
	    return isStaticType(value) ? value['filePath'] : null;
	}
	function componentModuleUrl(reflector, type, cmpMetadata) {
	    if (isStaticType(type)) {
	        return staticTypeModuleUrl(type);
	    }
	    if (lang_1.isPresent(cmpMetadata.moduleId)) {
	        var moduleId = cmpMetadata.moduleId;
	        var scheme = url_resolver_1.getUrlScheme(moduleId);
	        return lang_1.isPresent(scheme) && scheme.length > 0 ? moduleId :
	            "package:" + moduleId + util_1.MODULE_SUFFIX;
	    }
	    return reflector.importUri(type);
	}
	// Only fill CompileIdentifierMetadata.runtime if needed...
	function convertToCompileValue(value) {
	    return util_1.visitValue(value, new _CompileValueConverter(), null);
	}
	var _CompileValueConverter = (function (_super) {
	    __extends(_CompileValueConverter, _super);
	    function _CompileValueConverter() {
	        _super.apply(this, arguments);
	    }
	    _CompileValueConverter.prototype.visitOther = function (value, context) {
	        if (isStaticType(value)) {
	            return new cpl.CompileIdentifierMetadata({ name: value['name'], moduleUrl: staticTypeModuleUrl(value) });
	        }
	        else {
	            return new cpl.CompileIdentifierMetadata({ runtime: value });
	        }
	    };
	    return _CompileValueConverter;
	}(util_1.ValueTransformer));
	//# sourceMappingURL=metadata_resolver.js.map

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	function assertArrayOfStrings(identifier, value) {
	    if (!core_1.isDevMode() || lang_1.isBlank(value)) {
	        return;
	    }
	    if (!lang_1.isArray(value)) {
	        throw new exceptions_1.BaseException("Expected '" + identifier + "' to be an array of strings.");
	    }
	    for (var i = 0; i < value.length; i += 1) {
	        if (!lang_1.isString(value[i])) {
	            throw new exceptions_1.BaseException("Expected '" + identifier + "' to be an array of strings.");
	        }
	    }
	}
	exports.assertArrayOfStrings = assertArrayOfStrings;
	var INTERPOLATION_BLACKLIST_REGEXPS = [
	    /^\s*$/g,
	    /[<>]/g,
	    /^[\{\}]$/g,
	];
	function assertInterpolationSymbols(identifier, value) {
	    if (core_1.isDevMode() && !lang_1.isBlank(value) && (!lang_1.isArray(value) || value.length != 2)) {
	        throw new exceptions_1.BaseException("Expected '" + identifier + "' to be an array, [start, end].");
	    }
	    else if (core_1.isDevMode() && !lang_1.isBlank(value)) {
	        var start_1 = value[0];
	        var end_1 = value[1];
	        // black list checking
	        INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	            if (regexp.test(start_1) || regexp.test(end_1)) {
	                throw new exceptions_1.BaseException("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	            }
	        });
	    }
	}
	exports.assertInterpolationSymbols = assertInterpolationSymbols;
	//# sourceMappingURL=assertions.js.map

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var LIFECYCLE_INTERFACES = collection_1.MapWrapper.createFromPairs([
	    [core_private_1.LifecycleHooks.OnInit, core_1.OnInit],
	    [core_private_1.LifecycleHooks.OnDestroy, core_1.OnDestroy],
	    [core_private_1.LifecycleHooks.DoCheck, core_1.DoCheck],
	    [core_private_1.LifecycleHooks.OnChanges, core_1.OnChanges],
	    [core_private_1.LifecycleHooks.AfterContentInit, core_1.AfterContentInit],
	    [core_private_1.LifecycleHooks.AfterContentChecked, core_1.AfterContentChecked],
	    [core_private_1.LifecycleHooks.AfterViewInit, core_1.AfterViewInit],
	    [core_private_1.LifecycleHooks.AfterViewChecked, core_1.AfterViewChecked],
	]);
	var LIFECYCLE_PROPS = collection_1.MapWrapper.createFromPairs([
	    [core_private_1.LifecycleHooks.OnInit, 'ngOnInit'],
	    [core_private_1.LifecycleHooks.OnDestroy, 'ngOnDestroy'],
	    [core_private_1.LifecycleHooks.DoCheck, 'ngDoCheck'],
	    [core_private_1.LifecycleHooks.OnChanges, 'ngOnChanges'],
	    [core_private_1.LifecycleHooks.AfterContentInit, 'ngAfterContentInit'],
	    [core_private_1.LifecycleHooks.AfterContentChecked, 'ngAfterContentChecked'],
	    [core_private_1.LifecycleHooks.AfterViewInit, 'ngAfterViewInit'],
	    [core_private_1.LifecycleHooks.AfterViewChecked, 'ngAfterViewChecked'],
	]);
	function hasLifecycleHook(hook, token /** TODO #9100 */) {
	    var lcInterface = LIFECYCLE_INTERFACES.get(hook);
	    var lcProp = LIFECYCLE_PROPS.get(hook);
	    return core_private_1.reflector.hasLifecycleHook(token, lcInterface, lcProp);
	}
	exports.hasLifecycleHook = hasLifecycleHook;
	//# sourceMappingURL=directive_lifecycle_reflector.js.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	function _isDirectiveMetadata(type) {
	    return type instanceof core_1.DirectiveMetadata;
	}
	var DirectiveResolver = (function () {
	    function DirectiveResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = core_private_1.reflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * Return {@link DirectiveMetadata} for a given `Type`.
	     */
	    DirectiveResolver.prototype.resolve = function (type) {
	        var typeMetadata = this._reflector.annotations(core_1.resolveForwardRef(type));
	        if (lang_1.isPresent(typeMetadata)) {
	            var metadata = typeMetadata.find(_isDirectiveMetadata);
	            if (lang_1.isPresent(metadata)) {
	                var propertyMetadata = this._reflector.propMetadata(type);
	                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	            }
	        }
	        throw new exceptions_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
	    };
	    DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	        var inputs = [];
	        var outputs = [];
	        var host = {};
	        var queries = {};
	        collection_1.StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {
	            metadata.forEach(function (a) {
	                if (a instanceof core_1.InputMetadata) {
	                    if (lang_1.isPresent(a.bindingPropertyName)) {
	                        inputs.push(propName + ": " + a.bindingPropertyName);
	                    }
	                    else {
	                        inputs.push(propName);
	                    }
	                }
	                if (a instanceof core_1.OutputMetadata) {
	                    if (lang_1.isPresent(a.bindingPropertyName)) {
	                        outputs.push(propName + ": " + a.bindingPropertyName);
	                    }
	                    else {
	                        outputs.push(propName);
	                    }
	                }
	                if (a instanceof core_1.HostBindingMetadata) {
	                    if (lang_1.isPresent(a.hostPropertyName)) {
	                        host[("[" + a.hostPropertyName + "]")] = propName;
	                    }
	                    else {
	                        host[("[" + propName + "]")] = propName;
	                    }
	                }
	                if (a instanceof core_1.HostListenerMetadata) {
	                    var args = lang_1.isPresent(a.args) ? a.args.join(', ') : '';
	                    host[("(" + a.eventName + ")")] = propName + "(" + args + ")";
	                }
	                if (a instanceof core_1.QueryMetadata) {
	                    queries[propName] = a;
	                }
	            });
	        });
	        return this._merge(dm, inputs, outputs, host, queries, directiveType);
	    };
	    DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries, directiveType) {
	        var mergedInputs = lang_1.isPresent(dm.inputs) ? collection_1.ListWrapper.concat(dm.inputs, inputs) : inputs;
	        var mergedOutputs;
	        if (lang_1.isPresent(dm.outputs)) {
	            dm.outputs.forEach(function (propName) {
	                if (collection_1.ListWrapper.contains(outputs, propName)) {
	                    throw new exceptions_1.BaseException("Output event '" + propName + "' defined multiple times in '" + lang_1.stringify(directiveType) + "'");
	                }
	            });
	            mergedOutputs = collection_1.ListWrapper.concat(dm.outputs, outputs);
	        }
	        else {
	            mergedOutputs = outputs;
	        }
	        var mergedHost = lang_1.isPresent(dm.host) ? collection_1.StringMapWrapper.merge(dm.host, host) : host;
	        var mergedQueries = lang_1.isPresent(dm.queries) ? collection_1.StringMapWrapper.merge(dm.queries, queries) : queries;
	        if (dm instanceof core_1.ComponentMetadata) {
	            return new core_1.ComponentMetadata({
	                selector: dm.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: dm.exportAs,
	                moduleId: dm.moduleId,
	                queries: mergedQueries,
	                changeDetection: dm.changeDetection,
	                providers: dm.providers,
	                viewProviders: dm.viewProviders
	            });
	        }
	        else {
	            return new core_1.DirectiveMetadata({
	                selector: dm.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: dm.exportAs,
	                queries: mergedQueries,
	                providers: dm.providers
	            });
	        }
	    };
	    /** @nocollapse */
	    DirectiveResolver.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    DirectiveResolver.ctorParameters = [
	        { type: core_private_1.ReflectorReader, },
	    ];
	    return DirectiveResolver;
	}());
	exports.DirectiveResolver = DirectiveResolver;
	exports.CODEGEN_DIRECTIVE_RESOLVER = new DirectiveResolver(core_private_1.reflector);
	//# sourceMappingURL=directive_resolver.js.map

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	function _isPipeMetadata(type) {
	    return type instanceof core_1.PipeMetadata;
	}
	var PipeResolver = (function () {
	    function PipeResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = core_private_1.reflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * Return {@link PipeMetadata} for a given `Type`.
	     */
	    PipeResolver.prototype.resolve = function (type) {
	        var metas = this._reflector.annotations(core_1.resolveForwardRef(type));
	        if (lang_1.isPresent(metas)) {
	            var annotation = metas.find(_isPipeMetadata);
	            if (lang_1.isPresent(annotation)) {
	                return annotation;
	            }
	        }
	        throw new exceptions_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
	    };
	    /** @nocollapse */
	    PipeResolver.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    PipeResolver.ctorParameters = [
	        { type: core_private_1.ReflectorReader, },
	    ];
	    return PipeResolver;
	}());
	exports.PipeResolver = PipeResolver;
	//# sourceMappingURL=pipe_resolver.js.map

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(14);
	var collection_1 = __webpack_require__(13);
	var ViewResolver = (function () {
	    function ViewResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = core_private_1.reflector; }
	        this._reflector = _reflector;
	        /** @internal */
	        this._cache = new collection_1.Map();
	    }
	    ViewResolver.prototype.resolve = function (component) {
	        var view = this._cache.get(component);
	        if (lang_1.isBlank(view)) {
	            view = this._resolve(component);
	            this._cache.set(component, view);
	        }
	        return view;
	    };
	    /** @internal */
	    ViewResolver.prototype._resolve = function (component) {
	        var compMeta;
	        this._reflector.annotations(component).forEach(function (m) {
	            if (m instanceof core_1.ComponentMetadata) {
	                compMeta = m;
	            }
	        });
	        if (lang_1.isPresent(compMeta)) {
	            if (lang_1.isBlank(compMeta.template) && lang_1.isBlank(compMeta.templateUrl)) {
	                throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' must have either 'template' or 'templateUrl' set.");
	            }
	            else {
	                return new core_1.ViewMetadata({
	                    templateUrl: compMeta.templateUrl,
	                    template: compMeta.template,
	                    directives: compMeta.directives,
	                    pipes: compMeta.pipes,
	                    encapsulation: compMeta.encapsulation,
	                    styles: compMeta.styles,
	                    styleUrls: compMeta.styleUrls,
	                    animations: compMeta.animations,
	                    interpolation: compMeta.interpolation
	                });
	            }
	        }
	        else {
	            throw new exceptions_1.BaseException("Could not compile '" + lang_1.stringify(component) + "' because it is not a component.");
	        }
	    };
	    /** @nocollapse */
	    ViewResolver.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    ViewResolver.ctorParameters = [
	        { type: core_private_1.ReflectorReader, },
	    ];
	    return ViewResolver;
	}());
	exports.ViewResolver = ViewResolver;
	//# sourceMappingURL=view_resolver.js.map

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var abstract_emitter_1 = __webpack_require__(94);
	var abstract_js_emitter_1 = __webpack_require__(95);
	var util_1 = __webpack_require__(31);
	function jitStatements(sourceUrl, statements, resultVar) {
	    var converter = new JitEmitterVisitor();
	    var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([resultVar]);
	    converter.visitAllStatements(statements, ctx);
	    return lang_1.evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
	}
	exports.jitStatements = jitStatements;
	var JitEmitterVisitor = (function (_super) {
	    __extends(JitEmitterVisitor, _super);
	    function JitEmitterVisitor() {
	        _super.apply(this, arguments);
	        this._evalArgNames = [];
	        this._evalArgValues = [];
	    }
	    JitEmitterVisitor.prototype.getArgs = function () {
	        var result = {};
	        for (var i = 0; i < this._evalArgNames.length; i++) {
	            result[this._evalArgNames[i]] = this._evalArgValues[i];
	        }
	        return result;
	    };
	    JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        var value = ast.value.runtime;
	        var id = this._evalArgValues.indexOf(value);
	        if (id === -1) {
	            id = this._evalArgValues.length;
	            this._evalArgValues.push(value);
	            var name = lang_1.isPresent(ast.value.name) ? util_1.sanitizeIdentifier(ast.value.name) : 'val';
	            this._evalArgNames.push(util_1.sanitizeIdentifier("jit_" + name + id));
	        }
	        ctx.print(this._evalArgNames[id]);
	        return null;
	    };
	    return JitEmitterVisitor;
	}(abstract_js_emitter_1.AbstractJsEmitterVisitor));
	//# sourceMappingURL=output_jit.js.map

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var o = __webpack_require__(38);
	var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	exports.CATCH_ERROR_VAR = o.variable('error');
	exports.CATCH_STACK_VAR = o.variable('stack');
	var OutputEmitter = (function () {
	    function OutputEmitter() {
	    }
	    return OutputEmitter;
	}());
	exports.OutputEmitter = OutputEmitter;
	var _EmittedLine = (function () {
	    function _EmittedLine(indent) {
	        this.indent = indent;
	        this.parts = [];
	    }
	    return _EmittedLine;
	}());
	var EmitterVisitorContext = (function () {
	    function EmitterVisitorContext(_exportedVars, _indent) {
	        this._exportedVars = _exportedVars;
	        this._indent = _indent;
	        this._classes = [];
	        this._lines = [new _EmittedLine(_indent)];
	    }
	    EmitterVisitorContext.createRoot = function (exportedVars) {
	        return new EmitterVisitorContext(exportedVars, 0);
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	        get: function () { return this._lines[this._lines.length - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	    EmitterVisitorContext.prototype.println = function (lastPart) {
	        if (lastPart === void 0) { lastPart = ''; }
	        this.print(lastPart, true);
	    };
	    EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	    EmitterVisitorContext.prototype.print = function (part, newLine) {
	        if (newLine === void 0) { newLine = false; }
	        if (part.length > 0) {
	            this._currentLine.parts.push(part);
	        }
	        if (newLine) {
	            this._lines.push(new _EmittedLine(this._indent));
	        }
	    };
	    EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	        if (this.lineIsEmpty()) {
	            this._lines.pop();
	        }
	    };
	    EmitterVisitorContext.prototype.incIndent = function () {
	        this._indent++;
	        this._currentLine.indent = this._indent;
	    };
	    EmitterVisitorContext.prototype.decIndent = function () {
	        this._indent--;
	        this._currentLine.indent = this._indent;
	    };
	    EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	    EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };
	    Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	        get: function () {
	            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EmitterVisitorContext.prototype.toSource = function () {
	        var lines = this._lines;
	        if (lines[lines.length - 1].parts.length === 0) {
	            lines = lines.slice(0, lines.length - 1);
	        }
	        return lines
	            .map(function (line) {
	            if (line.parts.length > 0) {
	                return _createIndent(line.indent) + line.parts.join('');
	            }
	            else {
	                return '';
	            }
	        })
	            .join('\n');
	    };
	    return EmitterVisitorContext;
	}());
	exports.EmitterVisitorContext = EmitterVisitorContext;
	var AbstractEmitterVisitor = (function () {
	    function AbstractEmitterVisitor(_escapeDollarInStrings) {
	        this._escapeDollarInStrings = _escapeDollarInStrings;
	    }
	    AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	        stmt.expr.visitExpression(this, ctx);
	        ctx.println(';');
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	        ctx.print("return ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(';');
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	        ctx.print("if (");
	        stmt.condition.visitExpression(this, ctx);
	        ctx.print(") {");
	        var hasElseCase = lang_1.isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
	        if (stmt.trueCase.length <= 1 && !hasElseCase) {
	            ctx.print(" ");
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.removeEmptyLastLine();
	            ctx.print(" ");
	        }
	        else {
	            ctx.println();
	            ctx.incIndent();
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.decIndent();
	            if (hasElseCase) {
	                ctx.println("} else {");
	                ctx.incIndent();
	                this.visitAllStatements(stmt.falseCase, ctx);
	                ctx.decIndent();
	            }
	        }
	        ctx.println("}");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	        ctx.print("throw ");
	        stmt.error.visitExpression(this, ctx);
	        ctx.println(";");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	        var lines = stmt.comment.split('\n');
	        lines.forEach(function (line) { ctx.println("// " + line); });
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print('(');
	        }
	        ctx.print(expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(')');
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print('(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print("[");
	        expr.index.visitExpression(this, ctx);
	        ctx.print("] = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(')');
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	        var lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print('(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print("." + expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(')');
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        expr.receiver.visitExpression(this, ctx);
	        var name = expr.name;
	        if (lang_1.isPresent(expr.builtin)) {
	            name = this.getBuiltinMethodName(expr.builtin);
	            if (lang_1.isBlank(name)) {
	                // some builtins just mean to skip the call.
	                // e.g. `bind` in Dart.
	                return null;
	            }
	        }
	        ctx.print("." + name + "(");
	        this.visitAllExpressions(expr.args, ctx, ",");
	        ctx.print(")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        expr.fn.visitExpression(this, ctx);
	        ctx.print("(");
	        this.visitAllExpressions(expr.args, ctx, ',');
	        ctx.print(")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        var varName = ast.name;
	        if (lang_1.isPresent(ast.builtin)) {
	            switch (ast.builtin) {
	                case o.BuiltinVar.Super:
	                    varName = 'super';
	                    break;
	                case o.BuiltinVar.This:
	                    varName = 'this';
	                    break;
	                case o.BuiltinVar.CatchError:
	                    varName = exports.CATCH_ERROR_VAR.name;
	                    break;
	                case o.BuiltinVar.CatchStack:
	                    varName = exports.CATCH_STACK_VAR.name;
	                    break;
	                default:
	                    throw new exceptions_1.BaseException("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        ctx.print(varName);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print("new ");
	        ast.classExpr.visitExpression(this, ctx);
	        ctx.print("(");
	        this.visitAllExpressions(ast.args, ctx, ',');
	        ctx.print(")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	        var value = ast.value;
	        if (lang_1.isString(value)) {
	            ctx.print(escapeSingleQuoteString(value, this._escapeDollarInStrings));
	        }
	        else if (lang_1.isBlank(value)) {
	            ctx.print('null');
	        }
	        else {
	            ctx.print("" + value);
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	        ctx.print("(");
	        ast.condition.visitExpression(this, ctx);
	        ctx.print('? ');
	        ast.trueCase.visitExpression(this, ctx);
	        ctx.print(': ');
	        ast.falseCase.visitExpression(this, ctx);
	        ctx.print(")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	        ctx.print('!');
	        ast.condition.visitExpression(this, ctx);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var opStr;
	        switch (ast.operator) {
	            case o.BinaryOperator.Equals:
	                opStr = '==';
	                break;
	            case o.BinaryOperator.Identical:
	                opStr = '===';
	                break;
	            case o.BinaryOperator.NotEquals:
	                opStr = '!=';
	                break;
	            case o.BinaryOperator.NotIdentical:
	                opStr = '!==';
	                break;
	            case o.BinaryOperator.And:
	                opStr = '&&';
	                break;
	            case o.BinaryOperator.Or:
	                opStr = '||';
	                break;
	            case o.BinaryOperator.Plus:
	                opStr = '+';
	                break;
	            case o.BinaryOperator.Minus:
	                opStr = '-';
	                break;
	            case o.BinaryOperator.Divide:
	                opStr = '/';
	                break;
	            case o.BinaryOperator.Multiply:
	                opStr = '*';
	                break;
	            case o.BinaryOperator.Modulo:
	                opStr = '%';
	                break;
	            case o.BinaryOperator.Lower:
	                opStr = '<';
	                break;
	            case o.BinaryOperator.LowerEquals:
	                opStr = '<=';
	                break;
	            case o.BinaryOperator.Bigger:
	                opStr = '>';
	                break;
	            case o.BinaryOperator.BiggerEquals:
	                opStr = '>=';
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unknown operator " + ast.operator);
	        }
	        ctx.print("(");
	        ast.lhs.visitExpression(this, ctx);
	        ctx.print(" " + opStr + " ");
	        ast.rhs.visitExpression(this, ctx);
	        ctx.print(")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print(".");
	        ctx.print(ast.name);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print("[");
	        ast.index.visitExpression(this, ctx);
	        ctx.print("]");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        var useNewLine = ast.entries.length > 1;
	        ctx.print("[", useNewLine);
	        ctx.incIndent();
	        this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	        ctx.decIndent();
	        ctx.print("]", useNewLine);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        var useNewLine = ast.entries.length > 1;
	        ctx.print("{", useNewLine);
	        ctx.incIndent();
	        this.visitAllObjects(function (entry /** TODO #9100 */) {
	            ctx.print(escapeSingleQuoteString(entry[0], _this._escapeDollarInStrings) + ": ");
	            entry[1].visitExpression(_this, ctx);
	        }, ast.entries, ctx, ',', useNewLine);
	        ctx.decIndent();
	        ctx.print("}", useNewLine);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	        var _this = this;
	        if (newLine === void 0) { newLine = false; }
	        this.visitAllObjects(function (expr /** TODO #9100 */) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	    };
	    AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	        if (newLine === void 0) { newLine = false; }
	        for (var i = 0; i < expressions.length; i++) {
	            if (i > 0) {
	                ctx.print(separator, newLine);
	            }
	            handler(expressions[i]);
	        }
	        if (newLine) {
	            ctx.println();
	        }
	    };
	    AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	        var _this = this;
	        statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	    };
	    return AbstractEmitterVisitor;
	}());
	exports.AbstractEmitterVisitor = AbstractEmitterVisitor;
	function escapeSingleQuoteString(input, escapeDollar) {
	    if (lang_1.isBlank(input)) {
	        return null;
	    }
	    var body = lang_1.StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function (match /** TODO #9100 */) {
	        if (match[0] == '$') {
	            return escapeDollar ? '\\$' : '$';
	        }
	        else if (match[0] == '\n') {
	            return '\\n';
	        }
	        else if (match[0] == '\r') {
	            return '\\r';
	        }
	        else {
	            return "\\" + match[0];
	        }
	    });
	    return "'" + body + "'";
	}
	exports.escapeSingleQuoteString = escapeSingleQuoteString;
	function _createIndent(count) {
	    var res = '';
	    for (var i = 0; i < count; i++) {
	        res += '  ';
	    }
	    return res;
	}
	//# sourceMappingURL=abstract_emitter.js.map

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var abstract_emitter_1 = __webpack_require__(94);
	var o = __webpack_require__(38);
	var AbstractJsEmitterVisitor = (function (_super) {
	    __extends(AbstractJsEmitterVisitor, _super);
	    function AbstractJsEmitterVisitor() {
	        _super.call(this, false);
	    }
	    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        this._visitClassConstructor(stmt, ctx);
	        if (lang_1.isPresent(stmt.parent)) {
	            ctx.print(stmt.name + ".prototype = Object.create(");
	            stmt.parent.visitExpression(this, ctx);
	            ctx.println(".prototype);");
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	        ctx.popClass();
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print("function " + stmt.name + "(");
	        if (lang_1.isPresent(stmt.constructorMethod)) {
	            this._visitParams(stmt.constructorMethod.params, ctx);
	        }
	        ctx.println(") {");
	        ctx.incIndent();
	        if (lang_1.isPresent(stmt.constructorMethod)) {
	            if (stmt.constructorMethod.body.length > 0) {
	                ctx.println("var self = this;");
	                this.visitAllStatements(stmt.constructorMethod.body, ctx);
	            }
	        }
	        ctx.decIndent();
	        ctx.println("}");
	    };
	    AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	        ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	        ctx.incIndent();
	        if (getter.body.length > 0) {
	            ctx.println("var self = this;");
	            this.visitAllStatements(getter.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println("}});");
	    };
	    AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	        ctx.print(stmt.name + ".prototype." + method.name + " = function(");
	        this._visitParams(method.params, ctx);
	        ctx.println(") {");
	        ctx.incIndent();
	        if (method.body.length > 0) {
	            ctx.println("var self = this;");
	            this.visitAllStatements(method.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println("};");
	    };
	    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        if (ast.builtin === o.BuiltinVar.This) {
	            ctx.print('self');
	        }
	        else if (ast.builtin === o.BuiltinVar.Super) {
	            throw new exceptions_1.BaseException("'super' needs to be handled at a parent ast node, not at the variable level!");
	        }
	        else {
	            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	        }
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        ctx.print("var " + stmt.name + " = ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(";");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ast.value.visitExpression(this, ctx);
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        var fnExpr = expr.fn;
	        if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
	            ctx.currentClass.parent.visitExpression(this, ctx);
	            ctx.print(".call(this");
	            if (expr.args.length > 0) {
	                ctx.print(", ");
	                this.visitAllExpressions(expr.args, ctx, ',');
	            }
	            ctx.print(")");
	        }
	        else {
	            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	        }
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print("function(");
	        this._visitParams(ast.params, ctx);
	        ctx.println(") {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print("}");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        ctx.print("function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.println(") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println("try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ") {");
	        ctx.incIndent();
	        var catchStmts = [abstract_emitter_1.CATCH_STACK_VAR.set(abstract_emitter_1.CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [
	                o.StmtModifier.Final
	            ])].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        this.visitAllObjects(function (param /** TODO #9100 */) { return ctx.print(param.name); }, params, ctx, ',');
	    };
	    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var name;
	        switch (method) {
	            case o.BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case o.BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case o.BuiltinMethod.bind:
	                name = 'bind';
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    return AbstractJsEmitterVisitor;
	}(abstract_emitter_1.AbstractEmitterVisitor));
	exports.AbstractJsEmitterVisitor = AbstractJsEmitterVisitor;
	//# sourceMappingURL=abstract_js_emitter.js.map

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_private_1 = __webpack_require__(12);
	var async_1 = __webpack_require__(40);
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var dart_emitter_1 = __webpack_require__(97);
	var o = __webpack_require__(38);
	var ts_emitter_1 = __webpack_require__(98);
	function interpretStatements(statements, resultVar, instanceFactory) {
	    var stmtsWithReturn = statements.concat([new o.ReturnStatement(o.variable(resultVar))]);
	    var ctx = new _ExecutionContext(null, null, null, null, new Map(), new Map(), new Map(), new Map(), instanceFactory);
	    var visitor = new StatementInterpreter();
	    var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	    return lang_1.isPresent(result) ? result.value : null;
	}
	exports.interpretStatements = interpretStatements;
	var DynamicInstance = (function () {
	    function DynamicInstance() {
	    }
	    Object.defineProperty(DynamicInstance.prototype, "props", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DynamicInstance.prototype, "getters", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DynamicInstance.prototype, "methods", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DynamicInstance.prototype, "clazz", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return DynamicInstance;
	}());
	exports.DynamicInstance = DynamicInstance;
	function isDynamicInstance(instance) {
	    if (lang_1.IS_DART) {
	        return instance instanceof DynamicInstance;
	    }
	    else {
	        return lang_1.isPresent(instance) && lang_1.isPresent(instance.props) && lang_1.isPresent(instance.getters) &&
	            lang_1.isPresent(instance.methods);
	    }
	}
	function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	    var childCtx = ctx.createChildWihtLocalVars();
	    for (var i = 0; i < varNames.length; i++) {
	        childCtx.vars.set(varNames[i], varValues[i]);
	    }
	    var result = visitor.visitAllStatements(statements, childCtx);
	    return lang_1.isPresent(result) ? result.value : null;
	}
	var _ExecutionContext = (function () {
	    function _ExecutionContext(parent, superClass, superInstance, className, vars, props, getters, methods, instanceFactory) {
	        this.parent = parent;
	        this.superClass = superClass;
	        this.superInstance = superInstance;
	        this.className = className;
	        this.vars = vars;
	        this.props = props;
	        this.getters = getters;
	        this.methods = methods;
	        this.instanceFactory = instanceFactory;
	    }
	    _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	        return new _ExecutionContext(this, this.superClass, this.superInstance, this.className, new Map(), this.props, this.getters, this.methods, this.instanceFactory);
	    };
	    return _ExecutionContext;
	}());
	var ReturnValue = (function () {
	    function ReturnValue(value) {
	        this.value = value;
	    }
	    return ReturnValue;
	}());
	var _DynamicClass = (function () {
	    function _DynamicClass(_classStmt, _ctx, _visitor) {
	        this._classStmt = _classStmt;
	        this._ctx = _ctx;
	        this._visitor = _visitor;
	    }
	    _DynamicClass.prototype.instantiate = function (args) {
	        var _this = this;
	        var props = new Map();
	        var getters = new Map();
	        var methods = new Map();
	        var superClass = this._classStmt.parent.visitExpression(this._visitor, this._ctx);
	        var instanceCtx = new _ExecutionContext(this._ctx, superClass, null, this._classStmt.name, this._ctx.vars, props, getters, methods, this._ctx.instanceFactory);
	        this._classStmt.fields.forEach(function (field) { props.set(field.name, null); });
	        this._classStmt.getters.forEach(function (getter) {
	            getters.set(getter.name, function () { return _executeFunctionStatements([], [], getter.body, instanceCtx, _this._visitor); });
	        });
	        this._classStmt.methods.forEach(function (method) {
	            var paramNames = method.params.map(function (param) { return param.name; });
	            methods.set(method.name, _declareFn(paramNames, method.body, instanceCtx, _this._visitor));
	        });
	        var ctorParamNames = this._classStmt.constructorMethod.params.map(function (param) { return param.name; });
	        _executeFunctionStatements(ctorParamNames, args, this._classStmt.constructorMethod.body, instanceCtx, this._visitor);
	        return instanceCtx.superInstance;
	    };
	    _DynamicClass.prototype.debugAst = function () { return this._visitor.debugAst(this._classStmt); };
	    return _DynamicClass;
	}());
	var StatementInterpreter = (function () {
	    function StatementInterpreter() {
	    }
	    StatementInterpreter.prototype.debugAst = function (ast) {
	        return lang_1.IS_DART ? dart_emitter_1.debugOutputAstAsDart(ast) : ts_emitter_1.debugOutputAstAsTypeScript(ast);
	    };
	    StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	        return null;
	    };
	    StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var value = expr.value.visitExpression(this, ctx);
	        var currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(expr.name)) {
	                currCtx.vars.set(expr.name, value);
	                return value;
	            }
	            currCtx = currCtx.parent;
	        }
	        throw new exceptions_1.BaseException("Not declared variable " + expr.name);
	    };
	    StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	        var varName = ast.name;
	        if (lang_1.isPresent(ast.builtin)) {
	            switch (ast.builtin) {
	                case o.BuiltinVar.Super:
	                case o.BuiltinVar.This:
	                    return ctx.superInstance;
	                case o.BuiltinVar.CatchError:
	                    varName = CATCH_ERROR_VAR;
	                    break;
	                case o.BuiltinVar.CatchStack:
	                    varName = CATCH_STACK_VAR;
	                    break;
	                default:
	                    throw new exceptions_1.BaseException("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        var currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(varName)) {
	                return currCtx.vars.get(varName);
	            }
	            currCtx = currCtx.parent;
	        }
	        throw new exceptions_1.BaseException("Not declared variable " + varName);
	    };
	    StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var receiver = expr.receiver.visitExpression(this, ctx);
	        var index = expr.index.visitExpression(this, ctx);
	        var value = expr.value.visitExpression(this, ctx);
	        receiver[index] = value;
	        return value;
	    };
	    StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	        var receiver = expr.receiver.visitExpression(this, ctx);
	        var value = expr.value.visitExpression(this, ctx);
	        if (isDynamicInstance(receiver)) {
	            var di = receiver;
	            if (di.props.has(expr.name)) {
	                di.props.set(expr.name, value);
	            }
	            else {
	                core_private_1.reflector.setter(expr.name)(receiver, value);
	            }
	        }
	        else {
	            core_private_1.reflector.setter(expr.name)(receiver, value);
	        }
	        return value;
	    };
	    StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        var receiver = expr.receiver.visitExpression(this, ctx);
	        var args = this.visitAllExpressions(expr.args, ctx);
	        var result;
	        if (lang_1.isPresent(expr.builtin)) {
	            switch (expr.builtin) {
	                case o.BuiltinMethod.ConcatArray:
	                    result = collection_1.ListWrapper.concat(receiver, args[0]);
	                    break;
	                case o.BuiltinMethod.SubscribeObservable:
	                    result = async_1.ObservableWrapper.subscribe(receiver, args[0]);
	                    break;
	                case o.BuiltinMethod.bind:
	                    if (lang_1.IS_DART) {
	                        result = receiver;
	                    }
	                    else {
	                        result = receiver.bind(args[0]);
	                    }
	                    break;
	                default:
	                    throw new exceptions_1.BaseException("Unknown builtin method " + expr.builtin);
	            }
	        }
	        else if (isDynamicInstance(receiver)) {
	            var di = receiver;
	            if (di.methods.has(expr.name)) {
	                result = lang_1.FunctionWrapper.apply(di.methods.get(expr.name), args);
	            }
	            else {
	                result = core_private_1.reflector.method(expr.name)(receiver, args);
	            }
	        }
	        else {
	            result = core_private_1.reflector.method(expr.name)(receiver, args);
	        }
	        return result;
	    };
	    StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	        var args = this.visitAllExpressions(stmt.args, ctx);
	        var fnExpr = stmt.fn;
	        if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
	            ctx.superInstance = ctx.instanceFactory.createInstance(ctx.superClass, ctx.className, args, ctx.props, ctx.getters, ctx.methods);
	            ctx.parent.superInstance = ctx.superInstance;
	            return null;
	        }
	        else {
	            var fn = stmt.fn.visitExpression(this, ctx);
	            return lang_1.FunctionWrapper.apply(fn, args);
	        }
	    };
	    StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	        return new ReturnValue(stmt.value.visitExpression(this, ctx));
	    };
	    StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var clazz = new _DynamicClass(stmt, ctx, this);
	        ctx.vars.set(stmt.name, clazz);
	        return null;
	    };
	    StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	        return stmt.expr.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	        var condition = stmt.condition.visitExpression(this, ctx);
	        if (condition) {
	            return this.visitAllStatements(stmt.trueCase, ctx);
	        }
	        else if (lang_1.isPresent(stmt.falseCase)) {
	            return this.visitAllStatements(stmt.falseCase, ctx);
	        }
	        return null;
	    };
	    StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        try {
	            return this.visitAllStatements(stmt.bodyStmts, ctx);
	        }
	        catch (e) {
	            var childCtx = ctx.createChildWihtLocalVars();
	            childCtx.vars.set(CATCH_ERROR_VAR, e);
	            childCtx.vars.set(CATCH_STACK_VAR, e.stack);
	            return this.visitAllStatements(stmt.catchStmts, childCtx);
	        }
	    };
	    StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	        throw stmt.error.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	    StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	        var args = this.visitAllExpressions(ast.args, ctx);
	        var clazz = ast.classExpr.visitExpression(this, ctx);
	        if (clazz instanceof _DynamicClass) {
	            return clazz.instantiate(args);
	        }
	        else {
	            return lang_1.FunctionWrapper.apply(core_private_1.reflector.factory(clazz), args);
	        }
	    };
	    StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	    StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) { return ast.value.runtime; };
	    StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	        if (ast.condition.visitExpression(this, ctx)) {
	            return ast.trueCase.visitExpression(this, ctx);
	        }
	        else if (lang_1.isPresent(ast.falseCase)) {
	            return ast.falseCase.visitExpression(this, ctx);
	        }
	        return null;
	    };
	    StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	        return !ast.condition.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	        return ast.value.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	        var paramNames = ast.params.map(function (param) { return param.name; });
	        return _declareFn(paramNames, ast.statements, ctx, this);
	    };
	    StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        var paramNames = stmt.params.map(function (param) { return param.name; });
	        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	        return null;
	    };
	    StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var _this = this;
	        var lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	        var rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	        switch (ast.operator) {
	            case o.BinaryOperator.Equals:
	                return lhs() == rhs();
	            case o.BinaryOperator.Identical:
	                return lhs() === rhs();
	            case o.BinaryOperator.NotEquals:
	                return lhs() != rhs();
	            case o.BinaryOperator.NotIdentical:
	                return lhs() !== rhs();
	            case o.BinaryOperator.And:
	                return lhs() && rhs();
	            case o.BinaryOperator.Or:
	                return lhs() || rhs();
	            case o.BinaryOperator.Plus:
	                return lhs() + rhs();
	            case o.BinaryOperator.Minus:
	                return lhs() - rhs();
	            case o.BinaryOperator.Divide:
	                return lhs() / rhs();
	            case o.BinaryOperator.Multiply:
	                return lhs() * rhs();
	            case o.BinaryOperator.Modulo:
	                return lhs() % rhs();
	            case o.BinaryOperator.Lower:
	                return lhs() < rhs();
	            case o.BinaryOperator.LowerEquals:
	                return lhs() <= rhs();
	            case o.BinaryOperator.Bigger:
	                return lhs() > rhs();
	            case o.BinaryOperator.BiggerEquals:
	                return lhs() >= rhs();
	            default:
	                throw new exceptions_1.BaseException("Unknown operator " + ast.operator);
	        }
	    };
	    StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	        var result;
	        var receiver = ast.receiver.visitExpression(this, ctx);
	        if (isDynamicInstance(receiver)) {
	            var di = receiver;
	            if (di.props.has(ast.name)) {
	                result = di.props.get(ast.name);
	            }
	            else if (di.getters.has(ast.name)) {
	                result = di.getters.get(ast.name)();
	            }
	            else if (di.methods.has(ast.name)) {
	                result = di.methods.get(ast.name);
	            }
	            else {
	                result = core_private_1.reflector.getter(ast.name)(receiver);
	            }
	        }
	        else {
	            result = core_private_1.reflector.getter(ast.name)(receiver);
	        }
	        return result;
	    };
	    StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	        var receiver = ast.receiver.visitExpression(this, ctx);
	        var prop = ast.index.visitExpression(this, ctx);
	        return receiver[prop];
	    };
	    StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        return this.visitAllExpressions(ast.entries, ctx);
	    };
	    StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        var result = {};
	        ast.entries.forEach(function (entry) { return result[entry[0]] =
	            entry[1].visitExpression(_this, ctx); });
	        return result;
	    };
	    StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	        var _this = this;
	        return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	    };
	    StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	        for (var i = 0; i < statements.length; i++) {
	            var stmt = statements[i];
	            var val = stmt.visitStatement(this, ctx);
	            if (val instanceof ReturnValue) {
	                return val;
	            }
	        }
	        return null;
	    };
	    return StatementInterpreter;
	}());
	function _declareFn(varNames, statements, ctx, visitor) {
	    switch (varNames.length) {
	        case 0:
	            return function () { return _executeFunctionStatements(varNames, [], statements, ctx, visitor); };
	        case 1:
	            return function (d0 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0], statements, ctx, visitor);
	            };
	        case 2:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1], statements, ctx, visitor);
	            };
	        case 3:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2], statements, ctx, visitor);
	            };
	        case 4:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */, d3 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2, d3], statements, ctx, visitor);
	            };
	        case 5:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */, d3 /** TODO #9100 */, d4 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4], statements, ctx, visitor);
	            };
	        case 6:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */, d3 /** TODO #9100 */, d4 /** TODO #9100 */, d5 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5], statements, ctx, visitor);
	            };
	        case 7:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */, d3 /** TODO #9100 */, d4 /** TODO #9100 */, d5 /** TODO #9100 */, d6 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6], statements, ctx, visitor);
	            };
	        case 8:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */, d3 /** TODO #9100 */, d4 /** TODO #9100 */, d5 /** TODO #9100 */, d6 /** TODO #9100 */, d7 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6, d7], statements, ctx, visitor);
	            };
	        case 9:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */, d3 /** TODO #9100 */, d4 /** TODO #9100 */, d5 /** TODO #9100 */, d6 /** TODO #9100 */, d7 /** TODO #9100 */, d8 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6, d7, d8], statements, ctx, visitor);
	            };
	        case 10:
	            return function (d0 /** TODO #9100 */, d1 /** TODO #9100 */, d2 /** TODO #9100 */, d3 /** TODO #9100 */, d4 /** TODO #9100 */, d5 /** TODO #9100 */, d6 /** TODO #9100 */, d7 /** TODO #9100 */, d8 /** TODO #9100 */, d9 /** TODO #9100 */) {
	                return _executeFunctionStatements(varNames, [d0, d1, d2, d3, d4, d5, d6, d7, d8, d9], statements, ctx, visitor);
	            };
	        default:
	            throw new exceptions_1.BaseException('Declaring functions with more than 10 arguments is not supported right now');
	    }
	}
	var CATCH_ERROR_VAR = 'error';
	var CATCH_STACK_VAR = 'stack';
	//# sourceMappingURL=output_interpreter.js.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var o = __webpack_require__(38);
	var abstract_emitter_1 = __webpack_require__(94);
	var _debugModuleUrl = 'asset://debug/lib';
	function debugOutputAstAsDart(ast) {
	    var converter = new _DartEmitterVisitor(_debugModuleUrl);
	    var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([]);
	    var asts;
	    if (lang_1.isArray(ast)) {
	        asts = ast;
	    }
	    else {
	        asts = [ast];
	    }
	    asts.forEach(function (ast) {
	        if (ast instanceof o.Statement) {
	            ast.visitStatement(converter, ctx);
	        }
	        else if (ast instanceof o.Expression) {
	            ast.visitExpression(converter, ctx);
	        }
	        else if (ast instanceof o.Type) {
	            ast.visitType(converter, ctx);
	        }
	        else {
	            throw new exceptions_1.BaseException("Don't know how to print debug info for " + ast);
	        }
	    });
	    return ctx.toSource();
	}
	exports.debugOutputAstAsDart = debugOutputAstAsDart;
	var DartEmitter = (function () {
	    function DartEmitter(_importGenerator) {
	        this._importGenerator = _importGenerator;
	    }
	    DartEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
	        var _this = this;
	        var srcParts = [];
	        // Note: We are not creating a library here as Dart does not need it.
	        // Dart analzyer might complain about it though.
	        var converter = new _DartEmitterVisitor(moduleUrl);
	        var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot(exportedVars);
	        converter.visitAllStatements(stmts, ctx);
	        converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
	            srcParts.push("import '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "' as " + prefix + ";");
	        });
	        srcParts.push(ctx.toSource());
	        return srcParts.join('\n');
	    };
	    return DartEmitter;
	}());
	exports.DartEmitter = DartEmitter;
	var _DartEmitterVisitor = (function (_super) {
	    __extends(_DartEmitterVisitor, _super);
	    function _DartEmitterVisitor(_moduleUrl) {
	        _super.call(this, true);
	        this._moduleUrl = _moduleUrl;
	        this.importsWithPrefixes = new Map();
	    }
	    _DartEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        this._visitIdentifier(ast.value, ast.typeParams, ctx);
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        if (stmt.hasModifier(o.StmtModifier.Final)) {
	            if (isConstType(stmt.type)) {
	                ctx.print("const ");
	            }
	            else {
	                ctx.print("final ");
	            }
	        }
	        else if (lang_1.isBlank(stmt.type)) {
	            ctx.print("var ");
	        }
	        if (lang_1.isPresent(stmt.type)) {
	            stmt.type.visitType(this, ctx);
	            ctx.print(" ");
	        }
	        ctx.print(stmt.name + " = ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(";");
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ctx.print("(");
	        ast.value.visitExpression(this, ctx);
	        ctx.print(" as ");
	        ast.type.visitType(this, ctx);
	        ctx.print(")");
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        ctx.print("class " + stmt.name);
	        if (lang_1.isPresent(stmt.parent)) {
	            ctx.print(" extends ");
	            stmt.parent.visitExpression(this, ctx);
	        }
	        ctx.println(" {");
	        ctx.incIndent();
	        stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	        if (lang_1.isPresent(stmt.constructorMethod)) {
	            this._visitClassConstructor(stmt, ctx);
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	        ctx.decIndent();
	        ctx.println("}");
	        ctx.popClass();
	        return null;
	    };
	    _DartEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	        if (field.hasModifier(o.StmtModifier.Final)) {
	            ctx.print("final ");
	        }
	        else if (lang_1.isBlank(field.type)) {
	            ctx.print("var ");
	        }
	        if (lang_1.isPresent(field.type)) {
	            field.type.visitType(this, ctx);
	            ctx.print(" ");
	        }
	        ctx.println(field.name + ";");
	    };
	    _DartEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	        if (lang_1.isPresent(getter.type)) {
	            getter.type.visitType(this, ctx);
	            ctx.print(" ");
	        }
	        ctx.println("get " + getter.name + " {");
	        ctx.incIndent();
	        this.visitAllStatements(getter.body, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	    };
	    _DartEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print(stmt.name + "(");
	        this._visitParams(stmt.constructorMethod.params, ctx);
	        ctx.print(")");
	        var ctorStmts = stmt.constructorMethod.body;
	        var superCtorExpr = ctorStmts.length > 0 ? getSuperConstructorCallExpr(ctorStmts[0]) : null;
	        if (lang_1.isPresent(superCtorExpr)) {
	            ctx.print(": ");
	            superCtorExpr.visitExpression(this, ctx);
	            ctorStmts = ctorStmts.slice(1);
	        }
	        ctx.println(" {");
	        ctx.incIndent();
	        this.visitAllStatements(ctorStmts, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	    };
	    _DartEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	        if (lang_1.isPresent(method.type)) {
	            method.type.visitType(this, ctx);
	        }
	        else {
	            ctx.print("void");
	        }
	        ctx.print(" " + method.name + "(");
	        this._visitParams(method.params, ctx);
	        ctx.println(") {");
	        ctx.incIndent();
	        this.visitAllStatements(method.body, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	    };
	    _DartEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print("(");
	        this._visitParams(ast.params, ctx);
	        ctx.println(") {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print("}");
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        if (lang_1.isPresent(stmt.type)) {
	            stmt.type.visitType(this, ctx);
	        }
	        else {
	            ctx.print("void");
	        }
	        ctx.print(" " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.println(") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	        return null;
	    };
	    _DartEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var name;
	        switch (method) {
	            case o.BuiltinMethod.ConcatArray:
	                name = '.addAll';
	                break;
	            case o.BuiltinMethod.SubscribeObservable:
	                name = 'listen';
	                break;
	            case o.BuiltinMethod.bind:
	                name = null;
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    _DartEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println("try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ", " + abstract_emitter_1.CATCH_STACK_VAR.name + ") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        switch (ast.operator) {
	            case o.BinaryOperator.Identical:
	                ctx.print("identical(");
	                ast.lhs.visitExpression(this, ctx);
	                ctx.print(", ");
	                ast.rhs.visitExpression(this, ctx);
	                ctx.print(")");
	                break;
	            case o.BinaryOperator.NotIdentical:
	                ctx.print("!identical(");
	                ast.lhs.visitExpression(this, ctx);
	                ctx.print(", ");
	                ast.rhs.visitExpression(this, ctx);
	                ctx.print(")");
	                break;
	            default:
	                _super.prototype.visitBinaryOperatorExpr.call(this, ast, ctx);
	        }
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        if (isConstType(ast.type)) {
	            ctx.print("const ");
	        }
	        return _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	    };
	    _DartEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        if (isConstType(ast.type)) {
	            ctx.print("const ");
	        }
	        if (lang_1.isPresent(ast.valueType)) {
	            ctx.print("<String, ");
	            ast.valueType.visitType(this, ctx);
	            ctx.print(">");
	        }
	        return _super.prototype.visitLiteralMapExpr.call(this, ast, ctx);
	    };
	    _DartEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print(isConstType(ast.type) ? "const" : "new");
	        ctx.print(' ');
	        ast.classExpr.visitExpression(this, ctx);
	        ctx.print("(");
	        this.visitAllExpressions(ast.args, ctx, ",");
	        ctx.print(")");
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	        var typeStr;
	        switch (type.name) {
	            case o.BuiltinTypeName.Bool:
	                typeStr = 'bool';
	                break;
	            case o.BuiltinTypeName.Dynamic:
	                typeStr = 'dynamic';
	                break;
	            case o.BuiltinTypeName.Function:
	                typeStr = 'Function';
	                break;
	            case o.BuiltinTypeName.Number:
	                typeStr = 'num';
	                break;
	            case o.BuiltinTypeName.Int:
	                typeStr = 'int';
	                break;
	            case o.BuiltinTypeName.String:
	                typeStr = 'String';
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unsupported builtin type " + type.name);
	        }
	        ctx.print(typeStr);
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitExternalType = function (ast, ctx) {
	        this._visitIdentifier(ast.value, ast.typeParams, ctx);
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	        ctx.print("List<");
	        if (lang_1.isPresent(type.of)) {
	            type.of.visitType(this, ctx);
	        }
	        else {
	            ctx.print("dynamic");
	        }
	        ctx.print(">");
	        return null;
	    };
	    _DartEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	        ctx.print("Map<String, ");
	        if (lang_1.isPresent(type.valueType)) {
	            type.valueType.visitType(this, ctx);
	        }
	        else {
	            ctx.print("dynamic");
	        }
	        ctx.print(">");
	        return null;
	    };
	    _DartEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        var _this = this;
	        this.visitAllObjects(function (param /** TODO #9100 */) {
	            if (lang_1.isPresent(param.type)) {
	                param.type.visitType(_this, ctx);
	                ctx.print(' ');
	            }
	            ctx.print(param.name);
	        }, params, ctx, ',');
	    };
	    _DartEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	        var _this = this;
	        if (lang_1.isBlank(value.name)) {
	            throw new exceptions_1.BaseException("Internal error: unknown identifier " + value);
	        }
	        if (lang_1.isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
	            var prefix = this.importsWithPrefixes.get(value.moduleUrl);
	            if (lang_1.isBlank(prefix)) {
	                prefix = "import" + this.importsWithPrefixes.size;
	                this.importsWithPrefixes.set(value.moduleUrl, prefix);
	            }
	            ctx.print(prefix + ".");
	        }
	        ctx.print(value.name);
	        if (lang_1.isPresent(typeParams) && typeParams.length > 0) {
	            ctx.print("<");
	            this.visitAllObjects(function (type /** TODO #9100 */) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	            ctx.print(">");
	        }
	    };
	    return _DartEmitterVisitor;
	}(abstract_emitter_1.AbstractEmitterVisitor));
	function getSuperConstructorCallExpr(stmt) {
	    if (stmt instanceof o.ExpressionStatement) {
	        var expr = stmt.expr;
	        if (expr instanceof o.InvokeFunctionExpr) {
	            var fn = expr.fn;
	            if (fn instanceof o.ReadVarExpr) {
	                if (fn.builtin === o.BuiltinVar.Super) {
	                    return expr;
	                }
	            }
	        }
	    }
	    return null;
	}
	function isConstType(type) {
	    return lang_1.isPresent(type) && type.hasModifier(o.TypeModifier.Const);
	}
	//# sourceMappingURL=dart_emitter.js.map

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var abstract_emitter_1 = __webpack_require__(94);
	var o = __webpack_require__(38);
	var _debugModuleUrl = 'asset://debug/lib';
	function debugOutputAstAsTypeScript(ast) {
	    var converter = new _TsEmitterVisitor(_debugModuleUrl);
	    var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([]);
	    var asts;
	    if (lang_1.isArray(ast)) {
	        asts = ast;
	    }
	    else {
	        asts = [ast];
	    }
	    asts.forEach(function (ast) {
	        if (ast instanceof o.Statement) {
	            ast.visitStatement(converter, ctx);
	        }
	        else if (ast instanceof o.Expression) {
	            ast.visitExpression(converter, ctx);
	        }
	        else if (ast instanceof o.Type) {
	            ast.visitType(converter, ctx);
	        }
	        else {
	            throw new exceptions_1.BaseException("Don't know how to print debug info for " + ast);
	        }
	    });
	    return ctx.toSource();
	}
	exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
	var TypeScriptEmitter = (function () {
	    function TypeScriptEmitter(_importGenerator) {
	        this._importGenerator = _importGenerator;
	    }
	    TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
	        var _this = this;
	        var converter = new _TsEmitterVisitor(moduleUrl);
	        var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot(exportedVars);
	        converter.visitAllStatements(stmts, ctx);
	        var srcParts = [];
	        converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
	            // Note: can't write the real word for import as it screws up system.js auto detection...
	            srcParts.push("imp" +
	                ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
	        });
	        srcParts.push(ctx.toSource());
	        return srcParts.join('\n');
	    };
	    return TypeScriptEmitter;
	}());
	exports.TypeScriptEmitter = TypeScriptEmitter;
	var _TsEmitterVisitor = (function (_super) {
	    __extends(_TsEmitterVisitor, _super);
	    function _TsEmitterVisitor(_moduleUrl) {
	        _super.call(this, false);
	        this._moduleUrl = _moduleUrl;
	        this.importsWithPrefixes = new Map();
	    }
	    _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	        if (defaultType === void 0) { defaultType = 'any'; }
	        if (lang_1.isPresent(t)) {
	            t.visitType(this, ctx);
	        }
	        else {
	            ctx.print(defaultType);
	        }
	    };
	    _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        this._visitIdentifier(ast.value, ast.typeParams, ctx);
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print("export ");
	        }
	        if (stmt.hasModifier(o.StmtModifier.Final)) {
	            ctx.print("const");
	        }
	        else {
	            ctx.print("var");
	        }
	        ctx.print(" " + stmt.name + ":");
	        this.visitType(stmt.type, ctx);
	        ctx.print(" = ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(";");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ctx.print("(<");
	        ast.type.visitType(this, ctx);
	        ctx.print(">");
	        ast.value.visitExpression(this, ctx);
	        ctx.print(")");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print("export ");
	        }
	        ctx.print("class " + stmt.name);
	        if (lang_1.isPresent(stmt.parent)) {
	            ctx.print(" extends ");
	            stmt.parent.visitExpression(this, ctx);
	        }
	        ctx.println(" {");
	        ctx.incIndent();
	        stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	        if (lang_1.isPresent(stmt.constructorMethod)) {
	            this._visitClassConstructor(stmt, ctx);
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	        ctx.decIndent();
	        ctx.println("}");
	        ctx.popClass();
	        return null;
	    };
	    _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	        if (field.hasModifier(o.StmtModifier.Private)) {
	            ctx.print("private ");
	        }
	        ctx.print(field.name);
	        ctx.print(':');
	        this.visitType(field.type, ctx);
	        ctx.println(";");
	    };
	    _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	        if (getter.hasModifier(o.StmtModifier.Private)) {
	            ctx.print("private ");
	        }
	        ctx.print("get " + getter.name + "()");
	        ctx.print(':');
	        this.visitType(getter.type, ctx);
	        ctx.println(" {");
	        ctx.incIndent();
	        this.visitAllStatements(getter.body, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	    };
	    _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print("constructor(");
	        this._visitParams(stmt.constructorMethod.params, ctx);
	        ctx.println(") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.constructorMethod.body, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	    };
	    _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	        if (method.hasModifier(o.StmtModifier.Private)) {
	            ctx.print("private ");
	        }
	        ctx.print(method.name + "(");
	        this._visitParams(method.params, ctx);
	        ctx.print("):");
	        this.visitType(method.type, ctx, 'void');
	        ctx.println(" {");
	        ctx.incIndent();
	        this.visitAllStatements(method.body, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	    };
	    _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print("(");
	        this._visitParams(ast.params, ctx);
	        ctx.print("):");
	        this.visitType(ast.type, ctx, 'void');
	        ctx.println(" => {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print("}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print("export ");
	        }
	        ctx.print("function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.print("):");
	        this.visitType(stmt.type, ctx, 'void');
	        ctx.println(" {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println("try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ") {");
	        ctx.incIndent();
	        var catchStmts = [abstract_emitter_1.CATCH_STACK_VAR.set(abstract_emitter_1.CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [
	                o.StmtModifier.Final
	            ])].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println("}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	        var typeStr;
	        switch (type.name) {
	            case o.BuiltinTypeName.Bool:
	                typeStr = 'boolean';
	                break;
	            case o.BuiltinTypeName.Dynamic:
	                typeStr = 'any';
	                break;
	            case o.BuiltinTypeName.Function:
	                typeStr = 'Function';
	                break;
	            case o.BuiltinTypeName.Number:
	                typeStr = 'number';
	                break;
	            case o.BuiltinTypeName.Int:
	                typeStr = 'number';
	                break;
	            case o.BuiltinTypeName.String:
	                typeStr = 'string';
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unsupported builtin type " + type.name);
	        }
	        ctx.print(typeStr);
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitExternalType = function (ast, ctx) {
	        this._visitIdentifier(ast.value, ast.typeParams, ctx);
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	        this.visitType(type.of, ctx);
	        ctx.print("[]");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	        ctx.print("{[key: string]:");
	        this.visitType(type.valueType, ctx);
	        ctx.print("}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var name;
	        switch (method) {
	            case o.BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case o.BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case o.BuiltinMethod.bind:
	                name = 'bind';
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        var _this = this;
	        this.visitAllObjects(function (param /** TODO #9100 */) {
	            ctx.print(param.name);
	            ctx.print(':');
	            _this.visitType(param.type, ctx);
	        }, params, ctx, ',');
	    };
	    _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	        var _this = this;
	        if (lang_1.isBlank(value.name)) {
	            throw new exceptions_1.BaseException("Internal error: unknown identifier " + value);
	        }
	        if (lang_1.isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
	            var prefix = this.importsWithPrefixes.get(value.moduleUrl);
	            if (lang_1.isBlank(prefix)) {
	                prefix = "import" + this.importsWithPrefixes.size;
	                this.importsWithPrefixes.set(value.moduleUrl, prefix);
	            }
	            ctx.print(prefix + ".");
	        }
	        ctx.print(value.name);
	        if (lang_1.isPresent(typeParams) && typeParams.length > 0) {
	            ctx.print("<");
	            this.visitAllObjects(function (type /** TODO #9100 */) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	            ctx.print(">");
	        }
	    };
	    return _TsEmitterVisitor;
	}(abstract_emitter_1.AbstractEmitterVisitor));
	//# sourceMappingURL=ts_emitter.js.map

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_private_1 = __webpack_require__(12);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var InterpretiveAppViewInstanceFactory = (function () {
	    function InterpretiveAppViewInstanceFactory() {
	    }
	    InterpretiveAppViewInstanceFactory.prototype.createInstance = function (superClass, clazz, args, props, getters, methods) {
	        if (superClass === core_private_1.AppView) {
	            // We are always using DebugAppView as parent.
	            // However, in prod mode we generate a constructor call that does
	            // not have the argument for the debugNodeInfos.
	            args = args.concat([null]);
	            return new _InterpretiveAppView(args, props, getters, methods);
	        }
	        else if (superClass === core_private_1.DebugAppView) {
	            return new _InterpretiveAppView(args, props, getters, methods);
	        }
	        throw new exceptions_1.BaseException("Can't instantiate class " + superClass + " in interpretative mode");
	    };
	    return InterpretiveAppViewInstanceFactory;
	}());
	exports.InterpretiveAppViewInstanceFactory = InterpretiveAppViewInstanceFactory;
	var _InterpretiveAppView = (function (_super) {
	    __extends(_InterpretiveAppView, _super);
	    function _InterpretiveAppView(args, props, getters, methods) {
	        _super.call(this, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
	        this.props = props;
	        this.getters = getters;
	        this.methods = methods;
	    }
	    _InterpretiveAppView.prototype.createInternal = function (rootSelector) {
	        var m = this.methods.get('createInternal');
	        if (lang_1.isPresent(m)) {
	            return m(rootSelector);
	        }
	        else {
	            return _super.prototype.createInternal.call(this, rootSelector);
	        }
	    };
	    _InterpretiveAppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
	        var m = this.methods.get('injectorGetInternal');
	        if (lang_1.isPresent(m)) {
	            return m(token, nodeIndex, notFoundResult);
	        }
	        else {
	            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
	        }
	    };
	    _InterpretiveAppView.prototype.detachInternal = function () {
	        var m = this.methods.get('detachInternal');
	        if (lang_1.isPresent(m)) {
	            return m();
	        }
	        else {
	            return _super.prototype.detachInternal.call(this);
	        }
	    };
	    _InterpretiveAppView.prototype.destroyInternal = function () {
	        var m = this.methods.get('destroyInternal');
	        if (lang_1.isPresent(m)) {
	            return m();
	        }
	        else {
	            return _super.prototype.destroyInternal.call(this);
	        }
	    };
	    _InterpretiveAppView.prototype.dirtyParentQueriesInternal = function () {
	        var m = this.methods.get('dirtyParentQueriesInternal');
	        if (lang_1.isPresent(m)) {
	            return m();
	        }
	        else {
	            return _super.prototype.dirtyParentQueriesInternal.call(this);
	        }
	    };
	    _InterpretiveAppView.prototype.detectChangesInternal = function (throwOnChange) {
	        var m = this.methods.get('detectChangesInternal');
	        if (lang_1.isPresent(m)) {
	            return m(throwOnChange);
	        }
	        else {
	            return _super.prototype.detectChangesInternal.call(this, throwOnChange);
	        }
	    };
	    return _InterpretiveAppView;
	}(core_private_1.DebugAppView));
	//# sourceMappingURL=interpretive_view.js.map

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var core_private_1 = __webpack_require__(12);
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var dom_security_schema_1 = __webpack_require__(101);
	var element_schema_registry_1 = __webpack_require__(28);
	var EVENT = 'event';
	var BOOLEAN = 'boolean';
	var NUMBER = 'number';
	var STRING = 'string';
	var OBJECT = 'object';
	/**
	 * This array represents the DOM schema. It encodes inheritance, properties, and events.
	 *
	 * ## Overview
	 *
	 * Each line represents one kind of element. The `element_inheritance` and properties are joined
	 * using `element_inheritance|preperties` syntax.
	 *
	 * ## Element Inheritance
	 *
	 * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	 * Here the individual elements are separated by `,` (commas). Every element in the list
	 * has identical properties.
	 *
	 * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	 * specified then `""` (blank) element is assumed.
	 *
	 * NOTE: The blank element inherits from root `*` element, the super element of all elements.
	 *
	 * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	 *
	 * ## Properties
	 *
	 * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	 * by a special character designating its type:
	 *
	 * - (no prefix): property is a string.
	 * - `*`: property represents an event.
	 * - `!`: property is a boolean.
	 * - `#`: property is a number.
	 * - `%`: property is an object.
	 *
	 * ## Query
	 *
	 * The class creates an internal squas representaino which allows to easily answer the query of
	 * if a given property exist on a given element.
	 *
	 * NOTE: We don't yet support querying for types or events.
	 * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	 *       see dom_element_schema_registry_spec.ts
	 */
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	//
	// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	// dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	//
	// =================================================================================================
	var SCHEMA = 
	/*@ts2dart_const*/ ([
	    '*|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	    '^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*autocomplete,*autocompleteerror,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	    'media|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,#volume',
	    ':svg:^*|*abort,*autocomplete,*autocompleteerror,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	    ':svg:graphics^:svg:|',
	    ':svg:animation^:svg:|*begin,*end,*repeat',
	    ':svg:geometry^:svg:|',
	    ':svg:componentTransferFunction^:svg:|',
	    ':svg:gradient^:svg:|',
	    ':svg:textContent^:svg:graphics|',
	    ':svg:textPositioning^:svg:textContent|',
	    'a|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerpolicy,rel,rev,search,shape,target,text,type,username',
	    'area|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerpolicy,search,shape,target,username',
	    'audio^media|',
	    'br|clear',
	    'base|href,target',
	    'body|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	    'button|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	    'canvas|#height,#width',
	    'content|select',
	    'dl|!compact',
	    'datalist|',
	    'details|!open',
	    'dialog|!open,returnValue',
	    'dir|!compact',
	    'div|align',
	    'embed|align,height,name,src,type,width',
	    'fieldset|!disabled,name',
	    'font|color,face,size',
	    'form|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	    'frame|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	    'frameset|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	    'hr|align,color,!noShade,size,width',
	    'head|',
	    'h1,h2,h3,h4,h5,h6|align',
	    'html|version',
	    'iframe|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerpolicy,%sandbox,scrolling,src,srcdoc,width',
	    'img|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerpolicy,sizes,src,srcset,useMap,#vspace,#width',
	    'input|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	    'keygen|!autofocus,challenge,!disabled,keytype,name',
	    'li|type,#value',
	    'label|htmlFor',
	    'legend|align',
	    'link|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	    'map|name',
	    'marquee|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	    'menu|!compact',
	    'meta|content,httpEquiv,name,scheme',
	    'meter|#high,#low,#max,#min,#optimum,#value',
	    'ins,del|cite,dateTime',
	    'ol|!compact,!reversed,#start,type',
	    'object|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	    'optgroup|!disabled,label',
	    'option|!defaultSelected,!disabled,label,!selected,text,value',
	    'output|defaultValue,%htmlFor,name,value',
	    'p|align',
	    'param|name,type,value,valueType',
	    'picture|',
	    'pre|#width',
	    'progress|#max,#value',
	    'q,blockquote,cite|',
	    'script|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	    'select|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	    'shadow|',
	    'source|media,sizes,src,srcset,type',
	    'span|',
	    'style|!disabled,media,type',
	    'caption|align',
	    'th,td|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	    'col,colgroup|align,ch,chOff,#span,vAlign,width',
	    'table|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	    'tr|align,bgColor,ch,chOff,vAlign',
	    'tfoot,thead,tbody|align,ch,chOff,vAlign',
	    'template|',
	    'textarea|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	    'title|text',
	    'track|!default,kind,label,src,srclang',
	    'ul|!compact,type',
	    'unknown|',
	    'video^media|#height,poster,#width',
	    ':svg:a^:svg:graphics|',
	    ':svg:animate^:svg:animation|',
	    ':svg:animateMotion^:svg:animation|',
	    ':svg:animateTransform^:svg:animation|',
	    ':svg:circle^:svg:geometry|',
	    ':svg:clipPath^:svg:graphics|',
	    ':svg:cursor^:svg:|',
	    ':svg:defs^:svg:graphics|',
	    ':svg:desc^:svg:|',
	    ':svg:discard^:svg:|',
	    ':svg:ellipse^:svg:geometry|',
	    ':svg:feBlend^:svg:|',
	    ':svg:feColorMatrix^:svg:|',
	    ':svg:feComponentTransfer^:svg:|',
	    ':svg:feComposite^:svg:|',
	    ':svg:feConvolveMatrix^:svg:|',
	    ':svg:feDiffuseLighting^:svg:|',
	    ':svg:feDisplacementMap^:svg:|',
	    ':svg:feDistantLight^:svg:|',
	    ':svg:feDropShadow^:svg:|',
	    ':svg:feFlood^:svg:|',
	    ':svg:feFuncA^:svg:componentTransferFunction|',
	    ':svg:feFuncB^:svg:componentTransferFunction|',
	    ':svg:feFuncG^:svg:componentTransferFunction|',
	    ':svg:feFuncR^:svg:componentTransferFunction|',
	    ':svg:feGaussianBlur^:svg:|',
	    ':svg:feImage^:svg:|',
	    ':svg:feMerge^:svg:|',
	    ':svg:feMergeNode^:svg:|',
	    ':svg:feMorphology^:svg:|',
	    ':svg:feOffset^:svg:|',
	    ':svg:fePointLight^:svg:|',
	    ':svg:feSpecularLighting^:svg:|',
	    ':svg:feSpotLight^:svg:|',
	    ':svg:feTile^:svg:|',
	    ':svg:feTurbulence^:svg:|',
	    ':svg:filter^:svg:|',
	    ':svg:foreignObject^:svg:graphics|',
	    ':svg:g^:svg:graphics|',
	    ':svg:image^:svg:graphics|',
	    ':svg:line^:svg:geometry|',
	    ':svg:linearGradient^:svg:gradient|',
	    ':svg:mpath^:svg:|',
	    ':svg:marker^:svg:|',
	    ':svg:mask^:svg:|',
	    ':svg:metadata^:svg:|',
	    ':svg:path^:svg:geometry|',
	    ':svg:pattern^:svg:|',
	    ':svg:polygon^:svg:geometry|',
	    ':svg:polyline^:svg:geometry|',
	    ':svg:radialGradient^:svg:gradient|',
	    ':svg:rect^:svg:geometry|',
	    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	    ':svg:script^:svg:|type',
	    ':svg:set^:svg:animation|',
	    ':svg:stop^:svg:|',
	    ':svg:style^:svg:|!disabled,media,title,type',
	    ':svg:switch^:svg:graphics|',
	    ':svg:symbol^:svg:|',
	    ':svg:tspan^:svg:textPositioning|',
	    ':svg:text^:svg:textPositioning|',
	    ':svg:textPath^:svg:textContent|',
	    ':svg:title^:svg:|',
	    ':svg:use^:svg:graphics|',
	    ':svg:view^:svg:|#zoomAndPan',
	]);
	var attrToPropMap = {
	    'class': 'className',
	    'formaction': 'formAction',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex'
	};
	var DomElementSchemaRegistry = (function (_super) {
	    __extends(DomElementSchemaRegistry, _super);
	    function DomElementSchemaRegistry() {
	        var _this = this;
	        _super.call(this);
	        this.schema = {};
	        SCHEMA.forEach(function (encodedType) {
	            var parts = encodedType.split('|');
	            var properties = parts[1].split(',');
	            var typeParts = (parts[0] + '^').split('^');
	            var typeName = typeParts[0];
	            var type = {};
	            typeName.split(',').forEach(function (tag) { return _this.schema[tag] = type; });
	            var superType = _this.schema[typeParts[1]];
	            if (lang_1.isPresent(superType)) {
	                collection_1.StringMapWrapper.forEach(superType, function (v /** TODO #9100 */, k /** TODO #9100 */) { return type[k] = v; });
	            }
	            properties.forEach(function (property) {
	                if (property == '') {
	                }
	                else if (property.startsWith('*')) {
	                }
	                else if (property.startsWith('!')) {
	                    type[property.substring(1)] = BOOLEAN;
	                }
	                else if (property.startsWith('#')) {
	                    type[property.substring(1)] = NUMBER;
	                }
	                else if (property.startsWith('%')) {
	                    type[property.substring(1)] = OBJECT;
	                }
	                else {
	                    type[property] = STRING;
	                }
	            });
	        });
	    }
	    DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) {
	        if (tagName.indexOf('-') !== -1) {
	            if (tagName === 'ng-container' || tagName === 'ng-content') {
	                return false;
	            }
	            // Can't tell now as we don't know which properties a custom element will get
	            // once it is instantiated
	            return true;
	        }
	        else {
	            var elementProperties = this.schema[tagName.toLowerCase()];
	            if (!lang_1.isPresent(elementProperties)) {
	                elementProperties = this.schema['unknown'];
	            }
	            return lang_1.isPresent(elementProperties[propName]);
	        }
	    };
	    /**
	     * securityContext returns the security context for the given property on the given DOM tag.
	     *
	     * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	     * possible to bind a value into a changing attribute or tag name.
	     *
	     * The filtering is white list based. All attributes in the schema above are assumed to have the
	     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	     * attack vectors are assigned their appropriate context.
	     */
	    DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName) {
	        // Make sure comparisons are case insensitive, so that case differences between attribute and
	        // property names do not have a security impact.
	        tagName = tagName.toLowerCase();
	        propName = propName.toLowerCase();
	        var ctx = dom_security_schema_1.SECURITY_SCHEMA[tagName + '|' + propName];
	        if (ctx !== undefined)
	            return ctx;
	        ctx = dom_security_schema_1.SECURITY_SCHEMA['*|' + propName];
	        return ctx !== undefined ? ctx : core_private_1.SecurityContext.NONE;
	    };
	    DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
	        var mappedPropName = collection_1.StringMapWrapper.get(attrToPropMap, propName);
	        return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
	    };
	    /** @nocollapse */
	    DomElementSchemaRegistry.decorators = [
	        { type: core_1.Injectable },
	    ];
	    /** @nocollapse */
	    DomElementSchemaRegistry.ctorParameters = [];
	    return DomElementSchemaRegistry;
	}(element_schema_registry_1.ElementSchemaRegistry));
	exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	//# sourceMappingURL=dom_element_schema_registry.js.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_private_1 = __webpack_require__(12);
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	//                               Reach out to mprobst for details.
	//
	// =================================================================================================
	/** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	exports.SECURITY_SCHEMA = {};
	function registerContext(ctx, specs) {
	    for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	        var spec = specs_1[_i];
	        exports.SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	    }
	}
	// Case is insignificant below, all element and attribute names are lower-cased for lookup.
	registerContext(core_private_1.SecurityContext.HTML, [
	    'iframe|srcdoc',
	    '*|innerHTML',
	    '*|outerHTML',
	]);
	registerContext(core_private_1.SecurityContext.STYLE, ['*|style']);
	// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	registerContext(core_private_1.SecurityContext.URL, [
	    '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	    'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	    'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	    'source|src', 'source|srcset', 'video|poster', 'video|src',
	]);
	registerContext(core_private_1.SecurityContext.RESOURCE_URL, [
	    'applet|code',
	    'applet|codebase',
	    'base|href',
	    'embed|src',
	    'frame|src',
	    'head|profile',
	    'html|manifest',
	    'iframe|src',
	    'link|href',
	    'media|src',
	    'object|codebase',
	    'object|data',
	    'script|src',
	    'track|src',
	]);
	//# sourceMappingURL=dom_security_schema.js.map

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var directive_normalizer = __webpack_require__(85);
	var lexer = __webpack_require__(20);
	var parser = __webpack_require__(18);
	var html_parser = __webpack_require__(21);
	var i18n_html_parser = __webpack_require__(103);
	var i18n_message = __webpack_require__(106);
	var i18n_extractor = __webpack_require__(107);
	var xmb_serializer = __webpack_require__(108);
	var metadata_resolver = __webpack_require__(87);
	var path_util = __webpack_require__(109);
	var ts_emitter = __webpack_require__(98);
	var parse_util = __webpack_require__(26);
	var dom_element_schema_registry = __webpack_require__(100);
	var selector = __webpack_require__(27);
	var style_compiler = __webpack_require__(63);
	var template_parser = __webpack_require__(11);
	var view_compiler = __webpack_require__(65);
	var __compiler_private__;
	(function (__compiler_private__) {
	    __compiler_private__.SelectorMatcher = selector.SelectorMatcher;
	    __compiler_private__.CssSelector = selector.CssSelector;
	    __compiler_private__.AssetUrl = path_util.AssetUrl;
	    __compiler_private__.ImportGenerator = path_util.ImportGenerator;
	    __compiler_private__.CompileMetadataResolver = metadata_resolver.CompileMetadataResolver;
	    __compiler_private__.HtmlParser = html_parser.HtmlParser;
	    __compiler_private__.I18nHtmlParser = i18n_html_parser.I18nHtmlParser;
	    __compiler_private__.ExtractionResult = i18n_extractor.ExtractionResult;
	    __compiler_private__.Message = i18n_message.Message;
	    __compiler_private__.MessageExtractor = i18n_extractor.MessageExtractor;
	    __compiler_private__.removeDuplicates = i18n_extractor.removeDuplicates;
	    __compiler_private__.serializeXmb = xmb_serializer.serializeXmb;
	    __compiler_private__.deserializeXmb = xmb_serializer.deserializeXmb;
	    __compiler_private__.DirectiveNormalizer = directive_normalizer.DirectiveNormalizer;
	    __compiler_private__.Lexer = lexer.Lexer;
	    __compiler_private__.Parser = parser.Parser;
	    __compiler_private__.ParseLocation = parse_util.ParseLocation;
	    __compiler_private__.ParseError = parse_util.ParseError;
	    __compiler_private__.ParseErrorLevel = parse_util.ParseErrorLevel;
	    __compiler_private__.ParseSourceFile = parse_util.ParseSourceFile;
	    __compiler_private__.ParseSourceSpan = parse_util.ParseSourceSpan;
	    __compiler_private__.TemplateParser = template_parser.TemplateParser;
	    __compiler_private__.DomElementSchemaRegistry = dom_element_schema_registry.DomElementSchemaRegistry;
	    __compiler_private__.StyleCompiler = style_compiler.StyleCompiler;
	    __compiler_private__.ViewCompiler = view_compiler.ViewCompiler;
	    __compiler_private__.TypeScriptEmitter = ts_emitter.TypeScriptEmitter;
	})(__compiler_private__ = exports.__compiler_private__ || (exports.__compiler_private__ = {}));
	//# sourceMappingURL=private_export.js.map

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	var html_ast_1 = __webpack_require__(22);
	var html_parser_1 = __webpack_require__(21);
	var interpolation_config_1 = __webpack_require__(19);
	var expander_1 = __webpack_require__(104);
	var message_1 = __webpack_require__(106);
	var shared_1 = __webpack_require__(105);
	var _PLACEHOLDER_ELEMENT = 'ph';
	var _NAME_ATTR = 'name';
	var _PLACEHOLDER_EXPANDED_REGEXP = /<ph(\s)+name=("(\w)+")><\/ph>/gi;
	/**
	 * Creates an i18n-ed version of the parsed template.
	 *
	 * Algorithm:
	 *
	 * See `message_extractor.ts` for details on the partitioning algorithm.
	 *
	 * This is how the merging works:
	 *
	 * 1. Use the stringify function to get the message id. Look up the message in the map.
	 * 2. Get the translated message. At this point we have two trees: the original tree
	 * and the translated tree, where all the elements are replaced with placeholders.
	 * 3. Use the original tree to create a mapping Index:number -> HtmlAst.
	 * 4. Walk the translated tree.
	 * 5. If we encounter a placeholder element, get its name property.
	 * 6. Get the type and the index of the node using the name property.
	 * 7. If the type is 'e', which means element, then:
	 *     - translate the attributes of the original element
	 *     - recurse to merge the children
	 *     - create a new element using the original element name, original position,
	 *     and translated children and attributes
	 * 8. If the type if 't', which means text, then:
	 *     - get the list of expressions from the original node.
	 *     - get the string version of the interpolation subtree
	 *     - find all the placeholders in the translated message, and replace them with the
	 *     corresponding original expressions
	 */
	var I18nHtmlParser = (function () {
	    function I18nHtmlParser(_htmlParser, _parser, _messagesContent, _messages, _implicitTags, _implicitAttrs) {
	        this._htmlParser = _htmlParser;
	        this._parser = _parser;
	        this._messagesContent = _messagesContent;
	        this._messages = _messages;
	        this._implicitTags = _implicitTags;
	        this._implicitAttrs = _implicitAttrs;
	    }
	    I18nHtmlParser.prototype.parse = function (sourceContent, sourceUrl, parseExpansionForms, interpolationConfig) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        this.errors = [];
	        this._interpolationConfig = interpolationConfig;
	        var res = this._htmlParser.parse(sourceContent, sourceUrl, true);
	        if (res.errors.length > 0) {
	            return res;
	        }
	        else {
	            var expanded = expander_1.expandNodes(res.rootNodes);
	            var nodes = this._recurse(expanded.nodes);
	            (_a = this.errors).push.apply(_a, expanded.errors);
	            return this.errors.length > 0 ? new html_parser_1.HtmlParseTreeResult([], this.errors) :
	                new html_parser_1.HtmlParseTreeResult(nodes, []);
	        }
	        var _a;
	    };
	    I18nHtmlParser.prototype._processI18nPart = function (part) {
	        try {
	            return part.hasI18n ? this._mergeI18Part(part) : this._recurseIntoI18nPart(part);
	        }
	        catch (e) {
	            if (e instanceof shared_1.I18nError) {
	                this.errors.push(e);
	                return [];
	            }
	            else {
	                throw e;
	            }
	        }
	    };
	    I18nHtmlParser.prototype._mergeI18Part = function (part) {
	        var message = part.createMessage(this._parser, this._interpolationConfig);
	        var messageId = message_1.id(message);
	        if (!collection_1.StringMapWrapper.contains(this._messages, messageId)) {
	            throw new shared_1.I18nError(part.sourceSpan, "Cannot find message for id '" + messageId + "', content '" + message.content + "'.");
	        }
	        var parsedMessage = this._messages[messageId];
	        return this._mergeTrees(part, parsedMessage, part.children);
	    };
	    I18nHtmlParser.prototype._recurseIntoI18nPart = function (p) {
	        // we found an element without an i18n attribute
	        // we need to recurse in cause its children may have i18n set
	        // we also need to translate its attributes
	        if (lang_1.isPresent(p.rootElement)) {
	            var root = p.rootElement;
	            var children = this._recurse(p.children);
	            var attrs = this._i18nAttributes(root);
	            return [new html_ast_1.HtmlElementAst(root.name, attrs, children, root.sourceSpan, root.startSourceSpan, root.endSourceSpan)];
	        }
	        else if (lang_1.isPresent(p.rootTextNode)) {
	            return [p.rootTextNode];
	        }
	        else {
	            return this._recurse(p.children);
	        }
	    };
	    I18nHtmlParser.prototype._recurse = function (nodes) {
	        var _this = this;
	        var parts = shared_1.partition(nodes, this.errors, this._implicitTags);
	        return collection_1.ListWrapper.flatten(parts.map(function (p) { return _this._processI18nPart(p); }));
	    };
	    I18nHtmlParser.prototype._mergeTrees = function (p, translated, original) {
	        var l = new _CreateNodeMapping();
	        html_ast_1.htmlVisitAll(l, original);
	        // merge the translated tree with the original tree.
	        // we do it by preserving the source code position of the original tree
	        var merged = this._mergeTreesHelper(translated, l.mapping);
	        // if the root element is present, we need to create a new root element with its attributes
	        // translated
	        if (lang_1.isPresent(p.rootElement)) {
	            var root = p.rootElement;
	            var attrs = this._i18nAttributes(root);
	            return [new html_ast_1.HtmlElementAst(root.name, attrs, merged, root.sourceSpan, root.startSourceSpan, root.endSourceSpan)];
	        }
	        else if (lang_1.isPresent(p.rootTextNode)) {
	            throw new exceptions_1.BaseException('should not be reached');
	        }
	        else {
	            return merged;
	        }
	    };
	    I18nHtmlParser.prototype._mergeTreesHelper = function (translated, mapping) {
	        var _this = this;
	        return translated.map(function (t) {
	            if (t instanceof html_ast_1.HtmlElementAst) {
	                return _this._mergeElementOrInterpolation(t, translated, mapping);
	            }
	            else if (t instanceof html_ast_1.HtmlTextAst) {
	                return t;
	            }
	            else {
	                throw new exceptions_1.BaseException('should not be reached');
	            }
	        });
	    };
	    I18nHtmlParser.prototype._mergeElementOrInterpolation = function (t, translated, mapping) {
	        var name = this._getName(t);
	        var type = name[0];
	        var index = lang_1.NumberWrapper.parseInt(name.substring(1), 10);
	        var originalNode = mapping[index];
	        if (type == 't') {
	            return this._mergeTextInterpolation(t, originalNode);
	        }
	        else if (type == 'e') {
	            return this._mergeElement(t, originalNode, mapping);
	        }
	        else {
	            throw new exceptions_1.BaseException('should not be reached');
	        }
	    };
	    I18nHtmlParser.prototype._getName = function (t) {
	        if (t.name != _PLACEHOLDER_ELEMENT) {
	            throw new shared_1.I18nError(t.sourceSpan, "Unexpected tag \"" + t.name + "\". Only \"" + _PLACEHOLDER_ELEMENT + "\" tags are allowed.");
	        }
	        var names = t.attrs.filter(function (a) { return a.name == _NAME_ATTR; });
	        if (names.length == 0) {
	            throw new shared_1.I18nError(t.sourceSpan, "Missing \"" + _NAME_ATTR + "\" attribute.");
	        }
	        return names[0].value;
	    };
	    I18nHtmlParser.prototype._mergeTextInterpolation = function (t, originalNode) {
	        var split = this._parser.splitInterpolation(originalNode.value, originalNode.sourceSpan.toString(), this._interpolationConfig);
	        var exps = lang_1.isPresent(split) ? split.expressions : [];
	        var messageSubstring = this._messagesContent.substring(t.startSourceSpan.end.offset, t.endSourceSpan.start.offset);
	        var translated = this._replacePlaceholdersWithExpressions(messageSubstring, exps, originalNode.sourceSpan);
	        return new html_ast_1.HtmlTextAst(translated, originalNode.sourceSpan);
	    };
	    I18nHtmlParser.prototype._mergeElement = function (t, originalNode, mapping) {
	        var children = this._mergeTreesHelper(t.children, mapping);
	        return new html_ast_1.HtmlElementAst(originalNode.name, this._i18nAttributes(originalNode), children, originalNode.sourceSpan, originalNode.startSourceSpan, originalNode.endSourceSpan);
	    };
	    I18nHtmlParser.prototype._i18nAttributes = function (el) {
	        var _this = this;
	        var res = [];
	        var implicitAttrs = lang_1.isPresent(this._implicitAttrs[el.name]) ? this._implicitAttrs[el.name] : [];
	        el.attrs.forEach(function (attr) {
	            if (attr.name.startsWith(shared_1.I18N_ATTR_PREFIX) || attr.name == shared_1.I18N_ATTR)
	                return;
	            var message;
	            var i18ns = el.attrs.filter(function (a) { return a.name == "" + shared_1.I18N_ATTR_PREFIX + attr.name; });
	            if (i18ns.length == 0) {
	                if (implicitAttrs.indexOf(attr.name) == -1) {
	                    res.push(attr);
	                    return;
	                }
	                message = shared_1.messageFromAttribute(_this._parser, _this._interpolationConfig, attr);
	            }
	            else {
	                message = shared_1.messageFromI18nAttribute(_this._parser, _this._interpolationConfig, el, i18ns[0]);
	            }
	            var messageId = message_1.id(message);
	            if (collection_1.StringMapWrapper.contains(_this._messages, messageId)) {
	                var updatedMessage = _this._replaceInterpolationInAttr(attr, _this._messages[messageId]);
	                res.push(new html_ast_1.HtmlAttrAst(attr.name, updatedMessage, attr.sourceSpan));
	            }
	            else {
	                throw new shared_1.I18nError(attr.sourceSpan, "Cannot find message for id '" + messageId + "', content '" + message.content + "'.");
	            }
	        });
	        return res;
	    };
	    I18nHtmlParser.prototype._replaceInterpolationInAttr = function (attr, msg) {
	        var split = this._parser.splitInterpolation(attr.value, attr.sourceSpan.toString(), this._interpolationConfig);
	        var exps = lang_1.isPresent(split) ? split.expressions : [];
	        var first = msg[0];
	        var last = msg[msg.length - 1];
	        var start = first.sourceSpan.start.offset;
	        var end = last instanceof html_ast_1.HtmlElementAst ? last.endSourceSpan.end.offset : last.sourceSpan.end.offset;
	        var messageSubstring = this._messagesContent.substring(start, end);
	        return this._replacePlaceholdersWithExpressions(messageSubstring, exps, attr.sourceSpan);
	    };
	    ;
	    I18nHtmlParser.prototype._replacePlaceholdersWithExpressions = function (message, exps, sourceSpan) {
	        var _this = this;
	        var expMap = this._buildExprMap(exps);
	        return lang_1.RegExpWrapper.replaceAll(_PLACEHOLDER_EXPANDED_REGEXP, message, function (match) {
	            var nameWithQuotes = match[2];
	            var name = nameWithQuotes.substring(1, nameWithQuotes.length - 1);
	            return _this._convertIntoExpression(name, expMap, sourceSpan);
	        });
	    };
	    I18nHtmlParser.prototype._buildExprMap = function (exps) {
	        var expMap = new Map();
	        var usedNames = new Map();
	        for (var i = 0; i < exps.length; i++) {
	            var phName = shared_1.getPhNameFromBinding(exps[i], i);
	            expMap.set(shared_1.dedupePhName(usedNames, phName), exps[i]);
	        }
	        return expMap;
	    };
	    I18nHtmlParser.prototype._convertIntoExpression = function (name, expMap, sourceSpan) {
	        if (expMap.has(name)) {
	            return "" + this._interpolationConfig.start + expMap.get(name) + this._interpolationConfig.end;
	        }
	        else {
	            throw new shared_1.I18nError(sourceSpan, "Invalid interpolation name '" + name + "'");
	        }
	    };
	    return I18nHtmlParser;
	}());
	exports.I18nHtmlParser = I18nHtmlParser;
	var _CreateNodeMapping = (function () {
	    function _CreateNodeMapping() {
	        this.mapping = [];
	    }
	    _CreateNodeMapping.prototype.visitElement = function (ast, context) {
	        this.mapping.push(ast);
	        html_ast_1.htmlVisitAll(this, ast.children);
	        return null;
	    };
	    _CreateNodeMapping.prototype.visitAttr = function (ast, context) { return null; };
	    _CreateNodeMapping.prototype.visitText = function (ast, context) {
	        this.mapping.push(ast);
	        return null;
	    };
	    _CreateNodeMapping.prototype.visitExpansion = function (ast, context) { return null; };
	    _CreateNodeMapping.prototype.visitExpansionCase = function (ast, context) { return null; };
	    _CreateNodeMapping.prototype.visitComment = function (ast, context) { return ''; };
	    return _CreateNodeMapping;
	}());
	//# sourceMappingURL=i18n_html_parser.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var exceptions_1 = __webpack_require__(14);
	var html_ast_1 = __webpack_require__(22);
	var shared_1 = __webpack_require__(105);
	// http://cldr.unicode.org/index/cldr-spec/plural-rules
	var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	/**
	 * Expands special forms into elements.
	 *
	 * For example,
	 *
	 * ```
	 * { messages.length, plural,
	 *   =0 {zero}
	 *   =1 {one}
	 *   other {more than one}
	 * }
	 * ```
	 *
	 * will be expanded into
	 *
	 * ```
	 * <ng-container [ngPlural]="messages.length">
	 *   <template ngPluralCase="=0">zero</ng-container>
	 *   <template ngPluralCase="=1">one</ng-container>
	 *   <template ngPluralCase="other">more than one</ng-container>
	 * </ng-container>
	 * ```
	 */
	function expandNodes(nodes) {
	    var expander = new _Expander();
	    return new ExpansionResult(html_ast_1.htmlVisitAll(expander, nodes), expander.isExpanded, expander.errors);
	}
	exports.expandNodes = expandNodes;
	var ExpansionResult = (function () {
	    function ExpansionResult(nodes, expanded, errors) {
	        this.nodes = nodes;
	        this.expanded = expanded;
	        this.errors = errors;
	    }
	    return ExpansionResult;
	}());
	exports.ExpansionResult = ExpansionResult;
	/**
	 * Expand expansion forms (plural, select) to directives
	 *
	 * @internal
	 */
	var _Expander = (function () {
	    function _Expander() {
	        this.isExpanded = false;
	        this.errors = [];
	    }
	    _Expander.prototype.visitElement = function (ast, context) {
	        return new html_ast_1.HtmlElementAst(ast.name, ast.attrs, html_ast_1.htmlVisitAll(this, ast.children), ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
	    };
	    _Expander.prototype.visitAttr = function (ast, context) { return ast; };
	    _Expander.prototype.visitText = function (ast, context) { return ast; };
	    _Expander.prototype.visitComment = function (ast, context) { return ast; };
	    _Expander.prototype.visitExpansion = function (ast, context) {
	        this.isExpanded = true;
	        return ast.type == 'plural' ? _expandPluralForm(ast, this.errors) :
	            _expandDefaultForm(ast, this.errors);
	    };
	    _Expander.prototype.visitExpansionCase = function (ast, context) {
	        throw new exceptions_1.BaseException('Should not be reached');
	    };
	    return _Expander;
	}());
	function _expandPluralForm(ast, errors) {
	    var children = ast.cases.map(function (c) {
	        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	            errors.push(new shared_1.I18nError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	        }
	        var expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, expansionResult.errors);
	        return new html_ast_1.HtmlElementAst("template", [new html_ast_1.HtmlAttrAst('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var switchAttr = new html_ast_1.HtmlAttrAst('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	    return new html_ast_1.HtmlElementAst('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}
	function _expandDefaultForm(ast, errors) {
	    var children = ast.cases.map(function (c) {
	        var expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, expansionResult.errors);
	        return new html_ast_1.HtmlElementAst("template", [new html_ast_1.HtmlAttrAst('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var switchAttr = new html_ast_1.HtmlAttrAst('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	    return new html_ast_1.HtmlElementAst('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}
	//# sourceMappingURL=expander.js.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var html_ast_1 = __webpack_require__(22);
	var parse_util_1 = __webpack_require__(26);
	var message_1 = __webpack_require__(106);
	exports.I18N_ATTR = 'i18n';
	exports.I18N_ATTR_PREFIX = 'i18n-';
	var CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
	/**
	 * An i18n error.
	 */
	var I18nError = (function (_super) {
	    __extends(I18nError, _super);
	    function I18nError(span, msg) {
	        _super.call(this, span, msg);
	    }
	    return I18nError;
	}(parse_util_1.ParseError));
	exports.I18nError = I18nError;
	function partition(nodes, errors, implicitTags) {
	    var parts = [];
	    for (var i = 0; i < nodes.length; ++i) {
	        var node = nodes[i];
	        var msgNodes = [];
	        // Nodes between `<!-- i18n -->` and `<!-- /i18n -->`
	        if (_isOpeningComment(node)) {
	            var i18n = node.value.replace(/^i18n:?/, '').trim();
	            while (++i < nodes.length && !_isClosingComment(nodes[i])) {
	                msgNodes.push(nodes[i]);
	            }
	            if (i === nodes.length) {
	                errors.push(new I18nError(node.sourceSpan, 'Missing closing \'i18n\' comment.'));
	                break;
	            }
	            parts.push(new Part(null, null, msgNodes, i18n, true));
	        }
	        else if (node instanceof html_ast_1.HtmlElementAst) {
	            // Node with an `i18n` attribute
	            var i18n = _findI18nAttr(node);
	            var hasI18n = lang_1.isPresent(i18n) || implicitTags.indexOf(node.name) > -1;
	            parts.push(new Part(node, null, node.children, lang_1.isPresent(i18n) ? i18n.value : null, hasI18n));
	        }
	        else if (node instanceof html_ast_1.HtmlTextAst) {
	            parts.push(new Part(null, node, null, null, false));
	        }
	    }
	    return parts;
	}
	exports.partition = partition;
	var Part = (function () {
	    function Part(rootElement, rootTextNode, children, i18n, hasI18n) {
	        this.rootElement = rootElement;
	        this.rootTextNode = rootTextNode;
	        this.children = children;
	        this.i18n = i18n;
	        this.hasI18n = hasI18n;
	    }
	    Object.defineProperty(Part.prototype, "sourceSpan", {
	        get: function () {
	            if (lang_1.isPresent(this.rootElement)) {
	                return this.rootElement.sourceSpan;
	            }
	            if (lang_1.isPresent(this.rootTextNode)) {
	                return this.rootTextNode.sourceSpan;
	            }
	            return this.children[0].sourceSpan;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Part.prototype.createMessage = function (parser, interpolationConfig) {
	        return new message_1.Message(stringifyNodes(this.children, parser, interpolationConfig), meaning(this.i18n), description(this.i18n));
	    };
	    return Part;
	}());
	exports.Part = Part;
	function _isOpeningComment(n) {
	    return n instanceof html_ast_1.HtmlCommentAst && lang_1.isPresent(n.value) && n.value.startsWith('i18n');
	}
	function _isClosingComment(n) {
	    return n instanceof html_ast_1.HtmlCommentAst && lang_1.isPresent(n.value) && n.value === '/i18n';
	}
	function _findI18nAttr(p) {
	    var attrs = p.attrs;
	    for (var i = 0; i < attrs.length; i++) {
	        if (attrs[i].name === exports.I18N_ATTR) {
	            return attrs[i];
	        }
	    }
	    return null;
	}
	function meaning(i18n) {
	    if (lang_1.isBlank(i18n) || i18n == '')
	        return null;
	    return i18n.split('|')[0];
	}
	exports.meaning = meaning;
	function description(i18n) {
	    if (lang_1.isBlank(i18n) || i18n == '')
	        return null;
	    var parts = i18n.split('|', 2);
	    return parts.length > 1 ? parts[1] : null;
	}
	exports.description = description;
	/**
	 * Extract a translation string given an `i18n-` prefixed attribute.
	 *
	 * @internal
	 */
	function messageFromI18nAttribute(parser, interpolationConfig, p, i18nAttr) {
	    var expectedName = i18nAttr.name.substring(5);
	    var attr = p.attrs.find(function (a) { return a.name == expectedName; });
	    if (attr) {
	        return messageFromAttribute(parser, interpolationConfig, attr, meaning(i18nAttr.value), description(i18nAttr.value));
	    }
	    throw new I18nError(p.sourceSpan, "Missing attribute '" + expectedName + "'.");
	}
	exports.messageFromI18nAttribute = messageFromI18nAttribute;
	function messageFromAttribute(parser, interpolationConfig, attr, meaning, description) {
	    if (meaning === void 0) { meaning = null; }
	    if (description === void 0) { description = null; }
	    var value = removeInterpolation(attr.value, attr.sourceSpan, parser, interpolationConfig);
	    return new message_1.Message(value, meaning, description);
	}
	exports.messageFromAttribute = messageFromAttribute;
	function removeInterpolation(value, source, parser, interpolationConfig) {
	    try {
	        var parsed = parser.splitInterpolation(value, source.toString(), interpolationConfig);
	        var usedNames = new Map();
	        if (lang_1.isPresent(parsed)) {
	            var res = '';
	            for (var i = 0; i < parsed.strings.length; ++i) {
	                res += parsed.strings[i];
	                if (i != parsed.strings.length - 1) {
	                    var customPhName = getPhNameFromBinding(parsed.expressions[i], i);
	                    customPhName = dedupePhName(usedNames, customPhName);
	                    res += "<ph name=\"" + customPhName + "\"/>";
	                }
	            }
	            return res;
	        }
	        else {
	            return value;
	        }
	    }
	    catch (e) {
	        return value;
	    }
	}
	exports.removeInterpolation = removeInterpolation;
	function getPhNameFromBinding(input, index) {
	    var customPhMatch = lang_1.StringWrapper.split(input, CUSTOM_PH_EXP);
	    return customPhMatch.length > 1 ? customPhMatch[1] : "" + index;
	}
	exports.getPhNameFromBinding = getPhNameFromBinding;
	function dedupePhName(usedNames, name) {
	    var duplicateNameCount = usedNames.get(name);
	    if (lang_1.isPresent(duplicateNameCount)) {
	        usedNames.set(name, duplicateNameCount + 1);
	        return name + "_" + duplicateNameCount;
	    }
	    else {
	        usedNames.set(name, 1);
	        return name;
	    }
	}
	exports.dedupePhName = dedupePhName;
	function stringifyNodes(nodes, parser, interpolationConfig) {
	    var visitor = new _StringifyVisitor(parser, interpolationConfig);
	    return html_ast_1.htmlVisitAll(visitor, nodes).join('');
	}
	exports.stringifyNodes = stringifyNodes;
	var _StringifyVisitor = (function () {
	    function _StringifyVisitor(_parser, _interpolationConfig) {
	        this._parser = _parser;
	        this._interpolationConfig = _interpolationConfig;
	        this._index = 0;
	    }
	    _StringifyVisitor.prototype.visitElement = function (ast, context) {
	        var name = this._index++;
	        var children = this._join(html_ast_1.htmlVisitAll(this, ast.children), '');
	        return "<ph name=\"e" + name + "\">" + children + "</ph>";
	    };
	    _StringifyVisitor.prototype.visitAttr = function (ast, context) { return null; };
	    _StringifyVisitor.prototype.visitText = function (ast, context) {
	        var index = this._index++;
	        var noInterpolation = removeInterpolation(ast.value, ast.sourceSpan, this._parser, this._interpolationConfig);
	        if (noInterpolation != ast.value) {
	            return "<ph name=\"t" + index + "\">" + noInterpolation + "</ph>";
	        }
	        return ast.value;
	    };
	    _StringifyVisitor.prototype.visitComment = function (ast, context) { return ''; };
	    _StringifyVisitor.prototype.visitExpansion = function (ast, context) { return null; };
	    _StringifyVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };
	    _StringifyVisitor.prototype._join = function (strs, str) {
	        return strs.filter(function (s) { return s.length > 0; }).join(str);
	    };
	    return _StringifyVisitor;
	}());
	//# sourceMappingURL=shared.js.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(10);
	/**
	 * A message extracted from a template.
	 *
	 * The identity of a message is comprised of `content` and `meaning`.
	 *
	 * `description` is additional information provided to the translator.
	 */
	var Message = (function () {
	    function Message(content, meaning, description) {
	        if (description === void 0) { description = null; }
	        this.content = content;
	        this.meaning = meaning;
	        this.description = description;
	    }
	    return Message;
	}());
	exports.Message = Message;
	/**
	 * Computes the id of a message
	 */
	function id(m) {
	    var meaning = lang_1.isPresent(m.meaning) ? m.meaning : '';
	    var content = lang_1.isPresent(m.content) ? m.content : '';
	    return lang_1.escape("$ng|" + meaning + "|" + content);
	}
	exports.id = id;
	//# sourceMappingURL=message.js.map

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var collection_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var html_ast_1 = __webpack_require__(22);
	var interpolation_config_1 = __webpack_require__(19);
	var message_1 = __webpack_require__(106);
	var shared_1 = __webpack_require__(105);
	/**
	 * All messages extracted from a template.
	 */
	var ExtractionResult = (function () {
	    function ExtractionResult(messages, errors) {
	        this.messages = messages;
	        this.errors = errors;
	    }
	    return ExtractionResult;
	}());
	exports.ExtractionResult = ExtractionResult;
	/**
	 * Removes duplicate messages.
	 */
	function removeDuplicates(messages) {
	    var uniq = {};
	    messages.forEach(function (m) {
	        if (!collection_1.StringMapWrapper.contains(uniq, message_1.id(m))) {
	            uniq[message_1.id(m)] = m;
	        }
	    });
	    return collection_1.StringMapWrapper.values(uniq);
	}
	exports.removeDuplicates = removeDuplicates;
	/**
	 * Extracts all messages from a template.
	 *
	 * Algorithm:
	 *
	 * To understand the algorithm, you need to know how partitioning works.
	 * Partitioning is required as we can use two i18n comments to group node siblings together.
	 * That is why we cannot just use nodes.
	 *
	 * Partitioning transforms an array of HtmlAst into an array of Part.
	 * A part can optionally contain a root element or a root text node. And it can also contain
	 * children.
	 * A part can contain i18n property, in which case it needs to be extracted.
	 *
	 * Example:
	 *
	 * The following array of nodes will be split into four parts:
	 *
	 * ```
	 * <a>A</a>
	 * <b i18n>B</b>
	 * <!-- i18n -->
	 * <c>C</c>
	 * D
	 * <!-- /i18n -->
	 * E
	 * ```
	 *
	 * Part 1 containing the a tag. It should not be translated.
	 * Part 2 containing the b tag. It should be translated.
	 * Part 3 containing the c tag and the D text node. It should be translated.
	 * Part 4 containing the E text node. It should not be translated..
	 *
	 * It is also important to understand how we stringify nodes to create a message.
	 *
	 * We walk the tree and replace every element node with a placeholder. We also replace
	 * all expressions in interpolation with placeholders. We also insert a placeholder element
	 * to wrap a text node containing interpolation.
	 *
	 * Example:
	 *
	 * The following tree:
	 *
	 * ```
	 * <a>A{{I}}</a><b>B</b>
	 * ```
	 *
	 * will be stringified into:
	 * ```
	 * <ph name="e0"><ph name="t1">A<ph name="0"/></ph></ph><ph name="e2">B</ph>
	 * ```
	 *
	 * This is what the algorithm does:
	 *
	 * 1. Use the provided html parser to get the html AST of the template.
	 * 2. Partition the root nodes, and process each part separately.
	 * 3. If a part does not have the i18n attribute, recurse to process children and attributes.
	 * 4. If a part has the i18n attribute, stringify the nodes to create a Message.
	 */
	var MessageExtractor = (function () {
	    function MessageExtractor(_htmlParser, _parser, _implicitTags, _implicitAttrs) {
	        this._htmlParser = _htmlParser;
	        this._parser = _parser;
	        this._implicitTags = _implicitTags;
	        this._implicitAttrs = _implicitAttrs;
	    }
	    MessageExtractor.prototype.extract = function (template, sourceUrl, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
	        this._messages = [];
	        this._errors = [];
	        var res = this._htmlParser.parse(template, sourceUrl, true);
	        if (res.errors.length == 0) {
	            this._recurse(res.rootNodes, interpolationConfig);
	        }
	        return new ExtractionResult(this._messages, this._errors.concat(res.errors));
	    };
	    MessageExtractor.prototype._extractMessagesFromPart = function (part, interpolationConfig) {
	        if (part.hasI18n) {
	            this._messages.push(part.createMessage(this._parser, interpolationConfig));
	            this._recurseToExtractMessagesFromAttributes(part.children, interpolationConfig);
	        }
	        else {
	            this._recurse(part.children, interpolationConfig);
	        }
	        if (lang_1.isPresent(part.rootElement)) {
	            this._extractMessagesFromAttributes(part.rootElement, interpolationConfig);
	        }
	    };
	    MessageExtractor.prototype._recurse = function (nodes, interpolationConfig) {
	        var _this = this;
	        if (lang_1.isPresent(nodes)) {
	            var parts = shared_1.partition(nodes, this._errors, this._implicitTags);
	            parts.forEach(function (part) { return _this._extractMessagesFromPart(part, interpolationConfig); });
	        }
	    };
	    MessageExtractor.prototype._recurseToExtractMessagesFromAttributes = function (nodes, interpolationConfig) {
	        var _this = this;
	        nodes.forEach(function (n) {
	            if (n instanceof html_ast_1.HtmlElementAst) {
	                _this._extractMessagesFromAttributes(n, interpolationConfig);
	                _this._recurseToExtractMessagesFromAttributes(n.children, interpolationConfig);
	            }
	        });
	    };
	    MessageExtractor.prototype._extractMessagesFromAttributes = function (p, interpolationConfig) {
	        var _this = this;
	        var transAttrs = lang_1.isPresent(this._implicitAttrs[p.name]) ? this._implicitAttrs[p.name] : [];
	        var explicitAttrs = [];
	        // `i18n-` prefixed attributes should be translated
	        p.attrs.filter(function (attr) { return attr.name.startsWith(shared_1.I18N_ATTR_PREFIX); }).forEach(function (attr) {
	            try {
	                explicitAttrs.push(attr.name.substring(shared_1.I18N_ATTR_PREFIX.length));
	                _this._messages.push(shared_1.messageFromI18nAttribute(_this._parser, interpolationConfig, p, attr));
	            }
	            catch (e) {
	                if (e instanceof shared_1.I18nError) {
	                    _this._errors.push(e);
	                }
	                else {
	                    throw e;
	                }
	            }
	        });
	        // implicit attributes should also be translated
	        p.attrs.filter(function (attr) { return !attr.name.startsWith(shared_1.I18N_ATTR_PREFIX); })
	            .filter(function (attr) { return explicitAttrs.indexOf(attr.name) == -1; })
	            .filter(function (attr) { return transAttrs.indexOf(attr.name) > -1; })
	            .forEach(function (attr) {
	            return _this._messages.push(shared_1.messageFromAttribute(_this._parser, interpolationConfig, attr));
	        });
	    };
	    return MessageExtractor;
	}());
	exports.MessageExtractor = MessageExtractor;
	//# sourceMappingURL=message_extractor.js.map

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var html_ast_1 = __webpack_require__(22);
	var html_parser_1 = __webpack_require__(21);
	var parse_util_1 = __webpack_require__(26);
	var message_1 = __webpack_require__(106);
	var _PLACEHOLDER_REGEXP = lang_1.RegExpWrapper.create("\\<ph(\\s)+name=(\"(\\w)+\")\\/\\>");
	var _ID_ATTR = 'id';
	var _MSG_ELEMENT = 'msg';
	var _BUNDLE_ELEMENT = 'message-bundle';
	function serializeXmb(messages) {
	    var ms = messages.map(function (m) { return _serializeMessage(m); }).join('');
	    return "<message-bundle>" + ms + "</message-bundle>";
	}
	exports.serializeXmb = serializeXmb;
	var XmbDeserializationResult = (function () {
	    function XmbDeserializationResult(content, messages, errors) {
	        this.content = content;
	        this.messages = messages;
	        this.errors = errors;
	    }
	    return XmbDeserializationResult;
	}());
	exports.XmbDeserializationResult = XmbDeserializationResult;
	var XmbDeserializationError = (function (_super) {
	    __extends(XmbDeserializationError, _super);
	    function XmbDeserializationError(span, msg) {
	        _super.call(this, span, msg);
	    }
	    return XmbDeserializationError;
	}(parse_util_1.ParseError));
	exports.XmbDeserializationError = XmbDeserializationError;
	function deserializeXmb(content, url) {
	    var parser = new html_parser_1.HtmlParser();
	    var normalizedContent = _expandPlaceholder(content.trim());
	    var parsed = parser.parse(normalizedContent, url);
	    if (parsed.errors.length > 0) {
	        return new XmbDeserializationResult(null, {}, parsed.errors);
	    }
	    if (_checkRootElement(parsed.rootNodes)) {
	        return new XmbDeserializationResult(null, {}, [new XmbDeserializationError(null, "Missing element \"" + _BUNDLE_ELEMENT + "\"")]);
	    }
	    var bundleEl = parsed.rootNodes[0]; // test this
	    var errors = [];
	    var messages = {};
	    _createMessages(bundleEl.children, messages, errors);
	    return (errors.length == 0) ?
	        new XmbDeserializationResult(normalizedContent, messages, []) :
	        new XmbDeserializationResult(null, {}, errors);
	}
	exports.deserializeXmb = deserializeXmb;
	function _checkRootElement(nodes) {
	    return nodes.length < 1 || !(nodes[0] instanceof html_ast_1.HtmlElementAst) ||
	        nodes[0].name != _BUNDLE_ELEMENT;
	}
	function _createMessages(nodes, messages, errors) {
	    nodes.forEach(function (item) {
	        if (item instanceof html_ast_1.HtmlElementAst) {
	            var msg = item;
	            if (msg.name != _MSG_ELEMENT) {
	                errors.push(new XmbDeserializationError(item.sourceSpan, "Unexpected element \"" + msg.name + "\""));
	                return;
	            }
	            var id_1 = _id(msg);
	            if (lang_1.isBlank(id_1)) {
	                errors.push(new XmbDeserializationError(item.sourceSpan, "\"" + _ID_ATTR + "\" attribute is missing"));
	                return;
	            }
	            messages[id_1] = msg.children;
	        }
	    });
	}
	function _id(el) {
	    var ids = el.attrs.filter(function (a) { return a.name == _ID_ATTR; });
	    return ids.length > 0 ? ids[0].value : null;
	}
	function _serializeMessage(m) {
	    var desc = lang_1.isPresent(m.description) ? " desc='" + _escapeXml(m.description) + "'" : '';
	    var meaning = lang_1.isPresent(m.meaning) ? " meaning='" + _escapeXml(m.meaning) + "'" : '';
	    return "<msg id='" + message_1.id(m) + "'" + desc + meaning + ">" + m.content + "</msg>";
	}
	function _expandPlaceholder(input) {
	    return lang_1.RegExpWrapper.replaceAll(_PLACEHOLDER_REGEXP, input, function (match) {
	        var nameWithQuotes = match[2];
	        return "<ph name=" + nameWithQuotes + "></ph>";
	    });
	}
	var _XML_ESCAPED_CHARS = [
	    [/&/g, '&amp;'],
	    [/"/g, '&quot;'],
	    [/'/g, '&apos;'],
	    [/</g, '&lt;'],
	    [/>/g, '&gt;'],
	];
	function _escapeXml(value) {
	    return _XML_ESCAPED_CHARS.reduce(function (value, escape) { return value.replace(escape[0], escape[1]); }, value);
	}
	//# sourceMappingURL=xmb_serializer.js.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var exceptions_1 = __webpack_require__(14);
	var lang_1 = __webpack_require__(10);
	// asset:<package-name>/<realm>/<path-to-module>
	var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/g;
	/**
	 * Interface that defines how import statements should be generated.
	 */
	var ImportGenerator = (function () {
	    function ImportGenerator() {
	    }
	    ImportGenerator.parseAssetUrl = function (url) { return AssetUrl.parse(url); };
	    return ImportGenerator;
	}());
	exports.ImportGenerator = ImportGenerator;
	var AssetUrl = (function () {
	    function AssetUrl(packageName, firstLevelDir, modulePath) {
	        this.packageName = packageName;
	        this.firstLevelDir = firstLevelDir;
	        this.modulePath = modulePath;
	    }
	    AssetUrl.parse = function (url, allowNonMatching) {
	        if (allowNonMatching === void 0) { allowNonMatching = true; }
	        var match = lang_1.RegExpWrapper.firstMatch(_ASSET_URL_RE, url);
	        if (lang_1.isPresent(match)) {
	            return new AssetUrl(match[1], match[2], match[3]);
	        }
	        if (allowNonMatching) {
	            return null;
	        }
	        throw new exceptions_1.BaseException("Url " + url + " is not a valid asset: url");
	    };
	    return AssetUrl;
	}());
	exports.AssetUrl = AssetUrl;
	//# sourceMappingURL=path_util.js.map

/***/ },
/* 110 */
/***/ function(module, exports) {

	module.exports = require("angular2")["platform"]["browser"];

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	exports.ReflectionCapabilities = core_1.__core_private__.ReflectionCapabilities;
	exports.reflector = core_1.__core_private__.reflector;
	//# sourceMappingURL=core_private.js.map

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(41);
	var PromiseObservable_1 = __webpack_require__(60);
	var toPromise_1 = __webpack_require__(61);
	var lang_1 = __webpack_require__(113);
	var Observable_1 = __webpack_require__(42);
	exports.Observable = Observable_1.Observable;
	var Subject_2 = __webpack_require__(41);
	exports.Subject = Subject_2.Subject;
	var promise_1 = __webpack_require__(114);
	exports.PromiseCompleter = promise_1.PromiseCompleter;
	exports.PromiseWrapper = promise_1.PromiseWrapper;
	var TimerWrapper = (function () {
	    function TimerWrapper() {
	    }
	    TimerWrapper.setTimeout = function (fn, millis) {
	        return lang_1.global.setTimeout(fn, millis);
	    };
	    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };
	    TimerWrapper.setInterval = function (fn, millis) {
	        return lang_1.global.setInterval(fn, millis);
	    };
	    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };
	    return TimerWrapper;
	}());
	exports.TimerWrapper = TimerWrapper;
	var ObservableWrapper = (function () {
	    function ObservableWrapper() {
	    }
	    // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg
	    ObservableWrapper.subscribe = function (emitter, onNext, onError, onComplete) {
	        if (onComplete === void 0) { onComplete = function () { }; }
	        onError = (typeof onError === 'function') && onError || lang_1.noop;
	        onComplete = (typeof onComplete === 'function') && onComplete || lang_1.noop;
	        return emitter.subscribe({ next: onNext, error: onError, complete: onComplete });
	    };
	    ObservableWrapper.isObservable = function (obs) { return !!obs.subscribe; };
	    /**
	     * Returns whether `obs` has any subscribers listening to events.
	     */
	    ObservableWrapper.hasSubscribers = function (obs) { return obs.observers.length > 0; };
	    ObservableWrapper.dispose = function (subscription) { subscription.unsubscribe(); };
	    /**
	     * @deprecated - use callEmit() instead
	     */
	    ObservableWrapper.callNext = function (emitter, value) { emitter.emit(value); };
	    ObservableWrapper.callEmit = function (emitter, value) { emitter.emit(value); };
	    ObservableWrapper.callError = function (emitter, error) { emitter.error(error); };
	    ObservableWrapper.callComplete = function (emitter) { emitter.complete(); };
	    ObservableWrapper.fromPromise = function (promise) {
	        return PromiseObservable_1.PromiseObservable.create(promise);
	    };
	    ObservableWrapper.toPromise = function (obj) { return toPromise_1.toPromise.call(obj); };
	    return ObservableWrapper;
	}());
	exports.ObservableWrapper = ObservableWrapper;
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * @Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   @Output() open: EventEmitter<any> = new EventEmitter();
	 *   @Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * The events payload can be accessed by the parameter `$event` on the components output event
	 * handler:
	 *
	 * ```
	 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	 * ```
	 *
	 * Uses Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 * @stable
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of [EventEmitter], which depending on [isAsync],
	     * delivers events synchronously or asynchronously.
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = false; }
	        _super.call(this);
	        this.__isAsync = isAsync;
	    }
	    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	    /**
	     * @deprecated - use .emit(value) instead
	     */
	    EventEmitter.prototype.next = function (value) { _super.prototype.next.call(this, value); };
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var schedulerFn;
	        var errorFn = function (err) { return null; };
	        var completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
	                setTimeout(function () { return generatorOrNext.next(value); });
	            } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };
	            if (generatorOrNext.error) {
	                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                    function (err) { generatorOrNext.error(err); };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                    function () { generatorOrNext.complete(); };
	            }
	        }
	        else {
	            schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
	                setTimeout(function () { return generatorOrNext(value); });
	            } : function (value /** TODO #9100 */) { generatorOrNext(value); };
	            if (error) {
	                errorFn =
	                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	            }
	            if (complete) {
	                completeFn =
	                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	            }
	        }
	        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	    };
	    return EventEmitter;
	}(Subject_1.Subject));
	exports.EventEmitter = EventEmitter;
	//# sourceMappingURL=async.js.map

/***/ },
/* 113 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var globalScope;
	if (typeof window === 'undefined') {
	    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	        globalScope = self;
	    }
	    else {
	        globalScope = global;
	    }
	}
	else {
	    globalScope = window;
	}
	function scheduleMicroTask(fn) {
	    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	}
	exports.scheduleMicroTask = scheduleMicroTask;
	exports.IS_DART = false;
	// Need to declare a new variable for global here since TypeScript
	// exports the original value of the symbol.
	var _global = globalScope;
	exports.global = _global;
	exports.Type = Function;
	function getTypeNameForDebugging(type) {
	    if (type['name']) {
	        return type['name'];
	    }
	    return typeof type;
	}
	exports.getTypeNameForDebugging = getTypeNameForDebugging;
	exports.Math = _global.Math;
	exports.Date = _global.Date;
	// TODO: remove calls to assert in production environment
	// Note: Can't just export this and import in in other files
	// as `assert` is a reserved keyword in Dart
	_global.assert = function assert(condition) {
	    // TODO: to be fixed properly via #2830, noop for now
	};
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function isBoolean(obj) {
	    return typeof obj === 'boolean';
	}
	exports.isBoolean = isBoolean;
	function isNumber(obj) {
	    return typeof obj === 'number';
	}
	exports.isNumber = isNumber;
	function isString(obj) {
	    return typeof obj === 'string';
	}
	exports.isString = isString;
	function isFunction(obj) {
	    return typeof obj === 'function';
	}
	exports.isFunction = isFunction;
	function isType(obj) {
	    return isFunction(obj);
	}
	exports.isType = isType;
	function isStringMap(obj) {
	    return typeof obj === 'object' && obj !== null;
	}
	exports.isStringMap = isStringMap;
	var STRING_MAP_PROTO = Object.getPrototypeOf({});
	function isStrictStringMap(obj) {
	    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	}
	exports.isStrictStringMap = isStrictStringMap;
	function isPromise(obj) {
	    return obj instanceof _global.Promise;
	}
	exports.isPromise = isPromise;
	function isArray(obj) {
	    return Array.isArray(obj);
	}
	exports.isArray = isArray;
	function isDate(obj) {
	    return obj instanceof exports.Date && !isNaN(obj.valueOf());
	}
	exports.isDate = isDate;
	function noop() { }
	exports.noop = noop;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    if (token.overriddenName) {
	        return token.overriddenName;
	    }
	    var res = token.toString();
	    var newLineIndex = res.indexOf('\n');
	    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	}
	exports.stringify = stringify;
	// serialize / deserialize enum exist only for consistency with dart API
	// enums in typescript don't need to be serialized
	function serializeEnum(val) {
	    return val;
	}
	exports.serializeEnum = serializeEnum;
	function deserializeEnum(val, values) {
	    return val;
	}
	exports.deserializeEnum = deserializeEnum;
	function resolveEnumToken(enumValue, val) {
	    return enumValue[val];
	}
	exports.resolveEnumToken = resolveEnumToken;
	var StringWrapper = (function () {
	    function StringWrapper() {
	    }
	    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	    StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	    StringWrapper.equals = function (s, s2) { return s === s2; };
	    StringWrapper.stripLeft = function (s, charVal) {
	        if (s && s.length) {
	            var pos = 0;
	            for (var i = 0; i < s.length; i++) {
	                if (s[i] != charVal)
	                    break;
	                pos++;
	            }
	            s = s.substring(pos);
	        }
	        return s;
	    };
	    StringWrapper.stripRight = function (s, charVal) {
	        if (s && s.length) {
	            var pos = s.length;
	            for (var i = s.length - 1; i >= 0; i--) {
	                if (s[i] != charVal)
	                    break;
	                pos--;
	            }
	            s = s.substring(0, pos);
	        }
	        return s;
	    };
	    StringWrapper.replace = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.replaceAll = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.slice = function (s, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return s.slice(from, to === null ? undefined : to);
	    };
	    StringWrapper.replaceAllMapped = function (s, from, cb) {
	        return s.replace(from, function () {
	            var matches = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                matches[_i - 0] = arguments[_i];
	            }
	            // Remove offset & string from the result array
	            matches.splice(-2, 2);
	            // The callback receives match, p1, ..., pn
	            return cb(matches);
	        });
	    };
	    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	    StringWrapper.compare = function (a, b) {
	        if (a < b) {
	            return -1;
	        }
	        else if (a > b) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    return StringWrapper;
	}());
	exports.StringWrapper = StringWrapper;
	var StringJoiner = (function () {
	    function StringJoiner(parts) {
	        if (parts === void 0) { parts = []; }
	        this.parts = parts;
	    }
	    StringJoiner.prototype.add = function (part) { this.parts.push(part); };
	    StringJoiner.prototype.toString = function () { return this.parts.join(''); };
	    return StringJoiner;
	}());
	exports.StringJoiner = StringJoiner;
	var NumberParseError = (function (_super) {
	    __extends(NumberParseError, _super);
	    function NumberParseError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    NumberParseError.prototype.toString = function () { return this.message; };
	    return NumberParseError;
	}(Error));
	exports.NumberParseError = NumberParseError;
	var NumberWrapper = (function () {
	    function NumberWrapper() {
	    }
	    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	    NumberWrapper.equal = function (a, b) { return a === b; };
	    NumberWrapper.parseIntAutoRadix = function (text) {
	        var result = parseInt(text);
	        if (isNaN(result)) {
	            throw new NumberParseError('Invalid integer literal when parsing ' + text);
	        }
	        return result;
	    };
	    NumberWrapper.parseInt = function (text, radix) {
	        if (radix == 10) {
	            if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else if (radix == 16) {
	            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else {
	            var result = parseInt(text, radix);
	            if (!isNaN(result)) {
	                return result;
	            }
	        }
	        throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	    };
	    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
	    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
	    Object.defineProperty(NumberWrapper, "NaN", {
	        get: function () { return NaN; },
	        enumerable: true,
	        configurable: true
	    });
	    NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	    NumberWrapper.isNaN = function (value) { return isNaN(value); };
	    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	    return NumberWrapper;
	}());
	exports.NumberWrapper = NumberWrapper;
	exports.RegExp = _global.RegExp;
	var RegExpWrapper = (function () {
	    function RegExpWrapper() {
	    }
	    RegExpWrapper.create = function (regExpStr, flags) {
	        if (flags === void 0) { flags = ''; }
	        flags = flags.replace(/g/g, '');
	        return new _global.RegExp(regExpStr, flags + 'g');
	    };
	    RegExpWrapper.firstMatch = function (regExp, input) {
	        // Reset multimatch regex state
	        regExp.lastIndex = 0;
	        return regExp.exec(input);
	    };
	    RegExpWrapper.test = function (regExp, input) {
	        regExp.lastIndex = 0;
	        return regExp.test(input);
	    };
	    RegExpWrapper.matcher = function (regExp, input) {
	        // Reset regex state for the case
	        // someone did not loop over all matches
	        // last time.
	        regExp.lastIndex = 0;
	        return { re: regExp, input: input };
	    };
	    RegExpWrapper.replaceAll = function (regExp, input, replace) {
	        var c = regExp.exec(input);
	        var res = '';
	        regExp.lastIndex = 0;
	        var prev = 0;
	        while (c) {
	            res += input.substring(prev, c.index);
	            res += replace(c);
	            prev = c.index + c[0].length;
	            regExp.lastIndex = prev;
	            c = regExp.exec(input);
	        }
	        res += input.substring(prev);
	        return res;
	    };
	    return RegExpWrapper;
	}());
	exports.RegExpWrapper = RegExpWrapper;
	var RegExpMatcherWrapper = (function () {
	    function RegExpMatcherWrapper() {
	    }
	    RegExpMatcherWrapper.next = function (matcher) {
	        return matcher.re.exec(matcher.input);
	    };
	    return RegExpMatcherWrapper;
	}());
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	var FunctionWrapper = (function () {
	    function FunctionWrapper() {
	    }
	    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
	    FunctionWrapper.bind = function (fn, scope) { return fn.bind(scope); };
	    return FunctionWrapper;
	}());
	exports.FunctionWrapper = FunctionWrapper;
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}
	exports.looseIdentical = looseIdentical;
	// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	function getMapKey(value) {
	    return value;
	}
	exports.getMapKey = getMapKey;
	function normalizeBlank(obj) {
	    return isBlank(obj) ? null : obj;
	}
	exports.normalizeBlank = normalizeBlank;
	function normalizeBool(obj) {
	    return isBlank(obj) ? false : obj;
	}
	exports.normalizeBool = normalizeBool;
	function isJsObject(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}
	exports.isJsObject = isJsObject;
	function print(obj) {
	    console.log(obj);
	}
	exports.print = print;
	function warn(obj) {
	    console.warn(obj);
	}
	exports.warn = warn;
	// Can't be all uppercase as our transpiler would think it is a special directive...
	var Json = (function () {
	    function Json() {
	    }
	    Json.parse = function (s) { return _global.JSON.parse(s); };
	    Json.stringify = function (data) {
	        // Dart doesn't take 3 arguments
	        return _global.JSON.stringify(data, null, 2);
	    };
	    return Json;
	}());
	exports.Json = Json;
	var DateWrapper = (function () {
	    function DateWrapper() {
	    }
	    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
	        if (month === void 0) { month = 1; }
	        if (day === void 0) { day = 1; }
	        if (hour === void 0) { hour = 0; }
	        if (minutes === void 0) { minutes = 0; }
	        if (seconds === void 0) { seconds = 0; }
	        if (milliseconds === void 0) { milliseconds = 0; }
	        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
	    };
	    DateWrapper.fromISOString = function (str) { return new exports.Date(str); };
	    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };
	    DateWrapper.toMillis = function (date) { return date.getTime(); };
	    DateWrapper.now = function () { return new exports.Date(); };
	    DateWrapper.toJson = function (date) { return date.toJSON(); };
	    return DateWrapper;
	}());
	exports.DateWrapper = DateWrapper;
	function setValueOnPath(global, path, value) {
	    var parts = path.split('.');
	    var obj = global;
	    while (parts.length > 1) {
	        var name = parts.shift();
	        if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[parts.shift()] = value;
	}
	exports.setValueOnPath = setValueOnPath;
	var _symbolIterator = null;
	function getSymbolIterator() {
	    if (isBlank(_symbolIterator)) {
	        if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
	            _symbolIterator = Symbol.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    Map.prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	exports.getSymbolIterator = getSymbolIterator;
	function evalExpression(sourceUrl, expr, declarations, vars) {
	    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	    var fnArgNames = [];
	    var fnArgValues = [];
	    for (var argName in vars) {
	        fnArgNames.push(argName);
	        fnArgValues.push(vars[argName]);
	    }
	    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	}
	exports.evalExpression = evalExpression;
	function isPrimitive(obj) {
	    return !isJsObject(obj);
	}
	exports.isPrimitive = isPrimitive;
	function hasConstructor(value, type) {
	    return value.constructor === type;
	}
	exports.hasConstructor = hasConstructor;
	function escape(s) {
	    return _global.encodeURI(s);
	}
	exports.escape = escape;
	function escapeRegExp(s) {
	    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	}
	exports.escapeRegExp = escapeRegExp;
	//# sourceMappingURL=lang.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 114 */
/***/ function(module, exports) {

	"use strict";
	var PromiseCompleter = (function () {
	    function PromiseCompleter() {
	        var _this = this;
	        this.promise = new Promise(function (res, rej) {
	            _this.resolve = res;
	            _this.reject = rej;
	        });
	    }
	    return PromiseCompleter;
	}());
	exports.PromiseCompleter = PromiseCompleter;
	var PromiseWrapper = (function () {
	    function PromiseWrapper() {
	    }
	    PromiseWrapper.resolve = function (obj) { return Promise.resolve(obj); };
	    PromiseWrapper.reject = function (obj, _) { return Promise.reject(obj); };
	    // Note: We can't rename this method into `catch`, as this is not a valid
	    // method name in Dart.
	    PromiseWrapper.catchError = function (promise, onError) {
	        return promise.catch(onError);
	    };
	    PromiseWrapper.all = function (promises) {
	        if (promises.length == 0)
	            return Promise.resolve([]);
	        return Promise.all(promises);
	    };
	    PromiseWrapper.then = function (promise, success, rejection) {
	        return promise.then(success, rejection);
	    };
	    PromiseWrapper.wrap = function (computation) {
	        return new Promise(function (res, rej) {
	            try {
	                res(computation());
	            }
	            catch (e) {
	                rej(e);
	            }
	        });
	    };
	    PromiseWrapper.scheduleMicrotask = function (computation) {
	        PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function (_) { });
	    };
	    PromiseWrapper.completer = function () { return new PromiseCompleter(); };
	    return PromiseWrapper;
	}());
	exports.PromiseWrapper = PromiseWrapper;
	//# sourceMappingURL=promise.js.map

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var compiler_1 = __webpack_require__(5);
	var exceptions_1 = __webpack_require__(116);
	var lang_1 = __webpack_require__(113);
	var promise_1 = __webpack_require__(114);
	/**
	 * An implementation of XHR that uses a template cache to avoid doing an actual
	 * XHR.
	 *
	 * The template cache needs to be built and loaded into window.$templateCache
	 * via a separate mechanism.
	 */
	var CachedXHR = (function (_super) {
	    __extends(CachedXHR, _super);
	    function CachedXHR() {
	        _super.call(this);
	        this._cache = lang_1.global.$templateCache;
	        if (this._cache == null) {
	            throw new exceptions_1.BaseException('CachedXHR: Template cache was not found in $templateCache.');
	        }
	    }
	    CachedXHR.prototype.get = function (url) {
	        if (this._cache.hasOwnProperty(url)) {
	            return promise_1.PromiseWrapper.resolve(this._cache[url]);
	        }
	        else {
	            return promise_1.PromiseWrapper.reject('CachedXHR: Did not find cached template for ' + url, null);
	        }
	    };
	    return CachedXHR;
	}(compiler_1.XHR));
	exports.CachedXHR = CachedXHR;
	//# sourceMappingURL=xhr_cache.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var base_wrapped_exception_1 = __webpack_require__(117);
	var exception_handler_1 = __webpack_require__(118);
	var exception_handler_2 = __webpack_require__(118);
	exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
	/**
	 * @stable
	 */
	var BaseException = (function (_super) {
	    __extends(BaseException, _super);
	    function BaseException(message) {
	        if (message === void 0) { message = '--'; }
	        _super.call(this, message);
	        this.message = message;
	        this.stack = (new Error(message)).stack;
	    }
	    BaseException.prototype.toString = function () { return this.message; };
	    return BaseException;
	}(Error));
	exports.BaseException = BaseException;
	/**
	 * Wraps an exception and provides additional context or information.
	 * @stable
	 */
	var WrappedException = (function (_super) {
	    __extends(WrappedException, _super);
	    function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
	        _super.call(this, _wrapperMessage);
	        this._wrapperMessage = _wrapperMessage;
	        this._originalException = _originalException;
	        this._originalStack = _originalStack;
	        this._context = _context;
	        this._wrapperStack = (new Error(_wrapperMessage)).stack;
	    }
	    Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
	        get: function () { return this._wrapperMessage; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "wrapperStack", {
	        get: function () { return this._wrapperStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalException", {
	        get: function () { return this._originalException; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalStack", {
	        get: function () { return this._originalStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "context", {
	        get: function () { return this._context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "message", {
	        get: function () { return exception_handler_1.ExceptionHandler.exceptionToString(this); },
	        enumerable: true,
	        configurable: true
	    });
	    WrappedException.prototype.toString = function () { return this.message; };
	    return WrappedException;
	}(base_wrapped_exception_1.BaseWrappedException));
	exports.WrappedException = WrappedException;
	function makeTypeError(message) {
	    return new TypeError(message);
	}
	exports.makeTypeError = makeTypeError;
	function unimplemented() {
	    throw new BaseException('unimplemented');
	}
	exports.unimplemented = unimplemented;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 117 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * A base class for the WrappedException that can be used to identify
	 * a WrappedException from ExceptionHandler without adding circular
	 * dependency.
	 */
	var BaseWrappedException = (function (_super) {
	    __extends(BaseWrappedException, _super);
	    function BaseWrappedException(message) {
	        _super.call(this, message);
	    }
	    Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
	        get: function () { return ''; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "originalException", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "context", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseWrappedException.prototype, "message", {
	        get: function () { return ''; },
	        enumerable: true,
	        configurable: true
	    });
	    return BaseWrappedException;
	}(Error));
	exports.BaseWrappedException = BaseWrappedException;
	//# sourceMappingURL=base_wrapped_exception.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var base_wrapped_exception_1 = __webpack_require__(117);
	var collection_1 = __webpack_require__(119);
	var lang_1 = __webpack_require__(113);
	var _ArrayLogger = (function () {
	    function _ArrayLogger() {
	        this.res = [];
	    }
	    _ArrayLogger.prototype.log = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logError = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroup = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroupEnd = function () { };
	    ;
	    return _ArrayLogger;
	}());
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
	 * intercept error handling,
	 * write a custom exception handler that replaces this default as appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```javascript
	 *
	 * class MyExceptionHandler implements ExceptionHandler {
	 *   call(error, stackTrace = null, reason = null) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * bootstrap(MyApp, {provide: ExceptionHandler, useClass: MyExceptionHandler}])
	 *
	 * ```
	 * @stable
	 */
	var ExceptionHandler = (function () {
	    function ExceptionHandler(_logger, _rethrowException) {
	        if (_rethrowException === void 0) { _rethrowException = true; }
	        this._logger = _logger;
	        this._rethrowException = _rethrowException;
	    }
	    ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var l = new _ArrayLogger();
	        var e = new ExceptionHandler(l, false);
	        e.call(exception, stackTrace, reason);
	        return l.res.join('\n');
	    };
	    ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var originalException = this._findOriginalException(exception);
	        var originalStack = this._findOriginalStack(exception);
	        var context = this._findContext(exception);
	        this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
	        if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
	            this._logger.logError('STACKTRACE:');
	            this._logger.logError(this._longStackTrace(stackTrace));
	        }
	        if (lang_1.isPresent(reason)) {
	            this._logger.logError("REASON: " + reason);
	        }
	        if (lang_1.isPresent(originalException)) {
	            this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
	        }
	        if (lang_1.isPresent(originalStack)) {
	            this._logger.logError('ORIGINAL STACKTRACE:');
	            this._logger.logError(this._longStackTrace(originalStack));
	        }
	        if (lang_1.isPresent(context)) {
	            this._logger.logError('ERROR CONTEXT:');
	            this._logger.logError(context);
	        }
	        this._logger.logGroupEnd();
	        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	        // when an exception happens. If we do not rethrow, bootstrap will always succeed.
	        if (this._rethrowException)
	            throw exception;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._extractMessage = function (exception) {
	        return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage :
	            exception.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
	        return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') :
	            stackTrace.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findContext = function (exception) {
	        try {
	            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
	                return null;
	            return lang_1.isPresent(exception.context) ? exception.context :
	                this._findContext(exception.originalException);
	        }
	        catch (e) {
	            // exception.context can throw an exception. if it happens, we ignore the context.
	            return null;
	        }
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalException = function (exception) {
	        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
	            return null;
	        var e = exception.originalException;
	        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	        }
	        return e;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalStack = function (exception) {
	        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
	            return null;
	        var e = exception;
	        var stack = exception.originalStack;
	        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	            if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
	                stack = e.originalStack;
	            }
	        }
	        return stack;
	    };
	    return ExceptionHandler;
	}());
	exports.ExceptionHandler = ExceptionHandler;
	//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lang_1 = __webpack_require__(113);
	exports.Map = lang_1.global.Map;
	exports.Set = lang_1.global.Set;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Map constructor.  We work around that by manually adding the items.
	var createMapFromPairs = (function () {
	    try {
	        if (new exports.Map([[1, 2]]).size === 1) {
	            return function createMapFromPairs(pairs) { return new exports.Map(pairs); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromPairs(pairs) {
	        var map = new exports.Map();
	        for (var i = 0; i < pairs.length; i++) {
	            var pair = pairs[i];
	            map.set(pair[0], pair[1]);
	        }
	        return map;
	    };
	})();
	var createMapFromMap = (function () {
	    try {
	        if (new exports.Map(new exports.Map())) {
	            return function createMapFromMap(m) { return new exports.Map(m); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromMap(m) {
	        var map = new exports.Map();
	        m.forEach(function (v, k) { map.set(k, v); });
	        return map;
	    };
	})();
	var _clearValues = (function () {
	    if ((new exports.Map()).keys().next) {
	        return function _clearValues(m) {
	            var keyIterator = m.keys();
	            var k;
	            while (!((k = keyIterator.next()).done)) {
	                m.set(k.value, null);
	            }
	        };
	    }
	    else {
	        return function _clearValuesWithForeEach(m) {
	            m.forEach(function (v, k) { m.set(k, null); });
	        };
	    }
	})();
	// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	// TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	var _arrayFromMap = (function () {
	    try {
	        if ((new exports.Map()).values().next) {
	            return function createArrayFromMap(m, getValues) {
	                return getValues ? Array.from(m.values()) : Array.from(m.keys());
	            };
	        }
	    }
	    catch (e) {
	    }
	    return function createArrayFromMapWithForeach(m, getValues) {
	        var res = ListWrapper.createFixedSize(m.size), i = 0;
	        m.forEach(function (v, k) {
	            res[i] = getValues ? v : k;
	            i++;
	        });
	        return res;
	    };
	})();
	var MapWrapper = (function () {
	    function MapWrapper() {
	    }
	    MapWrapper.clone = function (m) { return createMapFromMap(m); };
	    MapWrapper.createFromStringMap = function (stringMap) {
	        var result = new exports.Map();
	        for (var prop in stringMap) {
	            result.set(prop, stringMap[prop]);
	        }
	        return result;
	    };
	    MapWrapper.toStringMap = function (m) {
	        var r = {};
	        m.forEach(function (v, k) { return r[k] = v; });
	        return r;
	    };
	    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	    MapWrapper.clearValues = function (m) { _clearValues(m); };
	    MapWrapper.iterable = function (m) { return m; };
	    MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
	    MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
	    return MapWrapper;
	}());
	exports.MapWrapper = MapWrapper;
	/**
	 * Wraps Javascript Objects
	 */
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {
	    }
	    StringMapWrapper.create = function () {
	        // Note: We are not using Object.create(null) here due to
	        // performance!
	        // http://jsperf.com/ng2-object-create-null
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) {
	        return map.hasOwnProperty(key);
	    };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	    StringMapWrapper.keys = function (map) { return Object.keys(map); };
	    StringMapWrapper.values = function (map) {
	        return Object.keys(map).reduce(function (r, a) {
	            r.push(map[a]);
	            return r;
	        }, []);
	    };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper.delete = function (map, key) { delete map[key]; };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	}());
	exports.StringMapWrapper = StringMapWrapper;
	var ListWrapper = (function () {
	    function ListWrapper() {
	    }
	    // JS has no way to express a statically fixed size list, but dart does so we
	    // keep both methods.
	    ListWrapper.createFixedSize = function (size) { return new Array(size); };
	    ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	    ListWrapper.clone = function (array) { return array.slice(0); };
	    ListWrapper.forEachWithIndex = function (array, fn) {
	        for (var i = 0; i < array.length; i++) {
	            fn(array[i], i);
	        }
	    };
	    ListWrapper.first = function (array) {
	        if (!array)
	            return null;
	        return array[0];
	    };
	    ListWrapper.last = function (array) {
	        if (!array || array.length == 0)
	            return null;
	        return array[array.length - 1];
	    };
	    ListWrapper.indexOf = function (array, value, startIndex) {
	        if (startIndex === void 0) { startIndex = 0; }
	        return array.indexOf(value, startIndex);
	    };
	    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	    ListWrapper.reversed = function (array) {
	        var a = ListWrapper.clone(array);
	        return a.reverse();
	    };
	    ListWrapper.concat = function (a, b) { return a.concat(b); };
	    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	    ListWrapper.removeAt = function (list, index) {
	        var res = list[index];
	        list.splice(index, 1);
	        return res;
	    };
	    ListWrapper.removeAll = function (list, items) {
	        for (var i = 0; i < items.length; ++i) {
	            var index = list.indexOf(items[i]);
	            list.splice(index, 1);
	        }
	    };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    ListWrapper.clear = function (list) { list.length = 0; };
	    ListWrapper.isEmpty = function (list) { return list.length == 0; };
	    ListWrapper.fill = function (list, value, start, end) {
	        if (start === void 0) { start = 0; }
	        if (end === void 0) { end = null; }
	        list.fill(value, start, end === null ? list.length : end);
	    };
	    ListWrapper.equals = function (a, b) {
	        if (a.length != b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i] !== b[i])
	                return false;
	        }
	        return true;
	    };
	    ListWrapper.slice = function (l, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return l.slice(from, to === null ? undefined : to);
	    };
	    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	    ListWrapper.sort = function (l, compareFn) {
	        if (lang_1.isPresent(compareFn)) {
	            l.sort(compareFn);
	        }
	        else {
	            l.sort();
	        }
	    };
	    ListWrapper.toString = function (l) { return l.toString(); };
	    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	    ListWrapper.maximum = function (list, predicate) {
	        if (list.length == 0) {
	            return null;
	        }
	        var solution = null;
	        var maxValue = -Infinity;
	        for (var index = 0; index < list.length; index++) {
	            var candidate = list[index];
	            if (lang_1.isBlank(candidate)) {
	                continue;
	            }
	            var candidateValue = predicate(candidate);
	            if (candidateValue > maxValue) {
	                solution = candidate;
	                maxValue = candidateValue;
	            }
	        }
	        return solution;
	    };
	    ListWrapper.flatten = function (list) {
	        var target = [];
	        _flattenArray(list, target);
	        return target;
	    };
	    ListWrapper.addAll = function (list, source) {
	        for (var i = 0; i < source.length; i++) {
	            list.push(source[i]);
	        }
	    };
	    return ListWrapper;
	}());
	exports.ListWrapper = ListWrapper;
	function _flattenArray(source, target) {
	    if (lang_1.isPresent(source)) {
	        for (var i = 0; i < source.length; i++) {
	            var item = source[i];
	            if (lang_1.isArray(item)) {
	                _flattenArray(item, target);
	            }
	            else {
	                target.push(item);
	            }
	        }
	    }
	    return target;
	}
	function isListLikeIterable(obj) {
	    if (!lang_1.isJsObject(obj))
	        return false;
	    return lang_1.isArray(obj) ||
	        (!(obj instanceof exports.Map) &&
	            lang_1.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	}
	exports.isListLikeIterable = isListLikeIterable;
	function areIterablesEqual(a, b, comparator) {
	    var iterator1 = a[lang_1.getSymbolIterator()]();
	    var iterator2 = b[lang_1.getSymbolIterator()]();
	    while (true) {
	        var item1 = iterator1.next();
	        var item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	exports.areIterablesEqual = areIterablesEqual;
	function iterateListLike(obj, fn) {
	    if (lang_1.isArray(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[lang_1.getSymbolIterator()]();
	        var item;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	exports.iterateListLike = iterateListLike;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Set constructor.  We work around that by manually adding the items.
	var createSetFromList = (function () {
	    var test = new exports.Set([1, 2, 3]);
	    if (test.size === 3) {
	        return function createSetFromList(lst) { return new exports.Set(lst); };
	    }
	    else {
	        return function createSetAndPopulateFromList(lst) {
	            var res = new exports.Set(lst);
	            if (res.size !== lst.length) {
	                for (var i = 0; i < lst.length; i++) {
	                    res.add(lst[i]);
	                }
	            }
	            return res;
	        };
	    }
	})();
	var SetWrapper = (function () {
	    function SetWrapper() {
	    }
	    SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
	    SetWrapper.has = function (s, key) { return s.has(key); };
	    SetWrapper.delete = function (m, k) { m.delete(k); };
	    return SetWrapper;
	}());
	exports.SetWrapper = SetWrapper;
	//# sourceMappingURL=collection.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var compiler_1 = __webpack_require__(5);
	var lang_1 = __webpack_require__(113);
	var promise_1 = __webpack_require__(114);
	var XHRImpl = (function (_super) {
	    __extends(XHRImpl, _super);
	    function XHRImpl() {
	        _super.apply(this, arguments);
	    }
	    XHRImpl.prototype.get = function (url) {
	        var completer = promise_1.PromiseWrapper.completer();
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	            // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	            var response = lang_1.isPresent(xhr.response) ? xhr.response : xhr.responseText;
	            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	            var status = xhr.status === 1223 ? 204 : xhr.status;
	            // fix status code when it is 0 (0 status is undocumented).
	            // Occurs when accessing file resources or on Android 4.1 stock browser
	            // while retrieving files from application cache.
	            if (status === 0) {
	                status = response ? 200 : 0;
	            }
	            if (200 <= status && status <= 300) {
	                completer.resolve(response);
	            }
	            else {
	                completer.reject("Failed to load " + url, null);
	            }
	        };
	        xhr.onerror = function () { completer.reject("Failed to load " + url, null); };
	        xhr.send();
	        return completer.promise;
	    };
	    return XHRImpl;
	}(compiler_1.XHR));
	exports.XHRImpl = XHRImpl;
	//# sourceMappingURL=xhr_impl.js.map

/***/ },
/* 121 */
/***/ function(module, exports) {

	module.exports = require("angular2")["http"];

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var platform_browser_1 = __webpack_require__(110);
	var click_block_1 = __webpack_require__(123);
	var config_1 = __webpack_require__(125);
	var platform_1 = __webpack_require__(126);
	/**
	 * Ionic App utility service.
	 */
	var App = (function () {
	    function App(_config, _clickBlock, _platform) {
	        this._config = _config;
	        this._clickBlock = _clickBlock;
	        this._platform = _platform;
	        this._disTime = 0;
	        this._scrollTime = 0;
	        this._title = '';
	        this._titleSrv = new platform_browser_1.Title();
	        this._rootNav = null;
	        // listen for hardware back button events
	        // register this back button action with a default priority
	        _platform.registerBackButtonAction(this.navPop.bind(this));
	    }
	    /**
	     * Sets the document title.
	     * @param {string} val  Value to set the document title to.
	     */
	    App.prototype.setTitle = function (val) {
	        if (val !== this._title) {
	            this._title = val;
	            this._titleSrv.setTitle(val);
	        }
	    };
	    /**
	     * @private
	     * Sets if the app is currently enabled or not, meaning if it's
	     * available to accept new user commands. For example, this is set to `false`
	     * while views transition, a modal slides up, an action-sheet
	     * slides up, etc. After the transition completes it is set back to `true`.
	     * @param {boolean} isEnabled
	     * @param {number} duration  When `isEnabled` is set to `false`, this argument
	     * is used to set the maximum number of milliseconds that app will wait until
	     * it will automatically enable the app again. It's basically a fallback incase
	     * something goes wrong during a transition and the app wasn't re-enabled correctly.
	     */
	    App.prototype.setEnabled = function (isEnabled, duration) {
	        if (duration === void 0) { duration = 700; }
	        this._disTime = (isEnabled ? 0 : Date.now() + duration);
	        var CLICK_BLOCK_BUFFER_IN_MILLIS = 64;
	        if (this._clickBlock) {
	            if (isEnabled || duration <= 32) {
	                // disable the click block if it's enabled, or the duration is tiny
	                this._clickBlock.show(false, 0);
	            }
	            else {
	                // show the click block for duration + some number
	                this._clickBlock.show(true, duration + CLICK_BLOCK_BUFFER_IN_MILLIS);
	            }
	        }
	    };
	    /**
	     * @private
	     * Boolean if the app is actively enabled or not.
	     * @return {boolean}
	     */
	    App.prototype.isEnabled = function () {
	        return (this._disTime < Date.now());
	    };
	    /**
	     * @private
	     */
	    App.prototype.setScrolling = function () {
	        this._scrollTime = Date.now();
	    };
	    /**
	     * Boolean if the app is actively scrolling or not.
	     * @return {boolean}
	     */
	    App.prototype.isScrolling = function () {
	        return (this._scrollTime + 64 > Date.now());
	    };
	    /**
	     * @private
	     */
	    App.prototype.getActiveNav = function () {
	        var nav = this._rootNav || null;
	        var activeChildNav;
	        while (nav) {
	            activeChildNav = nav.getActiveChildNav();
	            if (!activeChildNav) {
	                break;
	            }
	            nav = activeChildNav;
	        }
	        return nav;
	    };
	    /**
	     * @private
	     */
	    App.prototype.getRootNav = function () {
	        return this._rootNav;
	    };
	    /**
	     * @private
	     */
	    App.prototype.setRootNav = function (nav) {
	        this._rootNav = nav;
	    };
	    /**
	     * @private
	     */
	    App.prototype.navPop = function () {
	        // function used to climb up all parent nav controllers
	        function navPop(nav) {
	            if (nav) {
	                if (nav.length && nav.length() > 1) {
	                    // this nav controller has more than one view
	                    // pop the current view on this nav and we're done here
	                    void 0;
	                    return nav.pop();
	                }
	                else if (nav.previousTab) {
	                    // FYI, using "nav instanceof Tabs" throws a Promise runtime error for whatever reason, idk
	                    // this is a Tabs container
	                    // see if there is a valid previous tab to go to
	                    var prevTab = nav.previousTab(true);
	                    if (prevTab) {
	                        void 0;
	                        nav.select(prevTab);
	                        return Promise.resolve();
	                    }
	                }
	                // try again using the parent nav (if there is one)
	                return navPop(nav.parent);
	            }
	            // nerp, never found nav that could pop off a view
	            return null;
	        }
	        // app must be enabled and there must be a
	        // root nav controller for go back to work
	        if (this._rootNav && this.isEnabled()) {
	            // first check if the root navigation has any overlays
	            // opened in it's portal, like alert/actionsheet/popup
	            var portal = this._rootNav.getPortal && this._rootNav.getPortal();
	            if (portal && portal.length() > 0) {
	                // there is an overlay view in the portal
	                // let's pop this one off to go back
	                void 0;
	                return portal.pop();
	            }
	            // next get the active nav, check itself and climb up all
	            // of its parent navs until it finds a nav that can pop
	            var navPromise = navPop(this.getActiveNav());
	            if (navPromise === null) {
	                // no views to go back to
	                // let's exit the app
	                if (this._config.getBoolean('navExitApp', true)) {
	                    void 0;
	                    this._platform.exitApp();
	                }
	            }
	            else {
	                return navPromise;
	            }
	        }
	        return Promise.resolve();
	    };
	    /**
	     * @private
	     */
	    App.prototype.getRegisteredComponent = function (cls) {
	        // deprecated warning: added 2016-04-28, beta7
	        void 0;
	    };
	    /**
	     * @private
	     */
	    App.prototype.getComponent = function (id) {
	        // deprecated warning: added 2016-04-28, beta7
	        void 0;
	    };
	    /**
	     * Set the global app injector that contains references to all of the instantiated providers
	     * @param injector
	     */
	    App.prototype.setAppInjector = function (injector) {
	        this._appInjector = injector;
	    };
	    /**
	     * Get an instance of the global app injector that contains references to all of the instantiated providers
	     * @returns {Injector}
	     */
	    App.prototype.getAppInjector = function () {
	        return this._appInjector;
	    };
	    App = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [config_1.Config, click_block_1.ClickBlock, platform_1.Platform])
	    ], App);
	    return App;
	}());
	exports.App = App;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dom_1 = __webpack_require__(124);
	var CSS_CLICK_BLOCK = 'click-block-active';
	var DEFAULT_EXPIRE = 330;
	var cbEle;
	var fallbackTimerId;
	var isShowing = false;
	/**
	 * @private
	 */
	var ClickBlock = (function () {
	    function ClickBlock() {
	        this._enabled = false;
	    }
	    ClickBlock.prototype.enable = function () {
	        cbEle = document.createElement('click-block');
	        document.body.appendChild(cbEle);
	        cbEle.addEventListener('touchmove', function (ev) {
	            ev.preventDefault();
	            ev.stopPropagation();
	        });
	        this._enabled = true;
	    };
	    ClickBlock.prototype.show = function (shouldShow, expire) {
	        if (this._enabled) {
	            if (shouldShow) {
	                show(expire);
	            }
	            else {
	                hide();
	            }
	        }
	    };
	    return ClickBlock;
	}());
	exports.ClickBlock = ClickBlock;
	function show(expire) {
	    clearTimeout(fallbackTimerId);
	    fallbackTimerId = dom_1.nativeTimeout(hide, expire || DEFAULT_EXPIRE);
	    if (!isShowing) {
	        cbEle.classList.add(CSS_CLICK_BLOCK);
	        isShowing = true;
	    }
	}
	function hide() {
	    clearTimeout(fallbackTimerId);
	    if (isShowing) {
	        cbEle.classList.remove(CSS_CLICK_BLOCK);
	        isShowing = false;
	    }
	}


/***/ },
/* 124 */
/***/ function(module, exports) {

	"use strict";
	// RequestAnimationFrame Polyfill (Android 4.3 and below)
	/*! @author Paul Irish */
	/*! @source https://gist.github.com/paulirish/1579671 */
	(function () {
	    var rafLastTime = 0;
	    var win = window;
	    if (!win.requestAnimationFrame) {
	        win.requestAnimationFrame = function (callback) {
	            var currTime = Date.now();
	            var timeToCall = Math.max(0, 16 - (currTime - rafLastTime));
	            var id = window.setTimeout(function () {
	                callback(currTime + timeToCall);
	            }, timeToCall);
	            rafLastTime = currTime + timeToCall;
	            return id;
	        };
	    }
	    if (!win.cancelAnimationFrame) {
	        win.cancelAnimationFrame = function (id) { clearTimeout(id); };
	    }
	})();
	// use native raf rather than the zone wrapped one
	var originalRaf = (window[window['Zone']['__symbol__']('requestAnimationFrame')] || window[window['Zone']['__symbol__']('webkitRequestAnimationFrame')]);
	// if the originalRaf from the Zone symbol is not available, we need to provide the polyfilled version
	exports.nativeRaf = originalRaf !== undefined ? originalRaf['bind'](window) : window.requestAnimationFrame.bind(window);
	// zone wrapped raf
	exports.raf = window.requestAnimationFrame.bind(window);
	exports.cancelRaf = window.cancelAnimationFrame.bind(window);
	exports.nativeTimeout = window[window['Zone']['__symbol__']('setTimeout')]['bind'](window);
	exports.clearNativeTimeout = window[window['Zone']['__symbol__']('clearTimeout')]['bind'](window);
	function rafFrames(framesToWait, callback) {
	    framesToWait = Math.ceil(framesToWait);
	    if (framesToWait < 2) {
	        exports.nativeRaf(callback);
	    }
	    else {
	        exports.nativeTimeout(function () {
	            exports.nativeRaf(callback);
	        }, (framesToWait - 1) * 16.6667);
	    }
	}
	exports.rafFrames = rafFrames;
	exports.CSS = {};
	(function () {
	    // transform
	    var i;
	    var keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform',
	        '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];
	    for (i = 0; i < keys.length; i++) {
	        if (document.documentElement.style[keys[i]] !== undefined) {
	            exports.CSS.transform = keys[i];
	            break;
	        }
	    }
	    // transition
	    keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
	    for (i = 0; i < keys.length; i++) {
	        if (document.documentElement.style[keys[i]] !== undefined) {
	            exports.CSS.transition = keys[i];
	            break;
	        }
	    }
	    // The only prefix we care about is webkit for transitions.
	    var isWebkit = exports.CSS.transition.indexOf('webkit') > -1;
	    // transition duration
	    exports.CSS.transitionDuration = (isWebkit ? '-webkit-' : '') + 'transition-duration';
	    // transition timing function
	    exports.CSS.transitionTimingFn = (isWebkit ? '-webkit-' : '') + 'transition-timing-function';
	    // transition delay
	    exports.CSS.transitionDelay = (isWebkit ? '-webkit-' : '') + 'transition-delay';
	    // To be sure transitionend works everywhere, include *both* the webkit and non-webkit events
	    exports.CSS.transitionEnd = (isWebkit ? 'webkitTransitionEnd ' : '') + 'transitionend';
	    // transform origin
	    exports.CSS.transformOrigin = (isWebkit ? '-webkit-' : '') + 'transform-origin';
	})();
	function transitionEnd(el, callback) {
	    if (el) {
	        exports.CSS.transitionEnd.split(' ').forEach(function (eventName) {
	            el.addEventListener(eventName, onEvent);
	        });
	        return unregister;
	    }
	    function unregister() {
	        exports.CSS.transitionEnd.split(' ').forEach(function (eventName) {
	            el.removeEventListener(eventName, onEvent);
	        });
	    }
	    function onEvent(ev) {
	        if (el === ev.target) {
	            unregister();
	            callback(ev);
	        }
	    }
	}
	exports.transitionEnd = transitionEnd;
	function ready(callback) {
	    var promise = null;
	    if (!callback) {
	        // a callback wasn't provided, so let's return a promise instead
	        promise = new Promise(function (resolve) { callback = resolve; });
	    }
	    if (document.readyState === 'complete' || document.readyState === 'interactive') {
	        callback();
	    }
	    else {
	        document.addEventListener('DOMContentLoaded', completed, false);
	        window.addEventListener('load', completed, false);
	    }
	    return promise;
	    function completed() {
	        document.removeEventListener('DOMContentLoaded', completed, false);
	        window.removeEventListener('load', completed, false);
	        callback();
	    }
	}
	exports.ready = ready;
	function windowLoad(callback) {
	    var promise = null;
	    if (!callback) {
	        // a callback wasn't provided, so let's return a promise instead
	        promise = new Promise(function (resolve) { callback = resolve; });
	    }
	    if (document.readyState === 'complete') {
	        callback();
	    }
	    else {
	        window.addEventListener('load', completed, false);
	    }
	    return promise;
	    function completed() {
	        window.removeEventListener('load', completed, false);
	        callback();
	    }
	}
	exports.windowLoad = windowLoad;
	function pointerCoord(ev) {
	    // get coordinates for either a mouse click
	    // or a touch depending on the given event
	    var c = { x: 0, y: 0 };
	    if (ev) {
	        var touches = ev.touches && ev.touches.length ? ev.touches : [ev];
	        var e = (ev.changedTouches && ev.changedTouches[0]) || touches[0];
	        if (e) {
	            c.x = e.clientX || e.pageX || 0;
	            c.y = e.clientY || e.pageY || 0;
	        }
	    }
	    return c;
	}
	exports.pointerCoord = pointerCoord;
	function hasPointerMoved(threshold, startCoord, endCoord) {
	    return startCoord && endCoord &&
	        (Math.abs(startCoord.x - endCoord.x) > threshold || Math.abs(startCoord.y - endCoord.y) > threshold);
	}
	exports.hasPointerMoved = hasPointerMoved;
	function isActive(ele) {
	    return !!(ele && (document.activeElement === ele));
	}
	exports.isActive = isActive;
	function hasFocus(ele) {
	    return isActive(ele) && (ele.parentElement.querySelector(':focus') === ele);
	}
	exports.hasFocus = hasFocus;
	function isTextInput(ele) {
	    return !!ele &&
	        (ele.tagName === 'TEXTAREA' ||
	            ele.contentEditable === 'true' ||
	            (ele.tagName === 'INPUT' && !(/^(radio|checkbox|range|file|submit|reset|color|image|button)$/i).test(ele.type)));
	}
	exports.isTextInput = isTextInput;
	function hasFocusedTextInput() {
	    var ele = document.activeElement;
	    if (isTextInput(ele)) {
	        return (ele.parentElement.querySelector(':focus') === ele);
	    }
	    return false;
	}
	exports.hasFocusedTextInput = hasFocusedTextInput;
	var skipInputAttrsReg = /^(value|checked|disabled|type|class|style|id|autofocus|autocomplete|autocorrect)$/i;
	function copyInputAttributes(srcElement, destElement) {
	    // copy attributes from one element to another
	    // however, skip over a few of them as they're already
	    // handled in the angular world
	    var attrs = srcElement.attributes;
	    for (var i = 0; i < attrs.length; i++) {
	        var attr = attrs[i];
	        if (!skipInputAttrsReg.test(attr.name)) {
	            destElement.setAttribute(attr.name, attr.value);
	        }
	    }
	}
	exports.copyInputAttributes = copyInputAttributes;
	var matchesFn;
	var matchesMethods = ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector'];
	matchesMethods.some(function (fn) {
	    if (typeof document.documentElement[fn] === 'function') {
	        matchesFn = fn;
	        return true;
	    }
	});
	function closest(ele, selector, checkSelf) {
	    if (ele && matchesFn) {
	        // traverse parents
	        ele = (checkSelf ? ele : ele.parentElement);
	        while (ele !== null) {
	            if (ele[matchesFn](selector)) {
	                return ele;
	            }
	            ele = ele.parentElement;
	        }
	    }
	    return null;
	}
	exports.closest = closest;
	/**
	 * Get the element offsetWidth and offsetHeight. Values are cached
	 * to reduce DOM reads. Cache is cleared on a window resize.
	 */
	function getDimensions(ele, id) {
	    var dimensions = dimensionCache[id];
	    if (!dimensions) {
	        // make sure we got good values before caching
	        if (ele.offsetWidth && ele.offsetHeight) {
	            dimensions = dimensionCache[id] = {
	                width: ele.offsetWidth,
	                height: ele.offsetHeight,
	                left: ele.offsetLeft,
	                top: ele.offsetTop
	            };
	        }
	        else {
	            // do not cache bad values
	            return { width: 0, height: 0, left: 0, top: 0 };
	        }
	    }
	    return dimensions;
	}
	exports.getDimensions = getDimensions;
	function clearDimensions(id) {
	    delete dimensionCache[id];
	}
	exports.clearDimensions = clearDimensions;
	function windowDimensions() {
	    if (!dimensionCache.win) {
	        // make sure we got good values before caching
	        if (window.innerWidth && window.innerHeight) {
	            dimensionCache.win = {
	                width: window.innerWidth,
	                height: window.innerHeight
	            };
	        }
	        else {
	            // do not cache bad values
	            return { width: 0, height: 0 };
	        }
	    }
	    return dimensionCache.win;
	}
	exports.windowDimensions = windowDimensions;
	function flushDimensionCache() {
	    dimensionCache = {};
	}
	exports.flushDimensionCache = flushDimensionCache;
	var dimensionCache = {};


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @ngdoc service
	* @name Config
	* @module ionic
	* @description
	* Config allows you to set the modes of your components
	*/
	"use strict";
	var platform_1 = __webpack_require__(126);
	var util_1 = __webpack_require__(127);
	/**
	 * @name Config
	 * @demo /docs/v2/demos/config/
	 * @description
	 * The Config lets you configure your entire app or specific platforms.
	 * You can set the tab placement, icon mode, animations, and more here.
	 *
	 * ```ts
	 * import {ionicBootstrap} from 'ionic-angular';
	 *
	 * ionicBootstrap(AppRoot, customProviders, {
	 *   backButtonText: 'Go Back',
	 *   iconMode: 'ios',
	 *   modalEnter: 'modal-slide-in',
	 *   modalLeave: 'modal-slide-out',
	 *   tabbarPlacement: 'bottom',
	 *   pageTransition: 'ios',
	 * });
	 * ```
	 *
	 *
	 * Config can be overwritten at multiple levels allowing for more granular configuration.
	 * Below is an example where an app can override any setting we want based on a platform.
	 *
	 * ```ts
	 * import {ionicBootstrap} from 'ionic-angular';
	 *
	 * ionicBootstrap(AppRoot, customProviders, {
	 *   tabbarPlacement: 'bottom',
	 *   platforms: {
	 *   ios: {
	 *     tabbarPlacement: 'top',
	 *   }
	 * });
	 * ```
	 *
	 * We could also configure these values at a component level. Take `tabbarPlacement`,
	 * we can configure this as a property on our `ion-tabs`.
	 *
	 * ```html
	 * <ion-tabs tabbarPlacement="top">
	 *   <ion-tab tabTitle="Dash" tabIcon="pulse" [root]="tabRoot"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * The last way we could configure is through URL query strings. This is useful for testing
	 * while in the browser. Simply add `?ionic<PROPERTYNAME>=<value>` to the url.
	 *
	 * ```bash
	 * http://localhost:8100/?ionicTabbarPlacement=bottom
	 * ```
	 *
	 * Any value can be added to config, and looked up at a later in any component.
	 *
	 * ```js
	 * config.set('ios', 'favoriteColor', 'green');
	 *
	 * // from any page in your app:
	 * config.get('favoriteColor'); // 'green' when iOS
	 * ```
	 *
	 *
	 * A config value can come from anywhere and be anything, but there are default
	 * values for each mode. The [theming](../../../theming/platform-specific-styles/)
	 * documentation has a chart of the default mode configuration. The following
	 * chart displays each property with a description of what it controls.
	 *
	 *
	 * | Config Property          | Type                | Details                                                                                                                                          |
	 * |--------------------------|---------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
	 * | `activator`              | `string`            | Used for buttons, changes the effect of pressing on a button. Available options: `"ripple"`, `"highlight"`.                                      |
	 * | `actionSheetEnter`       | `string`            | The name of the transition to use while an action sheet is presented.                                                                            |
	 * | `actionSheetLeave`       | `string`            | The name of the transition to use while an action sheet is dismissed.                                                                            |
	 * | `alertEnter`             | `string`            | The name of the transition to use while an alert is presented.                                                                                   |
	 * | `alertLeave`             | `string`            | The name of the transition to use while an alert is dismissed.                                                                                   |
	 * | `backButtonText`         | `string`            | The text to display by the back button icon in the navbar.                                                                                       |
	 * | `backButtonIcon`         | `string`            | The icon to use as the back button icon.                                                                                                         |
	 * | `iconMode`               | `string`            | The mode to use for all icons throughout the application. Available options: `"ios"`, `"md"`                                                     |
	 * | `loadingEnter`           | `string`            | The name of the transition to use while a loading indicator is presented.                                                                        |
	 * | `loadingLeave`           | `string`            | The name of the transition to use while a loading indicator is dismissed.                                                                        |
	 * | `menuType`               | `string`            | Type of menu to display. Available options: `"overlay"`, `"reveal"`, `"push"`.                                                                   |
	 * | `modalEnter`             | `string`            | The name of the transition to use while a modal is presented.                                                                                    |
	 * | `modalLeave`             | `string`            | The name of the transition to use while a modal is dismiss.                                                                                      |
	 * | `pageTransition`         | `string`            | The name of the transition to use while changing pages.                                                                                          |
	 * | `pageTransitionDelay`    | `number`            | The delay in milliseconds before the transition starts while changing pages.                                                                     |
	 * | `pickerEnter`            | `string`            | The name of the transition to use while a picker is presented.                                                                                   |
	 * | `pickerLeave`            | `string`            | The name of the transition to use while a picker is dismissed.                                                                                   |
	 * | `popoverEnter`           | `string`            | The name of the transition to use while a popover is presented.                                                                                  |
	 * | `popoverLeave`           | `string`            | The name of the transition to use while a popover is dismissed.                                                                                  |
	 * | `prodMode`               | `boolean`           | Disable development mode, which turns off assertions and other checks within the framework. One important assertion this disables verifies that a change detection pass does not result in additional changes to any bindings (also known as unidirectional data flow).
	 * | `spinner`                | `string`            | The default spinner to use when a name is not defined.                                                                                           |
	 * | `tabbarHighlight`        | `boolean`           | Whether to show a highlight line under the tab when it is selected.                                                                              |
	 * | `tabbarLayout`           | `string`            | The layout to use for all tabs. Available options: `"icon-top"`, `"icon-left"`, `"icon-right"`, `"icon-bottom"`, `"icon-hide"`, `"title-hide"`.  |
	 * | `tabbarPlacement`        | `string`            | The position of the tabs. Available options: `"top"`, `"bottom"`                                                                                 |
	 * | `tabSubPages`            | `boolean`           | Whether to hide the tabs on child pages or not. If `true` it will not show the tabs on child pages.                                              |
	 * | `toastEnter`             | `string`            | The name of the transition to use while a toast is presented.                                                                                    |
	 * | `toastLeave`             | `string`            | The name of the transition to use while a toast is dismissed.                                                                                    |
	 *
	**/
	var Config = (function () {
	    function Config(config) {
	        this._c = {};
	        this._s = {};
	        this._s = config && util_1.isObject(config) && !util_1.isArray(config) ? config : {};
	    }
	    /**
	     * @name get
	     * @description
	     * Returns a single config value, given a key.
	     *
	     * @param {string} [key] - the key for the config value
	     * @param {any} [fallbackValue] - a fallback value to use when the config
	     * value was not found, or is config value is `null`. Fallback value
	     *  defaults to `null`.
	     */
	    Config.prototype.get = function (key, fallbackValue) {
	        if (fallbackValue === void 0) { fallbackValue = null; }
	        if (!util_1.isDefined(this._c[key])) {
	            if (!util_1.isDefined(key)) {
	                throw 'config key is not defined';
	            }
	            // if the value was already set this will all be skipped
	            // if there was no user config then it'll check each of
	            // the user config's platforms, which already contains
	            // settings from default platform configs
	            var userPlatformValue = undefined;
	            var userDefaultValue = this._s[key];
	            var userPlatformModeValue = undefined;
	            var userDefaultModeValue = undefined;
	            var platformValue = undefined;
	            var platformModeValue = undefined;
	            var configObj = null;
	            if (this.platform) {
	                var queryStringValue = this.platform.query('ionic' + key.toLowerCase());
	                if (util_1.isDefined(queryStringValue)) {
	                    return this._c[key] = (queryStringValue === 'true' ? true : queryStringValue === 'false' ? false : queryStringValue);
	                }
	                // check the platform settings object for this value
	                // loop though each of the active platforms
	                // array of active platforms, which also knows the hierarchy,
	                // with the last one the most important
	                var activePlatformKeys = this.platform.platforms();
	                // loop through all of the active platforms we're on
	                for (var i = 0, l = activePlatformKeys.length; i < l; i++) {
	                    // get user defined platform values
	                    if (this._s.platforms) {
	                        configObj = this._s.platforms[activePlatformKeys[i]];
	                        if (configObj) {
	                            if (util_1.isDefined(configObj[key])) {
	                                userPlatformValue = configObj[key];
	                            }
	                            configObj = Config.getModeConfig(configObj.mode);
	                            if (configObj && util_1.isDefined(configObj[key])) {
	                                userPlatformModeValue = configObj[key];
	                            }
	                        }
	                    }
	                    // get default platform's setting
	                    configObj = platform_1.Platform.get(activePlatformKeys[i]);
	                    if (configObj && configObj.settings) {
	                        if (util_1.isDefined(configObj.settings[key])) {
	                            // found a setting for this platform
	                            platformValue = configObj.settings[key];
	                        }
	                        configObj = Config.getModeConfig(configObj.settings.mode);
	                        if (configObj && util_1.isDefined(configObj[key])) {
	                            // found setting for this platform's mode
	                            platformModeValue = configObj[key];
	                        }
	                    }
	                }
	            }
	            configObj = Config.getModeConfig(this._s.mode);
	            if (configObj && util_1.isDefined(configObj[key])) {
	                userDefaultModeValue = configObj[key];
	            }
	            // cache the value
	            this._c[key] = util_1.isDefined(userPlatformValue) ? userPlatformValue :
	                util_1.isDefined(userDefaultValue) ? userDefaultValue :
	                    util_1.isDefined(userPlatformModeValue) ? userPlatformModeValue :
	                        util_1.isDefined(userDefaultModeValue) ? userDefaultModeValue :
	                            util_1.isDefined(platformValue) ? platformValue :
	                                util_1.isDefined(platformModeValue) ? platformModeValue :
	                                    null;
	        }
	        // return key's value
	        // either it came directly from the user config
	        // or it was from the users platform configs
	        // or it was from the default platform configs
	        // in that order
	        var rtnVal;
	        if (util_1.isFunction(this._c[key])) {
	            rtnVal = this._c[key](this.platform);
	        }
	        else {
	            rtnVal = this._c[key];
	        }
	        return (rtnVal !== null ? rtnVal : fallbackValue);
	    };
	    /**
	     * @name getBoolean
	     * @description
	     * Same as `get()`, however always returns a boolean value. If the
	     * value from `get()` is `null`, then it'll return the `fallbackValue`
	     * which defaults to `false`. Otherwise, `getBoolean()` will return
	     * if the config value is truthy or not. It also returns `true` if
	     * the config value was the string value `"true"`.
	     * @param {string} [key] - the key for the config value
	     * @param {boolean} [fallbackValue] - a fallback value to use when the config
	     * value was `null`. Fallback value defaults to `false`.
	     */
	    Config.prototype.getBoolean = function (key, fallbackValue) {
	        if (fallbackValue === void 0) { fallbackValue = false; }
	        var val = this.get(key);
	        if (val === null) {
	            return fallbackValue;
	        }
	        if (typeof val === 'string') {
	            return val === 'true';
	        }
	        return !!val;
	    };
	    /**
	     * @name getNumber
	     * @description
	     * Same as `get()`, however always returns a number value. Uses `parseFloat()`
	     * on the value received from `get()`. If the result from the parse is `NaN`,
	     * then it will return the value passed to `fallbackValue`. If no fallback
	     * value was provided then it'll default to returning `NaN` when the result
	     * is not a valid number.
	     * @param {string} [key] - the key for the config value
	     * @param {number} [fallbackValue] - a fallback value to use when the config
	     * value turned out to be `NaN`. Fallback value defaults to `NaN`.
	     */
	    Config.prototype.getNumber = function (key, fallbackValue) {
	        if (fallbackValue === void 0) { fallbackValue = NaN; }
	        var val = parseFloat(this.get(key));
	        return isNaN(val) ? fallbackValue : val;
	    };
	    /**
	     * @name set
	     * @description
	     * Sets a single config value.
	     *
	     * @param {string} [platform] - The platform (either 'ios' or 'android') that the config value should apply to. Leaving this blank will apply the config value to all platforms.
	     * @param {string} [key] - The key used to look up the value at a later point in time.
	     * @param {string} [value] - The config value being stored.
	     */
	    Config.prototype.set = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var arg0 = args[0];
	        var arg1 = args[1];
	        switch (args.length) {
	            case 2:
	                // set('key', 'value') = set key/value pair
	                // arg1 = value
	                this._s[arg0] = arg1;
	                delete this._c[arg0]; // clear cache
	                break;
	            case 3:
	                // setting('ios', 'key', 'value') = set key/value pair for platform
	                // arg0 = platform
	                // arg1 = key
	                // arg2 = value
	                this._s.platforms = this._s.platforms || {};
	                this._s.platforms[arg0] = this._s.platforms[arg0] || {};
	                this._s.platforms[arg0][arg1] = args[2];
	                delete this._c[arg1]; // clear cache
	                break;
	        }
	        return this;
	    };
	    /**
	     * @private
	     * @name settings()
	     * @description
	     */
	    Config.prototype.settings = function (arg0, arg1) {
	        switch (arguments.length) {
	            case 0:
	                return this._s;
	            case 1:
	                // settings({...})
	                this._s = arg0;
	                this._c = {}; // clear cache
	                break;
	            case 2:
	                // settings('ios', {...})
	                this._s.platforms = this._s.platforms || {};
	                this._s.platforms[arg0] = arg1;
	                this._c = {}; // clear cache
	                break;
	        }
	        return this;
	    };
	    /**
	     * @private
	     */
	    Config.prototype.setPlatform = function (platform) {
	        this.platform = platform;
	    };
	    /**
	     * @private
	     */
	    Config.setModeConfig = function (mode, config) {
	        modeConfigs[mode] = config;
	    };
	    /**
	     * @private
	     */
	    Config.getModeConfig = function (mode) {
	        return modeConfigs[mode] || null;
	    };
	    return Config;
	}());
	exports.Config = Config;
	var modeConfigs = {};


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var util_1 = __webpack_require__(127);
	var dom_1 = __webpack_require__(124);
	/**
	 * @name Platform
	 * @description
	 * The Platform service can be used to get information about your current device.
	 * You can get all of the platforms associated with the device using the [platforms](#platforms)
	 * method, including whether the app is being viewed from a tablet, if it's
	 * on a mobile device or browser, and the exact platform (iOS, Android, etc).
	 * You can also get the orientation of the device, if it uses right-to-left
	 * language direction, and much much more. With this information you can completely
	 * customize your app to fit any device.
	 *
	 * @usage
	 * ```ts
	 * import {Platform} from 'ionic-angular';
	 *
	 * @Component({...})
	 * export MyPage {
	 *   constructor(platform: Platform) {
	 *     this.platform = platform;
	 *   }
	 * }
	 * ```
	 * @demo /docs/v2/demos/platform/
	 */
	var Platform = (function () {
	    function Platform(platforms) {
	        var _this = this;
	        if (platforms === void 0) { platforms = []; }
	        this._versions = {};
	        this._onResizes = [];
	        this._bbActions = [];
	        // Events meant to be triggered by the engine
	        // **********************************************
	        /**
	         * @private
	         */
	        this.backButton = new core_1.EventEmitter();
	        /**
	         * The pause event emits when the native platform puts the application
	         * into the background, typically when the user switches to a different
	         * application. This event would emit when a Cordova app is put into
	         * the background, however, it would not fire on a standard web browser.
	         */
	        this.pause = new core_1.EventEmitter();
	        /**
	         * The resume event emits when the native platform pulls the application
	         * out from the background. This event would emit when a Cordova app comes
	         * out from the background, however, it would not fire on a standard web browser.
	         */
	        this.resume = new core_1.EventEmitter();
	        this._platforms = platforms;
	        this._readyPromise = new Promise(function (res) { _this._readyResolve = res; });
	        this.backButton.subscribe(function () {
	            // the hardware back button event has been fired
	            void 0;
	            // decide which backbutton action should run
	            _this.runBackButtonAction();
	        });
	    }
	    /**
	     * @private
	     */
	    Platform.prototype.setZone = function (zone) {
	        this.zone = zone;
	    };
	    // Methods
	    // **********************************************
	    /**
	     * @returns {boolean} returns true/false based on platform.
	     * @description
	     * Depending on the platform the user is on, `is(platformName)` will
	     * return `true` or `false`. Note that the same app can return `true`
	     * for more than one platform name. For example, an app running from
	     * an iPad would return `true` for the platform names: `mobile`,
	     * `ios`, `ipad`, and `tablet`. Additionally, if the app was running
	     * from Cordova then `cordova` would be true, and if it was running
	     * from a web browser on the iPad then `mobileweb` would be `true`.
	     *
	     * ```
	     * import {Platform} from 'ionic-angular';
	     *
	     * @Component({...})
	     * export MyPage {
	     *   constructor(platform: Platform) {
	     *     this.platform = platform;
	     *
	     *     if (this.platform.is('ios')) {
	     *       // This will only print when on iOS
	     *       console.log("I'm an iOS device!");
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * | Platform Name   | Description                        |
	     * |-----------------|------------------------------------|
	     * | android         | on a device running Android.       |
	     * | cordova         | on a device running Cordova.       |
	     * | core            | on a desktop device.               |
	     * | ios             | on a device running iOS.           |
	     * | ipad            | on an iPad device.                 |
	     * | iphone          | on an iPhone device.               |
	     * | mobile          | on a mobile device.                |
	     * | mobileweb       | in a browser on a mobile device.   |
	     * | phablet         | on a phablet device.               |
	     * | tablet          | on a tablet device.                |
	     * | windows         | on a device running Windows.       |
	     *
	     * @param {string} platformName
	     */
	    Platform.prototype.is = function (platformName) {
	        return (this._platforms.indexOf(platformName) > -1);
	    };
	    /**
	     * @returns {array} the array of platforms
	     * @description
	     * Depending on what device you are on, `platforms` can return multiple values.
	     * Each possible value is a hierarchy of platforms. For example, on an iPhone,
	     * it would return `mobile`, `ios`, and `iphone`.
	     *
	     * ```
	     * import {Platform} from 'ionic-angular';
	     *
	     * @Component({...})
	     * export MyPage {
	     *   constructor(platform: Platform) {
	     *     this.platform = platform;
	     *
	     *     // This will print an array of the current platforms
	     *     console.log(this.platform.platforms());
	     *   }
	     * }
	     * ```
	     */
	    Platform.prototype.platforms = function () {
	        // get the array of active platforms, which also knows the hierarchy,
	        // with the last one the most important
	        return this._platforms;
	    };
	    /**
	     * Returns an object containing version information about all of the platforms.
	     *
	     * ```
	     * import {Platform} from 'ionic-angular';
	     *
	     * @Component({...})
	     * export MyPage {
	     *   constructor(platform: Platform) {
	     *     this.platform = platform;
	     *
	     *     // This will print an object containing
	     *     // all of the platforms and their versions
	     *     console.log(platform.versions());
	     *   }
	     * }
	     * ```
	     *
	     * @returns {object} An object containing all of the platforms and their versions.
	     */
	    Platform.prototype.versions = function () {
	        // get all the platforms that have a valid parsed version
	        return this._versions;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.version = function () {
	        for (var platformName in this._versions) {
	            if (this._versions[platformName]) {
	                return this._versions[platformName];
	            }
	        }
	        return {};
	    };
	    /**
	     * Returns a promise when the platform is ready and native functionality
	     * can be called. If the app is running from within a web browser, then
	     * the promise will resolve when the DOM is ready. When the app is running
	     * from an application engine such as Cordova, then the promise will
	     * resolve when Cordova triggers the `deviceready` event.
	     *
	     * The resolved value is the `readySource`, which states which platform
	     * ready was used. For example, when Cordova is ready, the resolved ready
	     * source is `cordova`. The default ready source value will be `dom`. The
	     * `readySource` is useful if different logic should run depending on the
	     * platform the app is running from. For example, only Cordova can execute
	     * the status bar plugin, so the web should not run status bar plugin logic.
	     *
	     * ```
	     * import {Component} from '@angular/core';
	     * import {Platform} from 'ionic-angular';
	     *
	     * @Component({...})
	     * export MyApp {
	     *   constructor(platform: Platform) {
	     *     platform.ready().then((readySource) => {
	     *       console.log('Platform ready from', readySource);
	     *       // Platform now ready, execute any required native code
	     *     });
	     *   }
	     * }
	     * ```
	     * @returns {promise}
	     */
	    Platform.prototype.ready = function () {
	        return this._readyPromise;
	    };
	    /**
	     * @private
	     * This should be triggered by the engine when the platform is
	     * ready. If there was no custom prepareReady method from the engine,
	     * such as Cordova or Electron, then it uses the default DOM ready.
	     */
	    Platform.prototype.triggerReady = function (readySource) {
	        var _this = this;
	        this.zone.run(function () {
	            _this._readyResolve(readySource);
	        });
	    };
	    /**
	     * @private
	     * This is the default prepareReady if it's not replaced by an engine,
	     * such as Cordova or Electron. If there was no custom prepareReady
	     * method from an engine then it uses the method below, which triggers
	     * the platform ready on the DOM ready event, and the default resolved
	     * value is `dom`.
	     */
	    Platform.prototype.prepareReady = function () {
	        var _this = this;
	        dom_1.ready(function () {
	            _this.triggerReady('dom');
	        });
	    };
	    /**
	     * Set the app's language direction, which will update the `dir` attribute
	     * on the app's root `<html>` element. We recommend the app's `index.html`
	     * file already has the correct `dir` attribute value set, such as
	     * `<html dir="ltr">` or `<html dir="rtl">`. This method is useful if the
	     * direction needs to be dynamically changed per user/session.
	     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
	     * @param {string} dir  Examples: `rtl`, `ltr`
	     */
	    Platform.prototype.setDir = function (dir, updateDocument) {
	        this._dir = (dir || '').toLowerCase();
	        if (updateDocument !== false) {
	            document.documentElement.setAttribute('dir', dir);
	        }
	    };
	    /**
	     * Returns app's language direction.
	     * We recommend the app's `index.html` file already has the correct `dir`
	     * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
	     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
	     * @returns {string}
	     */
	    Platform.prototype.dir = function () {
	        return this._dir;
	    };
	    /**
	     * Returns if this app is using right-to-left language direction or not.
	     * We recommend the app's `index.html` file already has the correct `dir`
	     * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
	     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
	     * @returns {boolean}
	     */
	    Platform.prototype.isRTL = function () {
	        return (this._dir === 'rtl');
	    };
	    /**
	     * Set the app's language and optionally the country code, which will update
	     * the `lang` attribute on the app's root `<html>` element.
	     * We recommend the app's `index.html` file already has the correct `lang`
	     * attribute value set, such as `<html lang="en">`. This method is useful if
	     * the language needs to be dynamically changed per user/session.
	     * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
	     * @param {string} language  Examples: `en-US`, `en-GB`, `ar`, `de`, `zh`, `es-MX`
	     */
	    Platform.prototype.setLang = function (language, updateDocument) {
	        this._lang = language;
	        if (updateDocument !== false) {
	            document.documentElement.setAttribute('lang', language);
	        }
	    };
	    /**
	     * Returns app's language and optional country code.
	     * We recommend the app's `index.html` file already has the correct `lang`
	     * attribute value set, such as `<html lang="en">`.
	     * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
	     * @returns {string}
	     */
	    Platform.prototype.lang = function () {
	        return this._lang;
	    };
	    // Methods meant to be overridden by the engine
	    // **********************************************
	    // Provided NOOP methods so they do not error when
	    // called by engines (the browser)that do not provide them
	    /**
	     * @private
	     */
	    Platform.prototype.exitApp = function () { };
	    /**
	     * The back button event is triggered when the user presses the native
	     * platform's back button, also referred to as the "hardware" back button.
	     * This event is only used within Cordova apps running on Android and
	     * Windows platforms. This event is not fired on iOS since iOS doesn't come
	     * with a hardware back button in the same sense an Android or Windows device
	     * does.
	     *
	     * Registering a hardware back button action and setting a priority allows
	     * apps to control which action should be called when the hardware back
	     * button is pressed. This method decides which of the registered back button
	     * actions has the highest priority and should be called.
	     *
	     * @param {Function} callback Called when the back button is pressed,
	     * if this registered action has the highest priority.
	     * @param {number} priority Set the priority for this action. Only the highest priority will execute. Defaults to `0`.
	     * @returns {Function} A function that, when called, will unregister
	     * the its back button action.
	     */
	    Platform.prototype.registerBackButtonAction = function (fn, priority) {
	        var _this = this;
	        if (priority === void 0) { priority = 0; }
	        var action = { fn: fn, priority: priority };
	        this._bbActions.push(action);
	        // return a function to unregister this back button action
	        return function () {
	            var index = _this._bbActions.indexOf(action);
	            if (index > -1) {
	                _this._bbActions.splice(index, 1);
	            }
	        };
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.runBackButtonAction = function () {
	        // decide which one back button action should run
	        var winner = null;
	        this._bbActions.forEach(function (action) {
	            if (!winner || action.priority >= winner.priority) {
	                winner = action;
	            }
	        });
	        // run the winning action if there is one
	        winner && winner.fn && winner.fn();
	    };
	    // Getter/Setter Methods
	    // **********************************************
	    /**
	     * @private
	     */
	    Platform.prototype.setUrl = function (url) {
	        this._url = url;
	        this._qs = util_1.getQuerystring(url);
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.url = function () {
	        return this._url;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.query = function (key) {
	        return (this._qs || {})[key];
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.setUserAgent = function (userAgent) {
	        this._ua = userAgent;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.userAgent = function () {
	        return this._ua || '';
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.setNavigatorPlatform = function (navigatorPlatform) {
	        this._bPlt = navigatorPlatform;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.navigatorPlatform = function () {
	        return this._bPlt || '';
	    };
	    /**
	     * Gets the width of the platform's viewport using `window.innerWidth`.
	     * Using this method is preferred since the dimension is a cached value,
	     * which reduces the chance of multiple and expensive DOM reads.
	     */
	    Platform.prototype.width = function () {
	        return dom_1.windowDimensions().width;
	    };
	    /**
	     * Gets the height of the platform's viewport using `window.innerHeight`.
	     * Using this method is preferred since the dimension is a cached value,
	     * which reduces the chance of multiple and expensive DOM reads.
	     */
	    Platform.prototype.height = function () {
	        return dom_1.windowDimensions().height;
	    };
	    /**
	     * Returns `true` if the app is in portait mode.
	     */
	    Platform.prototype.isPortrait = function () {
	        return this.width() < this.height();
	    };
	    /**
	     * Returns `true` if the app is in landscape mode.
	     */
	    Platform.prototype.isLandscape = function () {
	        return !this.isPortrait();
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.windowResize = function () {
	        var self = this;
	        clearTimeout(self._resizeTm);
	        self._resizeTm = setTimeout(function () {
	            dom_1.flushDimensionCache();
	            for (var i = 0; i < self._onResizes.length; i++) {
	                try {
	                    self._onResizes[i]();
	                }
	                catch (e) {
	                    void 0;
	                }
	            }
	        }, 200);
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.onResize = function (cb) {
	        var self = this;
	        self._onResizes.push(cb);
	        return function () {
	            var index = self._onResizes.indexOf(cb);
	            if (index > -1) {
	                self._onResizes.splice(index, 1);
	            }
	        };
	    };
	    // Platform Registry
	    // **********************************************
	    /**
	     * @private
	     */
	    Platform.register = function (platformConfig) {
	        platformRegistry[platformConfig.name] = platformConfig;
	    };
	    /**
	     * @private
	     */
	    Platform.registry = function () {
	        return platformRegistry;
	    };
	    /**
	     * @private
	     */
	    Platform.get = function (platformName) {
	        return platformRegistry[platformName] || {};
	    };
	    /**
	     * @private
	     */
	    Platform.setDefault = function (platformName) {
	        platformDefault = platformName;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.testQuery = function (queryValue, queryTestValue) {
	        var valueSplit = queryValue.toLowerCase().split(';');
	        return valueSplit.indexOf(queryTestValue) > -1;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.testNavigatorPlatform = function (navigatorPlatformExpression) {
	        var rgx = new RegExp(navigatorPlatformExpression, 'i');
	        return rgx.test(this._bPlt);
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.matchUserAgentVersion = function (userAgentExpression) {
	        if (this._ua && userAgentExpression) {
	            var val = this._ua.match(userAgentExpression);
	            if (val) {
	                return {
	                    major: val[1],
	                    minor: val[2]
	                };
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.isPlatformMatch = function (queryStringName, userAgentAtLeastHas, userAgentMustNotHave) {
	        if (userAgentMustNotHave === void 0) { userAgentMustNotHave = []; }
	        var queryValue = this.query('ionicplatform');
	        if (queryValue) {
	            return this.testQuery(queryValue, queryStringName);
	        }
	        userAgentAtLeastHas = userAgentAtLeastHas || [queryStringName];
	        var userAgent = this._ua.toLowerCase();
	        for (var i = 0; i < userAgentAtLeastHas.length; i++) {
	            if (userAgent.indexOf(userAgentAtLeastHas[i]) > -1) {
	                for (var j = 0; j < userAgentMustNotHave.length; j++) {
	                    if (userAgent.indexOf(userAgentMustNotHave[j]) > -1) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.load = function (config) {
	        var rootPlatformNode;
	        var enginePlatformNode;
	        var self = this;
	        // figure out the most specific platform and active engine
	        var tmpPlatform;
	        for (var platformName in platformRegistry) {
	            tmpPlatform = this.matchPlatform(platformName);
	            if (tmpPlatform) {
	                // we found a platform match!
	                // check if its more specific than the one we already have
	                if (tmpPlatform.isEngine) {
	                    // because it matched then this should be the active engine
	                    // you cannot have more than one active engine
	                    enginePlatformNode = tmpPlatform;
	                }
	                else if (!rootPlatformNode || tmpPlatform.depth > rootPlatformNode.depth) {
	                    // only find the root node for platforms that are not engines
	                    // set this node as the root since we either don't already
	                    // have one, or this one is more specific that the current one
	                    rootPlatformNode = tmpPlatform;
	                }
	            }
	        }
	        if (!rootPlatformNode) {
	            rootPlatformNode = new PlatformNode(platformDefault);
	        }
	        // build a Platform instance filled with the
	        // hierarchy of active platforms and settings
	        if (rootPlatformNode) {
	            // check if we found an engine node (cordova/node-webkit/etc)
	            if (enginePlatformNode) {
	                // add the engine to the first in the platform hierarchy
	                // the original rootPlatformNode now becomes a child
	                // of the engineNode, which is not the new root
	                enginePlatformNode.child = rootPlatformNode;
	                rootPlatformNode.parent = enginePlatformNode;
	                rootPlatformNode = enginePlatformNode;
	            }
	            var platformNode = rootPlatformNode;
	            while (platformNode) {
	                insertSuperset(platformNode);
	                platformNode = platformNode.child;
	            }
	            // make sure the root noot is actually the root
	            // incase a node was inserted before the root
	            platformNode = rootPlatformNode.parent;
	            while (platformNode) {
	                rootPlatformNode = platformNode;
	                platformNode = platformNode.parent;
	            }
	            platformNode = rootPlatformNode;
	            while (platformNode) {
	                platformNode.initialize(this, config);
	                // set the array of active platforms with
	                // the last one in the array the most important
	                this._platforms.push(platformNode.name);
	                // get the platforms version if a version parser was provided
	                this._versions[platformNode.name] = platformNode.version(this);
	                // go to the next platform child
	                platformNode = platformNode.child;
	            }
	        }
	        if (this._platforms.indexOf('mobile') > -1 && this._platforms.indexOf('cordova') === -1) {
	            this._platforms.push('mobileweb');
	        }
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.matchPlatform = function (platformName) {
	        // build a PlatformNode and assign config data to it
	        // use it's getRoot method to build up its hierarchy
	        // depending on which platforms match
	        var platformNode = new PlatformNode(platformName);
	        var rootNode = platformNode.getRoot(this);
	        if (rootNode) {
	            rootNode.depth = 0;
	            var childPlatform = rootNode.child;
	            while (childPlatform) {
	                rootNode.depth++;
	                childPlatform = childPlatform.child;
	            }
	        }
	        return rootNode;
	    };
	    return Platform;
	}());
	exports.Platform = Platform;
	function insertSuperset(platformNode) {
	    var supersetPlaformName = platformNode.superset();
	    if (supersetPlaformName) {
	        // add a platform in between two exist platforms
	        // so we can build the correct hierarchy of active platforms
	        var supersetPlatform = new PlatformNode(supersetPlaformName);
	        supersetPlatform.parent = platformNode.parent;
	        supersetPlatform.child = platformNode;
	        if (supersetPlatform.parent) {
	            supersetPlatform.parent.child = supersetPlatform;
	        }
	        platformNode.parent = supersetPlatform;
	    }
	}
	/**
	 * @private
	 */
	var PlatformNode = (function () {
	    function PlatformNode(platformName) {
	        this.c = Platform.get(platformName);
	        this.name = platformName;
	        this.isEngine = this.c.isEngine;
	    }
	    PlatformNode.prototype.settings = function () {
	        return this.c.settings || {};
	    };
	    PlatformNode.prototype.superset = function () {
	        return this.c.superset;
	    };
	    PlatformNode.prototype.isMatch = function (p) {
	        return this.c.isMatch && this.c.isMatch(p) || false;
	    };
	    PlatformNode.prototype.initialize = function (platform, config) {
	        this.c.initialize && this.c.initialize(platform, config);
	    };
	    PlatformNode.prototype.version = function (p) {
	        if (this.c.versionParser) {
	            var v = this.c.versionParser(p);
	            if (v) {
	                var str = v.major + '.' + v.minor;
	                return {
	                    str: str,
	                    num: parseFloat(str),
	                    major: parseInt(v.major, 10),
	                    minor: parseInt(v.minor, 10)
	                };
	            }
	        }
	    };
	    PlatformNode.prototype.getRoot = function (p) {
	        if (this.isMatch(p)) {
	            var parents = this.getSubsetParents(this.name);
	            if (!parents.length) {
	                return this;
	            }
	            var platform = null;
	            var rootPlatform = null;
	            for (var i = 0; i < parents.length; i++) {
	                platform = new PlatformNode(parents[i]);
	                platform.child = this;
	                rootPlatform = platform.getRoot(p);
	                if (rootPlatform) {
	                    this.parent = platform;
	                    return rootPlatform;
	                }
	            }
	        }
	        return null;
	    };
	    PlatformNode.prototype.getSubsetParents = function (subsetPlatformName) {
	        var platformRegistry = Platform.registry();
	        var parentPlatformNames = [];
	        var platform = null;
	        for (var platformName in platformRegistry) {
	            platform = platformRegistry[platformName];
	            if (platform.subsets && platform.subsets.indexOf(subsetPlatformName) > -1) {
	                parentPlatformNames.push(platformName);
	            }
	        }
	        return parentPlatformNames;
	    };
	    return PlatformNode;
	}());
	var platformRegistry = {};
	var platformDefault = null;


/***/ },
/* 127 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Given a min and max, restrict the given number
	 * to the range.
	 * @param min the minimum
	 * @param n the value
	 * @param max the maximum
	 */
	function clamp(min, n, max) {
	    return Math.max(min, Math.min(n, max));
	}
	exports.clamp = clamp;
	/**
	 * The assign() method is used to copy the values of all enumerable own
	 * properties from one or more source objects to a target object. It will
	 * return the target object. When available, this method will use
	 * `Object.assign()` under-the-hood.
	 * @param target  The target object
	 * @param source(s)  The source object
	 */
	function assign() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i - 0] = arguments[_i];
	    }
	    if (typeof Object.assign !== 'function') {
	        // use the old-school shallow extend method
	        return _baseExtend(args[0], [].slice.call(args, 1), false);
	    }
	    // use the built in ES6 Object.assign method
	    return Object.assign.apply(null, args);
	}
	exports.assign = assign;
	/**
	 * Do a deep extend (merge).
	 * @param dst the destination
	 * @param ... the param objects
	 */
	function merge(dst) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    return _baseExtend(dst, [].slice.call(arguments, 1), true);
	}
	exports.merge = merge;
	function _baseExtend(dst, objs, deep) {
	    for (var i = 0, ii = objs.length; i < ii; ++i) {
	        var obj = objs[i];
	        if (!obj || !exports.isObject(obj) && !exports.isFunction(obj))
	            continue;
	        var keys = Object.keys(obj);
	        for (var j = 0, jj = keys.length; j < jj; j++) {
	            var key = keys[j];
	            var src = obj[key];
	            if (deep && exports.isObject(src)) {
	                if (!exports.isObject(dst[key]))
	                    dst[key] = exports.isArray(src) ? [] : {};
	                _baseExtend(dst[key], [src], true);
	            }
	            else {
	                dst[key] = src;
	            }
	        }
	    }
	    return dst;
	}
	function debounce(fn, wait, immediate) {
	    if (immediate === void 0) { immediate = false; }
	    var timeout, args, context, timestamp, result;
	    return function () {
	        context = this;
	        args = arguments;
	        timestamp = Date.now();
	        var later = function () {
	            var last = Date.now() - timestamp;
	            if (last < wait) {
	                timeout = setTimeout(later, wait - last);
	            }
	            else {
	                timeout = null;
	                if (!immediate)
	                    result = fn.apply(context, args);
	            }
	        };
	        var callNow = immediate && !timeout;
	        if (!timeout) {
	            timeout = setTimeout(later, wait);
	        }
	        if (callNow)
	            result = fn.apply(context, args);
	        return result;
	    };
	}
	exports.debounce = debounce;
	/**
	 * Apply default arguments if they don't exist in
	 * the first object.
	 * @param the destination to apply defaults to.
	 */
	function defaults(dest) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    for (var i = arguments.length - 1; i >= 1; i--) {
	        var source = arguments[i] || {};
	        for (var key in source) {
	            if (source.hasOwnProperty(key) && !dest.hasOwnProperty(key)) {
	                dest[key] = source[key];
	            }
	        }
	    }
	    return dest;
	}
	exports.defaults = defaults;
	exports.isBoolean = function (val) { return typeof val === 'boolean'; };
	exports.isString = function (val) { return typeof val === 'string'; };
	exports.isNumber = function (val) { return typeof val === 'number'; };
	exports.isFunction = function (val) { return typeof val === 'function'; };
	exports.isDefined = function (val) { return typeof val !== 'undefined'; };
	exports.isUndefined = function (val) { return typeof val === 'undefined'; };
	exports.isPresent = function (val) { return val !== undefined && val !== null; };
	exports.isBlank = function (val) { return val === undefined || val === null; };
	exports.isObject = function (val) { return typeof val === 'object'; };
	exports.isArray = Array.isArray;
	exports.isTrueProperty = function (val) {
	    if (typeof val === 'string') {
	        val = val.toLowerCase().trim();
	        return (val === 'true' || val === 'on' || val === '');
	    }
	    return !!val;
	};
	exports.isCheckedProperty = function (a, b) {
	    if (a === undefined || a === null || a === '') {
	        return (b === undefined || b === null || b === '');
	    }
	    else if (a === true || a === 'true') {
	        return (b === true || b === 'true');
	    }
	    else if (a === false || a === 'false') {
	        return (b === false || b === 'false');
	    }
	    else if (a === 0 || a === '0') {
	        return (b === 0 || b === '0');
	    }
	    // not using strict comparison on purpose
	    /* tslint:disable */
	    return (a == b);
	    /* tslint:enable */
	};
	/**
	 * Convert a string in the format thisIsAString to a slug format this-is-a-string
	 */
	function pascalCaseToDashCase(val) {
	    if (val === void 0) { val = ''; }
	    return val.charAt(0).toLowerCase() + val.substring(1).replace(/[A-Z]/g, function (match) {
	        return '-' + match.toLowerCase();
	    });
	}
	exports.pascalCaseToDashCase = pascalCaseToDashCase;
	var uid = 0;
	function nextUid() {
	    return ++uid;
	}
	exports.nextUid = nextUid;
	/**
	 * Grab all query strings keys and values.
	 * @param url
	 */
	function getQuerystring(url) {
	    var queryParams = {};
	    if (url) {
	        var startIndex = url.indexOf('?');
	        if (startIndex !== -1) {
	            var queries = url.slice(startIndex + 1).split('&');
	            for (var i = 0; i < queries.length; i++) {
	                if (queries[i].indexOf('=') > 0) {
	                    var split = queries[i].split('=');
	                    if (split.length > 1) {
	                        queryParams[split[0].toLowerCase()] = split[1].split('#')[0];
	                    }
	                }
	            }
	        }
	    }
	    return queryParams;
	}
	exports.getQuerystring = getQuerystring;
	function reorderArray(array, indexes) {
	    var element = array[indexes.from];
	    array.splice(indexes.from, 1);
	    array.splice(indexes.to, 0, element);
	    return array;
	}
	exports.reorderArray = reorderArray;


/***/ },
/* 128 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @name Events
	 * @description
	 * Events is a publish-subscribe style event system for sending and responding to application-level
	 * events across your app.
	 *
	 * @usage
	 * ```ts
	 * import {Events} from 'ionic-angular';
	 *
	 * constructor(public events: Events) {}
	 *
	 * // first page (publish an event when a user is created)
	 * function createUser(user) {
	 *   console.log('User created!')
	 *   events.publish('user:created', user);
	 * }
	 *
	 * // second page (listen for the user created event)
	 * events.subscribe('user:created', (userEventData) => {
	 *   // userEventData is an array of parameters, so grab our first and only arg
	 *   console.log('Welcome', userEventData[0]);
	 * });
	 *
	 * ```
	 * @demo /docs/v2/demos/events/
	 */
	var Events = (function () {
	    function Events() {
	        this._channels = [];
	    }
	    /**
	     * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
	     *
	     * @param {string} topic the topic to subscribe to
	     * @param {function} handler the event handler
	     */
	    Events.prototype.subscribe = function (topic) {
	        var _this = this;
	        var handlers = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            handlers[_i - 1] = arguments[_i];
	        }
	        if (!this._channels[topic]) {
	            this._channels[topic] = [];
	        }
	        handlers.forEach(function (handler) {
	            _this._channels[topic].push(handler);
	        });
	    };
	    /**
	     * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
	     *
	     * @param {string} topic the topic to unsubscribe from
	     * @param {function} handler the event handler
	     *
	     * @return true if a handler was removed
	     */
	    Events.prototype.unsubscribe = function (topic, handler) {
	        var t = this._channels[topic];
	        if (!t) {
	            // Wasn't found, wasn't removed
	            return false;
	        }
	        if (!handler) {
	            // Remove all handlers for this topic
	            delete this._channels[topic];
	            return true;
	        }
	        // We need to find and remove a specific handler
	        var i = t.indexOf(handler);
	        if (i < 0) {
	            // Wasn't found, wasn't removed
	            return false;
	        }
	        t.splice(i, 1);
	        // If the channel is empty now, remove it from the channel map
	        if (!t.length) {
	            delete this._channels[topic];
	        }
	        return true;
	    };
	    /**
	     * Publish an event to the given topic.
	     *
	     * @param {string} topic the topic to publish to
	     * @param {any} eventData the data to send as the event
	     */
	    Events.prototype.publish = function (topic) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var t = this._channels[topic];
	        if (!t) {
	            return null;
	        }
	        var responses = [];
	        t.forEach(function (handler) {
	            responses.push(handler(args));
	        });
	        return responses;
	    };
	    return Events;
	}());
	exports.Events = Events;


/***/ },
/* 129 */
/***/ function(module, exports) {

	"use strict";
	var FeatureDetect = (function () {
	    function FeatureDetect() {
	        this._results = {};
	    }
	    FeatureDetect.prototype.run = function (window, document) {
	        for (var name_1 in featureDetects) {
	            this._results[name_1] = featureDetects[name_1](window, document, document.body);
	        }
	    };
	    FeatureDetect.prototype.has = function (featureName) {
	        return !!this._results[featureName];
	    };
	    FeatureDetect.add = function (name, fn) {
	        featureDetects[name] = fn;
	    };
	    return FeatureDetect;
	}());
	exports.FeatureDetect = FeatureDetect;
	var featureDetects = {};
	FeatureDetect.add('hairlines', function (window, document, body) {
	    /**
	    * Hairline Shim
	    * Add the "hairline" CSS class name to the body tag
	    * if the browser supports subpixels.
	    */
	    var canDo = false;
	    if (window.devicePixelRatio >= 2) {
	        var hairlineEle = document.createElement('div');
	        hairlineEle.style.border = '.5px solid transparent';
	        body.appendChild(hairlineEle);
	        if (hairlineEle.offsetHeight === 1) {
	            body.classList.add('hairlines');
	            canDo = true;
	        }
	        body.removeChild(hairlineEle);
	    }
	    return canDo;
	});


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	/**
	 * @private
	 */
	var Form = (function () {
	    function Form() {
	        this._focused = null;
	        this._ids = -1;
	        this._inputs = [];
	        this.focusCtrl(document);
	    }
	    Form.prototype.register = function (input) {
	        this._inputs.push(input);
	    };
	    Form.prototype.deregister = function (input) {
	        var index = this._inputs.indexOf(input);
	        if (index > -1) {
	            this._inputs.splice(index, 1);
	        }
	        if (input === this._focused) {
	            this._focused = null;
	        }
	    };
	    Form.prototype.focusCtrl = function (document) {
	        // raw DOM fun
	        var focusCtrl = document.createElement('focus-ctrl');
	        focusCtrl.setAttribute('aria-hidden', true);
	        this._blur = document.createElement('button');
	        this._blur.tabIndex = -1;
	        focusCtrl.appendChild(this._blur);
	        document.body.appendChild(focusCtrl);
	    };
	    Form.prototype.focusOut = function () {
	        void 0;
	        var activeElement = document.activeElement;
	        if (activeElement) {
	            activeElement.blur();
	        }
	        this._blur.focus();
	    };
	    Form.prototype.setAsFocused = function (input) {
	        this._focused = input;
	    };
	    /**
	     * Focuses the next input element, if it exists.
	     */
	    Form.prototype.tabFocus = function (currentInput) {
	        var index = this._inputs.indexOf(currentInput);
	        if (index > -1 && (index + 1) < this._inputs.length) {
	            var nextInput = this._inputs[index + 1];
	            if (nextInput !== this._focused) {
	                void 0;
	                return nextInput.initFocus();
	            }
	        }
	        index = this._inputs.indexOf(this._focused);
	        if (index > 0) {
	            var previousInput = this._inputs[index - 1];
	            if (previousInput) {
	                void 0;
	                previousInput.initFocus();
	            }
	        }
	    };
	    Form.prototype.nextId = function () {
	        return ++this._ids;
	    };
	    Form = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Form);
	    return Form;
	}());
	exports.Form = Form;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var common_1 = __webpack_require__(4);
	var menu_1 = __webpack_require__(132);
	var menu_toggle_1 = __webpack_require__(146);
	var menu_close_1 = __webpack_require__(155);
	var backdrop_1 = __webpack_require__(133);
	var badge_1 = __webpack_require__(156);
	var button_1 = __webpack_require__(157);
	var content_1 = __webpack_require__(158);
	var img_1 = __webpack_require__(164);
	var scroll_1 = __webpack_require__(165);
	var infinite_scroll_1 = __webpack_require__(166);
	var infinite_scroll_content_1 = __webpack_require__(167);
	var refresher_1 = __webpack_require__(168);
	var refresher_content_1 = __webpack_require__(170);
	var slides_1 = __webpack_require__(171);
	var tabs_1 = __webpack_require__(160);
	var tab_1 = __webpack_require__(162);
	var list_1 = __webpack_require__(173);
	var item_1 = __webpack_require__(175);
	var item_reorder_1 = __webpack_require__(177);
	var item_sliding_1 = __webpack_require__(180);
	var virtual_scroll_1 = __webpack_require__(181);
	var virtual_item_1 = __webpack_require__(183);
	var toolbar_1 = __webpack_require__(154);
	var toolbar_item_1 = __webpack_require__(184);
	var toolbar_title_1 = __webpack_require__(185);
	var icon_1 = __webpack_require__(176);
	var spinner_1 = __webpack_require__(186);
	var checkbox_1 = __webpack_require__(187);
	var select_1 = __webpack_require__(188);
	var option_1 = __webpack_require__(191);
	var datetime_1 = __webpack_require__(192);
	var toggle_1 = __webpack_require__(194);
	var input_1 = __webpack_require__(195);
	var label_1 = __webpack_require__(179);
	var segment_1 = __webpack_require__(198);
	var radio_button_1 = __webpack_require__(199);
	var radio_group_1 = __webpack_require__(200);
	var range_1 = __webpack_require__(201);
	var searchbar_1 = __webpack_require__(203);
	var nav_1 = __webpack_require__(204);
	var nav_pop_1 = __webpack_require__(206);
	var nav_push_1 = __webpack_require__(207);
	var nav_router_1 = __webpack_require__(208);
	var navbar_1 = __webpack_require__(147);
	var show_hide_when_1 = __webpack_require__(209);
	/**
	 * @private
	 * @name IONIC_DIRECTIVES
	 * @description
	 * The core Ionic directives as well as Angular's `CORE_DIRECTIVES` and `FORM_DIRECTIVES` are
	 * available automatically when you bootstrap your app with the `ionicBootstrap`. This means
	 * if you are using custom components you do not need to import `IONIC_DIRECTIVES` as they
	 * are part of the app's default directives.
	 *
	 *
	 * #### Angular
	 * - CORE_DIRECTIVES
	 * - FORM_DIRECTIVES
	 *
	 * #### Ionic
	 * - Menu
	 * - MenuToggle
	 * - MenuClose
	 * - Badge
	 * - Button
	 * - Content
	 * - Scroll
	 * - InfiniteScroll
	 * - InfiniteScrollContent
	 * - Refresher
	 * - RefresherContent
	 * - Img
	 * - List
	 * - ListHeader
	 * - Item
	 * - ItemContent
	 * - ItemSliding
	 * - VirtualScroll
	 * - VirtualItem
	 * - VirtualHeader
	 * - VirtualFooter
	 * - Slides
	 * - Slide
	 * - SlideLazy
	 * - Tabs
	 * - Tab
	 * - Header
	 * - Footer
	 * - Toolbar
	 * - ToolbarTitle
	 * - ToolbarItem
	 * - Icon
	 * - Spinner
	 * - Searchbar
	 * - Segment
	 * - SegmentButton
	 * - Checkbox
	 * - RadioGroup
	 * - RadioButton
	 * - Select
	 * - Option
	 * - DateTime
	 * - Toggle
	 * - TextArea
	 * - TextInput
	 * - Label
	 * - Nav
	 * - NavbarTemplate
	 * - Navbar
	 * - NavPush
	 * - NavPop
	 * - NavRouter
	 * - IdRef
	 * - ShowWhen
	 * - HideWhen
	 */
	exports.IONIC_DIRECTIVES = [
	    // Angular
	    common_1.CORE_DIRECTIVES,
	    common_1.FORM_DIRECTIVES,
	    // Content
	    menu_1.Menu,
	    menu_toggle_1.MenuToggle,
	    menu_close_1.MenuClose,
	    backdrop_1.Backdrop,
	    badge_1.Badge,
	    button_1.Button,
	    content_1.Content,
	    scroll_1.Scroll,
	    infinite_scroll_1.InfiniteScroll,
	    infinite_scroll_content_1.InfiniteScrollContent,
	    refresher_1.Refresher,
	    refresher_content_1.RefresherContent,
	    img_1.Img,
	    // Lists
	    list_1.List,
	    list_1.ListHeader,
	    item_1.Item,
	    item_1.ItemContent,
	    item_sliding_1.ItemSliding,
	    item_sliding_1.ItemOptions,
	    item_reorder_1.Reorder,
	    virtual_scroll_1.VirtualScroll,
	    virtual_item_1.VirtualItem,
	    virtual_item_1.VirtualHeader,
	    virtual_item_1.VirtualFooter,
	    // Slides
	    slides_1.Slides,
	    slides_1.Slide,
	    slides_1.SlideLazy,
	    // Tabs
	    tabs_1.Tabs,
	    tab_1.Tab,
	    // Toolbar
	    toolbar_1.Header,
	    toolbar_1.Footer,
	    toolbar_1.Toolbar,
	    toolbar_title_1.ToolbarTitle,
	    toolbar_item_1.ToolbarItem,
	    // Media
	    icon_1.Icon,
	    spinner_1.Spinner,
	    // Forms
	    searchbar_1.Searchbar,
	    segment_1.Segment,
	    segment_1.SegmentButton,
	    checkbox_1.Checkbox,
	    radio_group_1.RadioGroup,
	    radio_button_1.RadioButton,
	    range_1.Range,
	    select_1.Select,
	    option_1.Option,
	    datetime_1.DateTime,
	    toggle_1.Toggle,
	    input_1.TextArea,
	    input_1.TextInput,
	    label_1.Label,
	    // Nav
	    nav_1.Nav,
	    navbar_1.NavbarTemplate,
	    navbar_1.Navbar,
	    nav_push_1.NavPush,
	    nav_pop_1.NavPop,
	    nav_router_1.NavRouter,
	    show_hide_when_1.ShowWhen,
	    show_hide_when_1.HideWhen
	];


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var backdrop_1 = __webpack_require__(133);
	var config_1 = __webpack_require__(125);
	var ion_1 = __webpack_require__(134);
	var util_1 = __webpack_require__(127);
	var keyboard_1 = __webpack_require__(135);
	var menu_gestures_1 = __webpack_require__(137);
	var menu_controller_1 = __webpack_require__(145);
	var platform_1 = __webpack_require__(126);
	/**
	 * @name Menu
	 * @description
	 * The Menu component is a navigation drawer that slides in from the side of the current
	 * view. By default, it slides in from the left, but the side can be overridden. The menu
	 * will be displayed differently based on the mode, however the display type can be changed
	 * to any of the available [menu types](#menu-types). The menu element should be a sibling
	 * to the app's content element. There can be any number of menus attached to the content.
	 * These can be controlled from the templates, or programmatically using the [MenuController](../MenuController).
	 *
	 *
	 * ### Opening/Closing Menus
	 *
	 * There are several ways to open or close a menu. The menu can be **toggled** open or closed
	 * from the template using the [MenuToggle](../MenuToggle) directive. It can also be
	 * **closed** from the template using the [MenuClose](../MenuClose) directive. To display a menu
	 * programmatically, inject the [MenuController](../MenuController) provider and call any of the
	 * `MenuController` methods.
	 *
	 *
	 * ### Menu Types
	 *
	 * The menu supports several display types: `overlay`, `reveal` and `push`. By default,
	 * it will use the correct type based on the mode, but this can be changed. The default
	 * type for both Material Design and Windows mode is `overlay`, and `reveal` is the default
	 * type for iOS mode. The menu type can be changed in the app's [config](../../config/Config)
	 * via the `menuType` property, or passed in the `type` property on the `<ion-menu>` element.
	 * See [usage](#usage) below for examples of changing the menu type.
	 *
	 *
	 * ### Navigation Bar Behavior
	 *
	 * If a [MenuToggle](../MenuToggle) button is added to the [NavBar](../../nav/NavBar) of
	 * a page, the button will only appear when the page it's in is currently a root page. The
	 * root page is the initial page loaded in the app, or a page that has been set as the root
	 * using the [setRoot](../../nav/NavController/#setRoot) method on the [NavController](../../nav/NavController).
	 *
	 * For example, say the application has two pages, `Page1` and `Page2`, and both have a
	 * `MenuToggle` button in their navigation bars. Assume the initial page loaded into the app
	 * is `Page1`, making it the root page. `Page1` will display the `MenuToggle` button, but once
	 * `Page2` is pushed onto the navigation stack, the `MenuToggle` will not be displayed.
	 *
	 *
	 * ### Persistent Menus
	 *
	 * Persistent menus display the [MenuToggle](../MenuToggle) button in the [NavBar](../../nav/NavBar)
	 * on all pages in the navigation stack. To make a menu persistent set `persistent` to `true` on the
	 * `<ion-menu>` element. Note that this will only affect the `MenuToggle` button in the `NavBar` attached
	 * to the `Menu` with `persistent` set to true, any other `MenuToggle` buttons will not be affected.
	 *
	 *
	 * @usage
	 *
	 * To add a menu to an application, the `<ion-menu>` element should be added as a sibling to
	 * the content it belongs to. A [local variable](https://angular.io/docs/ts/latest/guide/user-input.html#local-variables)
	 * should be added to the content element and passed to the menu element in the `content` property.
	 * This tells the menu which content it is attached to, so it knows which element to watch for
	 * gestures. In the below example, `content` is using [property binding](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding)
	 * because `mycontent` is a reference to the `<ion-nav>` element, and not a string.
	 *
	 * ```html
	 * <ion-menu [content]="mycontent">
	 *   <ion-content>
	 *     <ion-list>
	 *     ...
	 *     </ion-list>
	 *   </ion-content>
	 * </ion-menu>
	 *
	 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * ### Menu Side
	 *
	 * By default, menus slide in from the left, but this can be overridden by passing `right`
	 * to the `side` property:
	 *
	 * ```html
	 * <ion-menu side="right" [content]="mycontent">...</ion-menu>
	 * ```
	 *
	 *
	 * ### Menu Type
	 *
	 * The menu type can be changed by passing the value to `type` on the `<ion-menu>`:
	 *
	 * ```html
	 * <ion-menu type="overlay" [content]="mycontent">...</ion-menu>
	 * ```
	 *
	 * It can also be set in the app's config. The below will set the menu type to
	 * `push` for all modes, and then set the type to `overlay` for the `ios` mode.
	 *
	 * ```ts
	 * import { ionicBootstrap } from 'ionic-angular';
	 *
	 * ionicBootstrap(MyApp, customProviders, {
	 *   menuType: 'push',
	 *   platforms: {
	 *     ios: {
	 *       menuType: 'overlay',
	 *     }
	 *   }
	 * });
	 * ```
	 *
	 *
	 * ### Displaying the Menu
	 *
	 * To toggle a menu from the template, add a button with the `menuToggle`
	 * directive anywhere in the page's template:
	 *
	 * ```html
	 * <button menuToggle>Toggle Menu</button>
	 * ```
	 *
	 * To close a menu, add the `menuClose` button. It can be added anywhere
	 * in the content, or even the menu itself. Below it is added to the menu's
	 * content:
	 *
	 * ```html
	 * <ion-menu [content]="mycontent">
	 *   <ion-content>
	 *     <ion-list>
	 *       <button menuClose ion-item detail-none>Close Menu</button>
	 *     </ion-list>
	 *   </ion-content>
	 * </ion-menu>
	 * ```
	 *
	 * See the [MenuToggle](../MenuToggle) and [MenuClose](../MenuClose) docs
	 * for more information on these directives.
	 *
	 * The menu can also be controlled from the Page by using the `MenuController`.
	 * Inject the `MenuController` provider into the page and then call any of its
	 * methods. In the below example, the `openMenu` method will open the menu
	 * when it is called.
	 *
	 * ```ts
	 * import { Component } from '@angular/core';
	 * import { MenuController } from 'ionic-angular';
	 *
	 * @Component({...})
	 * export class MyPage {
	 *  constructor(private menu: MenuController) {}
	 *
	 *  openMenu() {
	 *    this.menu.open();
	 *  }
	 * }
	 * ```
	 *
	 * See the [MenuController](../MenuController) API docs for all of the methods
	 * and usage information.
	 *
	 *
	 * @demo /docs/v2/demos/menu/
	 *
	 * @see {@link /docs/v2/components#menus Menu Component Docs}
	 * @see {@link ../MenuController MenuController API Docs}
	 * @see {@link ../../nav/Nav Nav API Docs}
	 * @see {@link ../../nav/NavController NavController API Docs}
	 */
	var Menu = (function (_super) {
	    __extends(Menu, _super);
	    function Menu(_menuCtrl, _elementRef, _config, _platform, _renderer, _keyboard, _zone) {
	        _super.call(this, _elementRef);
	        this._menuCtrl = _menuCtrl;
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this._platform = _platform;
	        this._renderer = _renderer;
	        this._keyboard = _keyboard;
	        this._zone = _zone;
	        this._preventTime = 0;
	        this._isEnabled = true;
	        this._isSwipeEnabled = true;
	        this._isPers = false;
	        this._init = false;
	        /**
	         * @private
	         */
	        this.isOpen = false;
	        /**
	         * @output {event} When the menu is being dragged open.
	         */
	        this.ionDrag = new core_1.EventEmitter();
	        /**
	         * @output {event} When the menu has been opened.
	         */
	        this.ionOpen = new core_1.EventEmitter();
	        /**
	         * @output {event} When the menu has been closed.
	         */
	        this.ionClose = new core_1.EventEmitter();
	    }
	    Object.defineProperty(Menu.prototype, "enabled", {
	        /**
	         * @input {boolean} Whether or not the menu should be enabled. Default `true`.
	         */
	        get: function () {
	            return this._isEnabled;
	        },
	        set: function (val) {
	            this._isEnabled = util_1.isTrueProperty(val);
	            this._setListeners();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "swipeEnabled", {
	        /**
	         * @input {boolean} Whether or not swiping the menu should be enabled. Default `true`.
	         */
	        get: function () {
	            return this._isSwipeEnabled;
	        },
	        set: function (val) {
	            this._isSwipeEnabled = util_1.isTrueProperty(val);
	            this._setListeners();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "persistent", {
	        /**
	         * @input {string} Whether or not the menu should persist on child pages. Default `false`.
	         */
	        get: function () {
	            return this._isPers;
	        },
	        set: function (val) {
	            this._isPers = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Menu.prototype.ngOnInit = function () {
	        var self = this;
	        self._init = true;
	        var content = self.content;
	        self._cntEle = (content instanceof Node) ? content : content && content.getNativeElement && content.getNativeElement();
	        // requires content element
	        if (!self._cntEle) {
	            return void 0;
	        }
	        // normalize the "side"
	        if (self.side !== 'left' && self.side !== 'right') {
	            self.side = 'left';
	        }
	        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'side', self.side);
	        // normalize the "type"
	        if (!self.type) {
	            self.type = self._config.get('menuType');
	        }
	        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'type', self.type);
	        // add the gestures
	        self._cntGesture = new menu_gestures_1.MenuContentGesture(self, self.getContentElement());
	        self._menuGesture = new menu_gestures_1.MenuTargetGesture(self, self.getNativeElement());
	        // register listeners if this menu is enabled
	        // check if more than one menu is on the same side
	        var hasEnabledSameSideMenu = self._menuCtrl.getMenus().some(function (m) {
	            return m.side === self.side && m.enabled;
	        });
	        if (hasEnabledSameSideMenu) {
	            // auto-disable if another menu on the same side is already enabled
	            self._isEnabled = false;
	        }
	        self._setListeners();
	        // create a reusable click handler on this instance, but don't assign yet
	        self.onContentClick = function (ev) {
	            if (self._isEnabled) {
	                ev.preventDefault();
	                ev.stopPropagation();
	                self.close();
	            }
	        };
	        self._cntEle.classList.add('menu-content');
	        self._cntEle.classList.add('menu-content-' + self.type);
	        // register this menu with the app's menu controller
	        self._menuCtrl.register(self);
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.bdClick = function (ev) {
	        void 0;
	        ev.preventDefault();
	        ev.stopPropagation();
	        this._menuCtrl.close();
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._setListeners = function () {
	        var self = this;
	        if (self._init) {
	            // only listen/unlisten if the menu has initialized
	            if (self._isEnabled && self._isSwipeEnabled && !self._cntGesture.isListening) {
	                // should listen, but is not currently listening
	                void 0;
	                self._zone.runOutsideAngular(function () {
	                    self._cntGesture.listen();
	                    self._menuGesture.listen();
	                });
	            }
	            else if (self._cntGesture.isListening && (!self._isEnabled || !self._isSwipeEnabled)) {
	                // should not listen, but is currently listening
	                void 0;
	                self._cntGesture.unlisten();
	                self._menuGesture.unlisten();
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._getType = function () {
	        if (!this._type) {
	            this._type = menu_controller_1.MenuController.create(this.type, this, this._platform);
	            if (this._config.get('animate') === false) {
	                this._type.ani.duration(0);
	            }
	        }
	        return this._type;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.setOpen = function (shouldOpen) {
	        var _this = this;
	        // _isPrevented is used to prevent unwanted opening/closing after swiping open/close
	        // or swiping open the menu while pressing down on the MenuToggle button
	        if ((shouldOpen && this.isOpen) || this._isPrevented()) {
	            return Promise.resolve(this.isOpen);
	        }
	        this._before();
	        return new Promise(function (resolve) {
	            _this._getType().setOpen(shouldOpen, function () {
	                _this._after(shouldOpen);
	                resolve(_this.isOpen);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.swipeStart = function () {
	        // user started swiping the menu open/close
	        if (this._isEnabled && this._isSwipeEnabled && !this._isPrevented()) {
	            this._before();
	            this._getType().setProgressStart(this.isOpen);
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.swipeProgress = function (stepValue) {
	        // user actively dragging the menu
	        if (this._isEnabled && this._isSwipeEnabled) {
	            this._prevent();
	            this._getType().setProgessStep(stepValue);
	            this.ionDrag.emit(stepValue);
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.swipeEnd = function (shouldCompleteLeft, shouldCompleteRight, stepValue) {
	        var _this = this;
	        // user has finished dragging the menu
	        if (this._isEnabled && this._isSwipeEnabled) {
	            this._prevent();
	            var opening = !this.isOpen;
	            var shouldComplete = false;
	            if (opening) {
	                shouldComplete = (this.side === 'right') ? shouldCompleteLeft : shouldCompleteRight;
	            }
	            else {
	                shouldComplete = (this.side === 'right') ? shouldCompleteRight : shouldCompleteLeft;
	            }
	            this._getType().setProgressEnd(shouldComplete, stepValue, function (isOpen) {
	                void 0;
	                _this._after(isOpen);
	            });
	        }
	    };
	    Menu.prototype._before = function () {
	        // this places the menu into the correct location before it animates in
	        // this css class doesn't actually kick off any animations
	        if (this._isEnabled) {
	            this.getNativeElement().classList.add('show-menu');
	            this.getBackdropElement().classList.add('show-backdrop');
	            this._prevent();
	            this._keyboard.close();
	        }
	    };
	    Menu.prototype._after = function (isOpen) {
	        // keep opening/closing the menu disabled for a touch more yet
	        // only add listeners/css if it's enabled and isOpen
	        // and only remove listeners/css if it's not open
	        // emit opened/closed events
	        if ((this._isEnabled && isOpen) || !isOpen) {
	            this._prevent();
	            this.isOpen = isOpen;
	            this._cntEle.classList[isOpen ? 'add' : 'remove']('menu-content-open');
	            this._cntEle.removeEventListener('click', this.onContentClick);
	            if (isOpen) {
	                this._cntEle.addEventListener('click', this.onContentClick);
	                this.ionOpen.emit(true);
	            }
	            else {
	                this.getNativeElement().classList.remove('show-menu');
	                this.getBackdropElement().classList.remove('show-backdrop');
	                this.ionClose.emit(true);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.tempDisable = function (temporarilyDisable) {
	        if (temporarilyDisable) {
	            this._prevEnabled = this._isEnabled;
	            this._getType().setProgessStep(0);
	            this.enable(false);
	        }
	        else {
	            this.enable(this._prevEnabled);
	            this._after(false);
	        }
	    };
	    Menu.prototype._prevent = function () {
	        // used to prevent unwanted opening/closing after swiping open/close
	        // or swiping open the menu while pressing down on the MenuToggle
	        this._preventTime = Date.now() + 20;
	    };
	    Menu.prototype._isPrevented = function () {
	        return this._preventTime > Date.now();
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.open = function () {
	        return this.setOpen(true);
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.close = function () {
	        return this.setOpen(false);
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.toggle = function () {
	        return this.setOpen(!this.isOpen);
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.enable = function (shouldEnable) {
	        var _this = this;
	        this.enabled = shouldEnable;
	        if (!shouldEnable && this.isOpen) {
	            // close if this menu is open, and should not be enabled
	            this.close();
	        }
	        if (shouldEnable) {
	            // if this menu should be enabled
	            // then find all the other menus on this same side
	            // and automatically disable other same side menus
	            var sameSideMenus = this._menuCtrl
	                .getMenus()
	                .filter(function (m) { return m.side === _this.side && m !== _this; })
	                .map(function (m) { return m.enabled = false; });
	        }
	        return this;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.swipeEnable = function (shouldEnable) {
	        this.swipeEnabled = shouldEnable;
	        return this;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.getMenuElement = function () {
	        return this.getNativeElement();
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.getContentElement = function () {
	        return this._cntEle;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.getBackdropElement = function () {
	        return this.backdrop.elementRef.nativeElement;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.ngOnDestroy = function () {
	        this._menuCtrl.unregister(this);
	        this._cntGesture && this._cntGesture.destroy();
	        this._menuGesture && this._menuGesture.destroy();
	        this._type && this._type.destroy();
	        this._resizeUnreg && this._resizeUnreg();
	        this._cntEle = null;
	    };
	    __decorate([
	        core_1.ViewChild(backdrop_1.Backdrop), 
	        __metadata('design:type', backdrop_1.Backdrop)
	    ], Menu.prototype, "backdrop", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Menu.prototype, "content", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Menu.prototype, "id", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Menu.prototype, "side", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Menu.prototype, "type", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Menu.prototype, "enabled", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Menu.prototype, "swipeEnabled", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Menu.prototype, "persistent", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Menu.prototype, "maxEdgeStart", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Menu.prototype, "ionDrag", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Menu.prototype, "ionOpen", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Menu.prototype, "ionClose", void 0);
	    Menu = __decorate([
	        core_1.Component({
	            selector: 'ion-menu',
	            host: {
	                'role': 'navigation'
	            },
	            template: '<ng-content></ng-content>' +
	                '<ion-backdrop (click)="bdClick($event)" disableScroll="false"></ion-backdrop>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [menu_controller_1.MenuController, core_1.ElementRef, config_1.Config, platform_1.Platform, core_1.Renderer, keyboard_1.Keyboard, core_1.NgZone])
	    ], Menu);
	    return Menu;
	}(ion_1.Ion));
	exports.Menu = Menu;


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var util_1 = __webpack_require__(127);
	var DISABLE_SCROLL = 'disable-scroll';
	/**
	 * @private
	 */
	var Backdrop = (function () {
	    function Backdrop(elementRef) {
	        this.elementRef = elementRef;
	        this.pushed = false;
	        this.disableScroll = true;
	    }
	    Backdrop.push = function () {
	        if (this.nuBackDrops === 0) {
	            void 0;
	            document.body.classList.add(DISABLE_SCROLL);
	        }
	        else {
	            void 0;
	        }
	        this.nuBackDrops++;
	    };
	    Backdrop.pop = function () {
	        if (this.nuBackDrops === 0) {
	            void 0;
	            return;
	        }
	        this.nuBackDrops--;
	        if (this.nuBackDrops === 0) {
	            void 0;
	            document.body.classList.remove(DISABLE_SCROLL);
	        }
	    };
	    Backdrop.prototype.ngOnInit = function () {
	        if (util_1.isTrueProperty(this.disableScroll)) {
	            Backdrop.push();
	            this.pushed = true;
	        }
	    };
	    Backdrop.prototype.ngOnDestroy = function () {
	        if (this.pushed) {
	            Backdrop.pop();
	            this.pushed = false;
	        }
	    };
	    Backdrop.nuBackDrops = 0;
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Backdrop.prototype, "disableScroll", void 0);
	    Backdrop = __decorate([
	        core_1.Directive({
	            selector: 'ion-backdrop',
	            host: {
	                'role': 'presentation',
	                'tappable': '',
	                'disable-activated': ''
	            },
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Backdrop);
	    return Backdrop;
	}());
	exports.Backdrop = Backdrop;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dom_1 = __webpack_require__(124);
	var ids = 0;
	/**
	 * Base class for all Ionic components. Exposes some common functionality
	 * that all Ionic components need, such as accessing underlying native elements and
	 * sending/receiving app-level events.
	 */
	var Ion = (function () {
	    function Ion(elementRef) {
	        this.elementRef = elementRef;
	        this._id = 'i' + ids++;
	    }
	    Ion.prototype.getElementRef = function () {
	        return this.elementRef;
	    };
	    Ion.prototype.getNativeElement = function () {
	        return this.elementRef.nativeElement;
	    };
	    Ion.prototype.getDimensions = function () {
	        return dom_1.getDimensions(this.elementRef.nativeElement, this._id);
	    };
	    Ion.prototype.width = function () {
	        return dom_1.getDimensions(this.elementRef.nativeElement, this._id).width;
	    };
	    Ion.prototype.height = function () {
	        return dom_1.getDimensions(this.elementRef.nativeElement, this._id).height;
	    };
	    Ion.prototype.ngOnDestroy = function () {
	        dom_1.clearDimensions(this._id);
	    };
	    return Ion;
	}());
	exports.Ion = Ion;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	var form_1 = __webpack_require__(130);
	var dom_1 = __webpack_require__(124);
	var key_1 = __webpack_require__(136);
	/**
	 * @name Keyboard
	 * @description
	 * The `Keyboard` class allows you to work with the keyboard events provided by the Ionic keyboard plugin.
	 *
	 * @usage
	 * ```ts
	 * export class MyClass{
	 *  constructor(keyboard: Keyboard){
	 *    this.keyboard = keyboard;
	 *  }
	 * }
	 *
	 * ```
	 */
	var Keyboard = (function () {
	    function Keyboard(config, _form, _zone) {
	        var _this = this;
	        this._form = _form;
	        this._zone = _zone;
	        _zone.runOutsideAngular(function () {
	            _this.focusOutline(config.get('focusOutline'), document);
	        });
	    }
	    /**
	     * Check to see if the keyboard is open or not.
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(keyboard: Keyboard){
	     *    this.keyboard = keyboard;
	     *  }
	     *  keyboardCheck(){
	     *    setTimeout(()  => console.log('is the keyboard open ', this.keyboard.isOpen()));
	     *  }
	     * }
	     *
	     * ```
	     *
	     * @return {boolean} returns a true or flase value if the keyboard is open or not
	     */
	    Keyboard.prototype.isOpen = function () {
	        return dom_1.hasFocusedTextInput();
	    };
	    /**
	     * When the keyboard is closed, call any methods you want
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(keyboard: Keyboard){
	     *    this.keyboard = keyboard;
	     *    this.keyboard.onClose(this.closeCallback);
	     *  }
	     *  closeCallback(){
	     *     // call what ever functionality you want on keyboard close
	     *     console.log('Closing time');
	     *  }
	     * }
	     *
	     * ```
	     * @param {function} callback method you want to call when the keyboard has been closed
	     * @return {function} returns a callback that gets fired when the keyboard is closed
	     */
	    Keyboard.prototype.onClose = function (callback, pollingInternval, pollingChecksMax) {
	        if (pollingInternval === void 0) { pollingInternval = KEYBOARD_CLOSE_POLLING; }
	        if (pollingChecksMax === void 0) { pollingChecksMax = KEYBOARD_POLLING_CHECKS_MAX; }
	        void 0;
	        var self = this;
	        var checks = 0;
	        var promise = null;
	        if (!callback) {
	            // a callback wasn't provided, so let's return a promise instead
	            promise = new Promise(function (resolve) { callback = resolve; });
	        }
	        function checkKeyboard() {
	            void 0;
	            if (!self.isOpen() || checks > pollingChecksMax) {
	                dom_1.rafFrames(30, function () {
	                    self._zone.run(function () {
	                        void 0;
	                        callback();
	                    });
	                });
	            }
	            else {
	                dom_1.nativeTimeout(checkKeyboard, pollingInternval);
	            }
	            checks++;
	        }
	        dom_1.nativeTimeout(checkKeyboard, pollingInternval);
	        return promise;
	    };
	    /**
	     * Programmatically close the keyboard
	     *
	     */
	    Keyboard.prototype.close = function () {
	        var _this = this;
	        void 0;
	        dom_1.nativeRaf(function () {
	            if (dom_1.hasFocusedTextInput()) {
	                // only focus out when a text input has focus
	                _this._form.focusOut();
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Keyboard.prototype.focusOutline = function (setting, document) {
	        /* Focus Outline
	         * --------------------------------------------------
	         * By default, when a keydown event happens from a tab key, then
	         * the 'focus-outline' css class is added to the body element
	         * so focusable elements have an outline. On a mousedown or
	         * touchstart event, then the 'focus-outline' css class is removed.
	         *
	         * Config default overrides:
	         * focusOutline: true     - Always add the focus-outline
	         * focusOutline: false    - Do not add the focus-outline
	         */
	        var self = this;
	        var isKeyInputEnabled = false;
	        function cssClass() {
	            dom_1.nativeRaf(function () {
	                document.body.classList[isKeyInputEnabled ? 'add' : 'remove']('focus-outline');
	            });
	        }
	        if (setting === true) {
	            isKeyInputEnabled = true;
	            return cssClass();
	        }
	        else if (setting === false) {
	            return;
	        }
	        // default is to add the focus-outline when the tab key is used
	        function keyDown(ev) {
	            if (!isKeyInputEnabled && ev.keyCode === key_1.Key.TAB) {
	                isKeyInputEnabled = true;
	                enableKeyInput();
	            }
	        }
	        function pointerDown() {
	            isKeyInputEnabled = false;
	            enableKeyInput();
	        }
	        function enableKeyInput() {
	            cssClass();
	            self._zone.runOutsideAngular(function () {
	                document.removeEventListener('mousedown', pointerDown);
	                document.removeEventListener('touchstart', pointerDown);
	                if (isKeyInputEnabled) {
	                    document.addEventListener('mousedown', pointerDown);
	                    document.addEventListener('touchstart', pointerDown);
	                }
	            });
	        }
	        document.addEventListener('keydown', keyDown);
	    };
	    Keyboard = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [config_1.Config, form_1.Form, core_1.NgZone])
	    ], Keyboard);
	    return Keyboard;
	}());
	exports.Keyboard = Keyboard;
	var KEYBOARD_CLOSE_POLLING = 150;
	var KEYBOARD_POLLING_CHECKS_MAX = 100;


/***/ },
/* 136 */
/***/ function(module, exports) {

	"use strict";
	(function (Key) {
	    Key[Key["ENTER"] = 13] = "ENTER";
	    Key[Key["ESCAPE"] = 27] = "ESCAPE";
	    Key[Key["TAB"] = 9] = "TAB";
	})(exports.Key || (exports.Key = {}));
	var Key = exports.Key;
	;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var slide_edge_gesture_1 = __webpack_require__(138);
	var util_1 = __webpack_require__(127);
	/**
	 * Gesture attached to the content which the menu is assigned to
	 */
	var MenuContentGesture = (function (_super) {
	    __extends(MenuContentGesture, _super);
	    function MenuContentGesture(menu, contentEle, options) {
	        if (options === void 0) { options = {}; }
	        _super.call(this, contentEle, util_1.assign({
	            direction: 'x',
	            edge: menu.side,
	            threshold: 0,
	            maxEdgeStart: menu.maxEdgeStart || 75
	        }, options));
	        this.menu = menu;
	    }
	    MenuContentGesture.prototype.canStart = function (ev) {
	        var menu = this.menu;
	        if (!menu.enabled || !menu.swipeEnabled) {
	            void 0;
	            return false;
	        }
	        if (ev.distance > 50) {
	            // the distance is longer than you'd expect a side menu swipe to be
	            void 0;
	            return false;
	        }
	        void 0;
	        if (menu.side === 'right') {
	            // right side
	            if (menu.isOpen) {
	                // right side, opened
	                return true;
	            }
	            else {
	                // right side, closed
	                if ((ev.angle > 140 && ev.angle <= 180) || (ev.angle > -140 && ev.angle <= -180)) {
	                    return _super.prototype.canStart.call(this, ev);
	                }
	            }
	        }
	        else {
	            // left side
	            if (menu.isOpen) {
	                // left side, opened
	                return true;
	            }
	            else {
	                // left side, closed
	                if (ev.angle > -40 && ev.angle < 40) {
	                    return _super.prototype.canStart.call(this, ev);
	                }
	            }
	        }
	        // didn't pass the test, don't open this menu
	        return false;
	    };
	    // Set CSS, then wait one frame for it to apply before sliding starts
	    MenuContentGesture.prototype.onSlideBeforeStart = function (slide, ev) {
	        void 0;
	        this.menu.swipeStart();
	    };
	    MenuContentGesture.prototype.onSlide = function (slide, ev) {
	        var z = (this.menu.side === 'right' ? slide.min : slide.max);
	        var stepValue = (slide.distance / z);
	        void 0;
	        ev.srcEvent.preventDefault();
	        ev.preventDefault();
	        this.menu.swipeProgress(stepValue);
	    };
	    MenuContentGesture.prototype.onSlideEnd = function (slide, ev) {
	        var z = (this.menu.side === 'right' ? slide.min : slide.max);
	        var currentStepValue = (slide.distance / z);
	        z = Math.abs(z * 0.5);
	        var shouldCompleteRight = (ev.velocityX >= 0)
	            && (ev.velocityX > 0.2 || slide.delta > z);
	        var shouldCompleteLeft = (ev.velocityX <= 0)
	            && (ev.velocityX < -0.2 || slide.delta < -z);
	        void 0;
	        this.menu.swipeEnd(shouldCompleteLeft, shouldCompleteRight, currentStepValue);
	    };
	    MenuContentGesture.prototype.getElementStartPos = function (slide, ev) {
	        if (this.menu.side === 'right') {
	            // right menu
	            return this.menu.isOpen ? slide.min : slide.max;
	        }
	        // left menu
	        return this.menu.isOpen ? slide.max : slide.min;
	    };
	    MenuContentGesture.prototype.getSlideBoundaries = function () {
	        if (this.menu.side === 'right') {
	            // right menu
	            return {
	                min: -this.menu.width(),
	                max: 0
	            };
	        }
	        // left menu
	        return {
	            min: 0,
	            max: this.menu.width()
	        };
	    };
	    return MenuContentGesture;
	}(slide_edge_gesture_1.SlideEdgeGesture));
	exports.MenuContentGesture = MenuContentGesture;
	/**
	 * Gesture attached to the actual menu itself
	 */
	var MenuTargetGesture = (function (_super) {
	    __extends(MenuTargetGesture, _super);
	    function MenuTargetGesture(menu, menuEle) {
	        _super.call(this, menu, menuEle, {
	            maxEdgeStart: 0
	        });
	    }
	    return MenuTargetGesture;
	}(MenuContentGesture));
	exports.MenuTargetGesture = MenuTargetGesture;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var slide_gesture_1 = __webpack_require__(139);
	var util_1 = __webpack_require__(127);
	var dom_1 = __webpack_require__(124);
	var SlideEdgeGesture = (function (_super) {
	    __extends(SlideEdgeGesture, _super);
	    function SlideEdgeGesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        util_1.defaults(opts, {
	            edge: 'left',
	            maxEdgeStart: 50
	        });
	        _super.call(this, element, opts);
	        // Can check corners through use of eg 'left top'
	        this.edges = opts.edge.split(' ');
	        this.maxEdgeStart = opts.maxEdgeStart;
	    }
	    SlideEdgeGesture.prototype.canStart = function (ev) {
	        var _this = this;
	        this._d = this.getContainerDimensions();
	        return this.edges.every(function (edge) { return _this._checkEdge(edge, ev.center); });
	    };
	    SlideEdgeGesture.prototype.getContainerDimensions = function () {
	        return {
	            left: 0,
	            top: 0,
	            width: dom_1.windowDimensions().width,
	            height: dom_1.windowDimensions().height
	        };
	    };
	    SlideEdgeGesture.prototype._checkEdge = function (edge, pos) {
	        switch (edge) {
	            case 'left': return pos.x <= this._d.left + this.maxEdgeStart;
	            case 'right': return pos.x >= this._d.width - this.maxEdgeStart;
	            case 'top': return pos.y <= this._d.top + this.maxEdgeStart;
	            case 'bottom': return pos.y >= this._d.height - this.maxEdgeStart;
	        }
	    };
	    return SlideEdgeGesture;
	}(slide_gesture_1.SlideGesture));
	exports.SlideEdgeGesture = SlideEdgeGesture;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var drag_gesture_1 = __webpack_require__(140);
	var util_1 = __webpack_require__(142);
	var SlideGesture = (function (_super) {
	    __extends(SlideGesture, _super);
	    function SlideGesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        _super.call(this, element, opts);
	        this.slide = null;
	        this.element = element;
	    }
	    /*
	     * Get the min and max for the slide. pageX/pageY.
	     * Only called on dragstart.
	     */
	    SlideGesture.prototype.getSlideBoundaries = function (slide, ev) {
	        return {
	            min: 0,
	            max: this.element.offsetWidth
	        };
	    };
	    /*
	     * Get the element's pos when the drag starts.
	     * For example, an open side menu starts at 100% and a closed
	     * sidemenu starts at 0%.
	     */
	    SlideGesture.prototype.getElementStartPos = function (slide, ev) {
	        return 0;
	    };
	    SlideGesture.prototype.canStart = function (ev) {
	        return true;
	    };
	    SlideGesture.prototype.onDragStart = function (ev) {
	        if (!this.canStart(ev)) {
	            return false;
	        }
	        this.slide = {};
	        this.onSlideBeforeStart(this.slide, ev);
	        var _a = this.getSlideBoundaries(this.slide, ev), min = _a.min, max = _a.max;
	        this.slide.min = min;
	        this.slide.max = max;
	        this.slide.elementStartPos = this.getElementStartPos(this.slide, ev);
	        this.slide.pointerStartPos = ev.center[this.direction];
	        this.slide.started = true;
	        this.onSlideStart(this.slide, ev);
	        return true;
	    };
	    SlideGesture.prototype.onDrag = function (ev) {
	        if (!this.slide || !this.slide.started) {
	            return false;
	        }
	        this.slide.pos = ev.center[this.direction];
	        this.slide.distance = util_1.clamp(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
	        this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
	        this.onSlide(this.slide, ev);
	        return true;
	    };
	    SlideGesture.prototype.onDragEnd = function (ev) {
	        if (!this.slide || !this.slide.started)
	            return;
	        this.onSlideEnd(this.slide, ev);
	        this.slide = null;
	    };
	    SlideGesture.prototype.onSlideBeforeStart = function (slide, ev) { };
	    SlideGesture.prototype.onSlideStart = function (slide, ev) { };
	    SlideGesture.prototype.onSlide = function (slide, ev) { };
	    SlideGesture.prototype.onSlideEnd = function (slide, ev) { };
	    return SlideGesture;
	}(drag_gesture_1.DragGesture));
	exports.SlideGesture = SlideGesture;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var gesture_1 = __webpack_require__(141);
	var util_1 = __webpack_require__(142);
	/**
	 * @private
	 */
	var DragGesture = (function (_super) {
	    __extends(DragGesture, _super);
	    function DragGesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        util_1.defaults(opts, {});
	        _super.call(this, element, opts);
	    }
	    DragGesture.prototype.listen = function () {
	        var _this = this;
	        _super.prototype.listen.call(this);
	        this.on('panstart', function (ev) {
	            if (_this.onDragStart(ev) !== false) {
	                _this.dragging = true;
	            }
	        });
	        this.on('panmove', function (ev) {
	            if (!_this.dragging)
	                return;
	            if (_this.onDrag(ev) === false) {
	                _this.dragging = false;
	            }
	        });
	        this.on('panend', function (ev) {
	            if (!_this.dragging)
	                return;
	            _this.onDragEnd(ev);
	            _this.dragging = false;
	        });
	    };
	    DragGesture.prototype.onDrag = function (ev) { return true; };
	    DragGesture.prototype.onDragStart = function (ev) { return true; };
	    DragGesture.prototype.onDragEnd = function (ev) { };
	    return DragGesture;
	}(gesture_1.Gesture));
	exports.DragGesture = DragGesture;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var util_1 = __webpack_require__(142);
	var hammer_1 = __webpack_require__(144);
	/**
	 * @private
	 * A gesture recognizer class.
	 *
	 * TODO(mlynch): Re-enable the DOM event simulation that was causing issues (or verify hammer does this already, it might);
	 */
	var Gesture = (function () {
	    function Gesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        this._callbacks = {};
	        this.isListening = false;
	        util_1.defaults(opts, {
	            domEvents: true
	        });
	        this.element = element;
	        // Map 'x' or 'y' string to hammerjs opts
	        this.direction = opts.direction || 'x';
	        opts.direction = this.direction === 'x' ?
	            hammer_1.DIRECTION_HORIZONTAL :
	            hammer_1.DIRECTION_VERTICAL;
	        this._options = opts;
	    }
	    Gesture.prototype.options = function (opts) {
	        util_1.assign(this._options, opts);
	    };
	    Gesture.prototype.on = function (type, cb) {
	        if (type === 'pinch' || type === 'rotate') {
	            this._hammer.get('pinch').set({ enable: true });
	        }
	        this._hammer.on(type, cb);
	        (this._callbacks[type] || (this._callbacks[type] = [])).push(cb);
	    };
	    Gesture.prototype.off = function (type, cb) {
	        this._hammer.off(type, this._callbacks[type] ? cb : null);
	    };
	    Gesture.prototype.listen = function () {
	        if (!this.isListening) {
	            this._hammer = hammer_1.Hammer(this.element, this._options);
	        }
	        this.isListening = true;
	    };
	    Gesture.prototype.unlisten = function () {
	        var eventType;
	        var i;
	        if (this._hammer && this.isListening) {
	            for (eventType in this._callbacks) {
	                for (i = 0; i < this._callbacks[eventType].length; i++) {
	                    this._hammer.off(eventType, this._callbacks[eventType]);
	                }
	            }
	            this._hammer.destroy();
	        }
	        this._callbacks = {};
	        this._hammer = null;
	        this.isListening = false;
	    };
	    Gesture.prototype.destroy = function () {
	        this.unlisten();
	        this.element = this._options = null;
	    };
	    return Gesture;
	}());
	exports.Gesture = Gesture;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var domUtil = __webpack_require__(124);
	exports.dom = domUtil;
	__export(__webpack_require__(127));
	__export(__webpack_require__(143));


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var util_1 = __webpack_require__(127);
	function renderDateTime(template, value, locale) {
	    if (util_1.isBlank(value)) {
	        return '';
	    }
	    var tokens = [];
	    var hasText = false;
	    FORMAT_KEYS.forEach(function (format, index) {
	        if (template.indexOf(format.f) > -1) {
	            var token = '{' + index + '}';
	            var text = renderTextFormat(format.f, value[format.k], value, locale);
	            if (!hasText && text && util_1.isPresent(value[format.k])) {
	                hasText = true;
	            }
	            tokens.push(token, text);
	            template = template.replace(format.f, token);
	        }
	    });
	    if (!hasText) {
	        return '';
	    }
	    for (var i = 0; i < tokens.length; i += 2) {
	        template = template.replace(tokens[i], tokens[i + 1]);
	    }
	    return template;
	}
	exports.renderDateTime = renderDateTime;
	function renderTextFormat(format, value, date, locale) {
	    if (format === FORMAT_DDDD || format === FORMAT_DDD) {
	        try {
	            value = (new Date(date.year, date.month - 1, date.day)).getDay();
	            if (format === FORMAT_DDDD) {
	                return (util_1.isPresent(locale.dayNames) ? locale.dayNames : DAY_NAMES)[value];
	            }
	            return (util_1.isPresent(locale.dayShortNames) ? locale.dayShortNames : DAY_SHORT_NAMES)[value];
	        }
	        catch (e) { }
	        return '';
	    }
	    if (format === FORMAT_A) {
	        return date ? date.hour < 12 ? 'AM' : 'PM' : util_1.isPresent(value) ? value.toUpperCase() : '';
	    }
	    if (format === FORMAT_a) {
	        return date ? date.hour < 12 ? 'am' : 'pm' : util_1.isPresent(value) ? value : '';
	    }
	    if (util_1.isBlank(value)) {
	        return '';
	    }
	    if (format === FORMAT_YY || format === FORMAT_MM ||
	        format === FORMAT_DD || format === FORMAT_HH ||
	        format === FORMAT_mm) {
	        return twoDigit(value);
	    }
	    if (format === FORMAT_YYYY) {
	        return fourDigit(value);
	    }
	    if (format === FORMAT_MMMM) {
	        return (util_1.isPresent(locale.monthNames) ? locale.monthNames : MONTH_NAMES)[value - 1];
	    }
	    if (format === FORMAT_MMM) {
	        return (util_1.isPresent(locale.monthShortNames) ? locale.monthShortNames : MONTH_SHORT_NAMES)[value - 1];
	    }
	    if (format === FORMAT_hh || format === FORMAT_h) {
	        if (value === 0) {
	            return '12';
	        }
	        if (value > 12) {
	            value -= 12;
	        }
	        if (format === FORMAT_hh && value < 10) {
	            return ('0' + value);
	        }
	    }
	    return value.toString();
	}
	exports.renderTextFormat = renderTextFormat;
	function dateValueRange(format, min, max) {
	    var opts = [];
	    var i;
	    if (format === FORMAT_YYYY || format === FORMAT_YY) {
	        // year
	        i = max.year;
	        while (i >= min.year) {
	            opts.push(i--);
	        }
	    }
	    else if (format === FORMAT_MMMM || format === FORMAT_MMM ||
	        format === FORMAT_MM || format === FORMAT_M ||
	        format === FORMAT_hh || format === FORMAT_h) {
	        // month or 12-hour
	        for (i = 1; i < 13; i++) {
	            opts.push(i);
	        }
	    }
	    else if (format === FORMAT_DDDD || format === FORMAT_DDD ||
	        format === FORMAT_DD || format === FORMAT_D) {
	        // day
	        for (i = 1; i < 32; i++) {
	            opts.push(i);
	        }
	    }
	    else if (format === FORMAT_HH || format === FORMAT_H) {
	        // 24-hour
	        for (i = 0; i < 24; i++) {
	            opts.push(i);
	        }
	    }
	    else if (format === FORMAT_mm || format === FORMAT_m) {
	        // minutes
	        for (i = 0; i < 60; i++) {
	            opts.push(i);
	        }
	    }
	    else if (format === FORMAT_A || format === FORMAT_a) {
	        // AM/PM
	        opts.push('am', 'pm');
	    }
	    return opts;
	}
	exports.dateValueRange = dateValueRange;
	function dateSortValue(year, month, day) {
	    return parseInt("1" + fourDigit(year) + twoDigit(month) + twoDigit(day), 10);
	}
	exports.dateSortValue = dateSortValue;
	function dateDataSortValue(data) {
	    if (data) {
	        return dateSortValue(data.year, data.month, data.day);
	    }
	    return -1;
	}
	exports.dateDataSortValue = dateDataSortValue;
	function daysInMonth(month, year) {
	    return (month === 4 || month === 6 || month === 9 || month === 11) ? 30 : (month === 2) ? isLeapYear(year) ? 29 : 28 : 31;
	}
	exports.daysInMonth = daysInMonth;
	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
	}
	exports.isLeapYear = isLeapYear;
	var ISO_8601_REGEXP = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
	var TIME_REGEXP = /^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
	function parseDate(val) {
	    // manually parse IS0 cuz Date.parse cannot be trusted
	    // ISO 8601 format: 1994-12-15T13:47:20Z
	    var parse;
	    if (util_1.isPresent(val) && val !== '') {
	        // try parsing for just time first, HH:MM
	        parse = TIME_REGEXP.exec(val);
	        if (util_1.isPresent(parse)) {
	            // adjust the array so it fits nicely with the datetime parse
	            parse.unshift(undefined, undefined);
	            parse[2] = parse[3] = undefined;
	        }
	        else {
	            // try parsing for full ISO datetime
	            parse = ISO_8601_REGEXP.exec(val);
	        }
	    }
	    if (util_1.isBlank(parse)) {
	        // wasn't able to parse the ISO datetime
	        return null;
	    }
	    // ensure all the parse values exist with at least 0
	    for (var i = 1; i < 8; i++) {
	        parse[i] = (parse[i] !== undefined ? parseInt(parse[i], 10) : null);
	    }
	    var tzOffset = 0;
	    if (util_1.isPresent(parse[9]) && util_1.isPresent(parse[10])) {
	        // hours
	        tzOffset = parseInt(parse[10], 10) * 60;
	        if (util_1.isPresent(parse[11])) {
	            // minutes
	            tzOffset += parseInt(parse[11], 10);
	        }
	        if (parse[9] === '-') {
	            // + or -
	            tzOffset *= -1;
	        }
	    }
	    return {
	        year: parse[1],
	        month: parse[2],
	        day: parse[3],
	        hour: parse[4],
	        minute: parse[5],
	        second: parse[6],
	        millisecond: parse[7],
	        tzOffset: tzOffset,
	    };
	}
	exports.parseDate = parseDate;
	function updateDate(existingData, newData) {
	    if (util_1.isPresent(newData) && newData !== '') {
	        if (util_1.isString(newData)) {
	            // new date is a string, and hopefully in the ISO format
	            // convert it to our DateTimeData if a valid ISO
	            newData = parseDate(newData);
	            if (newData) {
	                // successfully parsed the ISO string to our DateTimeData
	                util_1.assign(existingData, newData);
	                return;
	            }
	        }
	        else if ((util_1.isPresent(newData.year) || util_1.isPresent(newData.hour))) {
	            // newData is from of a datetime picker's selected values
	            // update the existing DateTimeData data with the new values
	            // do some magic for 12-hour values
	            if (util_1.isPresent(newData.ampm) && util_1.isPresent(newData.hour)) {
	                if (newData.ampm.value === 'pm') {
	                    newData.hour.value = (newData.hour.value === 12 ? 12 : newData.hour.value + 12);
	                }
	                else {
	                    newData.hour.value = (newData.hour.value === 12 ? 0 : newData.hour.value);
	                }
	            }
	            // merge new values from the picker's selection
	            // to the existing DateTimeData values
	            for (var k in newData) {
	                existingData[k] = newData[k].value;
	            }
	            return;
	        }
	        // eww, invalid data
	        void 0;
	    }
	    else {
	        // blank data, clear everything out
	        for (var k in existingData) {
	            delete existingData[k];
	        }
	    }
	}
	exports.updateDate = updateDate;
	function parseTemplate(template) {
	    var formats = [];
	    template = template.replace(/[^\w\s]/gi, ' ');
	    FORMAT_KEYS.forEach(function (format) {
	        if (format.f.length > 1 && template.indexOf(format.f) > -1 && template.indexOf(format.f + format.f.charAt(0)) < 0) {
	            template = template.replace(format.f, ' ' + format.f + ' ');
	        }
	    });
	    var words = template.split(' ').filter(function (w) { return w.length > 0; });
	    words.forEach(function (word, i) {
	        FORMAT_KEYS.forEach(function (format) {
	            if (word === format.f) {
	                if (word === FORMAT_A || word === FORMAT_a) {
	                    // this format is an am/pm format, so it's an "a" or "A"
	                    if ((formats.indexOf(FORMAT_h) < 0 && formats.indexOf(FORMAT_hh) < 0) ||
	                        (words[i - 1] !== FORMAT_m && words[i - 1] !== FORMAT_mm)) {
	                        // template does not already have a 12-hour format
	                        // or this am/pm format doesn't have a minute format immediately before it
	                        // so do not treat this word "a" or "A" as an am/pm format
	                        return;
	                    }
	                }
	                formats.push(word);
	            }
	        });
	    });
	    return formats;
	}
	exports.parseTemplate = parseTemplate;
	function getValueFromFormat(date, format) {
	    if (format === FORMAT_A || format === FORMAT_a) {
	        return (date.hour < 12 ? 'am' : 'pm');
	    }
	    if (format === FORMAT_hh || format === FORMAT_h) {
	        return (date.hour > 12 ? date.hour - 12 : date.hour);
	    }
	    return date[convertFormatToKey(format)];
	}
	exports.getValueFromFormat = getValueFromFormat;
	function convertFormatToKey(format) {
	    for (var k in FORMAT_KEYS) {
	        if (FORMAT_KEYS[k].f === format) {
	            return FORMAT_KEYS[k].k;
	        }
	    }
	    return null;
	}
	exports.convertFormatToKey = convertFormatToKey;
	function convertDataToISO(data) {
	    // https://www.w3.org/TR/NOTE-datetime
	    var rtn = '';
	    if (util_1.isPresent(data)) {
	        if (util_1.isPresent(data.year)) {
	            // YYYY
	            rtn = fourDigit(data.year);
	            if (util_1.isPresent(data.month)) {
	                // YYYY-MM
	                rtn += '-' + twoDigit(data.month);
	                if (util_1.isPresent(data.day)) {
	                    // YYYY-MM-DD
	                    rtn += '-' + twoDigit(data.day);
	                    if (util_1.isPresent(data.hour)) {
	                        // YYYY-MM-DDTHH:mm:SS
	                        rtn += "T" + twoDigit(data.hour) + ":" + twoDigit(data.minute) + ":" + twoDigit(data.second);
	                        if (data.millisecond > 0) {
	                            // YYYY-MM-DDTHH:mm:SS.SSS
	                            rtn += '.' + threeDigit(data.millisecond);
	                        }
	                        if (util_1.isBlank(data.tzOffset) || data.tzOffset === 0) {
	                            // YYYY-MM-DDTHH:mm:SSZ
	                            rtn += 'Z';
	                        }
	                        else {
	                            // YYYY-MM-DDTHH:mm:SS+/-HH:mm
	                            rtn += (data.tzOffset > 0 ? '+' : '-') + twoDigit(Math.floor(data.tzOffset / 60)) + ':' + twoDigit(data.tzOffset % 60);
	                        }
	                    }
	                }
	            }
	        }
	        else if (util_1.isPresent(data.hour)) {
	            // HH:mm
	            rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);
	            if (util_1.isPresent(data.second)) {
	                // HH:mm:SS
	                rtn += ':' + twoDigit(data.second);
	                if (util_1.isPresent(data.millisecond)) {
	                    // HH:mm:SS.SSS
	                    rtn += '.' + threeDigit(data.millisecond);
	                }
	            }
	        }
	    }
	    return rtn;
	}
	exports.convertDataToISO = convertDataToISO;
	function twoDigit(val) {
	    return ('0' + (util_1.isPresent(val) ? val : '0')).slice(-2);
	}
	function threeDigit(val) {
	    return ('00' + (util_1.isPresent(val) ? val : '0')).slice(-3);
	}
	function fourDigit(val) {
	    return ('000' + (util_1.isPresent(val) ? val : '0')).slice(-4);
	}
	var FORMAT_YYYY = 'YYYY';
	var FORMAT_YY = 'YY';
	var FORMAT_MMMM = 'MMMM';
	var FORMAT_MMM = 'MMM';
	var FORMAT_MM = 'MM';
	var FORMAT_M = 'M';
	var FORMAT_DDDD = 'DDDD';
	var FORMAT_DDD = 'DDD';
	var FORMAT_DD = 'DD';
	var FORMAT_D = 'D';
	var FORMAT_HH = 'HH';
	var FORMAT_H = 'H';
	var FORMAT_hh = 'hh';
	var FORMAT_h = 'h';
	var FORMAT_mm = 'mm';
	var FORMAT_m = 'm';
	var FORMAT_A = 'A';
	var FORMAT_a = 'a';
	var FORMAT_KEYS = [
	    { f: FORMAT_YYYY, k: 'year' },
	    { f: FORMAT_MMMM, k: 'month' },
	    { f: FORMAT_DDDD, k: 'day' },
	    { f: FORMAT_MMM, k: 'month' },
	    { f: FORMAT_DDD, k: 'day' },
	    { f: FORMAT_YY, k: 'year' },
	    { f: FORMAT_MM, k: 'month' },
	    { f: FORMAT_DD, k: 'day' },
	    { f: FORMAT_HH, k: 'hour' },
	    { f: FORMAT_hh, k: 'hour' },
	    { f: FORMAT_mm, k: 'minute' },
	    { f: FORMAT_M, k: 'month' },
	    { f: FORMAT_D, k: 'day' },
	    { f: FORMAT_H, k: 'hour' },
	    { f: FORMAT_h, k: 'hour' },
	    { f: FORMAT_m, k: 'minute' },
	    { f: FORMAT_A, k: 'ampm' },
	    { f: FORMAT_a, k: 'ampm' },
	];
	var FORMAT_REGEX = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|DD?D?D?|ddd?d?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|.)/g;
	var DAY_NAMES = [
	    'Sunday',
	    'Monday',
	    'Tuesday',
	    'Wednesday',
	    'Thursday',
	    'Friday',
	    'Saturday',
	];
	var DAY_SHORT_NAMES = [
	    'Sun',
	    'Mon',
	    'Tue',
	    'Wed',
	    'Thu',
	    'Fri',
	    'Sat',
	];
	var MONTH_NAMES = [
	    'January',
	    'February',
	    'March',
	    'April',
	    'May',
	    'June',
	    'July',
	    'August',
	    'September',
	    'October',
	    'November',
	    'December',
	];
	var MONTH_SHORT_NAMES = [
	    'Jan',
	    'Feb',
	    'Mar',
	    'Apr',
	    'May',
	    'Jun',
	    'Jul',
	    'Aug',
	    'Sep',
	    'Oct',
	    'Nov',
	    'Dec',
	];


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/* tslint:disable */
	var util_1 = __webpack_require__(127);
	var win = window;
	var doc = document;
	/*! Hammer.JS - v2.0.6 - 2015-12-23
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2015 Jorik Tangelder;
	 * Licensed under the  license */
	var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = doc.createElement('div');
	var TYPE_FUNCTION = 'function';
	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;
	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}
	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}
	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;
	    if (!obj) {
	        return;
	    }
	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    }
	    else if (obj.length !== undefined) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    }
	    else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}
	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype, childP;
	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;
	    if (properties) {
	        util_1.assign(childP, properties);
	    }
	}
	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}
	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined : undefined, args);
	    }
	    return val;
	}
	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return (val1 === undefined) ? val2 : val1;
	}
	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        target.addEventListener(type, handler, false);
	    });
	}
	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        target.removeEventListener(type, handler, false);
	    });
	}
	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}
	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}
	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}
	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    }
	    else {
	        var i = 0;
	        while (i < src.length) {
	            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}
	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}
	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;
	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }
	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        }
	        else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key] ? 1 : 0;
	            });
	        }
	    }
	    return results;
	}
	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);
	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = (prefix) ? prefix + camelProp : property;
	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined;
	}
	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}
	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument || element;
	    return (doc.defaultView || doc.parentWindow || window);
	}
	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';
	var COMPUTE_INTERVAL = 25;
	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;
	var DIRECTION_NONE = 1;
	exports.DIRECTION_LEFT = 2;
	exports.DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;
	exports.DIRECTION_HORIZONTAL = exports.DIRECTION_LEFT | exports.DIRECTION_RIGHT;
	exports.DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL;
	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];
	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;
	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function (ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };
	    this.init();
	}
	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function () { },
	    /**
	     * bind the events
	     */
	    init: function () {
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },
	    /**
	     * unbind the events
	     */
	    destroy: function () {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};
	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;
	    if (inputClass) {
	        Type = inputClass;
	    }
	    else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    }
	    else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    }
	    else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    }
	    else {
	        Type = TouchMouseInput;
	    }
	    return new (Type)(manager, inputHandler);
	}
	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
	    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));
	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;
	    if (isFirst) {
	        manager.session = {};
	    }
	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;
	    // compute scale, rotation etc
	    computeInputData(manager, input);
	    // emit secret event
	    manager.emit('hammer.input', input);
	    manager.recognize(input);
	    manager.session.prevInput = input;
	}
	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;
	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }
	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    }
	    else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }
	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;
	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);
	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
	    input.overallVelocityX = overallVelocity.x;
	    input.overallVelocityY = overallVelocity.y;
	    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;
	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
	    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
	        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);
	    computeIntervalInputData(session, input);
	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}
	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};
	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };
	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }
	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}
	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input, deltaTime = input.timeStamp - last.timeStamp, velocity, velocityX, velocityY, direction;
	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
	        var deltaX = input.deltaX - last.deltaX;
	        var deltaY = input.deltaY - last.deltaY;
	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);
	        session.lastInterval = input;
	    }
	    else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }
	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}
	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }
	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}
	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;
	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }
	    var x = 0, y = 0, i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }
	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}
	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}
	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }
	    if (abs(x) >= abs(y)) {
	        return x < 0 ? exports.DIRECTION_LEFT : exports.DIRECTION_RIGHT;
	    }
	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}
	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
	    return Math.sqrt((x * x) + (y * y));
	}
	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}
	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}
	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}
	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};
	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput(manager, handler) {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;
	    this.allow = true; // used by Input.TouchMouse to disable mouse events
	    this.pressed = false; // mousedown state
	    Input.apply(this, arguments);
	}
	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];
	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }
	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }
	        // mouse must be down, and mouse events are allowed (see the TouchMouse input)
	        if (!this.pressed || !this.allow) {
	            return;
	        }
	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }
	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});
	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};
	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};
	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
	// IE10 has prefixed support, and case-sensitive
	if (win.MSPointerEvent && !win.PointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}
	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;
	    Input.apply(this, arguments);
	    this.store = (this.manager.session.pointerEvents = []);
	}
	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;
	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
	        var isTouch = (pointerType == INPUT_TYPE_TOUCH);
	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');
	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        }
	        else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }
	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }
	        // update the event in the store
	        store[storeIndex] = ev;
	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });
	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});
	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;
	    Input.apply(this, arguments);
	}
	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }
	        if (!this.started) {
	            return;
	        }
	        var touches = normalizeSingleTouches.call(this, ev, type);
	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);
	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }
	    return [all, changed];
	}
	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput(manager, handler) {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};
	    Input.apply(this, arguments);
	}
	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;
	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }
	    var i, targetTouches, changedTouches = toArray(ev.changedTouches), changedTargetTouches = [], target = this.target;
	    // get target touches from touches
	    targetTouches = allTouches.filter(function (touch) {
	        return hasParent(touch.target, target);
	    });
	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }
	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }
	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }
	    if (!changedTargetTouches.length) {
	        return;
	    }
	    return [
	        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
	        changedTargetTouches
	    ];
	}
	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */
	function TouchMouseInput() {
	    Input.apply(this, arguments);
	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);
	}
	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH), isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);
	        // when we're in a touch event, so  block all upcoming mouse events
	        // most mobile browser also emit mouseevents, right after touchstart
	        if (isTouch) {
	            this.mouse.allow = false;
	        }
	        else if (isMouse && !this.mouse.allow) {
	            return;
	        }
	        // reset the allowMouse when we're done
	        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
	            this.mouse.allow = true;
	        }
	        this.callback(manager, inputEvent, inputData);
	    },
	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});
	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';
	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}
	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function (value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }
	        if (NATIVE_TOUCH_ACTION && this.manager.element.style) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },
	    /**
	     * just re-set the touchAction value
	     */
	    update: function () {
	        this.set(this.manager.options.touchAction);
	    },
	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function () {
	        var actions = [];
	        each(this.manager.recognizers, function (recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },
	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function (input) {
	        // not needed with native support for the touchAction property
	        if (NATIVE_TOUCH_ACTION) {
	            return;
	        }
	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;
	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }
	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE);
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	        if (hasNone) {
	            //do not prevent defaults if this is a tap gesture
	            var isTapPointer = input.pointers.length === 1;
	            var isTapMovement = input.distance < 2;
	            var isTapTouchTime = input.deltaTime < 250;
	            if (isTapPointer && isTapMovement && isTapTouchTime) {
	                return;
	            }
	        }
	        if (hasPanX && hasPanY) {
	            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	            return;
	        }
	        if (hasNone ||
	            (hasPanY && direction & exports.DIRECTION_HORIZONTAL) ||
	            (hasPanX && direction & exports.DIRECTION_VERTICAL)) {
	            return this.preventSrc(srcEvent);
	        }
	    },
	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function (srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};
	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }
	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	    // if both pan-x and pan-y are set (different recognizers
	    // for different directions, e.g. horizontal pan but vertical swipe?)
	    // we need none (as otherwise with pan-x pan-y combined none of these
	    // recognizers will work, since the browser would handle all panning
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_NONE;
	    }
	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }
	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }
	    return TOUCH_ACTION_AUTO;
	}
	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;
	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.options = util_1.assign({}, this.defaults, options || {});
	    this.id = uniqueId();
	    this.manager = null;
	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);
	    this.state = STATE_POSSIBLE;
	    this.simultaneous = {};
	    this.requireFail = [];
	}
	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},
	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function (options) {
	        util_1.assign(this.options, options);
	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },
	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }
	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },
	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },
	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }
	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },
	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },
	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function () {
	        return this.requireFail.length > 0;
	    },
	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function (otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },
	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function (input) {
	        var self = this;
	        var state = this.state;
	        function emit(event) {
	            self.manager.emit(event, input);
	        }
	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	        emit(self.options.event); // simple 'eventName' events
	        if (input.additionalEvent) {
	            emit(input.additionalEvent);
	        }
	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	    },
	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function (input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },
	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function () {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },
	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function (inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = util_1.assign({}, inputData);
	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }
	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }
	        this.state = this.process(inputDataClone);
	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },
	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function (inputData) { },
	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function () { },
	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function () { }
	};
	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    }
	    else if (state & STATE_ENDED) {
	        return 'end';
	    }
	    else if (state & STATE_CHANGED) {
	        return 'move';
	    }
	    else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}
	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    }
	    else if (direction == DIRECTION_UP) {
	        return 'up';
	    }
	    else if (direction == exports.DIRECTION_LEFT) {
	        return 'left';
	    }
	    else if (direction == exports.DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}
	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}
	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}
	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },
	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function (input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },
	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function (input) {
	        var state = this.state;
	        var eventType = input.eventType;
	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);
	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        }
	        else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            }
	            else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});
	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	    this.pX = null;
	    this.pY = null;
	}
	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },
	    getTouchAction: function () {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & exports.DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & exports.DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },
	    directionTest: function (input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;
	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & exports.DIRECTION_HORIZONTAL) {
	                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? exports.DIRECTION_LEFT : exports.DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            }
	            else {
	                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },
	    attrTest: function (input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) &&
	            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
	    },
	    emit: function (input) {
	        this.pX = input.deltaX;
	        this.pY = input.deltaY;
	        var direction = directionStr(input.direction);
	        if (direction) {
	            input.additionalEvent = this.options.event + direction;
	        }
	        this._super.emit.call(this, input);
	    }
	});
	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_NONE];
	    },
	    attrTest: function (input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },
	    emit: function (input) {
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            input.additionalEvent = this.options.event + inOut;
	        }
	        this._super.emit.call(this, input);
	    }
	});
	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);
	    this._timer = null;
	    this._input = null;
	}
	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 251,
	        threshold: 9 // a minimal movement is ok, but keep it low
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_AUTO];
	    },
	    process: function (input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;
	        this._input = input;
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
	            this.reset();
	        }
	        else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function () {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        }
	        else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },
	    reset: function () {
	        clearTimeout(this._timer);
	    },
	    emit: function (input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }
	        if (input && (input.eventType & INPUT_END)) {
	            this.manager.emit(this.options.event + 'up', input);
	        }
	        else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_NONE];
	    },
	    attrTest: function (input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});
	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.3,
	        direction: exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL,
	        pointers: 1
	    },
	    getTouchAction: function () {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },
	    attrTest: function (input) {
	        var direction = this.options.direction;
	        var velocity;
	        if (direction & (exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL)) {
	            velocity = input.overallVelocity;
	        }
	        else if (direction & exports.DIRECTION_HORIZONTAL) {
	            velocity = input.overallVelocityX;
	        }
	        else if (direction & exports.DIRECTION_VERTICAL) {
	            velocity = input.overallVelocityY;
	        }
	        return this._super.attrTest.call(this, input) &&
	            direction & input.offsetDirection &&
	            input.distance > this.options.threshold &&
	            input.maxPointers == this.options.pointers &&
	            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },
	    emit: function (input) {
	        var direction = directionStr(input.offsetDirection);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }
	        this.manager.emit(this.options.event, input);
	    }
	});
	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);
	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;
	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}
	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300,
	        time: 250,
	        threshold: 9,
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_MANIPULATION];
	    },
	    process: function (input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;
	        this.reset();
	        if ((input.eventType & INPUT_START) && (this.count === 0)) {
	            return this.failTimeout();
	        }
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }
	            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;
	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            }
	            else {
	                this.count += 1;
	            }
	            this._input = input;
	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                }
	                else {
	                    this._timer = setTimeoutContext(function () {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },
	    failTimeout: function () {
	        this._timer = setTimeoutContext(function () {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },
	    reset: function () {
	        clearTimeout(this._timer);
	    },
	    emit: function () {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	/**
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, _defaults.preset);
	    return new Manager(element, options);
	}
	exports.Hammer = Hammer;
	/**
	 * @const {string}
	 */
	var VERSION = '2.0.6';
	/**
	 * default settings
	 * @namespace
	 */
	var _defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,
	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,
	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,
	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,
	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,
	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	        [RotateRecognizer, { enable: false }],
	        [PinchRecognizer, { enable: false }, ['rotate']],
	        [SwipeRecognizer, { direction: exports.DIRECTION_HORIZONTAL }],
	        [PanRecognizer, { direction: exports.DIRECTION_HORIZONTAL }, ['swipe']],
	        [TapRecognizer],
	        [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],
	        [PressRecognizer]
	    ],
	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',
	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',
	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',
	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',
	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',
	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};
	var STOP = 1;
	var FORCED_STOP = 2;
	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    this.options = util_1.assign({}, _defaults, options || {});
	    this.options.inputTarget = this.options.inputTarget || element;
	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];
	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);
	    toggleCssProps(this, true);
	    each(this.options.recognizers, function (item) {
	        var recognizer = this.add(new (item[0])(item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}
	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function (options) {
	        util_1.assign(this.options, options);
	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },
	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function (force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },
	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function (inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }
	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);
	        var recognizer;
	        var recognizers = this.recognizers;
	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;
	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
	            curRecognizer = session.curRecognizer = null;
	        }
	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];
	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer ||
	                recognizer.canRecognizeWith(curRecognizer))) {
	                recognizer.recognize(inputData);
	            }
	            else {
	                recognizer.reset();
	            }
	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },
	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function (recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }
	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },
	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function (recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }
	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }
	        this.recognizers.push(recognizer);
	        recognizer.manager = this;
	        this.touchAction.update();
	        return recognizer;
	    },
	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function (recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }
	        recognizer = this.get(recognizer);
	        // let's make sure this recognizer exists
	        if (recognizer) {
	            var recognizers = this.recognizers;
	            var index = inArray(recognizers, recognizer);
	            if (index !== -1) {
	                recognizers.splice(index, 1);
	                this.touchAction.update();
	            }
	        }
	        return this;
	    },
	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function (events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },
	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function (events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            if (!handler) {
	                delete handlers[event];
	            }
	            else {
	                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },
	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function (event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }
	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }
	        data.type = event;
	        data.preventDefault = function () {
	            data.srcEvent.preventDefault();
	        };
	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },
	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function () {
	        this.element && toggleCssProps(this, false);
	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};
	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    if (!element.style) {
	        return;
	    }
	    each(manager.options.cssProps, function (value, name) {
	        element.style[prefixed(element.style, name)] = add ? value : '';
	    });
	}
	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = doc.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}
	util_1.assign(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,
	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,
	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: exports.DIRECTION_LEFT,
	    DIRECTION_RIGHT: exports.DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: exports.DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: exports.DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,
	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,
	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,
	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,
	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});
	win.Hammer = Hammer;


/***/ },
/* 145 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @name MenuController
	 * @description
	 * The MenuController is a provider which makes it easy to control a [Menu](../Menu).
	 * Its methods can be used to display the menu, enable the menu, toggle the menu, and more.
	 * The controller will grab a reference to the menu by the `side`, `id`, or, if neither
	 * of these are passed to it, it will grab the first menu it finds.
	 *
	 *
	 * @usage
	 *
	 * Add a basic menu component to start with. See the [Menu](../Menu) API docs
	 * for more information on adding menu components.
	 *
	 * ```html
	 * <ion-menu [content]="mycontent">
	 *   <ion-content>
	 *     <ion-list>
	 *     ...
	 *     </ion-list>
	 *   </ion-content>
	 * </ion-menu>
	 *
	 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * To call the controller methods, inject the `MenuController` provider
	 * into the page. Then, create some methods for opening, closing, and
	 * toggling the menu.
	 *
	 * ```ts
	 * import {Component} from '@angular/core';
	 * import {MenuController} from 'ionic-angular';
	 *
	 * @Component({...})
	 * export class MyPage {
	 *
	 *  constructor(private menu: MenuController) {
	 *
	 *  }
	 *
	 *  openMenu() {
	 *    this.menu.open();
	 *  }
	 *
	 *  closeMenu() {
	 *    this.menu.close();
	 *  }
	 *
	 *  toggleMenu() {
	 *    this.menu.toggle();
	 *  }
	 *
	 * }
	 * ```
	 *
	 * Since only one menu exists, the `MenuController` will grab the
	 * correct menu and call the correct method for each.
	 *
	 *
	 * ### Multiple Menus on Different Sides
	 *
	 * For applications with both a left and right menu, the desired menu can be
	 * grabbed by passing the `side` of the menu. If nothing is passed, it will
	 * default to the `"left"` menu.
	 *
	 * ```html
	 * <ion-menu side="left" [content]="mycontent">...</ion-menu>
	 * <ion-menu side="right" [content]="mycontent">...</ion-menu>
	 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * ```ts
	 *  toggleLeftMenu() {
	 *    this.menu.toggle();
	 *  }
	 *
	 *  toggleRightMenu() {
	 *    this.menu.toggle('right');
	 *  }
	 * ```
	 *
	 *
	 * ### Multiple Menus on the Same Side
	 *
	 * An application can have multiple menus on the same side. In order to determine
	 * the menu to control, an `id` should be passed. In the example below, the menu
	 * with the `authenticated` id will be enabled, and the menu with the `unauthenticated`
	 * id will be disabled.
	 *
	 * ```html
	 * <ion-menu id="authenticated" side="left" [content]="mycontent">...</ion-menu>
	 * <ion-menu id="unauthenticated" side="left" [content]="mycontent">...</ion-menu>
	 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * ```ts
	 *  enableAuthenticatedMenu() {
	 *    this.menu.enable(true, 'authenticated');
	 *    this.menu.enable(false, 'unauthenticated');
	 *  }
	 * ```
	 *
	 * Note: if an app only has one menu, there is no reason to pass an `id`.
	 *
	 *
	 * @demo /docs/v2/demos/menu/
	 *
	 * @see {@link /docs/v2/components#menus Menu Component Docs}
	 * @see {@link ../Menu Menu API Docs}
	 *
	 */
	var MenuController = (function () {
	    function MenuController() {
	        this._menus = [];
	    }
	    /**
	     * Progamatically open the Menu.
	     * @return {Promise} returns a promise when the menu is fully opened
	     */
	    MenuController.prototype.open = function (menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.open();
	        }
	        return Promise.resolve(false);
	    };
	    /**
	     * Progamatically close the Menu. If no `menuId` is given as the first
	     * argument then it'll close any menu which is open. If a `menuId`
	     * is given then it'll close that exact menu.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Promise} returns a promise when the menu is fully closed
	     */
	    MenuController.prototype.close = function (menuId) {
	        var menu;
	        if (menuId) {
	            // find the menu by its id
	            menu = this.get(menuId);
	        }
	        else {
	            // find the menu that is open
	            menu = this._menus.find(function (m) { return m.isOpen; });
	        }
	        if (menu) {
	            // close the menu
	            return menu.close();
	        }
	        return Promise.resolve(false);
	    };
	    MenuController.prototype.tempDisable = function (temporarilyDisable) {
	        this._menus.forEach(function (menu) {
	            menu.tempDisable(temporarilyDisable);
	        });
	    };
	    /**
	     * Toggle the menu. If it's closed, it will open, and if opened, it
	     * will close.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Promise} returns a promise when the menu has been toggled
	     */
	    MenuController.prototype.toggle = function (menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.toggle();
	        }
	        return Promise.resolve(false);
	    };
	    /**
	     * Used to enable or disable a menu. For example, there could be multiple
	     * left menus, but only one of them should be able to be opened at the same
	     * time. If there are multiple menus on the same side, then enabling one menu
	     * will also automatically disable all the others that are on the same side.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
	     */
	    MenuController.prototype.enable = function (shouldEnable, menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.enable(shouldEnable);
	        }
	    };
	    /**
	     * Used to enable or disable the ability to swipe open the menu.
	     * @param {boolean} shouldEnable  True if it should be swipe-able, false if not.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
	     */
	    MenuController.prototype.swipeEnable = function (shouldEnable, menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.swipeEnable(shouldEnable);
	        }
	    };
	    /**
	     * @return {boolean} Returns true if the menu is currently open, otherwise false.
	     */
	    MenuController.prototype.isOpen = function (menuId) {
	        var menu = this.get(menuId);
	        return menu && menu.isOpen || false;
	    };
	    /**
	     * @return {boolean} Returns true if the menu is currently enabled, otherwise false.
	     */
	    MenuController.prototype.isEnabled = function (menuId) {
	        var menu = this.get(menuId);
	        return menu && menu.enabled || false;
	    };
	    /**
	     * Used to get a menu instance. If a `menuId` is not provided then it'll
	     * return the first menu found. If a `menuId` is `left` or `right`, then
	     * it'll return the enabled menu on that side. Otherwise, if a `menuId` is
	     * provided, then it'll try to find the menu using the menu's `id`
	     * property. If a menu is not found then it'll return `null`.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Menu}  Returns the instance of the menu if found, otherwise `null`.
	     */
	    MenuController.prototype.get = function (menuId) {
	        var menu;
	        if (menuId === 'left' || menuId === 'right') {
	            // there could be more than one menu on the same side
	            // so first try to get the enabled one
	            menu = this._menus.find(function (m) { return m.side === menuId && m.enabled; });
	            if (menu)
	                return menu;
	            // didn't find a menu side that is enabled
	            // so try to get the first menu side found
	            return this._menus.find(function (m) { return m.side === menuId; }) || null;
	        }
	        else if (menuId) {
	            // the menuId was not left or right
	            // so try to get the menu by its "id"
	            return this._menus.find(function (m) { return m.id === menuId; }) || null;
	        }
	        // return the first enabled menu
	        menu = this._menus.find(function (m) { return m.enabled; });
	        if (menu)
	            return menu;
	        // get the first menu in the array, if one exists
	        return (this._menus.length ? this._menus[0] : null);
	    };
	    /**
	     * @return {Array<Menu>}  Returns an array of all menu instances.
	     */
	    MenuController.prototype.getMenus = function () {
	        return this._menus;
	    };
	    /**
	     * @private
	     */
	    MenuController.prototype.register = function (menu) {
	        this._menus.push(menu);
	    };
	    /**
	     * @private
	     */
	    MenuController.prototype.unregister = function (menu) {
	        var index = this._menus.indexOf(menu);
	        if (index > -1) {
	            this._menus.splice(index, 1);
	        }
	    };
	    /**
	     * @private
	     */
	    MenuController.registerType = function (name, cls) {
	        menuTypes[name] = cls;
	    };
	    /**
	     * @private
	     */
	    MenuController.create = function (type, menuCmp, platform) {
	        return new menuTypes[type](menuCmp, platform);
	    };
	    return MenuController;
	}());
	exports.MenuController = MenuController;
	var menuTypes = {};


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var menu_controller_1 = __webpack_require__(145);
	var navbar_1 = __webpack_require__(147);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name MenuToggle
	 * @description
	 * The `menuToggle` directive can be placed on any button to toggle a menu open or closed.
	 * If it is added to the [NavBar](../../nav/NavBar) of a page, the button will only appear
	 * when the page it's in is currently a root page. See the [Menu Navigation Bar Behavior](../Menu#navigation-bar-behavior)
	 * docs for more information.
	 *
	 *
	 * @usage
	 *
	 * A simple `menuToggle` button can be added using the following markup:
	 *
	 * ```html
	 * <button menuToggle>Toggle Menu</button>
	 * ```
	 *
	 * To toggle a specific menu by its id or side, give the `menuToggle`
	 * directive a value.
	 *
	 * ```html
	 * <button menuToggle="right">Toggle Right Menu</button>
	 * ```
	 *
	 * If placing the `menuToggle` in a navbar or toolbar, it should be
	 * placed as a child of the `<ion-navbar>` or `<ion-toolbar>`, and not in
	 * the `<ion-buttons>` element:
	 *
	 * ```html
	 * <ion-header>
	 *
	 *   <ion-navbar>
	 *     <ion-buttons start>
	 *       <button>
	 *         <ion-icon name="contact"></ion-icon>
	 *       </button>
	 *     </ion-buttons>
	 *     <button menuToggle>
	 *       <ion-icon name="menu"></ion-icon>
	 *     </button>
	 *     <ion-title>
	 *       Title
	 *     </ion-title>
	 *     <ion-buttons end>
	 *       <button (click)="doClick()">
	 *         <ion-icon name="more"></ion-icon>
	 *       </button>
	 *     </ion-buttons>
	 *   </ion-navbar>
	 *
	 * </ion-header>
	 * ```
	 *
	 * Similar to `<ion-buttons>`, the `menuToggle` can be positioned using
	 * `start`, `end`, `left`, or `right`:
	 *
	 * ```html
	 * <ion-toolbar>
	 *   <button menuToggle right>
	 *     <ion-icon name="menu"></ion-icon>
	 *   </button>
	 *   <ion-title>
	 *     Title
	 *   </ion-title>
	 *   <ion-buttons end>
	 *     <button (click)="doClick()">
	 *       <ion-icon name="more"></ion-icon>
	 *     </button>
	 *   </ion-buttons>
	 * </ion-toolbar>
	 * ```
	 *
	 * See the [Toolbar API docs](../../toolbar/Toolbar) for more information
	 * on the different positions.
	 *
	 * @demo /docs/v2/demos/menu/
	 * @see {@link /docs/v2/components#menus Menu Component Docs}
	 * @see {@link ../../menu/Menu Menu API Docs}
	 */
	var MenuToggle = (function () {
	    function MenuToggle(_menu, elementRef, _viewCtrl, _navbar) {
	        this._menu = _menu;
	        this._viewCtrl = _viewCtrl;
	        this._navbar = _navbar;
	        this._inNavbar = !!_navbar;
	    }
	    /**
	    * @private
	    */
	    MenuToggle.prototype.toggle = function () {
	        var menu = this._menu.get(this.menuToggle);
	        menu && menu.toggle();
	    };
	    Object.defineProperty(MenuToggle.prototype, "isHidden", {
	        /**
	        * @private
	        */
	        get: function () {
	            if (this._inNavbar && this._viewCtrl) {
	                if (this._viewCtrl.isFirst()) {
	                    // this is the first view, so it should always show
	                    return false;
	                }
	                var menu = this._menu.get(this.menuToggle);
	                if (menu) {
	                    // this is not the root view, so see if this menu
	                    // is configured to still be enabled if it's not the root view
	                    return !menu.persistent;
	                }
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], MenuToggle.prototype, "menuToggle", void 0);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], MenuToggle.prototype, "toggle", null);
	    MenuToggle = __decorate([
	        core_1.Directive({
	            selector: '[menuToggle]',
	            host: {
	                '[hidden]': 'isHidden',
	                'menuToggle': '' // ensures the attr is there for css when using [menuToggle]
	            }
	        }),
	        __param(2, core_1.Optional()),
	        __param(3, core_1.Optional()), 
	        __metadata('design:paramtypes', [menu_controller_1.MenuController, core_1.ElementRef, view_controller_1.ViewController, navbar_1.Navbar])
	    ], MenuToggle);
	    return MenuToggle;
	}());
	exports.MenuToggle = MenuToggle;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var app_1 = __webpack_require__(122);
	var config_1 = __webpack_require__(125);
	var ion_1 = __webpack_require__(134);
	var util_1 = __webpack_require__(127);
	var nav_controller_1 = __webpack_require__(148);
	var toolbar_1 = __webpack_require__(154);
	var view_controller_1 = __webpack_require__(153);
	var BackButton = (function (_super) {
	    __extends(BackButton, _super);
	    function BackButton(_nav, elementRef, navbar) {
	        _super.call(this, elementRef);
	        this._nav = _nav;
	        navbar && navbar.setBackButtonRef(elementRef);
	    }
	    BackButton.prototype.goBack = function (ev) {
	        ev.stopPropagation();
	        ev.preventDefault();
	        this._nav && this._nav.pop();
	    };
	    BackButton = __decorate([
	        core_1.Directive({
	            selector: '.back-button',
	            host: {
	                '(click)': 'goBack($event)'
	            }
	        }),
	        __param(0, core_1.Optional()),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Inject(core_1.forwardRef(function () { return Navbar; }))), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController, core_1.ElementRef, Navbar])
	    ], BackButton);
	    return BackButton;
	}(ion_1.Ion));
	var BackButtonText = (function () {
	    function BackButtonText(elementRef, navbar) {
	        navbar.setBackButtonTextRef(elementRef);
	    }
	    BackButtonText = __decorate([
	        core_1.Directive({
	            selector: '.back-button-text'
	        }),
	        __param(1, core_1.Inject(core_1.forwardRef(function () { return Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Navbar])
	    ], BackButtonText);
	    return BackButtonText;
	}());
	var ToolbarBackground = (function () {
	    function ToolbarBackground(elementRef, navbar) {
	        navbar.setBackgroundRef(elementRef);
	    }
	    ToolbarBackground = __decorate([
	        core_1.Directive({
	            selector: '.toolbar-background'
	        }),
	        __param(1, core_1.Inject(core_1.forwardRef(function () { return Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Navbar])
	    ], ToolbarBackground);
	    return ToolbarBackground;
	}());
	/**
	 * @name Navbar
	 * @description
	 * Navbar acts as the navigational toolbar, which also comes with a back
	 * button. A navbar can contain a `ion-title`, any number of buttons,
	 * a segment, or a searchbar. Navbars must be placed within an
	 * `<ion-header>` in order for them to be placed above the content.
	 *
	 * @usage
	 * ```html
	 * <ion-header>
	 *
	 *   <ion-navbar>
	 *     <button menuToggle>
	 *       <ion-icon name="menu"></ion-icon>
	 *     </button>
	 *
	 *     <ion-title>
	 *       Page Title
	 *     </ion-title>
	 *
	 *     <ion-buttons end>
	 *       <button (click)="openModal()">
	 *         <ion-icon name="options"></ion-icon>
	 *       </button>
	 *     </ion-buttons>
	 *   </ion-navbar>
	 *
	 * </ion-header>
	 * ```
	 *
	 * @demo /docs/v2/demos/navbar/
	 * @see {@link ../../toolbar/Toolbar/ Toolbar API Docs}
	 */
	var Navbar = (function (_super) {
	    __extends(Navbar, _super);
	    function Navbar(_app, viewCtrl, elementRef, config) {
	        _super.call(this, elementRef);
	        this._app = _app;
	        this._hidden = false;
	        this._hideBb = false;
	        viewCtrl && viewCtrl.setNavbar(this);
	        this._bbIcon = config.get('backButtonIcon');
	        this._bbText = config.get('backButtonText');
	        this._sbPadding = config.getBoolean('statusbarPadding', false);
	    }
	    Object.defineProperty(Navbar.prototype, "hideBackButton", {
	        /**
	         * @input {boolean} whether the back button should be shown or not
	         */
	        get: function () {
	            return this._hideBb;
	        },
	        set: function (val) {
	            this._hideBb = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackButtonText = function (text) {
	        this._bbText = text;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.getBackButtonRef = function () {
	        return this._bbRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackButtonRef = function (backButtonElementRef) {
	        this._bbRef = backButtonElementRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.getBackButtonTextRef = function () {
	        return this._bbtRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackButtonTextRef = function (backButtonTextElementRef) {
	        this._bbtRef = backButtonTextElementRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackgroundRef = function (backgrouneElementRef) {
	        this._bgRef = backgrouneElementRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.getBackgroundRef = function () {
	        return this._bgRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.didEnter = function () {
	        try {
	            this._app.setTitle(this.getTitleText());
	        }
	        catch (e) {
	            void 0;
	        }
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setHidden = function (isHidden) {
	        // used to display none/block the navbar
	        this._hidden = isHidden;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Navbar.prototype, "hideBackButton", null);
	    Navbar = __decorate([
	        core_1.Component({
	            selector: 'ion-navbar',
	            template: '<div class="toolbar-background"></div>' +
	                '<button category="bar-button" class="back-button" [hidden]="_hideBb">' +
	                '<span class="button-inner">' +
	                '<ion-icon class="back-button-icon" [name]="_bbIcon"></ion-icon>' +
	                '<span class="back-button-text">' +
	                '<span class="back-default">{{_bbText}}</span>' +
	                '</span>' +
	                '</span>' +
	                '</button>' +
	                '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' +
	                '<ng-content select="ion-buttons[start]"></ng-content>' +
	                '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' +
	                '<div class="toolbar-content">' +
	                '<ng-content></ng-content>' +
	                '</div>',
	            host: {
	                '[hidden]': '_hidden',
	                'class': 'toolbar',
	                '[class.statusbar-padding]': '_sbPadding'
	            },
	            directives: [BackButton, BackButtonText, ToolbarBackground]
	        }),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [app_1.App, view_controller_1.ViewController, core_1.ElementRef, config_1.Config])
	    ], Navbar);
	    return Navbar;
	}(toolbar_1.ToolbarBase));
	exports.Navbar = Navbar;
	/**
	 * @private
	*/
	var NavbarTemplate = (function () {
	    function NavbarTemplate() {
	        // deprecated warning: added 2016-06-14, beta.10
	        void 0;
	    }
	    NavbarTemplate = __decorate([
	        core_1.Directive({
	            selector: 'template[navbar]'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NavbarTemplate);
	    return NavbarTemplate;
	}());
	exports.NavbarTemplate = NavbarTemplate;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(8);
	var bootstrap_1 = __webpack_require__(2);
	var ion_1 = __webpack_require__(134);
	var util_1 = __webpack_require__(127);
	var menu_controller_1 = __webpack_require__(145);
	var nav_params_1 = __webpack_require__(149);
	var swipe_back_1 = __webpack_require__(150);
	var transition_1 = __webpack_require__(151);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name NavController
	 * @description
	 * _For examples on the basic usage of NavController, check out the
	 * [Navigation section](../../../../components/#navigation) of the Component
	 * docs._
	 *
	 * NavController is the base class for navigation controller components like
	 * [`Nav`](../Nav/) and [`Tab`](../../Tabs/Tab/). You use navigation controllers
	 * to navigate to [pages](#creating_pages) in your app. At a basic level, a
	 * navigation controller is an array of pages representing a particular history
	 * (of a Tab for example). This array can be manipulated to navigate throughout
	 * an app by pushing and popping pages or inserting and removing them at
	 * arbitrary locations in history.
	 *
	 * The current page is the last one in the array, or the top of the stack if we
	 * think of it that way.  [Pushing](#push) a new page onto the top of the
	 * navigation stack causes the new page to be animated in, while [popping](#pop)
	 * the current page will navigate to the previous page in the stack.
	 *
	 * Unless you are using a directive like [NavPush](../NavPush/), or need a
	 * specific NavController, most times you will inject and use a reference to the
	 * nearest NavController to manipulate the navigation stack.
	 *
	 * ### Injecting NavController
	 * Injecting NavController will always get you an instance of the nearest
	 * NavController, regardless of whether it is a Tab or a Nav.
	 *
	 * Behind the scenes, when Ionic instantiates a new NavController, it creates an
	 * injector with NavController bound to that instance (usually either a Nav or
	 * Tab) and adds the injector to its own providers.  For more information on
	 * providers and dependency injection, see [Providers and DI]().
	 *
	 * Instead, you can inject NavController and know that it is the correct
	 * navigation controller for most situations (for more advanced situations, see
	 * [Menu](../../Menu/Menu/) and [Tab](../../Tab/Tab/)).
	 *
	 * ```ts
	 *  class MyComponent {
	 *    constructor(nav: NavController) {
	 *      this.nav = nav;
	 *    }
	 *  }
	 * ```
	 *
	 *
	 * ## Page creation
	 * Pages are created when they are added to the navigation stack.  For methods
	 * like [push()](#push), the NavController takes any component class that is
	 * decorated with `@Component` as its first argument.  The NavController then
	 * compiles that component, adds it to the app and animates it into view.
	 *
	 * By default, pages are cached and left in the DOM if they are navigated away
	 * from but still in the navigation stack (the exiting page on a `push()` for
	 * example).  They are destroyed when removed from the navigation stack (on
	 * [pop()](#pop) or [setRoot()](#setRoot)).
	 *
	 *
	 * ## Lifecycle events
	 * Lifecycle events are fired during various stages of navigation.  They can be
	 * defined in any component type which is pushed/popped from a `NavController`.
	 *
	 * ```ts
	 * import {Component } from '@angular/core';
	 *
	 * @Component({
	 *   template: 'Hello World'
	 * })
	 * class HelloWorld {
	 *   ionViewLoaded() {
	 *     console.log("I'm alive!");
	 *   }
	 *   ionViewWillLeave() {
	 *     console.log("Looks like I'm about to leave :(");
	 *   }
	 * }
	 * ```
	 *
	 *  | Page Event         | Description                                                                                                                                                                                                                                                                       |
	 *  |--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
	 *  | `ionViewLoaded`     | Runs when the page has loaded. This event only happens once per page being created and added to the DOM. If a page leaves but is cached, then this event will not fire again on a subsequent viewing. The `ionViewLoaded` event is good place to put your setup code for the page. |
	 *  | `ionViewWillEnter`  | Runs when the page is about to enter and become the active page.                                                                                                                                                                                                                  |
	 *  | `ionViewDidEnter`   | Runs when the page has fully entered and is now the active page. This event will fire, whether it was the first load or a cached page.                                                                                                                                            |
	 *  | `ionViewWillLeave`  | Runs when the page is about to leave and no longer be the active page.                                                                                                                                                                                                            |
	 *  | `ionViewDidLeave`   | Runs when the page has finished leaving and is no longer the active page.                                                                                                                                                                                                         |
	 *  | `ionViewWillUnload` | Runs when the page is about to be destroyed and have its elements removed.                                                                                                                                                                                                        |
	 *  | `ionViewDidUnload`  | Runs after the page has been destroyed and its elements have been removed.
	 *
	 *
	 * ## Nav Transition Promises
	 *
	 * Navigation transitions are asynchronous, meaning they take a few moments to finish, and
	 * the duration of a transition could be any number. In most cases the async nature of a
	 * transition doesn't cause any problems and the nav controller is pretty good about handling
	 * which transition was the most recent when multiple transitions have been kicked off.
	 * However, when an app begins firing off many transitions, on the same stack at
	 * *roughly* the same time, the nav controller can start to get lost as to which transition
	 * should be finishing, and which transitions should not be animated.
	 *
	 * In cases where an app's navigation can be altered by other async tasks, which may or
	 * may not take a long time, it's best to rely on each nav transition's returned
	 * promise. So instead of firing and forgetting multiple `push` or `pop` nav transitions,
	 * it's better to fire the next nav transition when the previous one has finished.
	 *
	 * In the example below, after the async operation has completed, we then want to transition
	 * to another page. Where the potential problem comes in, is that if the async operation
	 * completed 100ms after the first transition started, then kicking off another transition
	 * halfway through the first transition ends up with a janky animation. Instead, it's best
	 * to always ensure the first transition has already finished before starting the next.
	 *
	 * ```ts
	 * // begin the first transition
	 * let navTransition = this.nav.push(SomePage);
	 *
	 * // start an async call, we're not sure how long it'll take
	 * someAsyncOperation().then(() => {
	 *   // incase the async operation completed faster than the time
	 *   // it took to finish the first transition, this logic should
	 *   // always ensure that the previous transition has resolved
	 *   // first before kicking off the next transition
	 *   navTransition.then(() => {
	 *     this.nav.push(AnotherPage);
	 *   });
	 * });
	 * ```
	 *
	 * ## NavOptions
	 *
	 * Some methods on `NavController` allow for customizing the current transition.
	 * To do this, we can pass an object with the modified properites.
	 *
	 * | Property  | Value     | Description                                                                                                |
	 * |-----------|-----------|------------------------------------------------------------------------------------------------------------|
	 * | animate   | `boolean` | Whether or not the transition should animate.                                                              |
	 * | animation | `string`  | What kind of animation should be used.                                                                     |
	 * | direction | `string`  | The conceptual direction the user is navigating. For example, is the user navigating `forward`, or `back`? |
	 * | duration  | `number`  | The length in milliseconds the animation should take.                                                      |
	 * | easing    | `string`  | The easing for the animation.                                                                              |
	 *
	 * The property 'animation' understands the following values: `md-transition`, `ios-transition` and `wp-transition`.
	 *
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 */
	var NavController = (function (_super) {
	    __extends(NavController, _super);
	    function NavController(parent, _app, config, _keyboard, elementRef, _zone, _renderer, _compiler) {
	        _super.call(this, elementRef);
	        this._app = _app;
	        this._keyboard = _keyboard;
	        this._zone = _zone;
	        this._renderer = _renderer;
	        this._compiler = _compiler;
	        this._transIds = 0;
	        this._init = false;
	        this._children = [];
	        this._ids = -1;
	        this._views = [];
	        /**
	         * @private
	         */
	        this.routers = [];
	        /**
	         * @private
	         */
	        this.isPortal = false;
	        /**
	         * @private
	         */
	        this._trnsTime = 0;
	        this.parent = parent;
	        this.config = config;
	        this._trnsDelay = config.get('pageTransitionDelay');
	        this._sbEnabled = config.getBoolean('swipeBackEnabled');
	        this._sbThreshold = config.getNumber('swipeBackThreshold', 40);
	        this.id = (++ctrlIds).toString();
	        this.viewDidLoad = new core_1.EventEmitter();
	        this.viewWillEnter = new core_1.EventEmitter();
	        this.viewDidEnter = new core_1.EventEmitter();
	        this.viewWillLeave = new core_1.EventEmitter();
	        this.viewDidLeave = new core_1.EventEmitter();
	        this.viewWillUnload = new core_1.EventEmitter();
	        this.viewDidUnload = new core_1.EventEmitter();
	    }
	    /**
	     * @private
	     */
	    NavController.prototype.getPortal = function () {
	        return this._portal;
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.setPortal = function (val) {
	        this._portal = val;
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.setViewport = function (val) {
	        this._viewport = val;
	    };
	    /**
	     * Set the root for the current navigation stack.
	     * @param {Page} page  The name of the component you want to push on the navigation stack.
	     * @param {object} [params={}] Any nav-params you want to pass along to the next view.
	     * @param {object} [opts={}] Any options you want to use pass to transtion.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.setRoot = function (page, params, opts) {
	        return this.setPages([{ page: page, params: params }], opts);
	    };
	    /**
	     * You can set the views of the current navigation stack and navigate to the
	     * last view.
	     *
	     *
	     *```ts
	     * import {NavController } from 'ionic-angular'
	     * import {Detail } from '../detail/detail'
	     * import {Info } from '../info/info'
	     *
	     *  export class Home {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    setPages() {
	     *      this.nav.setPages([ {page: List}, {page: Detail}, {page:Info} ]);
	     *    }
	     *  }
	     *```
	     *
	     *
	     * In this example, we're giving the current nav stack an array of pages.
	     * Then the navigation stack will navigate to the last page in the array
	     * and remove the previously active page.
	     *
	     * By default animations are disabled, but they can be enabled by passing
	     * options to the navigation controller.
	     *
	     *
	     * ```ts
	     * import {NavController } from 'ionic-angular'
	     * import {Detail } from '../detail/detail'
	     *
	     *  export class Home {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    setPages() {
	     *      this.nav.setPages([ {page: List}, {page: Detail} ], {
	     *        animate: true
	     *      });
	     *    }
	     *  }
	     * ```
	     *
	     * You can also pass any navigation params to the individual pages in
	     * the array.
	     *
	     *
	     * ```ts
	     * import {NavController } from 'ionic-angular';
	     * import {Info } from '../info/info';
	     * import {List } from '../list/list';
	     * import {Detail } from '../detail/detail';
	     *
	     *  export class Home {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    setPages() {
	     *      this.nav.setPages([{
	     *        page: Info
	     *      }, {
	     *        page: List,
	     *        params: {tags: 'css'}
	     *      }, {
	     *        page: Detail,
	     *        params: {id: 325}
	     *      }]);
	     *    }
	     *  }
	     *```
	     *
	     * @param {array<Page>} pages  An arry of page components and their params to load in the stack.
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.setPages = function (pages, opts) {
	        if (!pages || !pages.length) {
	            return Promise.resolve(false);
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // remove existing views
	        var leavingView = this._remove(0, this._views.length);
	        // create view controllers out of the pages and insert the new views
	        var views = pages.map(function (p) { return new view_controller_1.ViewController(p.page, p.params); });
	        var enteringView = this._insert(0, views);
	        // if animation wasn't set to true then default it to NOT animate
	        if (opts.animate !== true) {
	            opts.animate = false;
	        }
	        // set the nav direction to "back" if it wasn't set
	        opts.direction = opts.direction || 'back';
	        var resolve;
	        var promise = new Promise(function (res) { resolve = res; });
	        // start the transition, fire resolve when done...
	        this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	            // transition has completed!!
	            resolve(hasCompleted);
	        });
	        return promise;
	    };
	    /**
	     * Push is how we can pass components and navigate to them. We push the component
	     * we want to navigate to on to the navigation stack.
	     *
	     * ```ts
	     * class MyClass{
	     *    constructor(nav:NavController){
	     *      this.nav = nav;
	     *    }
	     *
	     *    pushPage(){
	     *      this.nav.push(SecondView);
	     *    }
	     * }
	     * ```
	     *
	     * We can also pass along parameters to the next view, such as data that we have
	     * on the current view. This is a similar concept to to V1 apps with `$stateParams`.
	     *
	     * ```ts
	     * class MyClass{
	     *    constructor(nav:NavController){
	     *      this.nav = nav;
	     *    }
	     *
	     *    pushPage(user){
	     *       // user is an object we have in our view
	     *       // typically this comes from an ngFor or some array
	     *       // here we can create an object with a property of
	     *       // paramUser, and set its value to the user object we passed in
	     *      this.nav.push(SecondView, { paramUser: user });
	     *    }
	     * }
	     * ```
	     *
	     * We'll look at how we can access that data in the `SecondView` in the
	     * navParam docs.
	     *
	     * We can also pass any options to the transtion from that same method.
	     *
	     * ```ts
	     * class MyClass{
	     *    constructor(nav: NavController){
	     *      this.nav = nav;
	     *    }
	     *
	     *    pushPage(user){
	     *      this.nav.push(SecondView,{
	     *       // user is an object we have in our view
	     *       // typically this comes from an ngFor or some array
	     *       // here we can create an object with a property of
	     *       // paramUser, and set it's value to the user object we passed in
	     *       paramUser: user
	     *      },{
	     *       // here we can configure things like the animations direction or
	     *       // or if the view should animate at all.
	     *       direction: 'back'
	     *      });
	     *    }
	     * }
	     * ```
	     * @param {Page} page  The page component class you want to push on to the navigation stack
	     * @param {object} [params={}] Any nav-params you want to pass along to the next view
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.push = function (page, params, opts) {
	        return this.insertPages(-1, [{ page: page, params: params }], opts);
	    };
	    /**
	     * Present is how an app display overlays on top of the content, from within the
	     * root level `NavController`. The `present` method is used by overlays, such
	     * as `ActionSheet`, `Alert`, and `Modal`. The main difference between `push`
	     * and `present` is that `present` takes a `ViewController` instance, whereas
	     * `push` takes a component class which hasn't been instantiated yet.
	     * Additionally, `present` will place the overlay in the root NavController's
	     * stack.
	     *
	     * ```ts
	     * class MyClass{
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *
	     *    presentModal() {
	     *      let modal = Modal.create(ProfilePage);
	     *      this.nav.present(modal);
	     *    }
	     * }
	     * ```
	     *
	     * @param {ViewController} enteringView The component you want to push on the navigation stack.
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.present = function (enteringView, opts) {
	        var rootNav = this.rootNav;
	        if (rootNav['_tabs']) {
	            // TODO: must have until this goes in
	            // https://github.com/angular/angular/issues/5481
	            void 0;
	            return;
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        if (enteringView.usePortal && rootNav._portal) {
	            return rootNav._portal.present(enteringView, opts);
	        }
	        enteringView.setNav(rootNav);
	        opts.keyboardClose = false;
	        opts.direction = 'forward';
	        if (!opts.animation) {
	            opts.animation = enteringView.getTransitionName('forward');
	        }
	        enteringView.setLeavingOpts({
	            keyboardClose: false,
	            direction: 'back',
	            animation: enteringView.getTransitionName('back'),
	            ev: opts.ev
	        });
	        // present() always uses the root nav
	        // start the transition
	        return rootNav._insertViews(-1, [enteringView], opts);
	    };
	    /**
	     * Inserts a view into the nav stack at the specified index. This is useful if
	     * you need to add a view at any point in your navigation stack.
	     *
	     * ```ts
	     * export class Detail {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    insertPage(){
	     *      this.nav.insert(1, Info);
	     *    }
	     *  }
	     * ```
	     *
	     * This will insert the `Info` page into the second slot of our navigation stack.
	     *
	     * @param {number} insertIndex  The index where to insert the page.
	     * @param {Page} page  The component you want to insert into the nav stack.
	     * @param {object} [params={}] Any nav-params you want to pass along to the next page.
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.insert = function (insertIndex, page, params, opts) {
	        return this.insertPages(insertIndex, [{ page: page, params: params }], opts);
	    };
	    /**
	     * Inserts multiple pages into the nav stack at the specified index.
	     *
	     * ```ts
	     * export class Detail {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    insertPages(){
	     *      let pages = [
	     *        { page: Info },
	     *        { page: ProfileList },
	     *        { page: ProfileDetail, params: {userId:5} }
	     *      ];
	     *      this.nav.insertPages(2, pages);
	     *    }
	     *  }
	     * ```
	     *
	     * This will insert each of the pages in the array, starting at the third slot
	     * (second index) of the nav stack. The last page in the array will animate
	     * in and become the active page.
	     *
	     * @param {number} insertIndex  The index where you want to insert the page.
	     * @param {array<{page: Page, params=: any}>} insertPages  An array of objects, each with a `page` and optionally `params` property.
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.insertPages = function (insertIndex, insertPages, opts) {
	        var views = insertPages.map(function (p) { return new view_controller_1.ViewController(p.page, p.params); });
	        return this._insertViews(insertIndex, views, opts);
	    };
	    NavController.prototype._insertViews = function (insertIndex, insertViews, opts) {
	        if (!insertViews || !insertViews.length) {
	            return Promise.reject('invalid pages');
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // insert the new page into the stack
	        // returns the newly created entering view
	        var enteringView = this._insert(insertIndex, insertViews);
	        // set the nav direction to "forward" if it wasn't set
	        opts.direction = opts.direction || 'forward';
	        // set which animation it should use if it wasn't set yet
	        if (!opts.animation) {
	            opts.animation = enteringView.getTransitionName(opts.direction);
	        }
	        var resolve;
	        var promise = new Promise(function (res) { resolve = res; });
	        // it's possible that the newly added view doesn't need to
	        // transition in, but was simply inserted somewhere in the stack
	        // go backwards through the stack and find the first active view
	        // which could be active or one ready to enter
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            if (this._views[i].state === STATE_ACTIVE || this._views[i].state === STATE_INIT_ENTER) {
	                // found the view at the end of the stack that's either
	                // already active or it is about to enter
	                if (this._views[i] === enteringView) {
	                    // cool, so the last valid view is also our entering view!!
	                    // this means we should animate that bad boy in so it's the active view
	                    // return a promise and resolve when the transition has completed
	                    // get the leaving view which the _insert() already set
	                    var leavingView = this.getByState(STATE_INIT_LEAVE);
	                    // start the transition, fire resolve when done...
	                    this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	                        // transition has completed!!
	                        resolve(hasCompleted);
	                    });
	                    return promise;
	                }
	                break;
	            }
	        }
	        // the page was not pushed onto the end of the stack
	        // but rather inserted somewhere in the middle or beginning
	        // Since there are views after this new one, don't transition in
	        // auto resolve cuz there was is no need for an animation
	        return Promise.resolve(enteringView);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._insert = function (insertIndex, insertViews) {
	        // when this is done, there should only be at most
	        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
	        // there should not be any that are STATE_ACTIVE after this is done
	        var _this = this;
	        // allow -1 to be passed in to auto push it on the end
	        // and clean up the index if it's larger then the size of the stack
	        if (insertIndex < 0 || insertIndex > this._views.length) {
	            insertIndex = this._views.length;
	        }
	        // first see if there's an active view
	        var view = this.getActive();
	        if (view) {
	            // there's an active view, set that it's initialized to leave
	            view.state = STATE_INIT_LEAVE;
	        }
	        else if (view = this.getByState(STATE_INIT_ENTER)) {
	            // oh no, there's already a transition initalized ready to enter!
	            // but it actually hasn't entered yet at all so lets
	            // just keep it in the array, but not render or animate it in
	            view.state = STATE_INACTIVE;
	        }
	        // insert each of the views in the pages array
	        var insertView = null;
	        insertViews.forEach(function (view, i) {
	            insertView = view;
	            // create the new entering view
	            view.setNav(_this);
	            view.state = STATE_INACTIVE;
	            // give this inserted view an ID
	            _this._incId(view);
	            // insert the entering view into the correct index in the stack
	            _this._views.splice(insertIndex + i, 0, view);
	        });
	        if (insertView) {
	            insertView.state = STATE_INIT_ENTER;
	        }
	        return insertView;
	    };
	    /**
	     * If you wanted to navigate back from a current view, you can use the
	     * back-button or programatically call `pop()`. Similar to `push()`, you
	     * can also pass navigation options.
	     *
	     * ```ts
	     * class SecondView{
	     *    constructor(nav:NavController){
	     *      this.nav = nav;
	     *    }
	     *    goBack(){
	     *      this.nav.pop();
	     *    }
	     * }
	     * ```
	     *
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.pop = function (opts) {
	        // get the index of the active view
	        // which will become the view to be leaving
	        var activeView = this.getByState(STATE_TRANS_ENTER) ||
	            this.getByState(STATE_INIT_ENTER) ||
	            this.getActive();
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // if not set, by default climb up the nav controllers if
	        // there isn't a previous view in this nav controller
	        if (util_1.isBlank(opts.climbNav)) {
	            opts.climbNav = true;
	        }
	        return this.remove(this.indexOf(activeView), 1, opts);
	    };
	    /**
	     * Similar to `pop()`, this method let's you navigate back to the root of
	     * the stack, no matter how many pages back that is.
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.popToRoot = function (opts) {
	        return this.popTo(this.first(), opts);
	    };
	    /**
	     * Pop to a specific view in the history stack.
	     * @param {ViewController} view  to pop to
	     * @param {object} [opts={}] Nav options to go with this transition.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.popTo = function (view, opts) {
	        var startIndex = this.indexOf(view);
	        if (startIndex < 0) {
	            return Promise.reject('View not found to pop to');
	        }
	        var activeView = this.getByState(STATE_TRANS_ENTER) ||
	            this.getByState(STATE_INIT_ENTER) ||
	            this.getActive();
	        var removeCount = this.indexOf(activeView) - startIndex;
	        return this.remove(startIndex + 1, removeCount, opts);
	    };
	    /**
	     * Removes a page from the nav stack at the specified index.
	     *
	     * ```ts
	     * export class Detail {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    removePage(){
	     *      this.nav.remove(1);
	     *    }
	     *  }
	     * ```
	     *
	     * @param {number} [startIndex]  The starting index to remove pages from the stack. Default is the index of the last page.
	     * @param {number} [removeCount]  The number of pages to remove, defaults to remove `1`.
	     * @param {object} [opts={}] Any options you want to use pass to transtion.
	     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
	     */
	    NavController.prototype.remove = function (startIndex, removeCount, opts) {
	        var _this = this;
	        if (startIndex === void 0) { startIndex = -1; }
	        if (removeCount === void 0) { removeCount = 1; }
	        if (startIndex === -1) {
	            startIndex = this._views.length - 1;
	        }
	        else if (startIndex < 0 || startIndex >= this._views.length) {
	            return Promise.reject('remove index out of range');
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // default the direction to "back"
	        opts.direction = opts.direction || 'back';
	        // figure out the states of each view in the stack
	        var leavingView = this._remove(startIndex, removeCount);
	        if (!leavingView) {
	            var forcedActive = this.getByState(STATE_FORCE_ACTIVE);
	            if (forcedActive) {
	                // this scenario happens when a remove is going on
	                // during a transition
	                if (this._trans) {
	                    this._trans.stop();
	                    this._trans.destroy();
	                    this._trans = null;
	                    this._cleanup();
	                }
	                return Promise.resolve(false);
	            }
	        }
	        if (leavingView) {
	            // there is a view ready to leave, meaning that a transition needs
	            // to happen and the previously active view is going to animate out
	            // get the view thats ready to enter
	            var enteringView = this.getByState(STATE_INIT_ENTER);
	            if (!enteringView && !this.isPortal) {
	                // oh nos! no entering view to go to!
	                // if there is no previous view that would enter in this nav stack
	                // and the option is set to climb up the nav parent looking
	                // for the next nav we could transition to instead
	                if (opts.climbNav) {
	                    var parentNav = this.parent;
	                    while (parentNav) {
	                        if (!parentNav['_tabs']) {
	                            // Tabs can be a parent, but it is not a collection of views
	                            // only we're looking for an actual NavController w/ stack of views
	                            leavingView.fireWillLeave();
	                            this.viewWillLeave.emit(leavingView);
	                            return parentNav.pop(opts).then(function (rtnVal) {
	                                leavingView.fireDidLeave();
	                                _this.viewDidLeave.emit(leavingView);
	                                return rtnVal;
	                            });
	                        }
	                        parentNav = parentNav.parent;
	                    }
	                }
	                // there's no previous view and there's no valid parent nav
	                // to climb to so this shouldn't actually remove the leaving
	                // view because there's nothing that would enter, eww
	                leavingView.state = STATE_ACTIVE;
	                return Promise.resolve(false);
	            }
	            var resolve_1;
	            var promise = new Promise(function (res) { resolve_1 = res; });
	            if (!opts.animation) {
	                opts.animation = leavingView.getTransitionName(opts.direction);
	            }
	            // start the transition, fire resolve when done...
	            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	                // transition has completed!!
	                resolve_1(hasCompleted);
	            });
	            return promise;
	        }
	        // no need to transition when the active view isn't being removed
	        // there's still an active view after _remove() figured out states
	        // so this means views that were only removed before the active
	        // view, so auto-resolve since no transition needs to happen
	        return Promise.resolve(false);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._remove = function (startIndex, removeCount) {
	        var _this = this;
	        // when this is done, there should only be at most
	        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
	        // there should not be any that are STATE_ACTIVE after this is done
	        var view = null;
	        // loop through each view that is set to be removed
	        for (var i = startIndex, ii = removeCount + startIndex; i < ii; i++) {
	            view = this.getByIndex(i);
	            if (!view)
	                break;
	            if (view.state === STATE_TRANS_ENTER || view.state === STATE_TRANS_LEAVE) {
	                // oh no!!! this view should be removed, but it's
	                // actively transitioning in at the moment!!
	                // since it's viewable right now, let's just set that
	                // it should be removed after the transition
	                view.state = STATE_REMOVE_AFTER_TRANS;
	            }
	            else {
	                // if this view is already leaving then no need to immediately
	                // remove it, otherwise set the remove state
	                // this is useful if the view being removed isn't going to
	                // animate out, but just removed from the stack, no transition
	                view.state = STATE_REMOVE;
	            }
	        }
	        if (view = this.getByState(STATE_INIT_LEAVE)) {
	            // looks like there's already an active leaving view
	            // reassign previous entering view to just be inactive
	            var enteringView = this.getByState(STATE_INIT_ENTER);
	            if (enteringView) {
	                enteringView.state = STATE_INACTIVE;
	            }
	            // from the index of the leaving view, go backwards and
	            // find the first view that is inactive
	            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
	                if (this._views[i].state === STATE_INACTIVE) {
	                    this._views[i].state = STATE_INIT_ENTER;
	                    break;
	                }
	            }
	        }
	        else if (view = this.getByState(STATE_TRANS_LEAVE)) {
	            // an active transition is happening, but a new transition
	            // still needs to happen force this view to be the active one
	            view.state = STATE_FORCE_ACTIVE;
	        }
	        else if (view = this.getByState(STATE_REMOVE)) {
	            // there is no active transition about to happen
	            // find the first view that is supposed to be removed and
	            // set that it is the init leaving view
	            // the first view to be removed, it should init leave
	            view.state = STATE_INIT_LEAVE;
	            view.fireWillUnload();
	            this.viewWillUnload.emit(view);
	            // from the index of the leaving view, go backwards and
	            // find the first view that is inactive so it can be the entering
	            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
	                if (this._views[i].state === STATE_INACTIVE) {
	                    this._views[i].state = STATE_INIT_ENTER;
	                    break;
	                }
	            }
	        }
	        // if there is still an active view, then it wasn't one that was
	        // set to be removed, so there actually won't be a transition at all
	        view = this.getActive();
	        if (view) {
	            // the active view remains untouched, so all the removes
	            // must have happened before it, so really no need for transition
	            view = this.getByState(STATE_INIT_ENTER);
	            if (view) {
	                // if it was going to enter, then just make inactive
	                view.state = STATE_INACTIVE;
	            }
	            view = this.getByState(STATE_INIT_LEAVE);
	            if (view) {
	                // this was going to leave, so just remove it completely
	                view.state = STATE_REMOVE;
	            }
	        }
	        // remove views that have been set to be removed, but not
	        // apart of any transitions that will eventually happen
	        this._views.filter(function (v) { return v.state === STATE_REMOVE; }).forEach(function (view) {
	            view.fireWillLeave();
	            _this.viewWillLeave.emit(view);
	            view.fireDidLeave();
	            _this.viewDidLeave.emit(view);
	            _this._views.splice(_this.indexOf(view), 1);
	            view.destroy();
	        });
	        return this.getByState(STATE_INIT_LEAVE);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._transition = function (enteringView, leavingView, opts, done) {
	        var _this = this;
	        var transId = ++this._transIds;
	        if (enteringView === leavingView) {
	            // if the entering view and leaving view are the same thing don't continue
	            this._transFinish(transId, enteringView, leavingView, null, false);
	            return done(false);
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        this._setAnimate(opts);
	        if (!leavingView) {
	            // if no leaving view then create a bogus one
	            leavingView = new view_controller_1.ViewController();
	        }
	        if (!enteringView) {
	            // if no entering view then create a bogus one
	            enteringView = new view_controller_1.ViewController();
	            enteringView.fireLoaded();
	            this.viewDidLoad.emit(enteringView);
	        }
	        /* Async steps to complete a transition
	          1. _render: compile the view and render it in the DOM. Load page if it hasn't loaded already. When done call postRender
	          2. _postRender: Run willEnter/willLeave, then wait a frame (change detection happens), then call beginTransition
	          3. _beforeTrans: Create the transition's animation, play the animation, wait for it to end
	          4. _afterTrans: Run didEnter/didLeave, call _transComplete()
	          5. _transComplete: Cleanup, remove cache views, then call the final callback
	        */
	        // begin the multiple async process of transitioning to the entering view
	        this._render(transId, enteringView, leavingView, opts, function (hasCompleted) {
	            _this._transFinish(transId, enteringView, leavingView, opts.direction, hasCompleted);
	            done(hasCompleted);
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._setAnimate = function (opts) {
	        if ((this._views.length === 1 && !this._init && !this.isPortal) || this.config.get('animate') === false) {
	            opts.animate = false;
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._render = function (transId, enteringView, leavingView, opts, done) {
	        // compile/load the view into the DOM
	        var _this = this;
	        if (enteringView.state === STATE_INACTIVE) {
	            // this entering view is already set to inactive, so this
	            // transition must be canceled, so don't continue
	            return done();
	        }
	        enteringView.state = STATE_INIT_ENTER;
	        leavingView.state = STATE_INIT_LEAVE;
	        // remember if this nav is already transitioning or not
	        var isAlreadyTransitioning = this.isTransitioning();
	        if (enteringView.isLoaded()) {
	            // already compiled this view, do not load again and continue
	            this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
	        }
	        else {
	            // view has not been compiled/loaded yet
	            // continue once the view has finished compiling
	            // DOM WRITE
	            this.setTransitioning(true, 500);
	            this.loadPage(enteringView, this._viewport, opts, function () {
	                enteringView.fireLoaded();
	                _this.viewDidLoad.emit(enteringView);
	                _this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._postRender = function (transId, enteringView, leavingView, isAlreadyTransitioning, opts, done) {
	        // called after _render has completed and the view is compiled/loaded
	        if (enteringView.state === STATE_INACTIVE) {
	            // this entering view is already set to inactive, so this
	            // transition must be canceled, so don't continue
	            return done();
	        }
	        if (!opts.preload) {
	            // the enteringView will become the active view, and is not being preloaded
	            // set the correct zIndex for the entering and leaving views
	            // if there's already another trans_enter happening then
	            // the zIndex for the entering view should go off of that one
	            // DOM WRITE
	            var lastestLeavingView = this.getByState(STATE_TRANS_ENTER) || leavingView;
	            this._setZIndex(enteringView, lastestLeavingView, opts.direction);
	            // make sure the entering and leaving views are showing
	            // DOM WRITE
	            if (isAlreadyTransitioning) {
	                // the previous transition was still going when this one started
	                // so to be safe, only update showing the entering/leaving
	                // don't hide the others when they could still be transitioning
	                enteringView.domShow(true, this._renderer);
	                leavingView.domShow(true, this._renderer);
	            }
	            else {
	                // there are no other transitions happening but this one
	                // only entering/leaving should show, all others hidden
	                // also if a view is an overlay or the previous view is an
	                // overlay then always show the overlay and the view before it
	                var view;
	                var shouldShow;
	                for (var i = 0, ii = this._views.length; i < ii; i++) {
	                    view = this._views[i];
	                    shouldShow = (view === enteringView) ||
	                        (view === leavingView) ||
	                        view.isOverlay ||
	                        (i < ii - 1 ? this._views[i + 1].isOverlay : false);
	                    view.domShow(shouldShow, this._renderer);
	                }
	            }
	            // call each view's lifecycle events
	            if (leavingView.fireOtherLifecycles) {
	                // only fire entering lifecycle if the leaving
	                // view hasn't explicitly set not to
	                enteringView.fireWillEnter();
	                this.viewWillEnter.emit(enteringView);
	            }
	            if (enteringView.fireOtherLifecycles) {
	                // only fire leaving lifecycle if the entering
	                // view hasn't explicitly set not to
	                leavingView.fireWillLeave();
	                this.viewWillLeave.emit(leavingView);
	            }
	        }
	        else {
	            // this view is being preloaded, don't call lifecycle events
	            // transition does not need to animate
	            opts.animate = false;
	        }
	        this._beforeTrans(enteringView, leavingView, opts, done);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._beforeTrans = function (enteringView, leavingView, opts, done) {
	        // called after one raf from postRender()
	        // create the transitions animation, play the animation
	        // when the transition ends call wait for it to end
	        var _this = this;
	        if (enteringView.state === STATE_INACTIVE) {
	            // this entering view is already set to inactive, so this
	            // transition must be canceled, so don't continue
	            return done();
	        }
	        enteringView.state = STATE_TRANS_ENTER;
	        leavingView.state = STATE_TRANS_LEAVE;
	        // everything during the transition should runOutsideAngular
	        this._zone.runOutsideAngular(function () {
	            // init the transition animation
	            var transitionOpts = {
	                animation: opts.animation,
	                direction: opts.direction,
	                duration: opts.duration,
	                easing: opts.easing,
	                renderDelay: opts.transitionDelay || _this._trnsDelay,
	                isRTL: _this.config.platform.isRTL(),
	                ev: opts.ev,
	            };
	            var transAnimation = _this._createTrans(enteringView, leavingView, transitionOpts);
	            _this._trans && _this._trans.destroy();
	            _this._trans = transAnimation;
	            if (opts.animate === false) {
	                // force it to not animate the elements, just apply the "to" styles
	                transAnimation.duration(0);
	            }
	            // check if a parent is transitioning and get the time that it ends
	            var parentTransitionEndTime = _this._getLongestTrans(Date.now());
	            if (parentTransitionEndTime > 0) {
	                // the parent is already transitioning and has disabled the app
	                // so just update the local transitioning information
	                var duration = parentTransitionEndTime - Date.now();
	                _this.setTransitioning(true, duration);
	            }
	            else {
	                // this is the only active transition (for now), so disable the app
	                var keyboardDurationPadding = 0;
	                if (_this._keyboard.isOpen()) {
	                    // add XXms to the duration the app is disabled when the keyboard is open
	                    keyboardDurationPadding = 600;
	                }
	                var duration = transAnimation.getDuration() + keyboardDurationPadding;
	                var enableApp = (duration < 64);
	                _this._app.setEnabled(enableApp, duration);
	                _this.setTransitioning(!enableApp, duration);
	            }
	            // create a callback for when the animation is done
	            transAnimation.onFinish(function (trans) {
	                // transition animation has ended
	                // destroy the animation and it's element references
	                trans.destroy();
	                _this._afterTrans(enteringView, leavingView, opts, trans.hasCompleted, done);
	            });
	            // cool, let's do this, start the transition
	            if (opts.progressAnimation) {
	                // this is a swipe to go back, just get the transition progress ready
	                // kick off the swipe animation start
	                transAnimation.progressStart();
	            }
	            else {
	                // this is a normal animation
	                // kick it off and let it play through
	                transAnimation.play();
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._afterTrans = function (enteringView, leavingView, opts, hasCompleted, done) {
	        // transition has completed, update each view's state
	        // place back into the zone, run didEnter/didLeave
	        // call the final callback when done
	        var _this = this;
	        // run inside of the zone again
	        this._zone.run(function () {
	            if (!opts.preload && hasCompleted) {
	                if (leavingView.fireOtherLifecycles) {
	                    // only fire entering lifecycle if the leaving
	                    // view hasn't explicitly set not to
	                    enteringView.fireDidEnter();
	                    _this.viewDidEnter.emit(enteringView);
	                }
	                if (enteringView.fireOtherLifecycles) {
	                    // only fire leaving lifecycle if the entering
	                    // view hasn't explicitly set not to
	                    leavingView.fireDidLeave();
	                    _this.viewDidLeave.emit(leavingView);
	                }
	            }
	            if (enteringView.state === STATE_INACTIVE) {
	                // this entering view is already set to inactive, so this
	                // transition must be canceled, so don't continue
	                return done(hasCompleted);
	            }
	            if (opts.keyboardClose !== false && _this._keyboard.isOpen()) {
	                // the keyboard is still open!
	                // no problem, let's just close for them
	                _this._keyboard.close();
	                _this._keyboard.onClose(function () {
	                    // keyboard has finished closing, transition complete
	                    done(hasCompleted);
	                }, 32);
	            }
	            else {
	                // all good, transition complete
	                done(hasCompleted);
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._transFinish = function (transId, enteringView, leavingView, direction, hasCompleted) {
	        // a transition has completed, but not sure if it's the last one or not
	        // check if this transition is the most recent one or not
	        var _this = this;
	        if (transId === this._transIds) {
	            // ok, good news, there were no other transitions that kicked
	            // off during the time this transition started and ended
	            if (hasCompleted) {
	                // this transition has completed as normal
	                // so the entering one is now the active view
	                // and the leaving view is now just inactive
	                if (enteringView.state !== STATE_REMOVE_AFTER_TRANS) {
	                    enteringView.state = STATE_ACTIVE;
	                }
	                if (leavingView.state !== STATE_REMOVE_AFTER_TRANS) {
	                    leavingView.state = STATE_INACTIVE;
	                }
	                // only need to do all this clean up if the transition
	                // completed, otherwise nothing actually changed
	                // destroy all of the views that come after the active view
	                this._cleanup();
	                // make sure only this entering view and PREVIOUS view are the
	                // only two views that are not display:none
	                // do not make any changes to the stack's current visibility
	                // if there is an overlay somewhere in the stack
	                leavingView = this.getPrevious(enteringView);
	                if (this.hasOverlay()) {
	                    // ensure the entering view is showing
	                    enteringView.domShow(true, this._renderer);
	                }
	                else {
	                    // only possibly hide a view if there are no overlays in the stack
	                    this._views.forEach(function (view) {
	                        var shouldShow = (view === enteringView) || (view === leavingView);
	                        view.domShow(shouldShow, _this._renderer);
	                    });
	                }
	                // this check only needs to happen once, which will add the css
	                // class to the nav when it's finished its first transition
	                if (!this._init) {
	                    this._init = true;
	                }
	            }
	            else {
	                // this transition has not completed, meaning the
	                // entering view did not end up as the active view
	                // this would happen when swipe to go back started
	                // but the user did not complete the swipe and the
	                // what was the active view stayed as the active view
	                leavingView.state = STATE_ACTIVE;
	                enteringView.state = STATE_INACTIVE;
	            }
	            // check if there is a parent actively transitioning
	            var transitionEndTime = this._getLongestTrans(Date.now());
	            // if transitionEndTime is greater than 0, there is a parent transition occurring
	            // so delegate enabling the app to the parent.  If it <= 0, go ahead and enable the app
	            if (transitionEndTime <= 0) {
	                this._app && this._app.setEnabled(true);
	            }
	            this.setTransitioning(false);
	            if (direction !== null && hasCompleted && !this.isPortal) {
	                // notify router of the state change if a direction was provided
	                // multiple routers can exist and each should be notified
	                this.routers.forEach(function (router) {
	                    router.stateChange(direction, enteringView);
	                });
	            }
	            // see if we should add the swipe back gesture listeners or not
	            this._sbCheck();
	            if (this._portal) {
	                this._portal._views.forEach(function (view) {
	                    if (view.data && view.data.dismissOnPageChange) {
	                        view.dismiss();
	                    }
	                });
	            }
	        }
	        else {
	            // darn, so this wasn't the most recent transition
	            // so while this one did end, there's another more recent one
	            // still going on. Because a new transition is happening,
	            // then this entering view isn't actually going to be the active
	            // one, so only update the state to active/inactive if the state
	            // wasn't already updated somewhere else during its transition
	            if (enteringView.state === STATE_TRANS_ENTER) {
	                enteringView.state = STATE_INACTIVE;
	            }
	            if (leavingView.state === STATE_TRANS_LEAVE) {
	                leavingView.state = STATE_INACTIVE;
	            }
	        }
	    };
	    /**
	     *@private
	     * This method is just a wrapper to the Transition function of same name
	     * to make it easy/possible to mock the method call by overriding the function.
	     * In testing we don't want to actually do the animation, we want to return a stub instead
	     */
	    NavController.prototype._createTrans = function (enteringView, leavingView, transitionOpts) {
	        return transition_1.Transition.createTransition(enteringView, leavingView, transitionOpts);
	    };
	    NavController.prototype._cleanup = function () {
	        var _this = this;
	        // ok, cleanup time!! Destroy all of the views that are
	        // INACTIVE and come after the active view
	        var activeViewIndex = this.indexOf(this.getActive());
	        var destroys = this._views.filter(function (v) { return v.state === STATE_REMOVE_AFTER_TRANS; });
	        for (var i = activeViewIndex + 1; i < this._views.length; i++) {
	            if (this._views[i].state === STATE_INACTIVE) {
	                destroys.push(this._views[i]);
	            }
	        }
	        // all pages being destroyed should be removed from the list of
	        // pages and completely removed from the dom
	        destroys.forEach(function (view) {
	            _this._views.splice(_this.indexOf(view), 1);
	            view.destroy();
	        });
	        // if any z-index goes under 0, then reset them all
	        var shouldResetZIndex = this._views.some(function (v) { return v.zIndex < 0; });
	        if (shouldResetZIndex) {
	            this._views.forEach(function (view) {
	                view.setZIndex(view.zIndex + INIT_ZINDEX + 1, _this._renderer);
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.getActiveChildNav = function () {
	        return this._children[this._children.length - 1];
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.registerChildNav = function (nav) {
	        this._children.push(nav);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.unregisterChildNav = function (nav) {
	        var index = this._children.indexOf(nav);
	        if (index > -1) {
	            this._children.splice(index, 1);
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.ngOnDestroy = function () {
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            this._views[i].destroy();
	        }
	        this._views.length = 0;
	        if (this.parent && this.parent.unregisterChildNav) {
	            this.parent.unregisterChildNav(this);
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.loadPage = function (view, viewport, opts, done) {
	        var _this = this;
	        if (!viewport || !view.componentType) {
	            return;
	        }
	        // TEMPORARY: automatically set selector w/ dah reflector
	        // TODO: use componentFactory.create once fixed
	        bootstrap_1.addSelector(view.componentType, 'ion-page');
	        this._compiler.resolveComponent(view.componentType).then(function (componentFactory) {
	            // add more providers to just this page
	            var componentProviders = core_1.ReflectiveInjector.resolve([
	                core_1.provide(NavController, { useValue: _this }),
	                core_1.provide(view_controller_1.ViewController, { useValue: view }),
	                core_1.provide(nav_params_1.NavParams, { useValue: view.getNavParams() })
	            ]);
	            var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(componentProviders, _this._viewport.parentInjector);
	            var componentRef = componentFactory.create(childInjector, null, null);
	            viewport.insert(componentRef.hostView, viewport.length);
	            // a new ComponentRef has been created
	            // set the ComponentRef's instance to its ViewController
	            view.setInstance(componentRef.instance);
	            // the component has been loaded, so call the view controller's loaded method to load any dependencies into the dom
	            view.loaded(function () {
	                // the ElementRef of the actual ion-page created
	                var pageElementRef = componentRef.location;
	                // remember the ChangeDetectorRef for this ViewController
	                view.setChangeDetector(componentRef.changeDetectorRef);
	                // remember the ElementRef to the ion-page elementRef that was just created
	                view.setPageRef(pageElementRef);
	                // auto-add page css className created from component JS class name
	                var cssClassName = util_1.pascalCaseToDashCase(view.componentType.name);
	                _this._renderer.setElementClass(pageElementRef.nativeElement, cssClassName, true);
	                view.onDestroy(function () {
	                    // ensure the element is cleaned up for when the view pool reuses this element
	                    _this._renderer.setElementAttribute(pageElementRef.nativeElement, 'class', null);
	                    _this._renderer.setElementAttribute(pageElementRef.nativeElement, 'style', null);
	                    componentRef.destroy();
	                });
	                // our job is done here
	                done(view);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.swipeBackStart = function () {
	        // default the direction to "back"
	        var opts = {
	            direction: 'back',
	            progressAnimation: true
	        };
	        // figure out the states of each view in the stack
	        var leavingView = this._remove(this._views.length - 1, 1);
	        if (leavingView) {
	            opts.animation = leavingView.getTransitionName(opts.direction);
	            // get the view thats ready to enter
	            var enteringView = this.getByState(STATE_INIT_ENTER);
	            // start the transition, fire callback when done...
	            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	                // swipe back has finished!!
	                void 0;
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.swipeBackProgress = function (stepValue) {
	        if (this._trans && this._sbGesture) {
	            // continue to disable the app while actively dragging
	            this._app.setEnabled(false, 4000);
	            this.setTransitioning(true, 4000);
	            // set the transition animation's progress
	            this._trans.progressStep(stepValue);
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.swipeBackEnd = function (shouldComplete, currentStepValue) {
	        if (this._trans && this._sbGesture) {
	            // the swipe back gesture has ended
	            this._trans.progressEnd(shouldComplete, currentStepValue);
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._sbCheck = function () {
	        var _this = this;
	        if (this._sbEnabled) {
	            // this nav controller can have swipe to go back
	            if (!this._sbGesture) {
	                // create the swipe back gesture if we haven't already
	                var opts = {
	                    edge: 'left',
	                    threshold: this._sbThreshold
	                };
	                var menuCtrl = this._app.getAppInjector().get(menu_controller_1.MenuController);
	                this._sbGesture = new swipe_back_1.SwipeBackGesture(this.getNativeElement(), opts, this, menuCtrl);
	            }
	            if (this.canSwipeBack()) {
	                // it is be possible to swipe back
	                if (!this._sbGesture.isListening) {
	                    this._zone.runOutsideAngular(function () {
	                        // start listening if it's not already
	                        void 0;
	                        _this._sbGesture.listen();
	                    });
	                }
	            }
	            else if (this._sbGesture.isListening) {
	                // it should not be possible to swipe back
	                // but the gesture is still listening
	                void 0;
	                this._sbGesture.unlisten();
	            }
	        }
	    };
	    /**
	     * If it's possible to use swipe back or not. If it's not possible
	     * to go back, or swipe back is not enabled, then this will return `false`.
	     * If it is possible to go back, and swipe back is enabled, then this
	     * will return `true`.
	     * @returns {boolean}
	     */
	    NavController.prototype.canSwipeBack = function () {
	        return (this._sbEnabled && !this.isTransitioning() && this._app.isEnabled() && this.canGoBack());
	    };
	    /**
	     * Returns `true` if there's a valid previous page that we can pop
	     * back to. Otherwise returns `false`.
	     * @returns {boolean}
	     */
	    NavController.prototype.canGoBack = function () {
	        var activeView = this.getActive();
	        if (activeView) {
	            return activeView.enableBack();
	        }
	        return false;
	    };
	    /**
	     * Returns if the nav controller is actively transitioning or not.
	     * @return {boolean}
	     */
	    NavController.prototype.isTransitioning = function () {
	        return (this._trnsTime > Date.now());
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.setTransitioning = function (isTransitioning, fallback) {
	        if (fallback === void 0) { fallback = 700; }
	        this._trnsTime = (isTransitioning ? Date.now() + fallback : 0);
	    };
	    /**
	     * @private
	     * This method traverses the tree of parents upwards
	     * and looks at the time the transition ends (if it's transitioning)
	     * and returns the value that is the furthest into the future
	     * thus giving us the longest transition duration
	     */
	    NavController.prototype._getLongestTrans = function (now) {
	        var parentNav = this.parent;
	        var transitionEndTime = -1;
	        while (parentNav) {
	            if (parentNav._trnsTime > transitionEndTime) {
	                transitionEndTime = parentNav._trnsTime;
	            }
	            parentNav = parentNav.parent;
	        }
	        // only check if the transitionTime is greater than the current time once
	        return transitionEndTime > 0 && transitionEndTime > now ? transitionEndTime : 0;
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.hasOverlay = function () {
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            if (this._views[i].isOverlay) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.getByState = function (state) {
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            if (this._views[i].state === state) {
	                return this._views[i];
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {number} index  The index of the page to get.
	     * @returns {ViewController} Returns the view controller that matches the given index.
	     */
	    NavController.prototype.getByIndex = function (index) {
	        return (index < this._views.length && index > -1 ? this._views[index] : null);
	    };
	    /**
	     * @returns {ViewController} Returns the active page's view controller.
	     */
	    NavController.prototype.getActive = function () {
	        return this.getByState(STATE_ACTIVE);
	    };
	    /**
	     * @param {ViewController} view
	     * @returns {boolean}
	     */
	    NavController.prototype.isActive = function (view) {
	        return !!(view && view.state === STATE_ACTIVE);
	    };
	    /**
	     * Returns the view controller which is before the given view controller.
	     * @param {ViewController} view
	     * @returns {viewController}
	     */
	    NavController.prototype.getPrevious = function (view) {
	        return this.getByIndex(this.indexOf(view) - 1);
	    };
	    /**
	     * Returns the first view controller in this nav controller's stack.
	     * @returns {ViewController}
	     */
	    NavController.prototype.first = function () {
	        return (this._views.length ? this._views[0] : null);
	    };
	    /**
	     * Returns the last page in this nav controller's stack.
	     * @returns {ViewController}
	     */
	    NavController.prototype.last = function () {
	        return (this._views.length ? this._views[this._views.length - 1] : null);
	    };
	    /**
	     * Returns the index number of the given view controller.
	     * @param {ViewController} view
	     * @returns {number}
	     */
	    NavController.prototype.indexOf = function (view) {
	        return this._views.indexOf(view);
	    };
	    /**
	     * Returns the number of views in this nav controller.
	     * @returns {number} The number of views in this stack, including the current view.
	     */
	    NavController.prototype.length = function () {
	        return this._views.length;
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.isSwipeBackEnabled = function () {
	        return this._sbEnabled;
	    };
	    Object.defineProperty(NavController.prototype, "rootNav", {
	        /**
	         * Returns the root `NavController`.
	         * @returns {NavController}
	         */
	        get: function () {
	            var nav = this;
	            while (nav.parent) {
	                nav = nav.parent;
	            }
	            return nav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    NavController.prototype.registerRouter = function (router) {
	        this.routers.push(router);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._incId = function (view) {
	        view.id = this.id + '-' + (++this._ids);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._setZIndex = function (enteringView, leavingView, direction) {
	        if (enteringView) {
	            // get the leaving view, which could be in various states
	            if (!leavingView || !leavingView.isLoaded()) {
	                // the leavingView is a mocked view, either we're
	                // actively transitioning or it's the initial load
	                var previousView = this.getPrevious(enteringView);
	                if (previousView && previousView.isLoaded()) {
	                    // we found a better previous view to reference
	                    // use this one instead
	                    enteringView.setZIndex(previousView.zIndex + 1, this._renderer);
	                }
	                else {
	                    // this is the initial view
	                    enteringView.setZIndex(this.isPortal ? PORTAL_ZINDEX : INIT_ZINDEX, this._renderer);
	                }
	            }
	            else if (direction === 'back') {
	                // moving back
	                enteringView.setZIndex(leavingView.zIndex - 1, this._renderer);
	            }
	            else {
	                // moving forward
	                enteringView.setZIndex(leavingView.zIndex + 1, this._renderer);
	            }
	        }
	    };
	    return NavController;
	}(ion_1.Ion));
	exports.NavController = NavController;
	var STATE_ACTIVE = 'active';
	var STATE_INACTIVE = 'inactive';
	var STATE_INIT_ENTER = 'init_enter';
	var STATE_INIT_LEAVE = 'init_leave';
	var STATE_TRANS_ENTER = 'trans_enter';
	var STATE_TRANS_LEAVE = 'trans_leave';
	var STATE_REMOVE = 'remove';
	var STATE_REMOVE_AFTER_TRANS = 'remove_after_trans';
	var STATE_FORCE_ACTIVE = 'force_active';
	var INIT_ZINDEX = 100;
	var PORTAL_ZINDEX = 9999;
	var ctrlIds = -1;


/***/ },
/* 149 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @name NavParams
	 * @description
	 * NavParams are an object that exists on a page and can contain data for that particular view.
	 * Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible
	 * option with a simple `get` method.
	 *
	 * @usage
	 * ```ts
	 * export class MyClass{
	 *  constructor(private params: NavParams){
	 *    // userParams is an object we have in our nav-parameters
	 *    this.params.get('userParams');
	 *  }
	 * }
	 * ```
	 * @demo /docs/v2/demos/nav-params/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 * @see {@link ../NavController/ NavController API Docs}
	 * @see {@link ../Nav/ Nav API Docs}
	 * @see {@link ../NavPush/ NavPush API Docs}
	 */
	var NavParams = (function () {
	    /**
	     * @private
	     * @param {TODO} data  TODO
	     */
	    function NavParams(data) {
	        if (data === void 0) { data = {}; }
	        this.data = data;
	    }
	    /**
	     * Get the value of a nav-parameter for the current view
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(private params: NavParams){
	     *    // userParams is an object we have in our nav-parameters
	     *    this.params.get('userParams');
	     *  }
	     * }
	     * ```
	     *
	     *
	     * @param {string} parameter Which param you want to look up
	     */
	    NavParams.prototype.get = function (param) {
	        return this.data[param];
	    };
	    return NavParams;
	}());
	exports.NavParams = NavParams;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var util_1 = __webpack_require__(127);
	var slide_edge_gesture_1 = __webpack_require__(138);
	var SwipeBackGesture = (function (_super) {
	    __extends(SwipeBackGesture, _super);
	    function SwipeBackGesture(element, options, _nav, _menuCtrl) {
	        _super.call(this, element, util_1.assign({
	            direction: 'x',
	            maxEdgeStart: 75
	        }, options));
	        this._nav = _nav;
	        this._menuCtrl = _menuCtrl;
	    }
	    SwipeBackGesture.prototype.canStart = function (ev) {
	        // the gesture swipe angle must be mainly horizontal and the
	        // gesture distance would be relatively short for a swipe back
	        // and swipe back must be possible on this nav controller
	        if (ev.angle > -40 &&
	            ev.angle < 40 &&
	            ev.distance < 50 &&
	            this._nav.canSwipeBack()) {
	            // passed the tests, now see if the super says it's cool or not
	            return _super.prototype.canStart.call(this, ev);
	        }
	        // nerp, not today
	        return false;
	    };
	    SwipeBackGesture.prototype.onSlideBeforeStart = function (slideData, ev) {
	        void 0;
	        this._nav.swipeBackStart();
	        this._menuCtrl.tempDisable(true);
	    };
	    SwipeBackGesture.prototype.onSlide = function (slide) {
	        var stepValue = (slide.distance / slide.max);
	        void 0;
	        this._nav.swipeBackProgress(stepValue);
	    };
	    SwipeBackGesture.prototype.onSlideEnd = function (slide, ev) {
	        var shouldComplete = (Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5);
	        var currentStepValue = (slide.distance / slide.max);
	        void 0;
	        this._nav.swipeBackEnd(shouldComplete, currentStepValue);
	        this._menuCtrl.tempDisable(false);
	    };
	    return SwipeBackGesture;
	}(slide_edge_gesture_1.SlideEdgeGesture));
	exports.SwipeBackGesture = SwipeBackGesture;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(152);
	/**
	 * @private
	 *
	 * - play
	 * - Add before classes - DOM WRITE
	 * - Remove before classes - DOM WRITE
	 * - Add before inline styles - DOM WRITE
	 * - set inline FROM styles - DOM WRITE
	 * - RAF
	 * - read toolbar dimensions - DOM READ
	 * - write content top/bottom padding - DOM WRITE
	 * - set css transition duration/easing - DOM WRITE
	 * - RAF
	 * - set inline TO styles - DOM WRITE
	 */
	var Transition = (function (_super) {
	    __extends(Transition, _super);
	    function Transition(enteringView, leavingView, opts) {
	        _super.call(this, null, {
	            renderDelay: opts.renderDelay
	        });
	        this.enteringView = enteringView;
	    }
	    Transition.createTransition = function (enteringView, leavingView, opts) {
	        var TransitionClass = TransitionRegistry[opts.animation];
	        if (!TransitionClass) {
	            // didn't find a transition animation, default to ios-transition
	            TransitionClass = TransitionRegistry['ios-transition'];
	        }
	        return new TransitionClass(enteringView, leavingView, opts);
	    };
	    Transition.register = function (name, TransitionClass) {
	        TransitionRegistry[name] = TransitionClass;
	    };
	    return Transition;
	}(animation_1.Animation));
	exports.Transition = Transition;
	var TransitionRegistry = {};


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dom_1 = __webpack_require__(124);
	var util_1 = __webpack_require__(127);
	/**
	 * @private
	 *
	 * - play
	 * - Add before classes - DOM WRITE
	 * - Remove before classes - DOM WRITE
	 * - Add before inline styles - DOM WRITE
	 * - set inline FROM styles - DOM WRITE
	 * - RAF
	 * - run before functions that have dom reads - DOM READ
	 * - run before functions that have dom writes - DOM WRITE
	 * - set css transition duration/easing - DOM WRITE
	 * - RAF
	 * - set inline TO styles - DOM WRITE
	 */
	var Animation = (function () {
	    function Animation(ele, opts) {
	        if (opts === void 0) { opts = {}; }
	        this._c = [];
	        this._el = [];
	        this._fx = {};
	        this._bfSty = {};
	        this._bfAdd = [];
	        this._bfRmv = [];
	        this._afSty = {};
	        this._afAdd = [];
	        this._afRmv = [];
	        this._bfReadFns = [];
	        this._bfWriteFns = [];
	        this._fFns = [];
	        this._fOnceFns = [];
	        this._rv = false;
	        this._lastUpd = 0;
	        this.isPlaying = false;
	        this.hasTween = false;
	        this.hasCompleted = false;
	        this.element(ele);
	        this._opts = util_1.assign({
	            renderDelay: 24
	        }, opts);
	    }
	    /**
	     * NO DOM
	     */
	    Animation.prototype._reset = function () {
	        this._fx = {};
	        this._bfSty = {};
	        this._afSty = {};
	        this._el.length = this._c.length = this._bfAdd.length = this._bfRmv.length = this._afAdd.length = this._afRmv.length = this._fFns.length = this._bfReadFns.length = this._bfWriteFns.length = this._fOnceFns.length = 0;
	        this._easing = this._dur = null;
	    };
	    Animation.prototype.element = function (ele) {
	        var i;
	        if (ele) {
	            if (ele.length) {
	                for (i = 0; i < ele.length; i++) {
	                    this._addEle(ele[i]);
	                }
	            }
	            else if (typeof ele === 'string') {
	                ele = document.querySelectorAll(ele);
	                for (i = 0; i < ele.length; i++) {
	                    this._addEle(ele[i]);
	                }
	            }
	            else {
	                this._addEle(ele);
	            }
	        }
	        return this;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype._addEle = function (ele) {
	        if (ele.nativeElement) {
	            ele = ele.nativeElement;
	        }
	        if (ele.nodeType === 1) {
	            this._el.push(ele);
	        }
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.parent = function (parentAnimation) {
	        this._parent = parentAnimation;
	        return this;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.add = function (childAnimation) {
	        childAnimation.parent(this);
	        this._c.push(childAnimation);
	        return this;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.getDuration = function () {
	        return this._dur !== null ? this._dur : (this._parent && this._parent.getDuration()) || 0;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.duration = function (milliseconds) {
	        this._dur = milliseconds;
	        return this;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.getEasing = function () {
	        return this._easing !== null ? this._easing : (this._parent && this._parent.getEasing()) || null;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.easing = function (name) {
	        this._easing = name;
	        return this;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.from = function (prop, val) {
	        this._addProp('from', prop, val);
	        return this;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.to = function (prop, val, clearProperyAfterTransition) {
	        var fx = this._addProp('to', prop, val);
	        if (clearProperyAfterTransition) {
	            // if this effect is a transform then clear the transform effect
	            // otherwise just clear the actual property
	            this.after.clearStyles([fx.trans ? dom_1.CSS.transform : prop]);
	        }
	        return this;
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.fromTo = function (prop, fromVal, toVal, clearProperyAfterTransition) {
	        return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype._addProp = function (state, prop, val) {
	        var fxProp = this._fx[prop];
	        if (!fxProp) {
	            // first time we've see this EffectProperty
	            fxProp = this._fx[prop] = {
	                trans: (typeof TRANSFORMS[prop] !== 'undefined'),
	                wc: ''
	            };
	            // add the will-change property for transforms or opacity
	            if (fxProp.trans) {
	                fxProp.wc = dom_1.CSS.transform;
	            }
	            else if (prop === 'opacity') {
	                fxProp.wc = prop;
	            }
	        }
	        // add from/to EffectState to the EffectProperty
	        var fxState = fxProp[state] = {
	            val: val,
	            num: null,
	            unit: '',
	        };
	        if (typeof val === 'string' && val.indexOf(' ') < 0) {
	            var r = val.match(CSS_VALUE_REGEX);
	            var num = parseFloat(r[1]);
	            if (!isNaN(num)) {
	                fxState.num = num;
	            }
	            fxState.unit = (r[0] !== r[2] ? r[2] : '');
	        }
	        else if (typeof val === 'number') {
	            fxState.num = val;
	        }
	        return fxProp;
	    };
	    Object.defineProperty(Animation.prototype, "before", {
	        /**
	         * NO DOM
	         */
	        get: function () {
	            var _this = this;
	            return {
	                addClass: function (className) {
	                    _this._bfAdd.push(className);
	                    return _this;
	                },
	                removeClass: function (className) {
	                    _this._bfRmv.push(className);
	                    return _this;
	                },
	                setStyles: function (styles) {
	                    _this._bfSty = styles;
	                    return _this;
	                },
	                clearStyles: function (propertyNames) {
	                    for (var i = 0; i < propertyNames.length; i++) {
	                        _this._bfSty[propertyNames[i]] = '';
	                    }
	                    return _this;
	                },
	                addDomReadFn: function (domReadFn) {
	                    _this._bfReadFns.push(domReadFn);
	                    return _this;
	                },
	                addDomWriteFn: function (domWriteFn) {
	                    _this._bfWriteFns.push(domWriteFn);
	                    return _this;
	                }
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Animation.prototype, "after", {
	        /**
	         * NO DOM
	         */
	        get: function () {
	            var _this = this;
	            return {
	                addClass: function (className) {
	                    _this._afAdd.push(className);
	                    return _this;
	                },
	                removeClass: function (className) {
	                    _this._afRmv.push(className);
	                    return _this;
	                },
	                setStyles: function (styles) {
	                    _this._afSty = styles;
	                    return _this;
	                },
	                clearStyles: function (propertyNames) {
	                    for (var i = 0; i < propertyNames.length; i++) {
	                        _this._afSty[propertyNames[i]] = '';
	                    }
	                    return _this;
	                }
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype.play = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        var self = this;
	        var i;
	        if (util_1.isDefined(opts.duration)) {
	            self._dur = opts.duration;
	        }
	        void 0;
	        // always default that an animation does not tween
	        // a tween requires that an Animation class has an element
	        // and that it has at least one FROM/TO effect
	        // and that the FROM/TO effect can tween numeric values
	        self.hasTween = false;
	        self.hasCompleted = false;
	        self.isPlaying = true;
	        // this is the top level animation and is in full control
	        // of when the async play() should actually kick off
	        // if there is no duration then it'll set the TO property immediately
	        // if there is a duration, then it'll stage all animations at the
	        // FROM property and transition duration, wait a few frames, then
	        // kick off the animation by setting the TO property for each animation
	        // ensure all past transition end events have been cleared
	        self._clearAsync();
	        if (self._dur > 30) {
	            // this animation has a duration, so it should animate
	            // place all the elements with their FROM properties
	            // set the FROM properties
	            // ******** DOM WRITE ****************
	            self._progress(0);
	            // add the will-change or translateZ properties when applicable
	            // ******** DOM WRITE ****************
	            self._willChg(true);
	            // set the async TRANSITION END event
	            // and run onFinishes when the transition ends
	            // ******** DOM WRITE ****************
	            self._asyncEnd(self._dur, true);
	            // begin each animation when everything is rendered in their place
	            // and the transition duration/easing is ready to go
	            dom_1.rafFrames(self._opts.renderDelay / 16, function () {
	                // there's been a moment and the elements are in place
	                // fire off all the "before" function that have DOM READS in them
	                // elements will be in the DOM, however visibily hidden
	                // so we can read their dimensions if need be
	                // ******** DOM READ ****************
	                self._beforeReadFn();
	                // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
	                // fire off all the "before" function that have DOM WRITES in them
	                // ******** DOM WRITE ****************
	                self._beforeWriteFn();
	                // stage all of the before css classes and inline styles
	                // will recursively stage all child elements
	                // ******** DOM WRITE ****************
	                self._before();
	                // now set the TRANSITION duration/easing
	                // ******** DOM WRITE ****************
	                self._setTrans(self._dur, false);
	                // wait a few moments again to wait for the transition
	                // info to take hold in the DOM
	                dom_1.rafFrames(2, function () {
	                    // browser had some time to render everything in place
	                    // and the transition duration/easing is set
	                    // now set the TO properties
	                    // which will trigger the transition to begin
	                    // ******** DOM WRITE ****************
	                    self._progress(1);
	                });
	            });
	        }
	        else {
	            // this animation does not have a duration
	            // but we still need to apply the styles and wait
	            // a frame so we can accurately read the dimensions
	            dom_1.rafFrames(self._opts.renderDelay / 16, function () {
	                // fire off all the "before" function that have DOM READS in them
	                // elements will be in the DOM, however visibily hidden
	                // so we can read their dimensions if need be
	                // ******** DOM READ ****************
	                self._beforeReadFn();
	                // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
	                // fire off all the "before" function that have DOM WRITES in them
	                // ******** DOM WRITE ****************
	                self._beforeWriteFn();
	                // ensure before css has ran
	                // ******** DOM WRITE ****************
	                self._before();
	                // this animation does not have a duration, so it should not animate
	                // just go straight to the TO properties and call it done
	                // ******** DOM WRITE ****************
	                self._progress(1);
	                // since there was no animation, immediately run the after
	                // ******** DOM WRITE ****************
	                self._after();
	                // since there was no animation, it's done
	                // fire off all the onFinishes
	                // and now you know
	                self._didFinish(true);
	            });
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype.stop = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        var self = this;
	        var duration = util_1.isDefined(opts.duration) ? opts.duration : 0;
	        var stepValue = util_1.isDefined(opts.stepValue) ? opts.stepValue : 1;
	        // ensure all past transition end events have been cleared
	        this._clearAsync();
	        // set the TO properties
	        // ******** DOM WRITE ****************
	        self._progress(stepValue);
	        if (duration > 30) {
	            // this animation has a duration, so it should animate
	            // place all the elements with their TO properties
	            // now set the TRANSITION duration
	            // ******** DOM WRITE ****************
	            self._setTrans(duration, true);
	            // set the async TRANSITION END event
	            // and run onFinishes when the transition ends
	            // ******** DOM WRITE ****************
	            self._asyncEnd(duration, false);
	        }
	        else {
	            // this animation does not have a duration, so it should not animate
	            // just go straight to the TO properties and call it done
	            // ******** DOM WRITE ****************
	            self._after();
	            // since there was no animation, it's done
	            // fire off all the onFinishes
	            self._didFinish(false);
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype._asyncEnd = function (duration, shouldComplete) {
	        var self = this;
	        function onTransitionEnd(ev) {
	            void 0;
	            // ensure transition end events and timeouts have been cleared
	            self._clearAsync();
	            // set the after styles
	            // ******** DOM WRITE ****************
	            self._after();
	            // remove will change properties
	            // ******** DOM WRITE ****************
	            self._willChg(false);
	            // transition finished
	            self._didFinish(shouldComplete);
	        }
	        function onTransitionFallback() {
	            void 0;
	            // oh noz! the transition end event didn't fire in time!
	            // instead the fallback timer when first
	            // clear the other async end events from firing
	            self._tmr = 0;
	            self._clearAsync();
	            // too late to have a smooth animation, just finish it
	            // ******** DOM WRITE ****************
	            self._setTrans(0, true);
	            // ensure the ending progress step gets rendered
	            // ******** DOM WRITE ****************
	            self._progress(1);
	            // set the after styles
	            // ******** DOM WRITE ****************
	            self._after();
	            // remove will change properties
	            // ******** DOM WRITE ****************
	            self._willChg(false);
	            // transition finished
	            self._didFinish(shouldComplete);
	        }
	        // set the TRANSITION END event on one of the transition elements
	        self._unregTrans = dom_1.transitionEnd(self._transEl(), onTransitionEnd);
	        // set a fallback timeout if the transition end event never fires, or is too slow
	        // transition end fallback: (animation duration + XXms)
	        self._tmr = dom_1.nativeTimeout(onTransitionFallback, duration + 400);
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype._clearAsync = function () {
	        this._unregTrans && this._unregTrans();
	        if (this._tmr) {
	            clearTimeout(this._tmr);
	            this._tmr = 0;
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype._progress = function (stepValue) {
	        // bread 'n butter
	        var i;
	        var prop;
	        var fx;
	        var val;
	        var transforms;
	        var tweenEffect;
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i]._progress(stepValue);
	        }
	        if (this._el.length) {
	            // flip the number if we're going in reverse
	            if (this._rv) {
	                stepValue = ((stepValue * -1) + 1);
	            }
	            transforms = [];
	            for (prop in this._fx) {
	                fx = this._fx[prop];
	                if (fx.from && fx.to) {
	                    tweenEffect = (fx.from.num !== fx.to.num);
	                    if (tweenEffect) {
	                        this.hasTween = true;
	                    }
	                    if (stepValue === 0) {
	                        // FROM
	                        val = fx.from.val;
	                    }
	                    else if (stepValue === 1) {
	                        // TO
	                        val = fx.to.val;
	                    }
	                    else if (tweenEffect) {
	                        // EVERYTHING IN BETWEEN
	                        val = (((fx.to.num - fx.from.num) * stepValue) + fx.from.num) + fx.to.unit;
	                    }
	                    else {
	                        val = null;
	                    }
	                    if (val !== null) {
	                        if (fx.trans) {
	                            transforms.push(prop + '(' + val + ')');
	                        }
	                        else {
	                            for (i = 0; i < this._el.length; i++) {
	                                // ******** DOM WRITE ****************
	                                this._el[i].style[prop] = val;
	                            }
	                        }
	                    }
	                }
	            }
	            // place all transforms on the same property
	            if (transforms.length) {
	                if (!SUPPORTS_WILL_CHANGE) {
	                    // if the element doesn't support will-change
	                    // then auto add translateZ for transform properties
	                    transforms.push('translateZ(0px)');
	                }
	                for (i = 0; i < this._el.length; i++) {
	                    // ******** DOM WRITE ****************
	                    this._el[i].style[dom_1.CSS.transform] = transforms.join(' ');
	                }
	            }
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype._setTrans = function (duration, forcedLinearEasing) {
	        var i;
	        var easing;
	        // set the TRANSITION properties inline on the element
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i]._setTrans(duration, forcedLinearEasing);
	        }
	        if (Object.keys(this._fx).length) {
	            for (i = 0; i < this._el.length; i++) {
	                // all parent/child animations should have the same duration
	                // ******** DOM WRITE ****************
	                this._el[i].style[dom_1.CSS.transitionDuration] = duration + 'ms';
	                // each animation can have a different easing
	                easing = (forcedLinearEasing ? 'linear' : this.getEasing());
	                if (easing) {
	                    // ******** DOM WRITE ****************
	                    this._el[i].style[dom_1.CSS.transitionTimingFn] = easing;
	                }
	            }
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype._willChg = function (addWillChange) {
	        var i;
	        var wc;
	        var prop;
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i]._willChg(addWillChange);
	        }
	        if (SUPPORTS_WILL_CHANGE) {
	            wc = [];
	            if (addWillChange) {
	                for (prop in this._fx) {
	                    if (this._fx[prop].wc !== '') {
	                        if (this._fx[prop].wc === 'webkitTransform') {
	                            wc.push('transform', '-webkit-transform');
	                        }
	                        else {
	                            wc.push(this._fx[prop].wc);
	                        }
	                    }
	                }
	            }
	            for (i = 0; i < this._el.length; i++) {
	                // ******** DOM WRITE ****************
	                this._el[i].style['willChange'] = wc.join(',');
	            }
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype._before = function () {
	        // before the RENDER_DELAY
	        // before the animations have started
	        var i;
	        var j;
	        var prop;
	        var ele;
	        // stage all of the child animations
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i]._before();
	        }
	        if (!this._rv) {
	            for (i = 0; i < this._el.length; i++) {
	                ele = this._el[i];
	                // css classes to add before the animation
	                for (j = 0; j < this._bfAdd.length; j++) {
	                    // ******** DOM WRITE ****************
	                    ele.classList.add(this._bfAdd[j]);
	                }
	                // css classes to remove before the animation
	                for (j = 0; j < this._bfRmv.length; j++) {
	                    // ******** DOM WRITE ****************
	                    ele.classList.remove(this._bfRmv[j]);
	                }
	                // inline styles to add before the animation
	                for (prop in this._bfSty) {
	                    // ******** DOM WRITE ****************
	                    ele.style[prop] = this._bfSty[prop];
	                }
	            }
	        }
	    };
	    /**
	     * DOM READ
	     */
	    Animation.prototype._beforeReadFn = function () {
	        var i;
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM READ ****************
	            this._c[i]._beforeReadFn();
	        }
	        for (i = 0; i < this._bfReadFns.length; i++) {
	            // ******** DOM READ ****************
	            this._bfReadFns[i]();
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype._beforeWriteFn = function () {
	        var i;
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i]._beforeWriteFn();
	        }
	        for (i = 0; i < this._bfReadFns.length; i++) {
	            // ******** DOM WRITE ****************
	            this._bfWriteFns[i]();
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype._after = function () {
	        // after the animations have finished
	        var i;
	        var j;
	        var prop;
	        var ele;
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i]._after();
	        }
	        for (i = 0; i < this._el.length; i++) {
	            ele = this._el[i];
	            // remove the transition duration/easing
	            // ******** DOM WRITE ****************
	            ele.style[dom_1.CSS.transitionDuration] = '';
	            // ******** DOM WRITE ****************
	            ele.style[dom_1.CSS.transitionTimingFn] = '';
	            if (this._rv) {
	                // finished in reverse direction
	                // css classes that were added before the animation should be removed
	                for (j = 0; j < this._bfAdd.length; j++) {
	                    // ******** DOM WRITE ****************
	                    ele.classList.remove(this._bfAdd[j]);
	                }
	                // css classes that were removed before the animation should be added
	                for (j = 0; j < this._bfRmv.length; j++) {
	                    // ******** DOM WRITE ****************
	                    ele.classList.add(this._bfRmv[j]);
	                }
	                // inline styles that were added before the animation should be removed
	                for (prop in this._bfSty) {
	                    // ******** DOM WRITE ****************
	                    ele.style[prop] = '';
	                }
	            }
	            else {
	                // finished in forward direction
	                // css classes to add after the animation
	                for (j = 0; j < this._afAdd.length; j++) {
	                    // ******** DOM WRITE ****************
	                    ele.classList.add(this._afAdd[j]);
	                }
	                // css classes to remove after the animation
	                for (j = 0; j < this._afRmv.length; j++) {
	                    // ******** DOM WRITE ****************
	                    ele.classList.remove(this._afRmv[j]);
	                }
	                // inline styles to add after the animation
	                for (prop in this._afSty) {
	                    // ******** DOM WRITE ****************
	                    ele.style[prop] = this._afSty[prop];
	                }
	            }
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype.progressStart = function () {
	        for (var i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i].progressStart();
	        }
	        // ******** DOM WRITE ****************
	        this._before();
	        // force no duration, linear easing
	        // ******** DOM WRITE ****************
	        this._setTrans(0, true);
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype.progressStep = function (stepValue) {
	        var now = Date.now();
	        // only update if the last update was more than 16ms ago
	        if (now - 16 > this._lastUpd) {
	            this._lastUpd = now;
	            stepValue = Math.min(1, Math.max(0, stepValue));
	            for (var i = 0; i < this._c.length; i++) {
	                // ******** DOM WRITE ****************
	                this._c[i].progressStep(stepValue);
	            }
	            if (this._rv) {
	                // if the animation is going in reverse then
	                // flip the step value: 0 becomes 1, 1 becomes 0
	                stepValue = ((stepValue * -1) + 1);
	            }
	            // ******** DOM WRITE ****************
	            this._progress(stepValue);
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype.progressEnd = function (shouldComplete, currentStepValue) {
	        void 0;
	        for (var i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i].progressEnd(shouldComplete, currentStepValue);
	        }
	        // set all the animations to their final position
	        // ******** DOM WRITE ****************
	        this._progress(shouldComplete ? 1 : 0);
	        // if it's already at the final position, or close, then it's done
	        // otherwise we need to add a transition end event listener
	        if (currentStepValue < 0.05 || currentStepValue > 0.95) {
	            // the progress was already left off at the point that is finished
	            // for example, the left menu was dragged all the way open already
	            // ******** DOM WRITE ****************
	            this._after();
	            // ******** DOM WRITE ****************
	            this._willChg(false);
	            this._didFinish(shouldComplete);
	        }
	        else {
	            // the stepValue was left off at a point when it needs to finish transition still
	            // for example, the left menu was opened 75% and needs to finish opening
	            // ******** DOM WRITE ****************
	            this._asyncEnd(64, shouldComplete);
	            // force quick duration, linear easing
	            // ******** DOM WRITE ****************
	            this._setTrans(64, true);
	        }
	    };
	    /**
	     * POSSIBLE DOM READ/WRITE
	     */
	    Animation.prototype.onFinish = function (callback, onceTimeCallback, clearOnFinishCallacks) {
	        if (onceTimeCallback === void 0) { onceTimeCallback = false; }
	        if (clearOnFinishCallacks === void 0) { clearOnFinishCallacks = false; }
	        if (clearOnFinishCallacks) {
	            this._fFns = [];
	            this._fOnceFns = [];
	        }
	        if (onceTimeCallback) {
	            this._fOnceFns.push(callback);
	        }
	        else {
	            this._fFns.push(callback);
	        }
	        return this;
	    };
	    /**
	     * POSSIBLE DOM READ/WRITE
	     */
	    Animation.prototype._didFinish = function (hasCompleted) {
	        this.isPlaying = false;
	        this.hasCompleted = hasCompleted;
	        var i;
	        for (i = 0; i < this._fFns.length; i++) {
	            this._fFns[i](this);
	        }
	        for (i = 0; i < this._fOnceFns.length; i++) {
	            this._fOnceFns[i](this);
	        }
	        this._fOnceFns = [];
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype.reverse = function (shouldReverse) {
	        if (shouldReverse === void 0) { shouldReverse = true; }
	        for (var i = 0; i < this._c.length; i++) {
	            this._c[i].reverse(shouldReverse);
	        }
	        this._rv = shouldReverse;
	        return this;
	    };
	    /**
	     * DOM WRITE
	     */
	    Animation.prototype.destroy = function (removeElement) {
	        var i;
	        var ele;
	        for (i = 0; i < this._c.length; i++) {
	            // ******** DOM WRITE ****************
	            this._c[i].destroy(removeElement);
	        }
	        if (removeElement) {
	            for (i = 0; i < this._el.length; i++) {
	                ele = this._el[i];
	                // ******** DOM WRITE ****************
	                ele.parentNode && ele.parentNode.removeChild(ele);
	            }
	        }
	        this._clearAsync();
	        this._reset();
	    };
	    /**
	     * NO DOM
	     */
	    Animation.prototype._transEl = function () {
	        // get the lowest level element that has an Animation
	        var i;
	        var targetEl;
	        for (i = 0; i < this._c.length; i++) {
	            targetEl = this._c[i]._transEl();
	            if (targetEl) {
	                return targetEl;
	            }
	        }
	        return (this.hasTween && this._el.length ? this._el[0] : null);
	    };
	    // ***** STATIC CLASSES *********
	    Animation.create = function (name, opts) {
	        if (opts === void 0) { opts = {}; }
	        var AnimationClass = AnimationRegistry[name];
	        if (!AnimationClass) {
	            // couldn't find an animation by the given name
	            // fallback to just the base Animation class
	            AnimationClass = Animation;
	        }
	        return new AnimationClass(null, opts);
	    };
	    Animation.register = function (name, AnimationClass) {
	        AnimationRegistry[name] = AnimationClass;
	    };
	    return Animation;
	}());
	exports.Animation = Animation;
	var TRANSFORMS = {
	    'translateX': 1, 'translateY': 1, 'translateZ': 1,
	    'scale': 1, 'scaleX': 1, 'scaleY': 1, 'scaleZ': 1,
	    'rotate': 1, 'rotateX': 1, 'rotateY': 1, 'rotateZ': 1,
	    'skewX': 1, 'skewY': 1, 'perspective': 1
	};
	var CSS_VALUE_REGEX = /(^-?\d*\.?\d*)(.*)/;
	var SUPPORTS_WILL_CHANGE = (typeof document.documentElement.style['willChange'] !== 'undefined');
	var AnimationRegistry = {};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var util_1 = __webpack_require__(127);
	var nav_params_1 = __webpack_require__(149);
	/**
	 * @name ViewController
	 * @description
	 * Access various features and information about the current view.
	 * @usage
	 *  ```ts
	 * import { Component } from '@angular/core';
	 * import { ViewController } from 'ionic-angular';
	 *
	 * @Component({...})
	 * export class MyPage{
	 *
	 *   constructor(public viewCtrl: ViewController) {}
	 *
	 * }
	 * ```
	 */
	var ViewController = (function () {
	    function ViewController(componentType, data) {
	        this.componentType = componentType;
	        this._tbRefs = [];
	        this._hdAttr = null;
	        this._leavingOpts = null;
	        this._loaded = false;
	        this._onDismiss = null;
	        /**
	         * @private
	         */
	        this.instance = {};
	        /**
	         * @private
	         */
	        this.state = '';
	        /**
	         * @private
	         * If this is currently the active view, then set to false
	         * if it does not want the other views to fire their own lifecycles.
	         */
	        this.fireOtherLifecycles = true;
	        /**
	         * @private
	         */
	        this.isOverlay = false;
	        /**
	         * @private
	         */
	        this.usePortal = false;
	        /**
	         * @private
	         */
	        this._emitter = new core_1.EventEmitter();
	        // passed in data could be NavParams, but all we care about is its data object
	        this.data = (data instanceof nav_params_1.NavParams ? data.data : (util_1.isPresent(data) ? data : {}));
	        this.willEnter = new core_1.EventEmitter();
	        this.didEnter = new core_1.EventEmitter();
	        this.willLeave = new core_1.EventEmitter();
	        this.didLeave = new core_1.EventEmitter();
	        this.willUnload = new core_1.EventEmitter();
	        this.didUnload = new core_1.EventEmitter();
	    }
	    /**
	     * @private
	     */
	    ViewController.prototype.subscribe = function (generatorOrNext) {
	        return this._emitter.subscribe(generatorOrNext);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.emit = function (data) {
	        this._emitter.emit(data);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.onDismiss = function (callback) {
	        this._onDismiss = callback;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.dismiss = function (data, role, navOptions) {
	        var _this = this;
	        if (navOptions === void 0) { navOptions = {}; }
	        var options = util_1.merge({}, this._leavingOpts, navOptions);
	        return this._nav.remove(this._nav.indexOf(this), 1, options).then(function () {
	            _this._onDismiss && _this._onDismiss(data, role);
	            return data;
	        });
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setNav = function (navCtrl) {
	        this._nav = navCtrl;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getNav = function () {
	        return this._nav;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getTransitionName = function (direction) {
	        return this._nav && this._nav.config.get('pageTransition');
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getNavParams = function () {
	        return new nav_params_1.NavParams(this.data);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setLeavingOpts = function (opts) {
	        this._leavingOpts = opts;
	    };
	    /**
	     * Check to see if you can go back in the navigation stack.
	     * @param {boolean} Check whether or not you can go back from this page
	     * @returns {boolean} Returns if it's possible to go back from this Page.
	     */
	    ViewController.prototype.enableBack = function () {
	        // update if it's possible to go back from this nav item
	        if (this._nav) {
	            var previousItem = this._nav.getPrevious(this);
	            // the previous view may exist, but if it's about to be destroyed
	            // it shouldn't be able to go back to
	            return !!(previousItem);
	        }
	        return false;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setChangeDetector = function (cd) {
	        this._cd = cd;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setInstance = function (instance) {
	        this.instance = instance;
	    };
	    Object.defineProperty(ViewController.prototype, "name", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this.componentType ? this.componentType['name'] : '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewController.prototype, "index", {
	        /**
	         * You can find out the index of the current view is in the current navigation stack.
	         *
	         * ```ts
	         *  export class Page1 {
	         *    constructor(private view: ViewController){
	         *      // Just log out the index
	         *      console.log(this.view.index);
	         *    }
	         *  }
	         * ```
	         *
	         * @returns {number} Returns the index of this page within its `NavController`.
	         */
	        get: function () {
	            return (this._nav ? this._nav.indexOf(this) : -1);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @returns {boolean} Returns if this Page is the first in the stack of pages within its NavController.
	     */
	    ViewController.prototype.isFirst = function () {
	        return (this._nav ? this._nav.first() === this : false);
	    };
	    /**
	     * @returns {boolean} Returns if this Page is the last in the stack of pages within its NavController.
	     */
	    ViewController.prototype.isLast = function () {
	        return (this._nav ? this._nav.last() === this : false);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.domShow = function (shouldShow, renderer) {
	        // using hidden element attribute to display:none and not render views
	        // renderAttr of '' means the hidden attribute will be added
	        // renderAttr of null means the hidden attribute will be removed
	        // doing checks to make sure we only make an update to the element when needed
	        if (this._pgRef &&
	            (shouldShow && this._hdAttr === '' ||
	                !shouldShow && this._hdAttr !== '')) {
	            this._hdAttr = (shouldShow ? null : '');
	            renderer.setElementAttribute(this._pgRef.nativeElement, 'hidden', this._hdAttr);
	        }
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setZIndex = function (zIndex, renderer) {
	        if (this._pgRef && zIndex !== this.zIndex) {
	            this.zIndex = zIndex;
	            renderer.setElementStyle(this._pgRef.nativeElement, 'z-index', zIndex.toString());
	        }
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setPageRef = function (elementRef) {
	        this._pgRef = elementRef;
	    };
	    /**
	     * @private
	     * @returns {elementRef} Returns the Page's ElementRef
	     */
	    ViewController.prototype.pageRef = function () {
	        return this._pgRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setContentRef = function (elementRef) {
	        this._cntRef = elementRef;
	    };
	    /**
	     * @private
	     * @returns {elementRef} Returns the Page's Content ElementRef
	     */
	    ViewController.prototype.contentRef = function () {
	        return this._cntRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setContent = function (directive) {
	        this._cntDir = directive;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setToolbarRef = function (elementRef) {
	        this._tbRefs.push(elementRef);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.toolbarRefs = function () {
	        return this._tbRefs;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setHeader = function (directive) {
	        this._hdrDir = directive;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getHeader = function () {
	        return this._hdrDir;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setFooter = function (directive) {
	        this._ftrDir = directive;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getFooter = function () {
	        return this._ftrDir;
	    };
	    /**
	     * @private
	     * @returns {component} Returns the Page's Content component reference.
	     */
	    ViewController.prototype.getContent = function () {
	        return this._cntDir;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setNavbar = function (directive) {
	        this._nbDir = directive;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getNavbar = function () {
	        return this._nbDir;
	    };
	    /**
	     * You can find out of the current view has a Navbar or not. Be sure
	     * to wrap this in an `ionViewWillEnter` method in order to make sure
	     * the view has rendered fully.
	     *
	     * ```ts
	     * export class Page1 {
	     *  constructor(private viewCtrl: ViewController) {}
	     *
	     *  ionViewWillEnter(){
	     *    console.log('Do we have a Navbar?', this.viewCtrl.hasNavbar());
	     *  }
	     *}
	     * ```
	     *
	     * @returns {boolean} Returns a boolean if this Page has a navbar or not.
	     */
	    ViewController.prototype.hasNavbar = function () {
	        return !!this.getNavbar();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.navbarRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getElementRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.titleRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getTitleRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.navbarItemRefs = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getItemRefs();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.backBtnRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getBackButtonRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.backBtnTextRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getBackButtonTextRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.navbarBgRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getBackgroundRef();
	    };
	    /**
	     * You can change the text of the back button on a view-by-view basis.
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(private viewCtrl: ViewController) {}
	     *
	     *  ionViewWillEnter() {
	     *    this.viewCtrl.setBackButtonText('Previous');
	     *  }
	     * }
	     * ```
	     * Make sure you use the view events when calling this method, otherwise the back-button will not have been created
	     *
	     * @param {string} backButtonText Set the back button text.
	     */
	    ViewController.prototype.setBackButtonText = function (val) {
	        var navbar = this.getNavbar();
	        if (navbar) {
	            navbar.setBackButtonText(val);
	        }
	    };
	    /**
	     * Set if the back button for the current view is visible or not. Be sure to wrap this in `ionViewWillEnter` to make sure the has been compleltly rendered.
	     * @param {boolean} Set if this Page's back button should show or not.
	     */
	    ViewController.prototype.showBackButton = function (shouldShow) {
	        var navbar = this.getNavbar();
	        if (navbar) {
	            navbar.hideBackButton = !shouldShow;
	        }
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.isLoaded = function () {
	        return this._loaded;
	    };
	    /**
	     * The loaded method is used to load any dynamic content/components
	     * into the dom before proceeding with the transition.  If a component
	     * needs dynamic component loading, extending ViewController and
	     * overriding this method is a good option
	     * @param {function} done is a callback that must be called when async
	     * loading/actions are completed
	     */
	    ViewController.prototype.loaded = function (done) {
	        done();
	    };
	    /**
	     * @private
	     * The view has loaded. This event only happens once per view being
	     * created. If a view leaves but is cached, then this will not
	     * fire again on a subsequent viewing. This method is a good place
	     * to put your setup code for the view; however, it is not the
	     * recommended method to use when a view becomes active.
	     */
	    ViewController.prototype.fireLoaded = function () {
	        this._loaded = true;
	        ctrlFn(this, 'Loaded');
	    };
	    /**
	     * @private
	     * The view is about to enter and become the active view.
	     */
	    ViewController.prototype.fireWillEnter = function () {
	        if (this._cd) {
	            // ensure this has been re-attached to the change detector
	            this._cd.reattach();
	            // detect changes before we run any user code
	            this._cd.detectChanges();
	        }
	        this.willEnter.emit(null);
	        ctrlFn(this, 'WillEnter');
	    };
	    /**
	     * @private
	     * The view has fully entered and is now the active view. This
	     * will fire, whether it was the first load or loaded from the cache.
	     */
	    ViewController.prototype.fireDidEnter = function () {
	        var navbar = this.getNavbar();
	        navbar && navbar.didEnter();
	        this.didEnter.emit(null);
	        ctrlFn(this, 'DidEnter');
	    };
	    /**
	     * @private
	     * The view has is about to leave and no longer be the active view.
	     */
	    ViewController.prototype.fireWillLeave = function () {
	        this.willLeave.emit(null);
	        ctrlFn(this, 'WillLeave');
	    };
	    /**
	     * @private
	     * The view has finished leaving and is no longer the active view. This
	     * will fire, whether it is cached or unloaded.
	     */
	    ViewController.prototype.fireDidLeave = function () {
	        this.didLeave.emit(null);
	        ctrlFn(this, 'DidLeave');
	        // when this is not the active page
	        // we no longer need to detect changes
	        this._cd && this._cd.detach();
	    };
	    /**
	     * @private
	     * The view is about to be destroyed and have its elements removed.
	     */
	    ViewController.prototype.fireWillUnload = function () {
	        this.willUnload.emit(null);
	        ctrlFn(this, 'WillUnload');
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.onDestroy = function (destroyFn) {
	        this._destroyFn = destroyFn;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.destroy = function () {
	        this.didUnload.emit(null);
	        ctrlFn(this, 'DidUnload');
	        this._destroyFn && this._destroyFn();
	        this._destroyFn = null;
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ViewController.prototype, "_emitter", void 0);
	    return ViewController;
	}());
	exports.ViewController = ViewController;
	function ctrlFn(viewCtrl, fnName) {
	    if (viewCtrl.instance) {
	        // deprecated warning: added 2016-06-01, beta.8
	        if (viewCtrl.instance['onPage' + fnName]) {
	            try {
	                void 0;
	                viewCtrl.instance['onPage' + fnName]();
	            }
	            catch (e) {
	                void 0;
	            }
	        }
	        // fire off ionView lifecycle instance method
	        if (viewCtrl.instance['ionView' + fnName]) {
	            try {
	                viewCtrl.instance['ionView' + fnName]();
	            }
	            catch (e) {
	                void 0;
	            }
	        }
	    }
	}


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	var ion_1 = __webpack_require__(134);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @private
	 */
	var Header = (function () {
	    function Header(viewCtrl) {
	        viewCtrl && viewCtrl.setHeader(this);
	    }
	    Header = __decorate([
	        core_1.Directive({
	            selector: 'ion-header'
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController])
	    ], Header);
	    return Header;
	}());
	exports.Header = Header;
	/**
	 * @private
	 */
	var Footer = (function () {
	    function Footer(viewCtrl) {
	        viewCtrl && viewCtrl.setFooter(this);
	    }
	    Footer = __decorate([
	        core_1.Directive({
	            selector: 'ion-footer'
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController])
	    ], Footer);
	    return Footer;
	}());
	exports.Footer = Footer;
	/**
	 * @private
	 */
	var ToolbarBase = (function (_super) {
	    __extends(ToolbarBase, _super);
	    function ToolbarBase(elementRef) {
	        _super.call(this, elementRef);
	        this.itemRefs = [];
	        this.titleRef = null;
	    }
	    /**
	     * @private
	     */
	    ToolbarBase.prototype.setTitleCmp = function (titleCmp) {
	        this.titleCmp = titleCmp;
	    };
	    /**
	     * @private
	     * Returns the toolbar title text if it exists or an empty string
	     */
	    ToolbarBase.prototype.getTitleText = function () {
	        return (this.titleCmp && this.titleCmp.getTitleText()) || '';
	    };
	    /**
	     * @private
	     */
	    ToolbarBase.prototype.getTitleRef = function () {
	        return this.titleCmp && this.titleCmp.elementRef;
	    };
	    /**
	     * @private
	     * A toolbar items include the left and right side `ion-buttons`,
	     * and every `menu-toggle`. It does not include the `ion-title`.
	     * @returns {TODO} Array of this toolbar's item ElementRefs.
	     */
	    ToolbarBase.prototype.getItemRefs = function () {
	        return this.itemRefs;
	    };
	    /**
	     * @private
	     */
	    ToolbarBase.prototype.addItemRef = function (itemElementRef) {
	        this.itemRefs.push(itemElementRef);
	    };
	    return ToolbarBase;
	}(ion_1.Ion));
	exports.ToolbarBase = ToolbarBase;
	/**
	 * @name Toolbar
	 * @description
	 * A Toolbar is a generic bar that is positioned above or below content.
	 * Unlike a [Navbar](../../nav/Navbar), a toolbar can be used as a subheader.
	 * When toolbars are placed within an `<ion-header>` or `<ion-footer>`,
	 * the toolbars stay fixed in their respective location. When placed within
	 * `<ion-content>`, toolbars will scroll with the content.
	 *
	 *
	 * ### Buttons in a Toolbar
	 * Buttons placed in a toolbar should be placed inside of the `<ion-buttons>`
	 * element. An exception to this is a [menuToggle](../../menu/MenuToggle) button.
	 * It should not be placed inside of the `<ion-buttons>` element. Both the
	 * `<ion-buttons>` element and the `menuToggle` can be positioned inside of the
	 * toolbar using different properties. The below chart has a description of each
	 * property.
	 *
	 * | Property    | Description                                                                                                           |
	 * |-------------|-----------------------------------------------------------------------------------------------------------------------|
	 * | `start`     | Positions element to the left of the content in `ios` mode, and directly to the right in `md` and `wp` mode.    |
	 * | `end`       | Positions element to the right of the content in `ios` mode, and to the far right in `md` and `wp` mode.        |
	 * | `left`      | Positions element to the left of all other elements.                                                            |
	 * | `right`     | Positions element to the right of all other elements.                                                           |
	 *
	 *
	 * ### Multiple Toolbars
	 * Toolbars can be stacked up vertically in `<ion-header>`, `<ion-content>`, and
	 * `<ion-footer>` elements. However, toolbars also come with borders on both
	 * the top and bottom of the toolbar. To give developers full control of the
	 * design, Ionic also includes the `no-border-bottom` and `no-border-top` attributes.
	 * For example, sometimes two vertically stacked toolbars may have different
	 * background colors, in this case it might be best to leave a border between them.
	 * However, if they have the same background color, the app may look best without
	 * a border between them. The main point here is, it's entirely up to the app's design
	 * to decide when and when not to show borders between toolbars, and to do so then
	 * each toolbar can individually set `no-border-bottom` and `no-border-top` attributes.
	 *
	 *
	 * @usage
	 * ```html
	 * <ion-header>
	 *
	 *   <ion-toolbar no-border-bottom>
	 *     <ion-buttons start>
	 *       <button>
	 *         <ion-icon name="contact"></ion-icon>
	 *       </button>
	 *       <button>
	 *         <ion-icon name="search"></ion-icon>
	 *       </button>
	 *     </ion-buttons>
	 *     <ion-title>My Toolbar Title</ion-title>
	 *   </ion-toolbar>
	 *
	 *   <ion-toolbar no-border-top>
	 *     <ion-title>I'm a subheader</ion-title>
	 *   </ion-toolbar>
	 *
	 * <ion-header>
	 *
	 *
	 * <ion-content>
	 *
	 *   <ion-toolbar>
	 *     <ion-title>Scrolls with the content</ion-title>
	 *   </ion-toolbar>
	 *
	 * </ion-content>
	 *
	 *
	 * <ion-footer>
	 *
	 *   <ion-toolbar no-border-bottom>
	 *     <ion-title>I'm a subfooter</ion-title>
	 *     <ion-buttons right>
	 *       <button>
	 *         <ion-icon name="menu"></ion-icon>
	 *       </button>
	 *     </ion-buttons>
	 *   </ion-toolbar>
	 *
	 *   <ion-toolbar no-border-top>
	 *     <ion-title>I'm a footer</ion-title>
	 *     <ion-buttons end>
	 *       <button>
	 *         <ion-icon name="more"></ion-icon>
	 *       </button>
	 *       <button>
	 *         <ion-icon name="options"></ion-icon>
	 *       </button>
	 *     </ion-buttons>
	 *   </ion-toolbar>
	 *
	 * </ion-footer>
	 *  ```
	 *
	 * @demo /docs/v2/demos/toolbar/
	 * @see {@link ../../navbar/Navbar/ Navbar API Docs}
	 */
	var Toolbar = (function (_super) {
	    __extends(Toolbar, _super);
	    function Toolbar(viewCtrl, header, footer, config, elementRef) {
	        _super.call(this, elementRef);
	        if (viewCtrl && (header || footer)) {
	            // only toolbars within headers and footer are view toolbars
	            // toolbars within the content are not view toolbars, since they
	            // are apart of the content, and could be anywhere within the content
	            viewCtrl.setToolbarRef(elementRef);
	        }
	        this._sbPadding = config.getBoolean('statusbarPadding');
	    }
	    Toolbar = __decorate([
	        core_1.Component({
	            selector: 'ion-toolbar',
	            template: '<div class="toolbar-background"></div>' +
	                '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' +
	                '<ng-content select="ion-buttons[start]"></ng-content>' +
	                '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' +
	                '<div class="toolbar-content">' +
	                '<ng-content></ng-content>' +
	                '</div>',
	            host: {
	                'class': 'toolbar',
	                '[class.statusbar-padding]': '_sbPadding'
	            },
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()),
	        __param(2, core_1.Optional()), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, Header, Footer, config_1.Config, core_1.ElementRef])
	    ], Toolbar);
	    return Toolbar;
	}(ToolbarBase));
	exports.Toolbar = Toolbar;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var menu_controller_1 = __webpack_require__(145);
	/**
	 * @name MenuClose
	 * @description
	 * The `menuClose` directive can be placed on any button to close an open menu.
	 *
	 * @usage
	 *
	 * A simple `menuClose` button can be added using the following markup:
	 *
	 * ```html
	 * <button menuClose>Close Menu</button>
	 * ```
	 *
	 * To close a certain menu by its id or side, give the `menuClose`
	 * directive a value.
	 *
	 * ```html
	 * <button menuClose="left">Close Left Menu</button>
	 * ```
	 *
	 * @demo /docs/v2/demos/menu/
	 * @see {@link /docs/v2/components#menus Menu Component Docs}
	 * @see {@link ../../menu/Menu Menu API Docs}
	 */
	var MenuClose = (function () {
	    function MenuClose(_menu) {
	        this._menu = _menu;
	    }
	    /**
	    * @private
	    */
	    MenuClose.prototype.close = function () {
	        var menu = this._menu.get(this.menuClose);
	        menu && menu.close();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], MenuClose.prototype, "menuClose", void 0);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], MenuClose.prototype, "close", null);
	    MenuClose = __decorate([
	        core_1.Directive({
	            selector: '[menuClose]'
	        }), 
	        __metadata('design:paramtypes', [menu_controller_1.MenuController])
	    ], MenuClose);
	    return MenuClose;
	}());
	exports.MenuClose = MenuClose;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	/**
	  * @name Badge
	  * @module ionic
	  * @description
	  * Badges are simple components in Ionic containing numbers or text. You can display a badge to indicate that there is new information associated with the item it is on.
	  * @see {@link /docs/v2/components/#badges Badges Component Docs}

	 */
	var Badge = (function () {
	    function Badge(config, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        var element = _elementRef.nativeElement;
	        this._readAttrs(element);
	    }
	    /**
	     * @private
	     */
	    Badge.prototype._readAttrs = function (element) {
	        var elementAttrs = element.attributes;
	        var attrName;
	        for (var i = 0, l = elementAttrs.length; i < l; i++) {
	            if (elementAttrs[i].value !== '')
	                continue;
	            attrName = elementAttrs[i].name;
	            // Ignore attributes item-left, item-right
	            if (attrName.indexOf('item') === -1) {
	                this._setClass(attrName);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Badge.prototype._setClass = function (color) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, 'badge-' + color, true);
	    };
	    Badge = __decorate([
	        core_1.Directive({
	            selector: 'ion-badge'
	        }), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef, core_1.Renderer])
	    ], Badge);
	    return Badge;
	}());
	exports.Badge = Badge;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	var util_1 = __webpack_require__(127);
	/**
	  * @name Button
	  * @module ionic
	  *
	  * @description
	  * Buttons are simple components in Ionic. They can consist of text and icons
	  * and be enhanced by a wide range of attributes.
	  *
	  * @property [outline] - A transparent button with a border.
	  * @property [clear] - A transparent button without a border.
	  * @property [round] - A button with rounded corners.
	  * @property [block] - A button that fills its parent container with a border-radius.
	  * @property [full] - A button that fills its parent container without a border-radius or borders on the left/right.
	  * @property [small] - A button with size small.
	  * @property [large] - A button with size large.
	  * @property [disabled] - A disabled button.
	  * @property [fab] - A floating action button.
	  * @property [fab-left] - Position a fab button to the left.
	  * @property [fab-right] - Position a fab button to the right.
	  * @property [fab-center] - Position a fab button towards the center.
	  * @property [fab-top] - Position a fab button towards the top.
	  * @property [fab-bottom] - Position a fab button towards the bottom.
	  * @property [fab-fixed] - Makes a fab button have a fixed position.
	  * @property [color] - Dynamically set which predefined color this button should use (e.g. primary, secondary, danger, etc).
	  *
	  * @demo /docs/v2/demos/button/
	  * @see {@link /docs/v2/components#buttons Button Component Docs}
	 */
	var Button = (function () {
	    function Button(config, _elementRef, _renderer, ionItem) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._role = 'button'; // bar-button/item-button
	        this._size = null; // large/small/default
	        this._style = 'default'; // outline/clear/solid
	        this._shape = null; // round/fab
	        this._display = null; // block/full
	        this._colors = []; // primary/secondary
	        this._icon = null; // left/right/only
	        this._disabled = false; // disabled
	        this.isItem = (ionItem === '');
	        var element = _elementRef.nativeElement;
	        if (config.get('hoverCSS') === false) {
	            _renderer.setElementClass(_elementRef.nativeElement, 'disable-hover', true);
	        }
	        if (element.hasAttribute('ion-item')) {
	            // no need to put on these classes for an ion-item
	            this._role = null;
	            return;
	        }
	        if (element.hasAttribute('disabled')) {
	            this._disabled = true;
	        }
	        this._readAttrs(element);
	    }
	    Object.defineProperty(Button.prototype, "large", {
	        /**
	         * @input {string} Large button.
	         */
	        set: function (val) {
	            this._attr('_size', 'large', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "small", {
	        /**
	         * @input {string} Small button.
	         */
	        set: function (val) {
	            this._attr('_size', 'small', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "default", {
	        /**
	         * @input {string} Default button.
	         */
	        set: function (val) {
	            this._attr('_size', 'default', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "outline", {
	        /**
	         * @input {string} A transparent button with a border.
	         */
	        set: function (val) {
	            this._attr('_style', 'outline', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "clear", {
	        /**
	         * @input {string} A transparent button without a border.
	         */
	        set: function (val) {
	            this._attr('_style', 'clear', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "solid", {
	        /**
	         * @input {string} Force a solid button. Useful for buttons within an item.
	         */
	        set: function (val) {
	            this._attr('_style', 'solid', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "round", {
	        /**
	         * @input {string} A button with rounded corners.
	         */
	        set: function (val) {
	            this._attr('_shape', 'round', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "block", {
	        /**
	         * @input {string} A button that fills its parent container with a border-radius.
	         */
	        set: function (val) {
	            this._attr('_display', 'block', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "full", {
	        /**
	         * @input {string} A button that fills its parent container without a border-radius or borders on the left/right.
	         */
	        set: function (val) {
	            this._attr('_display', 'full', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Button.prototype._attr = function (type, attrName, attrValue) {
	        this._setClass(this[type], false);
	        if (util_1.isTrueProperty(attrValue)) {
	            this[type] = attrName;
	            this._setClass(attrName, true);
	        }
	        else {
	            // Special handling for '_style' which defaults to 'default'.
	            this[type] = (type === '_style' ? 'default' : null);
	        }
	        if (type === '_style') {
	            this._setColor(attrName, util_1.isTrueProperty(attrValue));
	        }
	    };
	    Object.defineProperty(Button.prototype, "color", {
	        /**
	         * @input {string} Dynamically set which predefined color this button should use (e.g. primary, secondary, danger, etc).
	         */
	        set: function (val) {
	            // Clear the colors for all styles including the default one.
	            this._setColor(BUTTON_STYLE_ATTRS.concat(['default']), false);
	            // Support array input which is also supported via multiple attributes (e.g. primary, secondary, etc).
	            this._colors = (val instanceof Array ? val : [val]);
	            // Set the colors for the currently effective style.
	            this._setColor(this._style, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Button.prototype.ngOnInit = function () {
	        // If the button has a role applied to it
	        if (this.category) {
	            this.setRole(this.category);
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype.ngAfterContentInit = function () {
	        this._init = true;
	        this._readIcon(this._elementRef.nativeElement);
	        this._assignCss(true);
	    };
	    /**
	     * @private
	     */
	    Button.prototype.ngAfterContentChecked = function () {
	        this._readIcon(this._elementRef.nativeElement);
	        this._assignCss(true);
	    };
	    /**
	     * @private
	     */
	    Button.prototype.addClass = function (className) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
	    };
	    /**
	     * @private
	     */
	    Button.prototype.setRole = function (val) {
	        this._role = val;
	    };
	    /**
	     * @private
	     */
	    Button.prototype._readIcon = function (element) {
	        // figure out if and where the icon lives in the button
	        var childNodes = element.childNodes;
	        if (childNodes.length > 0) {
	            childNodes = childNodes[0].childNodes;
	        }
	        var childNode;
	        var nodes = [];
	        for (var i = 0, l = childNodes.length; i < l; i++) {
	            childNode = childNodes[i];
	            if (childNode.nodeType === 3) {
	                // text node
	                if (childNode.textContent.trim() !== '') {
	                    nodes.push(TEXT);
	                }
	            }
	            else if (childNode.nodeType === 1) {
	                if (childNode.nodeName === 'ION-ICON') {
	                    // icon element node
	                    nodes.push(ICON);
	                }
	                else {
	                    // element other than an <ion-icon>
	                    nodes.push(TEXT);
	                }
	            }
	        }
	        // Remove any classes that are set already
	        this._setClass(this._icon, false);
	        if (nodes.length > 1) {
	            if (nodes[0] === ICON && nodes[1] === TEXT) {
	                this._icon = 'icon-left';
	            }
	            else if (nodes[0] === TEXT && nodes[1] === ICON) {
	                this._icon = 'icon-right';
	            }
	        }
	        else if (nodes.length === 1 && nodes[0] === ICON) {
	            this._icon = 'icon-only';
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype._readAttrs = function (element) {
	        var elementAttrs = element.attributes;
	        var attrName;
	        for (var i = 0, l = elementAttrs.length; i < l; i++) {
	            if (elementAttrs[i].value !== '')
	                continue;
	            attrName = elementAttrs[i].name;
	            if (BUTTON_STYLE_ATTRS.indexOf(attrName) > -1) {
	                this._style = attrName;
	            }
	            else if (BUTTON_DISPLAY_ATTRS.indexOf(attrName) > -1) {
	                this._display = attrName;
	            }
	            else if (BUTTON_SHAPE_ATTRS.indexOf(attrName) > -1) {
	                this._shape = attrName;
	            }
	            else if (BUTTON_SIZE_ATTRS.indexOf(attrName) > -1) {
	                this._size = attrName;
	            }
	            else if (!(IGNORE_ATTRS.test(attrName))) {
	                this._colors.push(attrName);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype._assignCss = function (assignCssClass) {
	        var role = this._role;
	        if (role) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, role, assignCssClass); // button
	            this._setClass(this._style, assignCssClass); // button-clear
	            this._setClass(this._shape, assignCssClass); // button-round
	            this._setClass(this._display, assignCssClass); // button-full
	            this._setClass(this._size, assignCssClass); // button-small
	            this._setClass(this._icon, assignCssClass); // button-icon-left
	            this._setColor(this._style, assignCssClass); // button-secondary, button-clear-secondary
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype._setClass = function (type, assignCssClass) {
	        if (type && this._init) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, this._role + '-' + type.toLowerCase(), assignCssClass);
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype._setColor = function (type, assignCssClass) {
	        var _this = this;
	        if (type && this._init) {
	            // Support array to allow removal of many styles at once.
	            var styles = (type instanceof Array ? type : [type]);
	            styles.forEach(function (styleName) {
	                // If the role is not a bar-button, don't apply the solid style
	                styleName = (_this._role !== 'bar-button' && styleName === 'solid' ? 'default' : styleName);
	                var colorStyle = (styleName !== null && styleName !== 'default' ? styleName.toLowerCase() + '-' : '');
	                _this._colors.forEach(function (colorName) {
	                    _this._setClass(colorStyle + colorName, assignCssClass); // button-secondary, button-clear-secondary
	                });
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    Button.setRoles = function (contentButtonChildren, role) {
	        var buttons = contentButtonChildren.toArray();
	        buttons.forEach(function (button) {
	            button.setRole(role);
	        });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Button.prototype, "category", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "large", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "small", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "default", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "outline", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "clear", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "solid", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "round", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "block", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "full", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], Button.prototype, "color", null);
	    Button = __decorate([
	        core_1.Component({
	            selector: 'button:not([ion-item]),[button]',
	            template: '<span class="button-inner">' +
	                '<ng-content></ng-content>' +
	                '</span>' +
	                '<ion-button-effect></ion-button-effect>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(3, core_1.Attribute('ion-item')), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef, core_1.Renderer, String])
	    ], Button);
	    return Button;
	}());
	exports.Button = Button;
	var BUTTON_SIZE_ATTRS = ['large', 'small', 'default'];
	var BUTTON_STYLE_ATTRS = ['clear', 'outline', 'solid'];
	var BUTTON_SHAPE_ATTRS = ['round', 'fab'];
	var BUTTON_DISPLAY_ATTRS = ['block', 'full'];
	var IGNORE_ATTRS = /_ng|button|left|right/;
	var TEXT = 1;
	var ICON = 2;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var app_1 = __webpack_require__(122);
	var ion_1 = __webpack_require__(134);
	var config_1 = __webpack_require__(125);
	var keyboard_1 = __webpack_require__(135);
	var dom_1 = __webpack_require__(124);
	var scroll_view_1 = __webpack_require__(159);
	var tabs_1 = __webpack_require__(160);
	var view_controller_1 = __webpack_require__(153);
	var util_1 = __webpack_require__(127);
	/**
	 * @name Content
	 * @description
	 * The Content component provides an easy to use content area with
	 * some useful methods to control the scrollable area.
	 *
	 * The content area can also implement pull-to-refresh with the
	 * [Refresher](../../refresher/Refresher) component.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *   Add your content here!
	 * </ion-content>
	 * ```
	 *
	 * To get a reference to the content component from a Page's logic,
	 * you can use Angular's `@ViewChild` annotation:
	 *
	 * ```ts
	 * import {Component, ViewChild} from '@angular/core';
	 * import {Content} from 'ionic-angular';
	 *
	 * @Component({...})
	 * export class MyPage{
	 *   @ViewChild(Content) content: Content;
	 *
	 *   scrollToTop() {
	 *     this.content.scrollToTop();
	 *   }
	 * }
	 * ```
	 *
	 */
	var Content = (function (_super) {
	    __extends(Content, _super);
	    function Content(_elementRef, _config, _app, _keyboard, _zone, viewCtrl, _tabs) {
	        _super.call(this, _elementRef);
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this._app = _app;
	        this._keyboard = _keyboard;
	        this._zone = _zone;
	        this._tabs = _tabs;
	        this._inputPolling = false;
	        this._sbPadding = _config.getBoolean('statusbarPadding', false);
	        if (viewCtrl) {
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(_elementRef);
	        }
	    }
	    /**
	     * @private
	     */
	    Content.prototype.ngOnInit = function () {
	        var self = this;
	        self._scrollEle = self._elementRef.nativeElement.children[0];
	        self._zone.runOutsideAngular(function () {
	            self._scroll = new scroll_view_1.ScrollView(self._scrollEle);
	            if (self._config.getBoolean('tapPolyfill')) {
	                self._scLsn = self.addScrollListener(function () {
	                    self._app.setScrolling();
	                });
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Content.prototype.ngOnDestroy = function () {
	        this._scLsn && this._scLsn();
	        this._scroll && this._scroll.destroy();
	        this._scrollEle = this._footerEle = this._scLsn = null;
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addScrollListener = function (handler) {
	        return this._addListener('scroll', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addTouchStartListener = function (handler) {
	        return this._addListener('touchstart', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addTouchMoveListener = function (handler) {
	        return this._addListener('touchmove', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addTouchEndListener = function (handler) {
	        return this._addListener('touchend', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addMouseDownListener = function (handler) {
	        return this._addListener('mousedown', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addMouseUpListener = function (handler) {
	        return this._addListener('mouseup', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addMouseMoveListener = function (handler) {
	        return this._addListener('mousemove', handler);
	    };
	    Content.prototype._addListener = function (type, handler) {
	        var _this = this;
	        if (!this._scrollEle) {
	            return;
	        }
	        // ensure we're not creating duplicates
	        this._scrollEle.removeEventListener(type, handler);
	        this._scrollEle.addEventListener(type, handler);
	        return function () {
	            if (_this._scrollEle) {
	                _this._scrollEle.removeEventListener(type, handler);
	            }
	        };
	    };
	    /**
	     * @private
	     */
	    Content.prototype.getScrollElement = function () {
	        return this._scrollEle;
	    };
	    /**
	     * @private
	     * Call a method when scrolling has stopped
	     * @param {Function} callback The method you want perform when scrolling has ended
	     */
	    Content.prototype.onScrollEnd = function (callback) {
	        var lastScrollTop = null;
	        var framesUnchanged = 0;
	        var _scrollEle = this._scrollEle;
	        function next() {
	            var currentScrollTop = _scrollEle.scrollTop;
	            if (lastScrollTop !== null) {
	                if (Math.round(lastScrollTop) === Math.round(currentScrollTop)) {
	                    framesUnchanged++;
	                }
	                else {
	                    framesUnchanged = 0;
	                }
	                if (framesUnchanged > 9) {
	                    return callback();
	                }
	            }
	            lastScrollTop = currentScrollTop;
	            dom_1.nativeRaf(function () {
	                dom_1.nativeRaf(next);
	            });
	        }
	        dom_1.nativeTimeout(next, 100);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.onScrollElementTransitionEnd = function (callback) {
	        dom_1.transitionEnd(this._scrollEle, callback);
	    };
	    /**
	     * Scroll to the specified position.
	     *
	     * ```ts
	     * import {Component, ViewChild} from '@angular/core';
	     * import {Content} from 'ionic-angular';
	     *
	     * @Component({
	     *   template: `<ion-content>
	     *                <button (click)="scrollTo()">Down 500px</button>
	     *              </ion-content>`
	     * )}
	     * export class MyPage{
	     *   @ViewChild(Content) content: Content;
	     *
	     *   scrollTo() {
	     *     // set the scrollLeft to 0px, and scrollTop to 500px
	     *     // the scroll duration should take 200ms
	     *     this.content.scrollTo(0, 500, 200);
	     *   }
	     * }
	     * ```
	     * @param {number} x  The x-value to scroll to.
	     * @param {number} y  The y-value to scroll to.
	     * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
	     * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
	     */
	    Content.prototype.scrollTo = function (x, y, duration) {
	        if (duration === void 0) { duration = 300; }
	        return this._scroll.scrollTo(x, y, duration);
	    };
	    /**
	     * Scroll to the top of the content component.
	     *
	     * ```ts
	     * import {Component, ViewChild} from '@angular/core';
	     * import {Content} from 'ionic-angular';
	     *
	     * @Component({
	     *   template: `<ion-content>
	     *                <button (click)="scrollToTop()">Scroll to top</button>
	     *              </ion-content>`
	     * )}
	     * export class MyPage{
	     *   @ViewChild(Content) content: Content;
	     *
	     *   scrollToTop() {
	     *     this.content.scrollToTop();
	     *   }
	     * }
	     * ```
	     * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
	     * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
	     */
	    Content.prototype.scrollToTop = function (duration) {
	        if (duration === void 0) { duration = 300; }
	        return this._scroll.scrollToTop(duration);
	    };
	    /**
	     * Get the `scrollTop` property of the content's scrollable element.
	     * @returns {number}
	     */
	    Content.prototype.getScrollTop = function () {
	        return this._scroll.getTop();
	    };
	    /**
	     * Set the `scrollTop` property of the content's scrollable element.
	     * @param {number} top
	     */
	    Content.prototype.setScrollTop = function (top) {
	        this._scroll.setTop(top);
	    };
	    /**
	     * Scroll to the bottom of the content component.
	     * @param {number} [duration]  Duration of the scroll animation in milliseconds. Defaults to `300`.
	     * @returns {Promise} Returns a promise which is resolved when the scroll has completed.
	     */
	    Content.prototype.scrollToBottom = function (duration) {
	        if (duration === void 0) { duration = 300; }
	        return this._scroll.scrollToBottom(duration);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.jsScroll = function (onScrollCallback) {
	        return this._scroll.jsScroll(onScrollCallback);
	    };
	    /**
	     * @private
	     * DOM WRITE
	     */
	    Content.prototype.addCssClass = function (className) {
	        this.getNativeElement().classList.add(className);
	    };
	    Object.defineProperty(Content.prototype, "fullscreen", {
	        /**
	         * @input {boolean} By default, content is positioned between the headers
	         * and footers. However, using `fullscreen="true"`, the content will be
	         * able to scroll "under" the headers and footers. At first glance the
	         * fullscreen option may not look any different than the default, however,
	         * by adding a transparency effect to a header then the content can be
	         * seen under the header as the user scrolls.
	         */
	        get: function () {
	            return !!this._fullscreen;
	        },
	        set: function (val) {
	            this._fullscreen = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * DOM WRITE
	     */
	    Content.prototype.removeCssClass = function (className) {
	        this.getNativeElement().classList.remove(className);
	    };
	    /**
	     * @private
	     * DOM WRITE
	     */
	    Content.prototype.setScrollElementStyle = function (prop, val) {
	        this._scrollEle.style[prop] = val;
	    };
	    /**
	     * Returns the content and scroll elements' dimensions.
	     * @returns {object} dimensions  The content and scroll elements' dimensions
	     * {number} dimensions.contentHeight  content offsetHeight
	     * {number} dimensions.contentTop  content offsetTop
	     * {number} dimensions.contentBottom  content offsetTop+offsetHeight
	     * {number} dimensions.contentWidth  content offsetWidth
	     * {number} dimensions.contentLeft  content offsetLeft
	     * {number} dimensions.contentRight  content offsetLeft + offsetWidth
	     * {number} dimensions.scrollHeight  scroll scrollHeight
	     * {number} dimensions.scrollTop  scroll scrollTop
	     * {number} dimensions.scrollBottom  scroll scrollTop + scrollHeight
	     * {number} dimensions.scrollWidth  scroll scrollWidth
	     * {number} dimensions.scrollLeft  scroll scrollLeft
	     * {number} dimensions.scrollRight  scroll scrollLeft + scrollWidth
	     */
	    Content.prototype.getContentDimensions = function () {
	        var _scrollEle = this._scrollEle;
	        var parentElement = _scrollEle.parentElement;
	        return {
	            contentHeight: parentElement.offsetHeight,
	            contentTop: parentElement.offsetTop,
	            contentBottom: parentElement.offsetTop + parentElement.offsetHeight,
	            contentWidth: parentElement.offsetWidth,
	            contentLeft: parentElement.offsetLeft,
	            contentRight: parentElement.offsetLeft + parentElement.offsetWidth,
	            scrollHeight: _scrollEle.scrollHeight,
	            scrollTop: _scrollEle.scrollTop,
	            scrollBottom: _scrollEle.scrollTop + _scrollEle.scrollHeight,
	            scrollWidth: _scrollEle.scrollWidth,
	            scrollLeft: _scrollEle.scrollLeft,
	            scrollRight: _scrollEle.scrollLeft + _scrollEle.scrollWidth,
	        };
	    };
	    /**
	     * @private
	     * DOM WRITE
	     * Adds padding to the bottom of the scroll element when the keyboard is open
	     * so content below the keyboard can be scrolled into view.
	     */
	    Content.prototype.addScrollPadding = function (newPadding) {
	        if (newPadding > this._scrollPadding) {
	            void 0;
	            this._scrollPadding = newPadding;
	            this._scrollEle.style.paddingBottom = newPadding + 'px';
	        }
	    };
	    /**
	     * @private
	     * DOM WRITE
	     */
	    Content.prototype.clearScrollPaddingFocusOut = function () {
	        var _this = this;
	        if (!this._inputPolling) {
	            this._inputPolling = true;
	            this._keyboard.onClose(function () {
	                _this._scrollPadding = 0;
	                _this._scrollEle.style.paddingBottom = (_this._paddingBottom > 0 ? _this._paddingBottom + 'px' : '');
	                _this._inputPolling = false;
	                _this.addScrollPadding(0);
	            }, 200, Infinity);
	        }
	    };
	    /**
	     * @private
	     * DOM READ
	     */
	    Content.prototype.readDimensions = function () {
	        this._paddingTop = 0;
	        this._paddingRight = 0;
	        this._paddingBottom = 0;
	        this._paddingLeft = 0;
	        this._headerHeight = 0;
	        this._footerHeight = 0;
	        this._tabbarPlacement = null;
	        var ele = this._elementRef.nativeElement;
	        var parentEle = ele.parentElement;
	        var computedStyle;
	        for (var i = 0; i < parentEle.children.length; i++) {
	            ele = parentEle.children[i];
	            if (ele.tagName === 'ION-CONTENT') {
	                if (this._fullscreen) {
	                    computedStyle = getComputedStyle(ele);
	                    this._paddingTop = parsePxUnit(computedStyle.paddingTop);
	                    this._paddingBottom = parsePxUnit(computedStyle.paddingBottom);
	                    this._paddingRight = parsePxUnit(computedStyle.paddingRight);
	                    this._paddingLeft = parsePxUnit(computedStyle.paddingLeft);
	                }
	            }
	            else if (ele.tagName === 'ION-HEADER') {
	                this._headerHeight = ele.clientHeight;
	            }
	            else if (ele.tagName === 'ION-FOOTER') {
	                this._footerHeight = ele.clientHeight;
	                this._footerEle = ele;
	            }
	        }
	        ele = parentEle;
	        var tabbarEle;
	        while (ele && ele.tagName !== 'ION-MODAL' && !ele.classList.contains('tab-subpage')) {
	            if (ele.tagName === 'ION-TABS') {
	                tabbarEle = ele.firstElementChild;
	                this._tabbarHeight = tabbarEle.clientHeight;
	                if (this._tabbarPlacement === null) {
	                    // this is the first tabbar found, remember it's position
	                    this._tabbarPlacement = ele.getAttribute('tabbarplacement');
	                }
	            }
	            ele = ele.parentElement;
	        }
	    };
	    /**
	     * @private
	     * DOM WRITE
	     */
	    Content.prototype.writeDimensions = function () {
	        var newVal;
	        var scrollEle = this._scrollEle;
	        // only write when it has changed
	        if (this._fullscreen) {
	            // adjust the content with padding, allowing content to scroll under headers/footers
	            // however, on iOS you cannot control the margins of the scrollbar (last tested iOS9.2)
	            // only add inline padding styles if the computed padding value, which would
	            // have come from the app's css, is different than the new padding value
	            newVal = this._headerHeight + this._paddingTop;
	            if (this._tabbarPlacement === 'top') {
	                newVal += this._tabbarHeight;
	            }
	            if (newVal !== this.adjustedTop) {
	                scrollEle.style.paddingTop = (newVal > 0 ? newVal + 'px' : '');
	                this.adjustedTop = newVal;
	            }
	            newVal = this._footerHeight + this._paddingBottom;
	            if (this._tabbarPlacement === 'bottom') {
	                newVal += this._tabbarHeight;
	                if (newVal > 0 && this._footerEle) {
	                    this._footerEle.style.bottom = (newVal - this._footerHeight - this._paddingBottom) + 'px';
	                }
	            }
	            if (newVal !== this.adjustedBottom) {
	                scrollEle.style.paddingBottom = (newVal > 0 ? newVal + 'px' : '');
	                this.adjustedBottom = newVal;
	            }
	        }
	        else {
	            // adjust the content with margins
	            newVal = this._headerHeight;
	            if (this._tabbarPlacement === 'top') {
	                newVal += this._tabbarHeight;
	            }
	            if (newVal !== this.adjustedTop) {
	                scrollEle.style.marginTop = (newVal > 0 ? newVal + 'px' : '');
	                this.adjustedTop = newVal;
	            }
	            newVal = this._footerHeight;
	            if (this._tabbarPlacement === 'bottom') {
	                newVal += this._tabbarHeight;
	            }
	            if (newVal !== this.adjustedBottom) {
	                scrollEle.style.marginBottom = (newVal > 0 ? newVal + 'px' : '');
	                this.adjustedBottom = newVal;
	                if (newVal > 0 && this._footerEle) {
	                    this._footerEle.style.bottom = (newVal - this._footerHeight) + 'px';
	                }
	            }
	        }
	        if (this._tabbarPlacement !== null && this._tabs) {
	            // set the position of the tabbar
	            if (this._tabbarPlacement === 'top') {
	                this._tabs.setTabbarPosition(this._headerHeight, -1);
	            }
	            else {
	                this._tabs.setTabbarPosition(-1, 0);
	            }
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Content.prototype, "fullscreen", null);
	    Content = __decorate([
	        core_1.Component({
	            selector: 'ion-content',
	            template: '<scroll-content>' +
	                '<ng-content></ng-content>' +
	                '</scroll-content>' +
	                '<ng-content select="ion-fixed"></ng-content>' +
	                '<ng-content select="ion-refresher"></ng-content>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	            host: {
	                '[class.statusbar-padding]': '_sbPadding'
	            }
	        }),
	        __param(5, core_1.Optional()),
	        __param(6, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, config_1.Config, app_1.App, keyboard_1.Keyboard, core_1.NgZone, view_controller_1.ViewController, tabs_1.Tabs])
	    ], Content);
	    return Content;
	}(ion_1.Ion));
	exports.Content = Content;
	function parsePxUnit(val) {
	    return (val.indexOf('px') > 0) ? parseInt(val, 10) : 0;
	}


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dom_1 = __webpack_require__(124);
	var ScrollView = (function () {
	    function ScrollView(ele) {
	        this._js = false;
	        this._top = 0;
	        this._el = ele;
	    }
	    ScrollView.prototype.getTop = function () {
	        if (this._js) {
	            return this._top;
	        }
	        return this._top = this._el.scrollTop;
	    };
	    ScrollView.prototype.setTop = function (top) {
	        this._top = top;
	        if (this._js) {
	            this._el.style[dom_1.CSS.transform] = "translate3d(0px," + top * -1 + "px,0px)";
	        }
	        else {
	            this._el.scrollTop = top;
	        }
	    };
	    ScrollView.prototype.scrollTo = function (x, y, duration) {
	        // scroll animation loop w/ easing
	        // credit https://gist.github.com/dezinezync/5487119
	        var self = this;
	        if (!self._el) {
	            // invalid element
	            return Promise.resolve();
	        }
	        x = x || 0;
	        y = y || 0;
	        var fromY = self._el.scrollTop;
	        var fromX = self._el.scrollLeft;
	        var xDistance = Math.abs(x - fromX);
	        var yDistance = Math.abs(y - fromY);
	        var maxAttempts = (duration / 16) + 100;
	        return new Promise(function (resolve) {
	            var startTime;
	            var attempts = 0;
	            // scroll loop
	            function step() {
	                attempts++;
	                if (!self._el || !self.isPlaying || attempts > maxAttempts) {
	                    self.isPlaying = false;
	                    resolve();
	                    return;
	                }
	                var time = Math.min(1, ((Date.now() - startTime) / duration));
	                // where .5 would be 50% of time on a linear scale easedT gives a
	                // fraction based on the easing method
	                var easedT = (--time) * time * time + 1;
	                if (fromY !== y) {
	                    self.setTop((easedT * (y - fromY)) + fromY);
	                }
	                if (fromX !== x) {
	                    self._el.scrollLeft = Math.floor((easedT * (x - fromX)) + fromX);
	                }
	                if (easedT < 1) {
	                    dom_1.nativeRaf(step);
	                }
	                else {
	                    // done
	                    resolve();
	                }
	            }
	            // start scroll loop
	            self.isPlaying = true;
	            // chill out for a frame first
	            dom_1.nativeRaf(function () {
	                startTime = Date.now();
	                dom_1.nativeRaf(step);
	            });
	        });
	    };
	    ScrollView.prototype.scrollToTop = function (duration) {
	        return this.scrollTo(0, 0, duration);
	    };
	    ScrollView.prototype.scrollToBottom = function (duration) {
	        var y = 0;
	        if (this._el) {
	            y = this._el.scrollHeight - this._el.clientHeight;
	        }
	        return this.scrollTo(0, y, duration);
	    };
	    ScrollView.prototype.stop = function () {
	        this.isPlaying = false;
	    };
	    /**
	     * @private
	     * JS Scrolling has been provided only as a temporary solution
	     * until iOS apps can take advantage of scroll events at all times.
	     * The goal is to eventually remove JS scrolling entirely. This
	     * method may be removed in the future.
	     */
	    ScrollView.prototype.jsScroll = function (onScrollCallback) {
	        var _this = this;
	        this._js = true;
	        this._cb = onScrollCallback;
	        this._pos = [];
	        if (this._el) {
	            this._el.addEventListener('touchstart', this._start.bind(this));
	            this._el.addEventListener('touchmove', this._move.bind(this));
	            this._el.addEventListener('touchend', this._end.bind(this));
	            this._el.parentElement.classList.add('js-scroll');
	        }
	        return function () {
	            if (_this._el) {
	                _this._el.removeEventListener('touchstart', _this._start.bind(_this));
	                _this._el.removeEventListener('touchmove', _this._move.bind(_this));
	                _this._el.removeEventListener('touchend', _this._end.bind(_this));
	                _this._el.parentElement.classList.remove('js-scroll');
	            }
	        };
	    };
	    /**
	     * @private
	     * Used for JS scrolling. May be removed in the future.
	     */
	    ScrollView.prototype._start = function (ev) {
	        this._velocity = 0;
	        this._pos.length = 0;
	        this._max = null;
	        this._pos.push(dom_1.pointerCoord(ev).y, Date.now());
	    };
	    /**
	     * @private
	     * Used for JS scrolling. May be removed in the future.
	     */
	    ScrollView.prototype._move = function (ev) {
	        if (this._pos.length) {
	            var y = dom_1.pointerCoord(ev).y;
	            // ******** DOM READ ****************
	            this._setMax();
	            this._top -= (y - this._pos[this._pos.length - 2]);
	            this._top = Math.min(Math.max(this._top, 0), this._max);
	            this._pos.push(y, Date.now());
	            // ******** DOM READ THEN DOM WRITE ****************
	            this._cb(this._top);
	            // ******** DOM WRITE ****************
	            this.setTop(this._top);
	        }
	    };
	    /**
	     * @private
	     * Used for JS scrolling. May be removed in the future.
	     */
	    ScrollView.prototype._setMax = function () {
	        if (!this._max) {
	            // ******** DOM READ ****************
	            this._max = (this._el.offsetHeight - this._el.parentElement.offsetHeight + this._el.parentElement.offsetTop);
	        }
	    };
	    /**
	     * @private
	     * Used for JS scrolling. May be removed in the future.
	     */
	    ScrollView.prototype._end = function (ev) {
	        // figure out what the scroll position was about 100ms ago
	        var positions = this._pos;
	        this._velocity = 0;
	        dom_1.cancelRaf(this._rafId);
	        if (!positions.length)
	            return;
	        var y = dom_1.pointerCoord(ev).y;
	        positions.push(y, Date.now());
	        var endPos = (positions.length - 1);
	        var startPos = endPos;
	        var timeRange = (Date.now() - 100);
	        // move pointer to position measured 100ms ago
	        for (var i = endPos; i > 0 && positions[i] > timeRange; i -= 2) {
	            startPos = i;
	        }
	        if (startPos !== endPos) {
	            // compute relative movement between these two points
	            var timeOffset = (positions[endPos] - positions[startPos]);
	            var movedTop = (positions[startPos - 1] - positions[endPos - 1]);
	            // based on XXms compute the movement to apply for each render step
	            this._velocity = ((movedTop / timeOffset) * FRAME_MS);
	            // verify that we have enough velocity to start deceleration
	            if (Math.abs(this._velocity) > MIN_VELOCITY_START_DECELERATION) {
	                // ******** DOM READ ****************
	                this._setMax();
	                this._rafId = dom_1.nativeRaf(this._decelerate.bind(this));
	            }
	        }
	        positions.length = 0;
	    };
	    /**
	     * @private
	     * Used for JS scrolling. May be removed in the future.
	     */
	    ScrollView.prototype._decelerate = function () {
	        var self = this;
	        if (self._velocity) {
	            self._velocity *= DECELERATION_FRICTION;
	            // update top with updated velocity
	            // clamp top within scroll limits
	            self._top = Math.min(Math.max(self._top + self._velocity, 0), self._max);
	            // ******** DOM READ THEN DOM WRITE ****************
	            self._cb(self._top);
	            // ******** DOM WRITE ****************
	            self.setTop(self._top);
	            if (self._top > 0 && self._top < self._max && Math.abs(self._velocity) > MIN_VELOCITY_CONTINUE_DECELERATION) {
	                self._rafId = dom_1.nativeRaf(self._decelerate.bind(self));
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    ScrollView.prototype.destroy = function () {
	        this._velocity = 0;
	        this.stop();
	        this._el = null;
	    };
	    return ScrollView;
	}());
	exports.ScrollView = ScrollView;
	var MAX_VELOCITY = 150;
	var MIN_VELOCITY_START_DECELERATION = 4;
	var MIN_VELOCITY_CONTINUE_DECELERATION = 0.12;
	var DECELERATION_FRICTION = 0.97;
	var FRAME_MS = (1000 / 60);


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var app_1 = __webpack_require__(122);
	var config_1 = __webpack_require__(125);
	var content_1 = __webpack_require__(158);
	var ion_1 = __webpack_require__(134);
	var util_1 = __webpack_require__(127);
	var dom_1 = __webpack_require__(124);
	var nav_controller_1 = __webpack_require__(148);
	var platform_1 = __webpack_require__(126);
	var tab_button_1 = __webpack_require__(161);
	var tab_highlight_1 = __webpack_require__(163);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name Tabs
	 * @description
	 * Tabs make it easy to navigate between different pages or functional
	 * aspects of an app. The Tabs component, written as `<ion-tabs>`, is
	 * a container of individual [Tab](../Tab/) components.
	 *
	 * ### Placement
	 *
	 * The position of the tabs relative to the content varies based on
	 * the mode. By default, the tabs are placed at the bottom of the screen
	 * for `ios` mode, and at the top for the `md` and `wp` modes. You can
	 * configure the position using the `tabbarPlacement` property on the
	 * `<ion-tabs>` element, or in your app's [config](../../config/Config/).
	 * See the [Input Properties](#input-properties) below for the available
	 * values of `tabbarPlacement`.
	 *
	 * ### Layout
	 *
	 * The layout for all of the tabs can be defined using the `tabbarLayout`
	 * property. If the individual tab has a title and icon, the icons will
	 * show on top of the title by default. All tabs can be changed by setting
	 * the value of `tabbarLayout` on the `<ion-tabs>` element, or in your
	 * app's [config](../../config/Config/). For example, this is useful if
	 * you want to show tabs with a title only on Android, but show icons
	 * and a title for iOS. See the [Input Properties](#input-properties)
	 * below for the available values of `tabbarLayout`.
	 *
	 * ### Selecting a Tab
	 *
	 * There are different ways you can select a specific tab from the tabs
	 * component. You can use the `selectedIndex` property to set the index
	 * on the `<ion-tabs>` element, or you can call `select()` from the `Tabs`
	 * instance after creation. See [usage](#usage) below for more information.
	 *
	 * @usage
	 *
	 * You can add a basic tabs template to a `@Component` using the following
	 * template:
	 *
	 * ```html
	 * <ion-tabs>
	 *   <ion-tab [root]="tab1Root"></ion-tab>
	 *   <ion-tab [root]="tab2Root"></ion-tab>
	 *   <ion-tab [root]="tab3Root"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * Where `tab1Root`, `tab2Root`, and `tab3Root` are each a page:
	 *
	 *```ts
	 * @Component({
	 *   templateUrl: 'build/pages/tabs/tabs.html'
	 * })
	 * export class TabsPage {
	 *   // this tells the tabs component which Pages
	 *   // should be each tab's root Page
	 *   tab1Root = Page1;
	 *   tab2Root = Page2;
	 *   tab3Root = Page3;
	 *
	 *   constructor() {
	 *
	 *   }
	 * }
	 *```
	 *
	 * By default, the first tab will be selected upon navigation to the
	 * Tabs page. We can change the selected tab by using `selectedIndex`
	 * on the `<ion-tabs>` element:
	 *
	 * ```html
	 * <ion-tabs selectedIndex="2">
	 *   <ion-tab [root]="tab1Root"></ion-tab>
	 *   <ion-tab [root]="tab2Root"></ion-tab>
	 *   <ion-tab [root]="tab3Root"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * Since the index starts at `0`, this will select the 3rd tab which has
	 * root set to `tab3Root`. If you wanted to change it dynamically from
	 * your class, you could use [property binding](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding).
	 *
	 * Alternatively, you can grab the `Tabs` instance and call the `select()`
	 * method. This requires the `<ion-tabs>` element to have an `id`. For
	 * example, set the value of `id` to `myTabs`:
	 *
	 * ```html
	 * <ion-tabs #myTabs>
	 *   <ion-tab [root]="tab1Root"></ion-tab>
	 *   <ion-tab [root]="tab2Root"></ion-tab>
	 *   <ion-tab [root]="tab3Root"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * Then in your class you can grab the `Tabs` instance and call `select()`,
	 * passing the index of the tab as the argument. Here we're grabbing the tabs
	 * by using ViewChild.
	 *
	 *```ts
	 * export class TabsPage {
	 *
	 * @ViewChild('myTabs') tabRef: Tabs;
	 *
	 * ionViewDidEnter() {
	 *   this.tabRef.select(2);
	 *  }
	 *
	 * }
	 *```
	 *
	 * @demo /docs/v2/demos/tabs/
	 *
	 * @see {@link /docs/v2/components#tabs Tabs Component Docs}
	 * @see {@link ../Tab Tab API Docs}
	 * @see {@link ../../config/Config Config API Docs}
	 *
	 */
	var Tabs = (function (_super) {
	    __extends(Tabs, _super);
	    function Tabs(parent, viewCtrl, _app, _config, _elementRef, _platform, _renderer) {
	        var _this = this;
	        _super.call(this, _elementRef);
	        this._app = _app;
	        this._config = _config;
	        this._elementRef = _elementRef;
	        this._platform = _platform;
	        this._renderer = _renderer;
	        this._ids = -1;
	        this._tabs = [];
	        this._onReady = null;
	        /**
	         * @private
	         */
	        this.selectHistory = [];
	        /**
	         * @input {any} Expression to evaluate when the tab changes.
	         */
	        this.ionChange = new core_1.EventEmitter();
	        this.parent = parent;
	        this.id = ++tabIds;
	        this.subPages = _config.getBoolean('tabSubPages');
	        this._useHighlight = _config.getBoolean('tabbarHighlight');
	        this._sbPadding = _config.getBoolean('statusbarPadding');
	        if (parent) {
	            // this Tabs has a parent Nav
	            parent.registerChildNav(this);
	        }
	        else if (this._app) {
	            // this is the root navcontroller for the entire app
	            this._app.setRootNav(this);
	        }
	        // Tabs may also be an actual ViewController which was navigated to
	        // if Tabs is static and not navigated to within a NavController
	        // then skip this and don't treat it as it's own ViewController
	        if (viewCtrl) {
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(_elementRef);
	            viewCtrl.loaded = function (done) {
	                _this._onReady = done;
	            };
	        }
	    }
	    /**
	     * @private
	     */
	    Tabs.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        this._setConfig('tabbarPlacement', 'bottom');
	        this._setConfig('tabbarLayout', 'icon-top');
	        if (this._useHighlight) {
	            this._platform.onResize(function () {
	                _this._highlight.select(_this.getSelected());
	            });
	        }
	        var preloadTabs = (util_1.isBlank(this.preloadTabs) ? this._config.getBoolean('preloadTabs') : util_1.isTrueProperty(this.preloadTabs));
	        // get the selected index
	        var selectedIndex = this.selectedIndex ? parseInt(this.selectedIndex, 10) : 0;
	        // ensure the selectedIndex isn't a hidden or disabled tab
	        // also find the first available index incase we need it later
	        var availableIndex = -1;
	        this._tabs.forEach(function (tab, index) {
	            if (tab.enabled && tab.show && availableIndex < 0) {
	                // we know this tab index is safe to show
	                availableIndex = index;
	            }
	            if (index === selectedIndex && (!tab.enabled || !tab.show)) {
	                // the selectedIndex is not safe to show
	                selectedIndex = -1;
	            }
	        });
	        if (selectedIndex < 0) {
	            // the selected index wasn't safe to show
	            // instead use an available index found to be safe to show
	            selectedIndex = availableIndex;
	        }
	        this._tabs.forEach(function (tab, index) {
	            if (index === selectedIndex) {
	                _this.select(tab);
	            }
	            else if (preloadTabs) {
	                tab.preload(1000 * index);
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype._setConfig = function (attrKey, fallback) {
	        var val = this[attrKey];
	        if (util_1.isBlank(val)) {
	            val = this._config.get(attrKey, fallback);
	        }
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, attrKey, val);
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype.add = function (tab) {
	        tab.id = this.id + '-' + (++this._ids);
	        this._tabs.push(tab);
	    };
	    /**
	     * @param {number|Tab} tabOrIndex Index, or the Tab instance, of the tab to select.
	     */
	    Tabs.prototype.select = function (tabOrIndex) {
	        var _this = this;
	        var selectedTab = (typeof tabOrIndex === 'number' ? this.getByIndex(tabOrIndex) : tabOrIndex);
	        if (util_1.isBlank(selectedTab)) {
	            return;
	        }
	        var deselectedTab = this.getSelected();
	        if (selectedTab === deselectedTab) {
	            // no change
	            return this._touchActive(selectedTab);
	        }
	        void 0;
	        var opts = {
	            animate: false
	        };
	        var deselectedPage;
	        if (deselectedTab) {
	            deselectedPage = deselectedTab.getActive();
	            deselectedPage && deselectedPage.fireWillLeave();
	        }
	        var selectedPage = selectedTab.getActive();
	        selectedPage && selectedPage.fireWillEnter();
	        selectedTab.load(opts, function (initialLoad) {
	            selectedTab.ionSelect.emit(selectedTab);
	            _this.ionChange.emit(selectedTab);
	            if (selectedTab.root) {
	                // only show the selectedTab if it has a root
	                // it's possible the tab is only for opening modal's or signing out
	                // and doesn't actually have content. In the case there's no content
	                // for a tab then do nothing and leave the current view as is
	                _this._tabs.forEach(function (tab) {
	                    tab.setSelected(tab === selectedTab);
	                });
	                if (_this._useHighlight) {
	                    _this._highlight.select(selectedTab);
	                }
	            }
	            selectedPage && selectedPage.fireDidEnter();
	            deselectedPage && deselectedPage.fireDidLeave();
	            if (_this._onReady) {
	                _this._onReady();
	                _this._onReady = null;
	            }
	            // track the order of which tabs have been selected, by their index
	            // do not track if the tab index is the same as the previous
	            if (_this.selectHistory[_this.selectHistory.length - 1] !== selectedTab.id) {
	                _this.selectHistory.push(selectedTab.id);
	            }
	            // if this is not the Tab's initial load then we need
	            // to refresh the tabbar and content dimensions to be sure
	            // they're lined up correctly
	            if (!initialLoad && selectedPage) {
	                var content = selectedPage.getContent();
	                if (content && content instanceof content_1.Content) {
	                    dom_1.nativeRaf(function () {
	                        content.readDimensions();
	                        content.writeDimensions();
	                    });
	                }
	            }
	        });
	    };
	    /**
	     * Get the previously selected Tab which is currently not disabled or hidden.
	     * @param {boolean} trimHistory If the selection history should be trimmed up to the previous tab selection or not.
	     * @returns {Tab}
	     */
	    Tabs.prototype.previousTab = function (trimHistory) {
	        var _this = this;
	        if (trimHistory === void 0) { trimHistory = true; }
	        // walk backwards through the tab selection history
	        // and find the first previous tab that is enabled and shown
	        void 0;
	        for (var i = this.selectHistory.length - 2; i >= 0; i--) {
	            var tab = this._tabs.find(function (t) { return t.id === _this.selectHistory[i]; });
	            if (tab && tab.enabled && tab.show) {
	                if (trimHistory) {
	                    this.selectHistory.splice(i + 1);
	                }
	                return tab;
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {number} index Index of the tab you want to get
	     * @returns {Tab} Returns the tab who's index matches the one passed
	     */
	    Tabs.prototype.getByIndex = function (index) {
	        if (index < this._tabs.length && index > -1) {
	            return this._tabs[index];
	        }
	        return null;
	    };
	    /**
	     * @return {Tab} Returns the currently selected tab
	     */
	    Tabs.prototype.getSelected = function () {
	        for (var i = 0; i < this._tabs.length; i++) {
	            if (this._tabs[i].isSelected) {
	                return this._tabs[i];
	            }
	        }
	        return null;
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype.getActiveChildNav = function () {
	        return this.getSelected();
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype.getIndex = function (tab) {
	        return this._tabs.indexOf(tab);
	    };
	    /**
	     * @private
	     * "Touch" the active tab, going back to the root view of the tab
	     * or optionally letting the tab handle the event
	     */
	    Tabs.prototype._touchActive = function (tab) {
	        var active = tab.getActive();
	        if (!active) {
	            return Promise.resolve();
	        }
	        var instance = active.instance;
	        // If they have a custom tab selected handler, call it
	        if (instance.ionSelected) {
	            return instance.ionSelected();
	        }
	        // If we're a few pages deep, pop to root
	        if (tab.length() > 1) {
	            // Pop to the root view
	            return tab.popToRoot();
	        }
	        // Otherwise, if the page we're on is not our real root, reset it to our
	        // default root type
	        if (tab.root !== active.componentType) {
	            return tab.setRoot(tab.root);
	        }
	        // And failing all of that, we do something safe and secure
	        return Promise.resolve();
	    };
	    Object.defineProperty(Tabs.prototype, "rootNav", {
	        /**
	         * @private
	         * Returns the root NavController. Returns `null` if Tabs is not
	         * within a NavController.
	         * @returns {NavController}
	         */
	        get: function () {
	            var nav = this.parent;
	            while (nav && nav.parent) {
	                nav = nav.parent;
	            }
	            return nav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * DOM WRITE
	     */
	    Tabs.prototype.setTabbarPosition = function (top, bottom) {
	        if (this._top !== top || this._bottom !== bottom) {
	            var tabbarEle = this._tabbar.nativeElement;
	            tabbarEle.style.top = (top > -1 ? top + 'px' : '');
	            tabbarEle.style.bottom = (bottom > -1 ? bottom + 'px' : '');
	            tabbarEle.classList.add('show-tabbar');
	            this._top = top;
	            this._bottom = bottom;
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tabs.prototype, "selectedIndex", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tabs.prototype, "preloadTabs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tabs.prototype, "tabbarLayout", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tabs.prototype, "tabbarPlacement", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Tabs.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.ViewChild(tab_highlight_1.TabHighlight), 
	        __metadata('design:type', tab_highlight_1.TabHighlight)
	    ], Tabs.prototype, "_highlight", void 0);
	    __decorate([
	        core_1.ViewChild('tabbar'), 
	        __metadata('design:type', core_1.ElementRef)
	    ], Tabs.prototype, "_tabbar", void 0);
	    __decorate([
	        core_1.ViewChild('portal', { read: core_1.ViewContainerRef }), 
	        __metadata('design:type', core_1.ViewContainerRef)
	    ], Tabs.prototype, "portal", void 0);
	    Tabs = __decorate([
	        core_1.Component({
	            selector: 'ion-tabs',
	            template: '<ion-tabbar role="tablist" #tabbar>' +
	                '<a *ngFor="let t of _tabs" [tab]="t" class="tab-button" [class.tab-disabled]="!t.enabled" [class.tab-hidden]="!t.show" role="tab" href="#" (ionSelect)="select($event)">' +
	                '<ion-icon *ngIf="t.tabIcon" [name]="t.tabIcon" [isActive]="t.isSelected" class="tab-button-icon"></ion-icon>' +
	                '<span *ngIf="t.tabTitle" class="tab-button-text">{{t.tabTitle}}</span>' +
	                '<ion-badge *ngIf="t.tabBadge" class="tab-badge" [ngClass]="\'badge-\' + t.tabBadgeStyle">{{t.tabBadge}}</ion-badge>' +
	                '<ion-button-effect></ion-button-effect>' +
	                '</a>' +
	                '<tab-highlight></tab-highlight>' +
	                '</ion-tabbar>' +
	                '<ng-content></ng-content>' +
	                '<div #portal tab-portal></div>',
	            directives: [
	                tab_button_1.TabButton,
	                tab_highlight_1.TabHighlight
	            ],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController, view_controller_1.ViewController, app_1.App, config_1.Config, core_1.ElementRef, platform_1.Platform, core_1.Renderer])
	    ], Tabs);
	    return Tabs;
	}(ion_1.Ion));
	exports.Tabs = Tabs;
	var tabIds = -1;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	var ion_1 = __webpack_require__(134);
	var tab_1 = __webpack_require__(162);
	/**
	 * @private
	 */
	var TabButton = (function (_super) {
	    __extends(TabButton, _super);
	    function TabButton(config, elementRef) {
	        _super.call(this, elementRef);
	        this.ionSelect = new core_1.EventEmitter();
	        this.disHover = (config.get('hoverCSS') === false);
	        this.layout = config.get('tabbarLayout');
	    }
	    TabButton.prototype.ngOnInit = function () {
	        this.tab.btn = this;
	        this.layout = this.tab.parent.tabbarLayout || this.layout;
	        this.hasTitle = !!this.tab.tabTitle;
	        this.hasIcon = !!this.tab.tabIcon && this.layout !== 'icon-hide';
	        this.hasTitleOnly = (this.hasTitle && !this.hasIcon);
	        this.hasIconOnly = (this.hasIcon && !this.hasTitle);
	        this.hasBadge = !!this.tab.tabBadge;
	    };
	    TabButton.prototype.onClick = function (ev) {
	        this.ionSelect.emit(this.tab);
	        ev.preventDefault();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', tab_1.Tab)
	    ], TabButton.prototype, "tab", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], TabButton.prototype, "ionSelect", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [UIEvent]), 
	        __metadata('design:returntype', void 0)
	    ], TabButton.prototype, "onClick", null);
	    TabButton = __decorate([
	        core_1.Directive({
	            selector: '.tab-button',
	            host: {
	                '[attr.id]': 'tab._btnId',
	                '[attr.aria-controls]': 'tab._panelId',
	                '[attr.aria-selected]': 'tab.isSelected',
	                '[class.has-title]': 'hasTitle',
	                '[class.has-icon]': 'hasIcon',
	                '[class.has-title-only]': 'hasTitleOnly',
	                '[class.icon-only]': 'hasIconOnly',
	                '[class.has-badge]': 'hasBadge',
	                '[class.disable-hover]': 'disHover'
	            }
	        }), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef])
	    ], TabButton);
	    return TabButton;
	}(ion_1.Ion));
	exports.TabButton = TabButton;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var app_1 = __webpack_require__(122);
	var config_1 = __webpack_require__(125);
	var util_1 = __webpack_require__(127);
	var keyboard_1 = __webpack_require__(135);
	var nav_controller_1 = __webpack_require__(148);
	var tabs_1 = __webpack_require__(160);
	/**
	 * @name Tab
	 * @description
	 * The Tab component, written `<ion-tab>`, is styled based on the mode and should
	 * be used in conjunction with the [Tabs](../Tabs/) component.
	 *
	 * Each tab has a separate navigation controller. For more information on using
	 * navigation controllers take a look at the [NavController API Docs](../../nav/NavController/).
	 *
	 * See the [Tabs API Docs](../Tabs/) for more details on configuring Tabs.
	 *
	 * @usage
	 *
	 * To add a basic tab, you can use the following markup where the `root` property
	 * is the page you want to load for that tab, `tabTitle` is the optional text to
	 * display on the tab, and `tabIcon` is the optional [icon](../../icon/Icon/).
	 *
	 * ```html
	 * <ion-tabs>
	 *  <ion-tab [root]="chatRoot" tabTitle="Chat" tabIcon="chat"><ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * Then, in your class you can set `chatRoot` to an imported class:
	 *
	 * ```ts
	 * import {ChatPage} from '../chat/chat';
	 *
	 * export class Tabs {
	 *   // here we'll set the property of chatRoot to
	 *   // the imported class of ChatPage
	 *   chatRoot = ChatPage;
	 *
	 *   constructor() {
	 *
	 *   }
	 * }
	 * ```
	 *
	 * You can also pass some parameters to the root page of the tab through
	 * `rootParams`. Below we pass `chatParams` to the Chat tab:
	 *
	 * ```html
	 * <ion-tabs>
	 *  <ion-tab [root]="chatRoot" [rootParams]="chatParams" tabTitle="Chat" tabIcon="chat"><ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * ```ts
	 * export class Tabs {
	 *   chatRoot = ChatPage;
	 *
	 *   // set some user information on chatParams
	 *   chatParams = {
	 *     user1: "admin",
	 *     user2: "ionic"
	 *   };
	 *
	 *   constructor() {
	 *
	 *   }
	 * }
	 * ```
	 *
	 * And in `ChatPage` you can get the data from `NavParams`:
	 *
	 * ```ts
	 * export class ChatPage {
	 *   constructor(navParams: NavParams) {
	 *     console.log("Passed params", navParams.data);
	 *   }
	 * }
	 * ```
	 *
	 * Sometimes you may want to call a method instead of navigating to a new
	 * page. You can use the `(ionSelect)` event to call a method on your class when
	 * the tab is selected. Below is an example of presenting a modal from one of
	 * the tabs.
	 *
	 * ```html
	 * <ion-tabs preloadTabs="false">
	 *   <ion-tab (ionSelect)="chat()"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * ```ts
	 * export class Tabs {
	 *   constructor(nav: NavController) {
	 *     this.nav = nav;
	 *   }
	 *
	 *   chat() {
	 *     let modal = Modal.create(ChatPage);
	 *     this.nav.present(modal);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/tabs/
	 * @see {@link /docs/v2/components#tabs Tabs Component Docs}
	 * @see {@link ../../tabs/Tabs Tabs API Docs}
	 * @see {@link ../../nav/Nav Nav API Docs}
	 * @see {@link ../../nav/NavController NavController API Docs}
	 */
	var Tab = (function (_super) {
	    __extends(Tab, _super);
	    function Tab(parent, app, config, keyboard, elementRef, zone, renderer, compiler, _cd) {
	        // A Tab is a NavController for its child pages
	        _super.call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler);
	        this.parent = parent;
	        this._cd = _cd;
	        this._isEnabled = true;
	        this._isShown = true;
	        /**
	         * @output {Tab} Method to call when the current tab is selected
	         */
	        this.ionSelect = new core_1.EventEmitter();
	        parent.add(this);
	        if (parent.rootNav) {
	            this._sbEnabled = parent.rootNav.isSwipeBackEnabled();
	        }
	        this._panelId = 'tabpanel-' + this.id;
	        this._btnId = 'tab-' + this.id;
	    }
	    Object.defineProperty(Tab.prototype, "enabled", {
	        /**
	         * @input {boolean} If the tab is enabled or not. If the tab
	         * is not enabled then the tab button will still show, however,
	         * the button will appear grayed out and will not be clickable.
	         * Defaults to `true`.
	         */
	        get: function () {
	            return this._isEnabled;
	        },
	        set: function (val) {
	            this._isEnabled = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Tab.prototype, "show", {
	        /**
	         * @input {boolean} If the tab button is visible within the
	         * tabbar or not. Defaults to `true`.
	         */
	        get: function () {
	            return this._isShown;
	        },
	        set: function (val) {
	            this._isShown = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Tab.prototype, "swipeBackEnabled", {
	        /**
	         * @input {boolean} Whether it's possible to swipe-to-go-back on this tab or not.
	         */
	        get: function () {
	            return this._sbEnabled;
	        },
	        set: function (val) {
	            this._sbEnabled = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Tab.prototype, "_vp", {
	        /**
	         * @private
	         */
	        set: function (val) {
	            this.setViewport(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Tab.prototype.ngOnInit = function () {
	        this.tabBadgeStyle = this.tabBadgeStyle ? this.tabBadgeStyle : 'default';
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.load = function (opts, done) {
	        if (!this._loaded && this.root) {
	            this.push(this.root, this.rootParams, opts).then(function () {
	                done(true);
	            });
	            this._loaded = true;
	        }
	        else {
	            done(false);
	        }
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.preload = function (wait) {
	        var _this = this;
	        this._loadTmr = setTimeout(function () {
	            if (!_this._loaded) {
	                void 0;
	                _this.load({
	                    animate: false,
	                    preload: true
	                }, function () { });
	            }
	        }, wait);
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.loadPage = function (viewCtrl, viewport, opts, done) {
	        var _this = this;
	        var isTabSubPage = (this.parent.subPages && viewCtrl.index > 0);
	        if (isTabSubPage) {
	            viewport = this.parent.portal;
	        }
	        _super.prototype.loadPage.call(this, viewCtrl, viewport, opts, function () {
	            if (isTabSubPage) {
	                // add the .tab-subpage css class to tabs pages that should act like subpages
	                var pageEleRef = viewCtrl.pageRef();
	                if (pageEleRef) {
	                    _this._renderer.setElementClass(pageEleRef.nativeElement, 'tab-subpage', true);
	                }
	            }
	            done();
	        });
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.setSelected = function (isSelected) {
	        this.isSelected = isSelected;
	        if (isSelected) {
	            // this is the selected tab, detect changes
	            this._cd.reattach();
	        }
	        else {
	            // this tab is not selected, do not detect changes
	            this._cd.detach();
	        }
	    };
	    Object.defineProperty(Tab.prototype, "index", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this.parent.getIndex(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Tab.prototype.ngOnDestroy = function () {
	        clearTimeout(this._loadTmr);
	        _super.prototype.ngOnDestroy.call(this);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tab.prototype, "root", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tab.prototype, "rootParams", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabTitle", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabIcon", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabBadge", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabBadgeStyle", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Tab.prototype, "enabled", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Tab.prototype, "show", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Tab.prototype, "swipeBackEnabled", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Tab.prototype, "ionSelect", void 0);
	    __decorate([
	        core_1.ViewChild('viewport', { read: core_1.ViewContainerRef }), 
	        __metadata('design:type', core_1.ViewContainerRef), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef])
	    ], Tab.prototype, "_vp", null);
	    Tab = __decorate([
	        core_1.Component({
	            selector: 'ion-tab',
	            host: {
	                '[class.show-tab]': 'isSelected',
	                '[attr.id]': '_panelId',
	                '[attr.aria-labelledby]': '_btnId',
	                'role': 'tabpanel'
	            },
	            template: '<div #viewport></div><div class="nav-decor"></div>',
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(0, core_1.Inject(core_1.forwardRef(function () { return tabs_1.Tabs; }))), 
	        __metadata('design:paramtypes', [tabs_1.Tabs, app_1.App, config_1.Config, keyboard_1.Keyboard, core_1.ElementRef, core_1.NgZone, core_1.Renderer, core_1.ComponentResolver, core_1.ChangeDetectorRef])
	    ], Tab);
	    return Tab;
	}(nav_controller_1.NavController));
	exports.Tab = Tab;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var dom_1 = __webpack_require__(124);
	/**
	 * @private
	 */
	var TabHighlight = (function () {
	    function TabHighlight(_elementRef) {
	        this._elementRef = _elementRef;
	    }
	    TabHighlight.prototype.select = function (tab) {
	        var _this = this;
	        dom_1.rafFrames(3, function () {
	            var d = tab.btn.getDimensions();
	            var ele = _this._elementRef.nativeElement;
	            ele.style.transform = 'translate3d(' + d.left + 'px,0,0) scaleX(' + d.width + ')';
	            if (!_this._init) {
	                _this._init = true;
	                dom_1.rafFrames(6, function () {
	                    ele.classList.add('animate');
	                });
	            }
	        });
	    };
	    TabHighlight = __decorate([
	        core_1.Directive({
	            selector: 'tab-highlight'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], TabHighlight);
	    return TabHighlight;
	}());
	exports.TabHighlight = TabHighlight;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var dom_1 = __webpack_require__(124);
	var util_1 = __webpack_require__(127);
	var platform_1 = __webpack_require__(126);
	var Img = (function () {
	    function Img(_elementRef, _platform, _zone) {
	        this._elementRef = _elementRef;
	        this._platform = _platform;
	        this._zone = _zone;
	        this._src = '';
	        this._normalizeSrc = '';
	        this._imgs = [];
	        this._enabled = true;
	    }
	    Object.defineProperty(Img.prototype, "src", {
	        set: function (val) {
	            var tmpImg = new Image();
	            tmpImg.src = util_1.isPresent(val) ? val : '';
	            this._src = util_1.isPresent(val) ? val : '';
	            this._normalizeSrc = tmpImg.src;
	            if (this._init) {
	                this._update();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Img.prototype.ngOnInit = function () {
	        this._init = true;
	        this._update();
	    };
	    Img.prototype._update = function () {
	        var _this = this;
	        if (this._enabled && this._src !== '') {
	            // actively update the image
	            for (var i = this._imgs.length - 1; i >= 0; i--) {
	                if (this._imgs[i].src === this._normalizeSrc) {
	                    // this is the active image
	                    if (this._imgs[i].complete) {
	                        this._loaded(true);
	                    }
	                }
	                else {
	                    // no longer the active image
	                    if (this._imgs[i].parentElement) {
	                        this._imgs[i].parentElement.removeChild(this._imgs[i]);
	                    }
	                    this._imgs.splice(i, 1);
	                }
	            }
	            if (!this._imgs.length) {
	                this._zone.runOutsideAngular(function () {
	                    var img = new Image();
	                    img.style.width = _this._width;
	                    img.style.height = _this._height;
	                    if (util_1.isPresent(_this.alt)) {
	                        img.alt = _this.alt;
	                    }
	                    if (util_1.isPresent(_this.title)) {
	                        img.title = _this.title;
	                    }
	                    img.addEventListener('load', function () {
	                        if (img.src === _this._normalizeSrc) {
	                            _this._elementRef.nativeElement.appendChild(img);
	                            dom_1.nativeRaf(function () {
	                                _this._update();
	                            });
	                        }
	                    });
	                    img.src = _this._src;
	                    _this._imgs.push(img);
	                    _this._loaded(false);
	                });
	            }
	        }
	        else {
	            // do not actively update the image
	            if (!this._imgs.some(function (img) { return img.src === _this._normalizeSrc; })) {
	                this._loaded(false);
	            }
	        }
	    };
	    Img.prototype._loaded = function (isLoaded) {
	        this._elementRef.nativeElement.classList[isLoaded ? 'add' : 'remove']('img-loaded');
	    };
	    Img.prototype.enable = function (shouldEnable) {
	        this._enabled = shouldEnable;
	        this._update();
	    };
	    Object.defineProperty(Img.prototype, "width", {
	        set: function (val) {
	            this._w = getUnitValue(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Img.prototype, "height", {
	        set: function (val) {
	            this._h = getUnitValue(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Img.prototype, "_width", {
	        get: function () {
	            return util_1.isPresent(this._w) ? this._w : '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Img.prototype, "_height", {
	        get: function () {
	            return util_1.isPresent(this._h) ? this._h : '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String), 
	        __metadata('design:paramtypes', [String])
	    ], Img.prototype, "src", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], Img.prototype, "width", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], Img.prototype, "height", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Img.prototype, "alt", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Img.prototype, "title", void 0);
	    __decorate([
	        core_1.HostBinding('style.width'), 
	        __metadata('design:type', String)
	    ], Img.prototype, "_width", null);
	    __decorate([
	        core_1.HostBinding('style.height'), 
	        __metadata('design:type', String)
	    ], Img.prototype, "_height", null);
	    Img = __decorate([
	        core_1.Component({
	            selector: 'ion-img',
	            template: '<div class="img-placeholder" [style.height]="_h" [style.width]="_w"></div>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, platform_1.Platform, core_1.NgZone])
	    ], Img);
	    return Img;
	}());
	exports.Img = Img;
	function getUnitValue(val) {
	    if (util_1.isPresent(val)) {
	        if (typeof val === 'string') {
	            if (val.indexOf('%') > -1 || val.indexOf('px') > -1) {
	                return val;
	            }
	            if (val.length) {
	                return val + 'px';
	            }
	        }
	        else if (typeof val === 'number') {
	            return val + 'px';
	        }
	    }
	    return '';
	}


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var ion_1 = __webpack_require__(134);
	/**
	 * @name Scroll
	 * @description
	 * Scroll is a non-flexboxed scroll area that can scroll horizontally or vertically. `ion-Scroll` Can be used in places where you may not need a full page scroller, but a highly customized one, such as image scubber or comment scroller.
	 * @usage
	 * ```html
	 * <ion-scroll scrollX="true">
	 * </ion-scroll>
	 *
	 * <ion-scroll scrollY="true">
	 * </ion-scroll>
	 *
	 * <ion-scroll scrollX="true" scrollY="true">
	 * </ion-scroll>
	 * ```
	 *@property {boolean} [scrollX] - whether to enable scrolling along the X axis
	 *@property {boolean} [scrollY] - whether to enable scrolling along the Y axis
	 *@property {boolean} [zoom] - whether to enable zooming
	 *@property {number} [maxZoom] - set the max zoom amount for ion-scroll
	 * @demo /docs/v2/demos/scroll/
	 */
	var Scroll = (function (_super) {
	    __extends(Scroll, _super);
	    function Scroll(elementRef) {
	        _super.call(this, elementRef);
	        /**
	         * @private
	         */
	        this.maxScale = 3;
	        /**
	         * @private
	         */
	        this.zoomDuration = 250;
	    }
	    /**
	     * @private
	     */
	    Scroll.prototype.ngOnInit = function () {
	        this.scrollElement = this.getNativeElement().children[0];
	    };
	    /**
	     * @private
	     * Add a scroll event handler to the scroll element if it exists.
	     * @param {Function} handler  The scroll handler to add to the scroll element.
	     * @returns {?Function} a function to remove the specified handler, otherwise
	     * undefined if the scroll element doesn't exist.
	     */
	    Scroll.prototype.addScrollEventListener = function (handler) {
	        var _this = this;
	        if (!this.scrollElement) {
	            return;
	        }
	        this.scrollElement.addEventListener('scroll', handler);
	        return function () {
	            _this.scrollElement.removeEventListener('scroll', handler);
	        };
	    };
	    Scroll = __decorate([
	        core_1.Component({
	            selector: 'ion-scroll',
	            inputs: [
	                'scrollX', 'scrollY', 'zoom', 'maxZoom'
	            ],
	            host: {
	                '[class.scroll-x]': 'scrollX',
	                '[class.scroll-y]': 'scrollY'
	            },
	            template: '<scroll-content>' +
	                '<div class="scroll-zoom-wrapper">' +
	                '<ng-content></ng-content>' +
	                '</div>' +
	                '</scroll-content>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Scroll);
	    return Scroll;
	}(ion_1.Ion));
	exports.Scroll = Scroll;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var content_1 = __webpack_require__(158);
	/**
	 * @name InfiniteScroll
	 * @description
	 * The Infinite Scroll allows you to perform an action when the user
	 * scrolls a specified distance from the bottom of the page.
	 *
	 * The expression assigned to the `infinite` event is called when
	 * the user scrolls to the specified distance. When this expression
	 * has finished its tasks, it should call the `complete()` method
	 * on the infinite scroll instance.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *
	 *  <ion-list>
	 *    <ion-item *ngFor="let i of items">{% raw %}{{i}}{% endraw %}</ion-item>
	 *  </ion-list>
	 *
	 *  <ion-infinite-scroll (ionInfinite)="doInfinite($event)">
	 *    <ion-infinite-scroll-content></ion-infinite-scroll-content>
	 *  </ion-infinite-scroll>
	 *
	 * </ion-content>
	 * ```
	 *
	 * ```ts
	 * @Component({...})
	 * export class NewsFeedPage {
	 *   items = [];
	 *
	 *   constructor() {
	 *     for (var i = 0; i < 30; i++) {
	 *       this.items.push( this.items.length );
	 *     }
	 *   }
	 *
	 *   doInfinite(infiniteScroll) {
	 *     console.log('Begin async operation');
	 *
	 *     setTimeout(() => {
	 *       for (var i = 0; i < 30; i++) {
	 *         this.items.push( this.items.length );
	 *       }
	 *
	 *       console.log('Async operation has ended');
	 *       infiniteScroll.complete();
	 *     }, 500);
	 *   }
	 *
	 * }
	 * ```
	 *
	 *
	 * ## Infinite Scroll Content
	 *
	 * By default, Ionic uses the infinite scroll spinner that looks
	 * best for the platform the user is on. However, you can change the
	 * default spinner or add text by adding properties to the
	 * `ion-infinite-scroll-content` component.
	 *
	 *  ```html
	 *  <ion-content>
	 *
	 *    <ion-infinite-scroll (ionInfinite)="doInfinite($event)">
	 *      <ion-infinite-scroll-content
	 *        loadingSpinner="bubbles"
	 *        loadingText="Loading more data...">
	 *      </ion-infinite-scroll-content>
	 *    </ion-infinite-scroll>
	 *
	 *  </ion-content>
	 *  ```
	 *
	 *
	 * ## Further Customizing Infinite Scroll Content
	 *
	 * The `ion-infinite-scroll` component holds the infinite scroll logic.
	 * It requires a child component in order to display the content.
	 * Ionic uses `ion-infinite-scroll-content` by default. This component
	 * displays the infinite scroll and changes the look depending
	 * on the infinite scroll's state. Separating these components allows
	 * developers to create their own infinite scroll content components.
	 * You could replace our default content with custom SVG or CSS animations.
	 *
	 * @demo /docs/v2/demos/infinite-scroll/
	 *
	 */
	var InfiniteScroll = (function () {
	    function InfiniteScroll(_content, _zone, _elementRef) {
	        this._content = _content;
	        this._zone = _zone;
	        this._elementRef = _elementRef;
	        this._lastCheck = 0;
	        this._highestY = 0;
	        this._thr = '15%';
	        this._thrPx = 0;
	        this._thrPc = 0.15;
	        this._init = false;
	        this.state = STATE_ENABLED;
	        /**
	         * @output {event} The expression to call when the scroll reaches
	         * the threshold distance. From within your infinite handler,
	         * you must call the infinite scroll's `complete()` method when
	         * your async operation has completed.
	         */
	        this.ionInfinite = new core_1.EventEmitter();
	        _content.addCssClass('has-infinite-scroll');
	    }
	    Object.defineProperty(InfiniteScroll.prototype, "threshold", {
	        /**
	         * @input {string} The threshold distance from the bottom
	         * of the content to call the `infinite` output event when scrolled.
	         * The threshold value can be either a percent, or
	         * in pixels. For example, use the value of `10%` for the `infinite`
	         * output event to get called when the user has scrolled 10%
	         * from the bottom of the page. Use the value `100px` when the
	         * scroll is within 100 pixels from the bottom of the page.
	         * Default is `15%`.
	         */
	        get: function () {
	            return this._thr;
	        },
	        set: function (val) {
	            this._thr = val;
	            if (val.indexOf('%') > -1) {
	                this._thrPx = 0;
	                this._thrPc = (parseFloat(val) / 100);
	            }
	            else {
	                this._thrPx = parseFloat(val);
	                this._thrPc = 0;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    InfiniteScroll.prototype._onScroll = function () {
	        var _this = this;
	        if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {
	            return 1;
	        }
	        var now = Date.now();
	        if (this._lastCheck + 32 > now) {
	            // no need to check less than every XXms
	            return 2;
	        }
	        this._lastCheck = now;
	        var infiniteHeight = this._elementRef.nativeElement.scrollHeight;
	        if (!infiniteHeight) {
	            // if there is no height of this element then do nothing
	            return 3;
	        }
	        var d = this._content.getContentDimensions();
	        var reloadY = d.contentHeight;
	        if (this._thrPc) {
	            reloadY += (reloadY * this._thrPc);
	        }
	        else {
	            reloadY += this._thrPx;
	        }
	        var distanceFromInfinite = ((d.scrollHeight - infiniteHeight) - d.scrollTop) - reloadY;
	        if (distanceFromInfinite < 0) {
	            this._zone.run(function () {
	                if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
	                    _this.state = STATE_LOADING;
	                    _this.ionInfinite.emit(_this);
	                }
	            });
	            return 5;
	        }
	        return 6;
	    };
	    /**
	     * Call `complete()` within the `infinite` output event handler when
	     * your async operation has completed. For example, the `loading`
	     * state is while the app is performing an asynchronous operation,
	     * such as receiving more data from an AJAX request to add more items
	     * to a data list. Once the data has been received and UI updated, you
	     * then call this method to signify that the loading has completed.
	     * This method will change the infinite scroll's state from `loading`
	     * to `enabled`.
	     */
	    InfiniteScroll.prototype.complete = function () {
	        this.state = STATE_ENABLED;
	    };
	    /**
	     * Call `enable(false)` to disable the infinite scroll from actively
	     * trying to receive new data while scrolling. This method is useful
	     * when it is known that there is no more data that can be added, and
	     * the infinite scroll is no longer needed.
	     * @param {boolean} shouldEnable  If the infinite scroll should be
	     * enabled or not. Setting to `false` will remove scroll event listeners
	     * and hide the display.
	     */
	    InfiniteScroll.prototype.enable = function (shouldEnable) {
	        this.state = (shouldEnable ? STATE_ENABLED : STATE_DISABLED);
	        this._setListeners(shouldEnable);
	    };
	    InfiniteScroll.prototype._setListeners = function (shouldListen) {
	        var _this = this;
	        if (this._init) {
	            if (shouldListen) {
	                if (!this._scLsn) {
	                    this._zone.runOutsideAngular(function () {
	                        _this._scLsn = _this._content.addScrollListener(_this._onScroll.bind(_this));
	                    });
	                }
	            }
	            else {
	                this._scLsn && this._scLsn();
	                this._scLsn = null;
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    InfiniteScroll.prototype.ngAfterContentInit = function () {
	        this._init = true;
	        this._setListeners(this.state !== STATE_DISABLED);
	    };
	    /**
	     * @private
	     */
	    InfiniteScroll.prototype.ngOnDestroy = function () {
	        this._setListeners(false);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InfiniteScroll.prototype, "threshold", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], InfiniteScroll.prototype, "ionInfinite", void 0);
	    InfiniteScroll = __decorate([
	        core_1.Directive({
	            selector: 'ion-infinite-scroll'
	        }),
	        __param(0, core_1.Host()), 
	        __metadata('design:paramtypes', [content_1.Content, core_1.NgZone, core_1.ElementRef])
	    ], InfiniteScroll);
	    return InfiniteScroll;
	}());
	exports.InfiniteScroll = InfiniteScroll;
	var STATE_ENABLED = 'enabled';
	var STATE_DISABLED = 'disabled';
	var STATE_LOADING = 'loading';


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	var infinite_scroll_1 = __webpack_require__(166);
	/**
	 * @private
	 */
	var InfiniteScrollContent = (function () {
	    function InfiniteScrollContent(inf, _config) {
	        this.inf = inf;
	        this._config = _config;
	    }
	    /**
	     * @private
	     */
	    InfiniteScrollContent.prototype.ngOnInit = function () {
	        if (!this.loadingSpinner) {
	            this.loadingSpinner = this._config.get('infiniteLoadingSpinner', this._config.get('spinner', 'ios'));
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InfiniteScrollContent.prototype, "loadingSpinner", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InfiniteScrollContent.prototype, "loadingText", void 0);
	    InfiniteScrollContent = __decorate([
	        core_1.Component({
	            selector: 'ion-infinite-scroll-content',
	            template: '<div class="infinite-loading">' +
	                '<div class="infinite-loading-spinner" *ngIf="loadingSpinner">' +
	                '<ion-spinner [name]="loadingSpinner"></ion-spinner>' +
	                '</div>' +
	                '<div class="infinite-loading-text" [innerHTML]="loadingText" *ngIf="loadingText"></div>' +
	                '</div>',
	            host: {
	                '[attr.state]': 'inf.state'
	            },
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [infinite_scroll_1.InfiniteScroll, config_1.Config])
	    ], InfiniteScrollContent);
	    return InfiniteScrollContent;
	}());
	exports.InfiniteScrollContent = InfiniteScrollContent;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var content_1 = __webpack_require__(158);
	var dom_1 = __webpack_require__(124);
	var util_1 = __webpack_require__(127);
	var ui_event_manager_1 = __webpack_require__(169);
	/**
	 * @name Refresher
	 * @description
	 * The Refresher provides pull-to-refresh functionality on a content component.
	 * Place the `ion-refresher` as the first child of your `ion-content` element.
	 *
	 * Pages can then listen to the refresher's various output events. The
	 * `refresh` output event is fired when the user has pulled down far
	 * enough to kick off the refreshing process. Once the async operation
	 * has completed and the refreshing should end, call `complete()`.
	 *
	 * Note: Do not wrap the `ion-refresher` in a `*ngIf`. It will not render
	 * properly this way. Please use the `enabled` property instead to
	 * display or hide the refresher.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *
	 *   <ion-refresher (ionRefresh)="doRefresh($event)">
	 *     <ion-refresher-content></ion-refresher-content>
	 *   </ion-refresher>
	 *
	 * </ion-content>
	 * ```
	 *
	 * ```ts
	 * @Component({...})
	 * export class NewsFeedPage {
	 *
	 *   doRefresh(refresher) {
	 *     console.log('Begin async operation', refresher);
	 *
	 *     setTimeout(() => {
	 *       console.log('Async operation has ended');
	 *       refresher.complete();
	 *     }, 2000);
	 *   }
	 *
	 * }
	 * ```
	 *
	 *
	 * ## Refresher Content
	 *
	 * By default, Ionic provides the pulling icon and refreshing spinner that
	 * looks best for the platform the user is on. However, you can change the
	 * default icon and spinner, along with adding text for each state by
	 * adding properties to the child `ion-refresher-content` component.
	 *
	 *  ```html
	 *  <ion-content>
	 *
	 *    <ion-refresher (ionRefresh)="doRefresh($event)">
	 *      <ion-refresher-content
	 *        pullingIcon="arrow-dropdown"
	 *        pullingText="Pull to refresh"
	 *        refreshingSpinner="circles"
	 *        refreshingText="Refreshing...">
	 *      </ion-refresher-content>
	 *    </ion-refresher>
	 *
	 *  </ion-content>
	 *  ```
	 *
	 *
	 * ## Further Customizing Refresher Content
	 *
	 * The `ion-refresher` component holds the refresh logic.
	 * It requires a child component in order to display the content.
	 * Ionic uses `ion-refresher-content` by default. This component
	 * displays the refresher and changes the look depending
	 * on the refresher's state. Separating these components
	 * allows developers to create their own refresher content
	 * components. You could replace our default content with
	 * custom SVG or CSS animations.
	 *
	 * @demo /docs/v2/demos/refresher/
	 *
	 */
	var Refresher = (function () {
	    function Refresher(_content, _zone) {
	        this._content = _content;
	        this._zone = _zone;
	        this._appliedStyles = false;
	        this._lastCheck = 0;
	        this._isEnabled = true;
	        this._events = new ui_event_manager_1.UIEventManager(false);
	        this._top = '';
	        /**
	         * The current state which the refresher is in. The refresher's states include:
	         *
	         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.
	         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.
	         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.
	         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.
	         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.
	         * - `completing` - The `refreshing` state has finished and the refresher is in the process of closing itself. Once closed, the refresher will go back to the `inactive` state.
	         */
	        this.state = STATE_INACTIVE;
	        /**
	         * The Y coordinate of where the user started to the pull down the content.
	         */
	        this.startY = null;
	        /**
	         * The current touch or mouse event's Y coordinate.
	         */
	        this.currentY = null;
	        /**
	         * The distance between the start of the pull and the current touch or
	         * mouse event's Y coordinate.
	         */
	        this.deltaY = null;
	        /**
	         * A number representing how far down the user has pulled.
	         * The number `0` represents the user hasn't pulled down at all. The
	         * number `1`, and anything greater than `1`, represents that the user
	         * has pulled far enough down that when they let go then the refresh will
	         * happen. If they let go and the number is less than `1`, then the
	         * refresh will not happen, and the content will return to it's original
	         * position.
	         */
	        this.progress = 0;
	        /**
	         * @input {number} The min distance the user must pull down until the
	         * refresher can go into the `refreshing` state. Default is `60`.
	         */
	        this.pullMin = 60;
	        /**
	         * @input {number} The maximum distance of the pull until the refresher
	         * will automatically go into the `refreshing` state. By default, the pull
	         * maximum will be the result of `pullMin + 60`.
	         */
	        this.pullMax = this.pullMin + 60;
	        /**
	         * @input {number} How many milliseconds it takes to close the refresher. Default is `280`.
	         */
	        this.closeDuration = 280;
	        /**
	         * @input {number} How many milliseconds it takes the refresher to to snap back to the `refreshing` state. Default is `280`.
	         */
	        this.snapbackDuration = 280;
	        /**
	         * @output {event} When the user lets go and has pulled down far enough, which would be
	         * farther than the `pullMin`, then your refresh hander if fired and the state is
	         * updated to `refreshing`. From within your refresh handler, you must call the
	         * `complete()` method when your async operation has completed.
	         */
	        this.ionRefresh = new core_1.EventEmitter();
	        /**
	         * @output {event} While the user is pulling down the content and exposing the refresher.
	         */
	        this.ionPull = new core_1.EventEmitter();
	        /**
	         * @output {event} When the user begins to start pulling down.
	         */
	        this.ionStart = new core_1.EventEmitter();
	        _content.addCssClass('has-refresher');
	    }
	    Object.defineProperty(Refresher.prototype, "enabled", {
	        /**
	         * @input {boolean} If the refresher is enabled or not. This should be used in place of an `ngIf`. Default is `true`.
	         */
	        get: function () {
	            return this._isEnabled;
	        },
	        set: function (val) {
	            this._isEnabled = util_1.isTrueProperty(val);
	            this._setListeners(this._isEnabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Refresher.prototype._onStart = function (ev) {
	        // if multitouch then get out immediately
	        if (ev.touches && ev.touches.length > 1) {
	            return false;
	        }
	        if (this.state !== STATE_INACTIVE) {
	            return false;
	        }
	        var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
	        // if the scrollTop is greater than zero then it's
	        // not possible to pull the content down yet
	        if (scrollHostScrollTop > 0) {
	            return false;
	        }
	        var coord = dom_1.pointerCoord(ev);
	        void 0;
	        if (this._content.adjustedTop > 0) {
	            var newTop = this._content.adjustedTop + 'px';
	            if (this._top !== newTop) {
	                this._top = newTop;
	            }
	        }
	        this.startY = this.currentY = coord.y;
	        this.progress = 0;
	        this.state = STATE_PULLING;
	        return true;
	    };
	    Refresher.prototype._onMove = function (ev) {
	        // this method can get called like a bazillion times per second,
	        // so it's built to be as efficient as possible, and does its
	        // best to do any DOM read/writes only when absolutely necessary
	        var _this = this;
	        // if multitouch then get out immediately
	        if (ev.touches && ev.touches.length > 1) {
	            return 1;
	        }
	        // do nothing if it's actively refreshing
	        // or it's in the process of closing
	        // or this was never a startY
	        if (this.startY === null || this.state === STATE_REFRESHING || this.state === STATE_CANCELLING || this.state === STATE_COMPLETING) {
	            return 2;
	        }
	        // if we just updated stuff less than 16ms ago
	        // then don't check again, just chillout plz
	        var now = Date.now();
	        if (this._lastCheck + 16 > now) {
	            return 3;
	        }
	        // remember the last time we checked all this
	        this._lastCheck = now;
	        // get the current pointer coordinates
	        var coord = dom_1.pointerCoord(ev);
	        this.currentY = coord.y;
	        // it's now possible they could be pulling down the content
	        // how far have they pulled so far?
	        this.deltaY = (coord.y - this.startY);
	        // don't bother if they're scrolling up
	        // and have not already started dragging
	        if (this.deltaY <= 0) {
	            // the current Y is higher than the starting Y
	            // so they scrolled up enough to be ignored
	            this.progress = 0;
	            if (this.state !== STATE_INACTIVE) {
	                this._zone.run(function () {
	                    _this.state = STATE_INACTIVE;
	                });
	            }
	            if (this._appliedStyles) {
	                // reset the styles only if they were applied
	                this._setCss(0, '', false, '');
	                return 5;
	            }
	            return 6;
	        }
	        if (this.state === STATE_INACTIVE) {
	            // this refresh is not already actively pulling down
	            // get the content's scrollTop
	            var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
	            // if the scrollTop is greater than zero then it's
	            // not possible to pull the content down yet
	            if (scrollHostScrollTop > 0) {
	                this.progress = 0;
	                this.startY = null;
	                return 7;
	            }
	            // content scrolled all the way to the top, and dragging down
	            this.state = STATE_PULLING;
	        }
	        // prevent native scroll events
	        ev.preventDefault();
	        // the refresher is actively pulling at this point
	        // move the scroll element within the content element
	        this._setCss(this.deltaY, '0ms', true, '');
	        if (!this.deltaY) {
	            // don't continue if there's no delta yet
	            this.progress = 0;
	            return 8;
	        }
	        // so far so good, let's run this all back within zone now
	        this._zone.run(function () {
	            _this._onMoveInZone();
	        });
	    };
	    Refresher.prototype._onMoveInZone = function () {
	        // set pull progress
	        this.progress = (this.deltaY / this.pullMin);
	        // emit "start" if it hasn't started yet
	        if (!this._didStart) {
	            this._didStart = true;
	            this.ionStart.emit(this);
	        }
	        // emit "pulling" on every move
	        this.ionPull.emit(this);
	        // do nothing if the delta is less than the pull threshold
	        if (this.deltaY < this.pullMin) {
	            // ensure it stays in the pulling state, cuz its not ready yet
	            this.state = STATE_PULLING;
	            return 2;
	        }
	        if (this.deltaY > this.pullMax) {
	            // they pulled farther than the max, so kick off the refresh
	            this._beginRefresh();
	            return 3;
	        }
	        // pulled farther than the pull min!!
	        // it is now in the `ready` state!!
	        // if they let go then it'll refresh, kerpow!!
	        this.state = STATE_READY;
	        return 4;
	    };
	    Refresher.prototype._onEnd = function (ev) {
	        // only run in a zone when absolutely necessary
	        var _this = this;
	        if (this.state === STATE_READY) {
	            this._zone.run(function () {
	                // they pulled down far enough, so it's ready to refresh
	                _this._beginRefresh();
	            });
	        }
	        else if (this.state === STATE_PULLING) {
	            this._zone.run(function () {
	                // they were pulling down, but didn't pull down far enough
	                // set the content back to it's original location
	                // and close the refresher
	                // set that the refresh is actively cancelling
	                _this.cancel();
	            });
	        }
	        // reset on any touchend/mouseup
	        this.startY = null;
	    };
	    Refresher.prototype._beginRefresh = function () {
	        // assumes we're already back in a zone
	        // they pulled down far enough, so it's ready to refresh
	        this.state = STATE_REFRESHING;
	        // place the content in a hangout position while it thinks
	        this._setCss(this.pullMin, (this.snapbackDuration + 'ms'), true, '');
	        // emit "refresh" because it was pulled down far enough
	        // and they let go to begin refreshing
	        this.ionRefresh.emit(this);
	    };
	    /**
	     * Call `complete()` when your async operation has completed.
	     * For example, the `refreshing` state is while the app is performing
	     * an asynchronous operation, such as receiving more data from an
	     * AJAX request. Once the data has been received, you then call this
	     * method to signify that the refreshing has completed and to close
	     * the refresher. This method also changes the refresher's state from
	     * `refreshing` to `completing`.
	     */
	    Refresher.prototype.complete = function () {
	        this._close(STATE_COMPLETING, '120ms');
	    };
	    /**
	     * Changes the refresher's state from `refreshing` to `cancelling`.
	     */
	    Refresher.prototype.cancel = function () {
	        this._close(STATE_CANCELLING, '');
	    };
	    Refresher.prototype._close = function (state, delay) {
	        var timer;
	        function close(ev) {
	            // closing is done, return to inactive state
	            if (ev) {
	                clearTimeout(timer);
	            }
	            this.state = STATE_INACTIVE;
	            this.progress = 0;
	            this._didStart = this.startY = this.currentY = this.deltaY = null;
	            this._setCss(0, '0ms', false, '');
	        }
	        // create fallback timer incase something goes wrong with transitionEnd event
	        timer = setTimeout(close.bind(this), 600);
	        // create transition end event on the content's scroll element
	        this._content.onScrollElementTransitionEnd(close.bind(this));
	        // reset set the styles on the scroll element
	        // set that the refresh is actively cancelling/completing
	        this.state = state;
	        this._setCss(0, '', true, delay);
	        if (this._pointerEvents) {
	            this._pointerEvents.stop();
	        }
	    };
	    Refresher.prototype._setCss = function (y, duration, overflowVisible, delay) {
	        this._appliedStyles = (y > 0);
	        var content = this._content;
	        content.setScrollElementStyle(dom_1.CSS.transform, ((y > 0) ? 'translateY(' + y + 'px) translateZ(0px)' : 'translateZ(0px)'));
	        content.setScrollElementStyle(dom_1.CSS.transitionDuration, duration);
	        content.setScrollElementStyle(dom_1.CSS.transitionDelay, delay);
	        content.setScrollElementStyle('overflow', (overflowVisible ? 'hidden' : ''));
	    };
	    Refresher.prototype._setListeners = function (shouldListen) {
	        this._events.unlistenAll();
	        this._pointerEvents = null;
	        if (shouldListen) {
	            this._pointerEvents = this._events.pointerEvents(this._content.getScrollElement(), this._onStart.bind(this), this._onMove.bind(this), this._onEnd.bind(this));
	        }
	    };
	    /**
	     * @private
	     */
	    Refresher.prototype.ngOnInit = function () {
	        // bind event listeners
	        // save the unregister listener functions to use onDestroy
	        this._setListeners(this._isEnabled);
	    };
	    /**
	     * @private
	     */
	    Refresher.prototype.ngOnDestroy = function () {
	        this._setListeners(false);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "pullMin", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "pullMax", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "closeDuration", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "snapbackDuration", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Refresher.prototype, "enabled", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Refresher.prototype, "ionRefresh", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Refresher.prototype, "ionPull", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Refresher.prototype, "ionStart", void 0);
	    Refresher = __decorate([
	        core_1.Directive({
	            selector: 'ion-refresher',
	            host: {
	                '[class.refresher-active]': 'state !== "inactive"',
	                '[style.top]': '_top'
	            }
	        }),
	        __param(0, core_1.Host()), 
	        __metadata('design:paramtypes', [content_1.Content, core_1.NgZone])
	    ], Refresher);
	    return Refresher;
	}());
	exports.Refresher = Refresher;
	var STATE_INACTIVE = 'inactive';
	var STATE_PULLING = 'pulling';
	var STATE_READY = 'ready';
	var STATE_REFRESHING = 'refreshing';
	var STATE_CANCELLING = 'cancelling';
	var STATE_COMPLETING = 'completing';


/***/ },
/* 169 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @private
	 */
	var PointerEvents = (function () {
	    function PointerEvents(ele, pointerDown, pointerMove, pointerUp, zone, option) {
	        var _this = this;
	        this.ele = ele;
	        this.pointerDown = pointerDown;
	        this.pointerMove = pointerMove;
	        this.pointerUp = pointerUp;
	        this.zone = zone;
	        this.option = option;
	        this.rmTouchStart = null;
	        this.rmTouchMove = null;
	        this.rmTouchEnd = null;
	        this.rmMouseStart = null;
	        this.rmMouseMove = null;
	        this.rmMouseUp = null;
	        this.lastTouchEvent = 0;
	        this.mouseWait = 2 * 1000;
	        this.rmTouchStart = listenEvent(ele, 'touchstart', zone, option, function (ev) { return _this.handleTouchStart(ev); });
	        this.rmMouseStart = listenEvent(ele, 'mousedown', zone, option, function (ev) { return _this.handleMouseDown(ev); });
	    }
	    PointerEvents.prototype.handleTouchStart = function (ev) {
	        var _this = this;
	        this.lastTouchEvent = Date.now() + this.mouseWait;
	        if (!this.pointerDown(ev)) {
	            return;
	        }
	        if (!this.rmTouchMove) {
	            this.rmTouchMove = listenEvent(this.ele, 'touchmove', this.zone, this.option, this.pointerMove);
	        }
	        if (!this.rmTouchEnd) {
	            this.rmTouchEnd = listenEvent(this.ele, 'touchend', this.zone, this.option, function (ev) { return _this.handleTouchEnd(ev); });
	        }
	    };
	    PointerEvents.prototype.handleMouseDown = function (ev) {
	        var _this = this;
	        if (this.lastTouchEvent > Date.now()) {
	            void 0;
	            return;
	        }
	        if (!this.pointerDown(ev)) {
	            return;
	        }
	        if (!this.rmMouseMove) {
	            this.rmMouseMove = listenEvent(window, 'mousemove', this.zone, this.option, this.pointerMove);
	        }
	        if (!this.rmMouseUp) {
	            this.rmMouseUp = listenEvent(window, 'mouseup', this.zone, this.option, function (ev) { return _this.handleMouseUp(ev); });
	        }
	    };
	    PointerEvents.prototype.handleTouchEnd = function (ev) {
	        this.rmTouchMove && this.rmTouchMove();
	        this.rmTouchMove = null;
	        this.rmTouchEnd && this.rmTouchEnd();
	        this.rmTouchEnd = null;
	        this.pointerUp(ev);
	    };
	    PointerEvents.prototype.handleMouseUp = function (ev) {
	        this.rmMouseMove && this.rmMouseMove();
	        this.rmMouseMove = null;
	        this.rmMouseUp && this.rmMouseUp();
	        this.rmMouseUp = null;
	        this.pointerUp(ev);
	    };
	    PointerEvents.prototype.stop = function () {
	        this.rmTouchMove && this.rmTouchMove();
	        this.rmTouchEnd && this.rmTouchEnd();
	        this.rmTouchMove = null;
	        this.rmTouchEnd = null;
	        this.rmMouseMove && this.rmMouseMove();
	        this.rmMouseUp && this.rmMouseUp();
	        this.rmMouseMove = null;
	        this.rmMouseUp = null;
	    };
	    PointerEvents.prototype.destroy = function () {
	        this.rmTouchStart && this.rmTouchStart();
	        this.rmTouchStart = null;
	        this.rmMouseStart && this.rmMouseStart();
	        this.rmMouseStart = null;
	        this.stop();
	        this.pointerDown = null;
	        this.pointerMove = null;
	        this.pointerUp = null;
	        this.ele = null;
	    };
	    return PointerEvents;
	}());
	exports.PointerEvents = PointerEvents;
	/**
	 * @private
	 */
	var UIEventManager = (function () {
	    function UIEventManager(zoneWrapped) {
	        if (zoneWrapped === void 0) { zoneWrapped = true; }
	        this.zoneWrapped = zoneWrapped;
	        this.events = [];
	    }
	    UIEventManager.prototype.listenRef = function (ref, eventName, callback, option) {
	        return this.listen(ref.nativeElement, eventName, callback, option);
	    };
	    UIEventManager.prototype.pointerEventsRef = function (ref, pointerStart, pointerMove, pointerEnd, option) {
	        return this.pointerEvents(ref.nativeElement, pointerStart, pointerMove, pointerEnd, option);
	    };
	    UIEventManager.prototype.pointerEvents = function (element, pointerDown, pointerMove, pointerUp, option) {
	        if (option === void 0) { option = false; }
	        if (!element) {
	            return;
	        }
	        var submanager = new PointerEvents(element, pointerDown, pointerMove, pointerUp, this.zoneWrapped, option);
	        var removeFunc = function () { return submanager.destroy(); };
	        this.events.push(removeFunc);
	        return submanager;
	    };
	    UIEventManager.prototype.listen = function (element, eventName, callback, option) {
	        if (option === void 0) { option = false; }
	        if (!element) {
	            return;
	        }
	        var removeFunc = listenEvent(element, eventName, this.zoneWrapped, option, callback);
	        this.events.push(removeFunc);
	        return removeFunc;
	    };
	    UIEventManager.prototype.unlistenAll = function () {
	        for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
	            var event_1 = _a[_i];
	            event_1();
	        }
	        this.events.length = 0;
	    };
	    return UIEventManager;
	}());
	exports.UIEventManager = UIEventManager;
	function listenEvent(ele, eventName, zoneWrapped, option, callback) {
	    var rawEvent = ('__zone_symbol__addEventListener' in ele && !zoneWrapped);
	    if (rawEvent) {
	        ele.__zone_symbol__addEventListener(eventName, callback, option);
	        return function () { return ele.__zone_symbol__removeEventListener(eventName, callback); };
	    }
	    else {
	        ele.addEventListener(eventName, callback, option);
	        return function () { return ele.removeEventListener(eventName, callback); };
	    }
	}


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	var refresher_1 = __webpack_require__(168);
	/**
	 * @private
	 */
	var RefresherContent = (function () {
	    function RefresherContent(r, _config) {
	        this.r = r;
	        this._config = _config;
	    }
	    /**
	     * @private
	     */
	    RefresherContent.prototype.ngOnInit = function () {
	        if (!this.pullingIcon) {
	            this.pullingIcon = this._config.get('ionPullIcon', 'arrow-down');
	        }
	        if (!this.refreshingSpinner) {
	            this.refreshingSpinner = this._config.get('ionRefreshingSpinner', this._config.get('spinner', 'ios'));
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "pullingIcon", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "pullingText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "refreshingSpinner", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "refreshingText", void 0);
	    RefresherContent = __decorate([
	        core_1.Component({
	            selector: 'ion-refresher-content',
	            template: '<div class="refresher-pulling">' +
	                '<div class="refresher-pulling-icon" *ngIf="pullingIcon">' +
	                '<ion-icon [name]="pullingIcon"></ion-icon>' +
	                '</div>' +
	                '<div class="refresher-pulling-text" [innerHTML]="pullingText" *ngIf="pullingText"></div>' +
	                '</div>' +
	                '<div class="refresher-refreshing">' +
	                '<div class="refresher-refreshing-icon">' +
	                '<ion-spinner [name]="refreshingSpinner"></ion-spinner>' +
	                '</div>' +
	                '<div class="refresher-refreshing-text" [innerHTML]="refreshingText" *ngIf="refreshingText"></div>' +
	                '</div>',
	            host: {
	                '[attr.state]': 'r.state'
	            },
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [refresher_1.Refresher, config_1.Config])
	    ], RefresherContent);
	    return RefresherContent;
	}());
	exports.RefresherContent = RefresherContent;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var animation_1 = __webpack_require__(152);
	var gesture_1 = __webpack_require__(141);
	var dom_1 = __webpack_require__(124);
	var util_1 = __webpack_require__(127);
	var util_2 = __webpack_require__(142);
	var ion_1 = __webpack_require__(134);
	var swiper_widget_1 = __webpack_require__(172);
	/**
	 * @name Slides
	 * @description
	 * The Slides component is a multi-section container. Each section can be swiped
	 * or dragged between. It contains any number of [Slide](../Slide) components.
	 *
	 *
	 * ### Creating
	 * You should use a template to create slides and listen to slide events. The template
	 * should contain the slide container, an `<ion-slides>` element, and any number of
	 * [Slide](../Slide) components, written as `<ion-slide>`. Any configuration of the
	 * slides should be passed in the `options` property of the `<ion-slides>` element.
	 * You can listen to events such as the slide changing by placing the event on the
	 * `<ion-slides>` element. See [Usage](#usage) below for more information on
	 * creating slides.
	 *
	 *
	 * ### Configuring
	 * There are several configuration options that can be passed to Slides. These should
	 * be passed in the `options` property of the `<ion-slides>` element upon creation.
	 * You can allow the slides to loop around from the last to the first, set autoplay
	 * on the slides so it will automatically switch between them, and more.
	 *
	 * Properties to pass in options:
	 *
	 * | Property              | Type      | Default        | Description                                                                                |
	 * |-----------------------|-----------|----------------|--------------------------------------------------------------------------------------------|
	 * | autoplay              | `number`  | -              | Delay between transitions (in ms). If this parameter is not passed, autoplay is disabled.  |
	 * | direction             | `string`  | 'horizontal'   | Swipe direction: 'horizontal' or 'vertical'.                                               |
	 * | initialSlide          | `number`  | 0              | Index number of initial slide                                                              |
	 * | loop                  | `boolean` | false          | Whether to continuously loop from the last slide to the first slide.                       |
	 * | pager                 | `boolean` | false          | Show the pagination bullets.                                                               |
	 * | speed                 | `number`  | 300            | Duration of transition between slides (in ms).                                             |
	 *
	 * See [Usage](#usage) below for more information on configuring slides.
	 *
	 *
	 * ### Navigating
	 * After creating and configuring the slides, you can navigate between them
	 * by swiping or calling methods on the `Slides` instance. You can call `slideTo()` to
	 * navigate to a specific slide, or `slideNext()` to change to the slide that follows
	 * the active slide. All of the [methods](#instance-members) provided by the `Slides`
	 * instance are listed below. See [Usage](#usage) below for more information on
	 * navigating between slides.
	 *
	 *
	 * ### Limitations
	 * The Slides component wraps the [Swiper](http://www.idangero.us/swiper/) component
	 * built by iDangero.us. This means that all of the Swiper API isn't exposed on the
	 * Slides component. See the [`getSlider()`](#getSlider) method for information on
	 * getting the `Swiper` instance and using its methods directly.
	 *
	 *
	 * @usage
	 *
	 * You can add slides to a `@Component` using the following template:
	 *
	 * ```html
	 * <ion-slides>
	 *   <ion-slide>
	 *     <h1>Slide 1</h1>
	 *   </ion-slide>
	 *   <ion-slide>
	 *     <h1>Slide 2</h1>
	 *   </ion-slide>
	 *   <ion-slide>
	 *     <h1>Slide 3</h1>
	 *   </ion-slide>
	 * </ion-slides>
	 * ```
	 *
	 * To add [options](#configuring), we will define them in `mySlideOptions` in our class `MyPage`:
	 *
	 * ```ts
	 * import {Component} from '@angular/core';
	 * import {Slides} from 'ionic-angular';
	 *
	 * @Component({
	 *   templateUrl: 'my-page.html'
	 * })
	 * class MyPage {
	 *   mySlideOptions = {
	 *     initialSlide: 1,
	 *     loop: true
	 *   };
	 * }
	 * ```
	 *
	 * This is setting the second slide as the initial slide on load, since
	 * the `initialSlide` begins at `0`. We are also setting `loop` to true which
	 * allows us to swipe from the last slide to the first continuously. Then,
	 * we will pass `mySlideOptions` in the `options` property of the `<ion-slides>`
	 * element. We are using [property binding](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#property-binding)
	 * on `options` because `mySlideOptions` is an expression:
	 *
	 * ```html
	 * <ion-slides [options]="mySlideOptions">
	 * ```
	 *
	 * To grab a reference to the Slides, we will add a [local template variable](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#local-vars)
	 * to `<ion-slides>` called `mySlider`:
	 *
	 * ```html
	 * <ion-slides #mySlider [options]="mySlideOptions">
	 * ```
	 *
	 * Next, we can use `ViewChild` to assign the Slides instance to `slider`:
	 *
	 * ```ts
	 * import {ViewChild} from '@angular/core';
	 *
	 * class MyPage {
	 *   @ViewChild('mySlider') slider: Slides;
	 *
	 *   ...
	 * }
	 * ```
	 *
	 * Now we can call any of the `Slider` [methods]((#instance-members)),
	 * for example we can use the Slider's `slideTo()` method in order to
	 * navigate to a specific slide on a button click. Below we call the
	 * `goToSlide()` method and it navigates to the 3rd slide:
	 *
	 * ```ts
	 * class MyPage {
	 *   ...
	 *
	 *   goToSlide() {
	 *     this.slider.slideTo(2, 500);
	 *   }
	 * }
	 * ```
	 *
	 * We can also add events to listen to on the `<ion-slides>` element.
	 * Let's add the `ionDidChange` event and call a method when the slide changes:
	 *
	 * ```html
	 * <ion-slides #mySlider (ionDidChange)="onSlideChanged()" [options]="mySlideOptions">
	 * ```
	 *
	 * In our class, we add the `onSlideChanged()` method which gets the active
	 * index and prints it:
	 *
	 * ```ts
	 * class MyPage {
	 *   ...
	 *
	 *   onSlideChanged() {
	 *     let currentIndex = this.slider.getActiveIndex();
	 *     console.log("Current index is", currentIndex);
	 *   }
	 * }
	 * ```
	 *
	 * For all of the methods you can call on the `Slider` instance, see the
	 * [Instance Members](#instance-members).
	 *
	 * @demo /docs/v2/demos/slides/
	 * @see {@link /docs/v2/components#slides Slides Component Docs}
	 *
	 * Swiper.js:
	 * The most modern mobile touch slider and framework with hardware accelerated transitions
	 *
	 * http://www.idangero.us/swiper/
	 *
	 * Copyright 2015, Vladimir Kharlampidi
	 * The iDangero.us
	 * http://www.idangero.us/
	 *
	 * Licensed under MIT
	 */
	var Slides = (function (_super) {
	    __extends(Slides, _super);
	    function Slides(elementRef, renderer) {
	        var _this = this;
	        _super.call(this, elementRef);
	        /**
	         * @output {any} Expression to evaluate when a slide change starts.
	         */
	        this.ionWillChange = new core_1.EventEmitter();
	        /**
	         * @output {any} Expression to evaluate when a slide change ends.
	         */
	        this.ionDidChange = new core_1.EventEmitter();
	        /**
	         * @output {any} Expression to evaluate when a slide moves.
	         */
	        this.ionDrag = new core_1.EventEmitter();
	        this.rapidUpdate = util_1.debounce(function () {
	            _this.update();
	        }, 10);
	        this.id = ++slidesId;
	        this.slideId = 'slides-' + this.id;
	        renderer.setElementClass(elementRef.nativeElement, this.slideId, true);
	    }
	    /**
	     * @private
	     */
	    Slides.prototype.ngOnInit = function () {
	        var _this = this;
	        if (!this.options) {
	            this.options = {};
	        }
	        if (util_1.isPresent(this.pager)) {
	            // beta.5 2016-04-18 deprecated warning
	            // Pager should be passed as an option
	            void 0;
	            // Remove this with the deprecation warning
	            this.showPager = util_1.isTrueProperty(this.pager);
	        }
	        if (util_1.isPresent(this.zoom)) {
	            // beta.5 2016-04-18 deprecated warning
	            // Zoom should be passed as an option
	            void 0;
	        }
	        if (util_1.isPresent(this.options.pager)) {
	            this.showPager = util_1.isTrueProperty(this.options.pager);
	        }
	        var paginationId = '.' + this.slideId + ' .swiper-pagination';
	        var options = util_1.defaults({
	            pagination: paginationId
	        }, this.options);
	        options.onTap = function (swiper, e) {
	            _this.onTap(swiper, e);
	            return _this.options.onTap && _this.options.onTap(swiper, e);
	        };
	        options.onClick = function (swiper, e) {
	            _this.onClick(swiper, e);
	            return _this.options.onClick && _this.options.onClick(swiper, e);
	        };
	        options.onDoubleTap = function (swiper, e) {
	            _this.onDoubleTap(swiper, e);
	            return _this.options.onDoubleTap && _this.options.onDoubleTap(swiper, e);
	        };
	        options.onTransitionStart = function (swiper, e) {
	            _this.onTransitionStart(swiper, e);
	            return _this.options.onTransitionStart && _this.options.onTransitionStart(swiper, e);
	        };
	        options.onTransitionEnd = function (swiper, e) {
	            _this.onTransitionEnd(swiper, e);
	            return _this.options.onTransitionEnd && _this.options.onTransitionEnd(swiper, e);
	        };
	        options.onSlideChangeStart = function (swiper) {
	            _this.ionWillChange.emit(swiper);
	            return _this.options.onSlideChangeStart && _this.options.onSlideChangeStart(swiper);
	        };
	        options.onSlideChangeEnd = function (swiper) {
	            _this.ionDidChange.emit(swiper);
	            return _this.options.onSlideChangeEnd && _this.options.onSlideChangeEnd(swiper);
	        };
	        options.onLazyImageLoad = function (swiper, slide, img) {
	            return _this.options.onLazyImageLoad && _this.options.onLazyImageLoad(swiper, slide, img);
	        };
	        options.onLazyImageReady = function (swiper, slide, img) {
	            return _this.options.onLazyImageReady && _this.options.onLazyImageReady(swiper, slide, img);
	        };
	        options.onSliderMove = function (swiper, e) {
	            _this.ionDrag.emit(swiper);
	            return _this.options.onSliderMove && _this.options.onSliderMove(swiper, e);
	        };
	        setTimeout(function () {
	            var swiper = new swiper_widget_1.Swiper(_this.getNativeElement().children[0], options);
	            _this.slider = swiper;
	        });
	        /*
	        * TODO: Finish this
	        if (isTrueProperty(this.zoom)) {
	          this.enableZoom = true;
	          setTimeout(() => {
	            this.initZoom();
	          })
	        }
	        */
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTap = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onClick = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onDoubleTap = function (swiper, e) {
	        this.toggleZoom(swiper, e);
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onLazyImageLoad = function (swiper, slide, img) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onLazyImageReady = function (swiper, slide, img) {
	    };
	    /*
	    nextButton(swiper: any, e: any) {
	    }
	    prevButton() {
	    }
	    indexButton() {
	    }
	    */
	    /**
	     * @private
	     */
	    Slides.prototype.initZoom = function () {
	        var _this = this;
	        this.zoomDuration = this.zoomDuration || 230;
	        this.maxScale = this.zoomMax || 3;
	        this.zoomElement = this.getNativeElement().children[0].children[0];
	        this.zoomElement && this.zoomElement.classList.add('ion-scroll-zoom');
	        this.zoomGesture = new gesture_1.Gesture(this.zoomElement);
	        this.zoomGesture.listen();
	        this.scale = 1;
	        this.zoomLastPosX = 0;
	        this.zoomLastPosY = 0;
	        var lastScale, startX, startY, posX = 0, posY = 0, zoomRect;
	        this.viewportWidth = this.getNativeElement().offsetWidth;
	        this.viewportHeight = this.getNativeElement().offsetHeight;
	        this.zoomElement.addEventListener('touchstart', function (e) {
	            _this.onTouchStart(e);
	        });
	        this.zoomElement.addEventListener('touchmove', function (e) {
	            _this.onTouchMove(e);
	        });
	        this.zoomElement.addEventListener('touchend', function (e) {
	            _this.onTouchEnd(e);
	        });
	        this.zoomGesture.on('pinchstart', function (e) {
	            lastScale = _this.scale;
	            void 0;
	        });
	        this.zoomGesture.on('pinch', function (e) {
	            _this.scale = Math.max(1, Math.min(lastScale * e.scale, 10));
	            void 0;
	            _this.zoomElement.style[dom_1.CSS.transform] = 'scale(' + _this.scale + ')';
	            zoomRect = _this.zoomElement.getBoundingClientRect();
	        });
	        this.zoomGesture.on('pinchend', function () {
	            // last_scale = Math.max(1, Math.min(last_scale * e.scale, 10));
	            if (_this.scale > _this.maxScale) {
	                var za = new animation_1.Animation(_this.zoomElement)
	                    .duration(_this.zoomDuration)
	                    .easing('linear')
	                    .from('scale', _this.scale)
	                    .to('scale', _this.maxScale);
	                za.play();
	                _this.scale = _this.maxScale;
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.resetZoom = function () {
	        if (this.zoomElement) {
	            this.zoomElement.parentElement.style[dom_1.CSS.transform] = '';
	            this.zoomElement.style[dom_1.CSS.transform] = 'scale(1)';
	        }
	        this.scale = 1;
	        this.zoomLastPosX = 0;
	        this.zoomLastPosY = 0;
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.toggleZoom = function (swiper, e) {
	        void 0;
	        if (!this.enableZoom) {
	            return;
	        }
	        void 0;
	        /*
	        let x = e.pointers[0].clientX;
	        let y = e.pointers[0].clientY;
	    
	        let mx = this.viewportWidth / 2;
	        let my = this.viewportHeight / 2;
	    
	        let tx, ty;
	    
	        if (x > mx) {
	          // Greater than half
	          tx = -x;
	        } else {
	          // Less than or equal to half
	          tx = (this.viewportWidth - x);
	        }
	        if (y > my) {
	          ty = -y;
	        } else {
	          ty = y-my;
	        }
	    
	        console.debug(y);
	        */
	        var zi = new animation_1.Animation(this.touch.target.children[0])
	            .duration(this.zoomDuration)
	            .easing('linear');
	        var zw = new animation_1.Animation(this.touch.target.children[0])
	            .duration(this.zoomDuration)
	            .easing('linear');
	        var za = new animation_1.Animation();
	        za.add(zi);
	        if (this.scale > 1) {
	            // zoom out
	            // zw.fromTo('translateX', posX + 'px', '0px');
	            // zw.fromTo('translateY', posY + 'px', '0px');
	            zi.from('scale', this.scale);
	            zi.to('scale', 1);
	            za.play();
	            // posX = 0;
	            // posY = 0;
	            this.scale = 1;
	        }
	        else {
	            // zoom in
	            // zw.fromTo('translateX', posX + 'px', tx + 'px');
	            // zw.fromTo('translateY', posY + 'px', ty + 'px');
	            zi.from('scale', this.scale);
	            zi.to('scale', this.maxScale);
	            za.play();
	            // posX = tx;
	            // posY = ty;
	            this.scale = this.maxScale;
	        }
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTransitionStart = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTransitionEnd = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTouchStart = function (e) {
	        void 0;
	        // TODO: Support mice as well
	        var target = util_2.dom.closest(e.target, '.slide').children[0].children[0];
	        this.touch = {
	            x: null,
	            y: null,
	            startX: e.touches[0].clientX,
	            startY: e.touches[0].clientY,
	            deltaX: 0,
	            deltaY: 0,
	            lastX: 0,
	            lastY: 0,
	            target: target.parentElement,
	            zoomable: target,
	            zoomableWidth: target.offsetWidth,
	            zoomableHeight: target.offsetHeight
	        };
	        void 0;
	        // TODO: android prevent default
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTouchMove = function (e) {
	        this.touch.deltaX = e.touches[0].clientX - this.touch.startX;
	        this.touch.deltaY = e.touches[0].clientY - this.touch.startY;
	        // TODO: Make sure we need to transform (image is bigger than viewport)
	        var zoomableScaledWidth = this.touch.zoomableWidth * this.scale;
	        var zoomableScaledHeight = this.touch.zoomableHeight * this.scale;
	        var x1 = Math.min((this.viewportWidth / 2) - zoomableScaledWidth / 2, 0);
	        var x2 = -x1;
	        var y1 = Math.min((this.viewportHeight / 2) - zoomableScaledHeight / 2, 0);
	        var y2 = -y1;
	        void 0;
	        if (this.scale <= 1) {
	            return;
	        }
	        void 0;
	        // move image
	        this.touch.x = this.touch.deltaX + this.touch.lastX;
	        this.touch.y = this.touch.deltaY + this.touch.lastY;
	        if (this.touch.x < x1) {
	            void 0;
	        }
	        if (this.touch.x > x2) {
	            void 0;
	        }
	        if (this.touch.x > this.viewportWidth) {
	        }
	        else if (-this.touch.x > this.viewportWidth) {
	        }
	        else {
	            void 0;
	            // this.touch.target.style[CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
	            this.touch.target.style[dom_1.CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
	            e.preventDefault();
	            e.stopPropagation();
	            return false;
	        }
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTouchEnd = function (e) {
	        void 0;
	        if (this.scale > 1) {
	            if (Math.abs(this.touch.x) > this.viewportWidth) {
	                // TODO what is posX?
	                var posX = posX > 0 ? this.viewportWidth - 1 : -(this.viewportWidth - 1);
	                void 0;
	            }
	            /*
	            if (posY > this.viewportHeight/2) {
	              let z = new Animation(this.zoomElement.parentElement);
	              z.fromTo('translateY', posY + 'px', Math.min(this.viewportHeight/2 + 30, posY));
	              z.play();
	            } else {
	              let z = new Animation(this.zoomElement.parentElement);
	              z.fromTo('translateY', posY + 'px', Math.max(this.viewportHeight/2 - 30, posY));
	              z.play();
	            }
	            */
	            this.touch.lastX = this.touch.x;
	            this.touch.lastY = this.touch.y;
	        }
	    };
	    /**
	     * @private
	     * Update the underlying slider implementation. Call this if you've added or removed
	     * child slides.
	     */
	    Slides.prototype.update = function () {
	        var _this = this;
	        setTimeout(function () {
	            _this.slider.update();
	            // Don't allow pager to show with > 10 slides
	            if (_this.length() > 10) {
	                _this.showPager = false;
	            }
	        });
	    };
	    /**
	     * Transition to the specified slide.
	     *
	     * @param {number} index  The index number of the slide.
	     * @param {number} speed  Transition duration (in ms). Optional.
	     * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
	     */
	    Slides.prototype.slideTo = function (index, speed, runCallbacks) {
	        this.slider.slideTo(index, speed, runCallbacks);
	    };
	    /**
	     * Transition to the next slide.
	     *
	     * @param {number} speed  Transition duration (in ms). Optional.
	     * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
	     */
	    Slides.prototype.slideNext = function (speed, runCallbacks) {
	        this.slider.slideNext(runCallbacks, speed);
	    };
	    /**
	     * Transition to the previous slide.
	     *
	     * @param {number} speed  Transition duration (in ms). Optional.
	     * @param {boolean} runCallbacks  Whether or not to emit the `ionWillChange`/`ionDidChange` events. Optional. Default true.
	     */
	    Slides.prototype.slidePrev = function (speed, runCallbacks) {
	        this.slider.slidePrev(runCallbacks, speed);
	    };
	    /**
	     * Get the index of the active slide.
	     *
	     * @returns {number} The index number of the current slide.
	     */
	    Slides.prototype.getActiveIndex = function () {
	        return this.slider.activeIndex;
	    };
	    /**
	     * Get the index of the previous slide.
	     *
	     * @returns {number} The index number of the previous slide.
	     */
	    Slides.prototype.getPreviousIndex = function () {
	        return this.slider.previousIndex;
	    };
	    /**
	     * Get the total number of slides.
	     *
	     * @returns {number} The total number of slides.
	     */
	    Slides.prototype.length = function () {
	        return this.slider.slides.length;
	    };
	    /**
	     * Get whether or not the current slide is the last slide.
	     *
	     * @returns {boolean} If the slide is the last slide or not.
	     */
	    Slides.prototype.isEnd = function () {
	        return this.slider.isEnd;
	    };
	    /**
	     * Get whether or not the current slide is the first slide.
	     *
	     * @returns {boolean} If the slide is the first slide or not.
	     */
	    Slides.prototype.isBeginning = function () {
	        return this.slider.isBeginning;
	    };
	    /**
	     * Get the `Swiper` instance.
	     *
	     * The Slides component wraps the `Swiper` component built by iDangero.us. See the
	     * [Swiper API Docs](http://idangero.us/swiper/api/) for information on using
	     * the `Swiper` instance directly.
	     *
	     * @returns {Swiper}
	     */
	    Slides.prototype.getSlider = function () {
	        return this.slider;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "options", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "pager", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "zoom", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "zoomDuration", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "zoomMax", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Slides.prototype, "ionWillChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Slides.prototype, "ionDidChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Slides.prototype, "ionDrag", void 0);
	    Slides = __decorate([
	        core_1.Component({
	            selector: 'ion-slides',
	            template: '<div class="swiper-container">' +
	                '<div class="swiper-wrapper">' +
	                '<ng-content></ng-content>' +
	                '</div>' +
	                '<div [class.hide]="!showPager" class="swiper-pagination"></div>' +
	                '</div>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
	    ], Slides);
	    return Slides;
	}(ion_1.Ion));
	exports.Slides = Slides;
	/**
	 * @name Slide
	 * @description
	 * The Slide component is a child component of [Slides](../Slides). The template
	 * should be written as `ion-slide`. Any slide content should be written
	 * in this component and it should be used in conjunction with [Slides](../Slides).
	 *
	 * See the [Slides API Docs](../Slides) for more usage information.
	 *
	 * @demo /docs/v2/demos/slides/
	 * @see {@link /docs/v2/api/components/slides/Slides/ Slides API Docs}
	 */
	var Slide = (function () {
	    function Slide(elementRef, slides) {
	        this.slides = slides;
	        this.ele = elementRef.nativeElement;
	        this.ele.classList.add('swiper-slide');
	        slides.rapidUpdate();
	    }
	    Slide.prototype.ngOnDestroy = function () {
	        this.slides.rapidUpdate();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slide.prototype, "zoom", void 0);
	    Slide = __decorate([
	        core_1.Component({
	            selector: 'ion-slide',
	            template: '<div class="slide-zoom"><ng-content></ng-content></div>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(1, core_1.Host()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Slides])
	    ], Slide);
	    return Slide;
	}());
	exports.Slide = Slide;
	/**
	 * @private
	 */
	var SlideLazy = (function () {
	    function SlideLazy() {
	    }
	    SlideLazy = __decorate([
	        core_1.Directive({
	            selector: 'slide-lazy',
	            host: {
	                'class': 'swiper-lazy'
	            }
	        }), 
	        __metadata('design:paramtypes', [])
	    ], SlideLazy);
	    return SlideLazy;
	}());
	exports.SlideLazy = SlideLazy;
	var slidesId = -1;


/***/ },
/* 172 */
/***/ function(module, exports) {

	/**
	 * Swiper 3.1.2
	 * Most modern mobile touch slider and framework with hardware accelerated transitions
	 *
	 * http://www.idangero.us/swiper/
	 *
	 * Copyright 2015, Vladimir Kharlampidi
	 * The iDangero.us
	 * http://www.idangero.us/
	 *
	 * Licensed under MIT
	 *
	 * Released on: August 22, 2015
	 */
	  'use strict';
	  var $;
	  /*===========================
	  Swiper
	  ===========================*/
	module.exports.Swiper = Swiper;

	function Swiper(container, params) {


	      if (!(this instanceof Swiper)) return new Swiper(container, params);

	      var defaults = {
	          direction: 'horizontal',
	          touchEventsTarget: 'container',
	          initialSlide: 0,
	          speed: 300,
	          // autoplay
	          autoplay: false,
	          autoplayDisableOnInteraction: true,
	          // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
	          iOSEdgeSwipeDetection: false,
	          iOSEdgeSwipeThreshold: 20,
	          // Free mode
	          freeMode: false,
	          freeModeMomentum: true,
	          freeModeMomentumRatio: 1,
	          freeModeMomentumBounce: true,
	          freeModeMomentumBounceRatio: 1,
	          freeModeSticky: false,
	          // Set wrapper width
	          setWrapperSize: false,
	          // Virtual Translate
	          virtualTranslate: false,
	          // Effects
	          effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow'
	          coverflow: {
	              rotate: 50,
	              stretch: 0,
	              depth: 100,
	              modifier: 1,
	              slideShadows : true
	          },
	          cube: {
	              slideShadows: true,
	              shadow: true,
	              shadowOffset: 20,
	              shadowScale: 0.94
	          },
	          fade: {
	              crossFade: false
	          },
	          // Parallax
	          parallax: false,
	          // Scrollbar
	          scrollbar: null,
	          scrollbarHide: true,
	          // Keyboard Mousewheel
	          keyboardControl: false,
	          mousewheelControl: false,
	          mousewheelReleaseOnEdges: false,
	          mousewheelInvert: false,
	          mousewheelForceToAxis: false,
	          mousewheelSensitivity: 1,
	          // Hash Navigation
	          hashnav: false,
	          // Slides grid
	          spaceBetween: 0,
	          slidesPerView: 1,
	          slidesPerColumn: 1,
	          slidesPerColumnFill: 'column',
	          slidesPerGroup: 1,
	          centeredSlides: false,
	          slidesOffsetBefore: 0, // in px
	          slidesOffsetAfter: 0, // in px
	          // Round length
	          roundLengths: false,
	          // Touches
	          touchRatio: 1,
	          touchAngle: 45,
	          simulateTouch: true,
	          shortSwipes: true,
	          longSwipes: true,
	          longSwipesRatio: 0.5,
	          longSwipesMs: 300,
	          followFinger: true,
	          onlyExternal: false,
	          threshold: 0,
	          touchMoveStopPropagation: true,
	          // Pagination
	          pagination: null,
	          paginationElement: 'span',
	          paginationClickable: false,
	          paginationHide: false,
	          paginationBulletRender: null,
	          // Resistance
	          resistance: true,
	          resistanceRatio: 0.85,
	          // Next/prev buttons
	          nextButton: null,
	          prevButton: null,
	          // Progress
	          watchSlidesProgress: false,
	          watchSlidesVisibility: false,
	          // Cursor
	          grabCursor: false,
	          // Clicks
	          preventClicks: true,
	          preventClicksPropagation: true,
	          slideToClickedSlide: false,
	          // Lazy Loading
	          lazyLoading: false,
	          lazyLoadingInPrevNext: false,
	          lazyLoadingOnTransitionStart: false,
	          // Images
	          preloadImages: true,
	          updateOnImagesReady: true,
	          // loop
	          loop: false,
	          loopAdditionalSlides: 0,
	          loopedSlides: null,
	          // Control
	          control: undefined,
	          controlInverse: false,
	          controlBy: 'slide', //or 'container'
	          // Swiping/no swiping
	          allowSwipeToPrev: true,
	          allowSwipeToNext: true,
	          swipeHandler: null, //'.swipe-handler',
	          noSwiping: true,
	          noSwipingClass: 'swiper-no-swiping',
	          // NS
	          slideClass: 'swiper-slide',
	          slideActiveClass: 'swiper-slide-active',
	          slideVisibleClass: 'swiper-slide-visible',
	          slideDuplicateClass: 'swiper-slide-duplicate',
	          slideNextClass: 'swiper-slide-next',
	          slidePrevClass: 'swiper-slide-prev',
	          wrapperClass: 'swiper-wrapper',
	          bulletClass: 'swiper-pagination-bullet',
	          bulletActiveClass: 'swiper-pagination-bullet-active',
	          buttonDisabledClass: 'swiper-button-disabled',
	          paginationHiddenClass: 'swiper-pagination-hidden',
	          // Observer
	          observer: false,
	          observeParents: false,
	          // Accessibility
	          a11y: false,
	          prevSlideMessage: 'Previous slide',
	          nextSlideMessage: 'Next slide',
	          firstSlideMessage: 'This is the first slide',
	          lastSlideMessage: 'This is the last slide',
	          paginationBulletMessage: 'Go to slide {{index}}',
	          // Callbacks
	          runCallbacksOnInit: true
	          /*
	          Callbacks:
	          onInit: function (swiper)
	          onDestroy: function (swiper)
	          onClick: function (swiper, e)
	          onTap: function (swiper, e)
	          onDoubleTap: function (swiper, e)
	          onSliderMove: function (swiper, e)
	          onSlideChangeStart: function (swiper)
	          onSlideChangeEnd: function (swiper)
	          onTransitionStart: function (swiper)
	          onTransitionEnd: function (swiper)
	          onImagesReady: function (swiper)
	          onProgress: function (swiper, progress)
	          onTouchStart: function (swiper, e)
	          onTouchMove: function (swiper, e)
	          onTouchMoveOpposite: function (swiper, e)
	          onTouchEnd: function (swiper, e)
	          onReachBeginning: function (swiper)
	          onReachEnd: function (swiper)
	          onSetTransition: function (swiper, duration)
	          onSetTranslate: function (swiper, translate)
	          onAutoplayStart: function (swiper)
	          onAutoplayStop: function (swiper),
	          onLazyImageLoad: function (swiper, slide, image)
	          onLazyImageReady: function (swiper, slide, image)
	          */

	      };
	      var initialVirtualTranslate = params && params.virtualTranslate;

	      params = params || {};
	      for (var def in defaults) {
	          if (typeof params[def] === 'undefined') {
	              params[def] = defaults[def];
	          }
	          else if (typeof params[def] === 'object') {
	              for (var deepDef in defaults[def]) {
	                  if (typeof params[def][deepDef] === 'undefined') {
	                      params[def][deepDef] = defaults[def][deepDef];
	                  }
	              }
	          }
	      }

	      // Swiper
	      var s = this;

	      // Version
	      s.version = '3.1.0';

	      // Params
	      s.params = params;

	      // Classname
	      s.classNames = [];
	      /*=========================
	        Dom Library and plugins
	        ===========================*/
	      if (typeof $ !== 'undefined' && typeof Dom7 !== 'undefined'){
	          $ = Dom7;
	      }
	      if (typeof $ === 'undefined') {
	          if (typeof Dom7 === 'undefined') {
	              $ = window.Dom7 || window.Zepto || window.jQuery;
	          }
	          else {
	              $ = Dom7;
	          }
	          if (!$) return;
	      }
	      // Export it to Swiper instance
	      s.$ = $;

	      /*=========================
	        Preparation - Define Container, Wrapper and Pagination
	        ===========================*/
	      s.container = $(container);
	      if (s.container.length === 0) return;
	      if (s.container.length > 1) {
	          s.container.each(function () {
	              new Swiper(this, params);
	          });
	          return;
	      }

	      // Save instance in container HTML Element and in data
	      s.container[0].swiper = s;
	      s.container.data('swiper', s);

	      s.classNames.push('swiper-container-' + s.params.direction);

	      if (s.params.freeMode) {
	          s.classNames.push('swiper-container-free-mode');
	      }
	      if (!s.support.flexbox) {
	          s.classNames.push('swiper-container-no-flexbox');
	          s.params.slidesPerColumn = 1;
	      }
	      // Enable slides progress when required
	      if (s.params.parallax || s.params.watchSlidesVisibility) {
	          s.params.watchSlidesProgress = true;
	      }
	      // Coverflow / 3D
	      if (['cube', 'coverflow'].indexOf(s.params.effect) >= 0) {
	          if (s.support.transforms3d) {
	              s.params.watchSlidesProgress = true;
	              s.classNames.push('swiper-container-3d');
	          }
	          else {
	              s.params.effect = 'slide';
	          }
	      }
	      if (s.params.effect !== 'slide') {
	          s.classNames.push('swiper-container-' + s.params.effect);
	      }
	      if (s.params.effect === 'cube') {
	          s.params.resistanceRatio = 0;
	          s.params.slidesPerView = 1;
	          s.params.slidesPerColumn = 1;
	          s.params.slidesPerGroup = 1;
	          s.params.centeredSlides = false;
	          s.params.spaceBetween = 0;
	          s.params.virtualTranslate = true;
	          s.params.setWrapperSize = false;
	      }
	      if (s.params.effect === 'fade') {
	          s.params.slidesPerView = 1;
	          s.params.slidesPerColumn = 1;
	          s.params.slidesPerGroup = 1;
	          s.params.watchSlidesProgress = true;
	          s.params.spaceBetween = 0;
	          if (typeof initialVirtualTranslate === 'undefined') {
	              s.params.virtualTranslate = true;
	          }
	      }

	      // Grab Cursor
	      if (s.params.grabCursor && s.support.touch) {
	          s.params.grabCursor = false;
	      }

	      // Wrapper
	      s.wrapper = s.container.children('.' + s.params.wrapperClass);

	      // Pagination
	      if (s.params.pagination) {
	          s.paginationContainer = $(s.params.pagination);
	          if (s.params.paginationClickable) {
	              s.paginationContainer.addClass('swiper-pagination-clickable');
	          }
	      }

	      // Is Horizontal
	      function isH() {
	          return s.params.direction === 'horizontal';
	      }

	      // RTL
	      s.rtl = isH() && (s.container[0].dir.toLowerCase() === 'rtl' || s.container.css('direction') === 'rtl');
	      if (s.rtl) {
	          s.classNames.push('swiper-container-rtl');
	      }

	      // Wrong RTL support
	      if (s.rtl) {
	          s.wrongRTL = s.wrapper.css('display') === '-webkit-box';
	      }

	      // Columns
	      if (s.params.slidesPerColumn > 1) {
	          s.classNames.push('swiper-container-multirow');
	      }

	      // Check for Android
	      if (s.device.android) {
	          s.classNames.push('swiper-container-android');
	      }

	      // Add classes
	      s.container.addClass(s.classNames.join(' '));

	      // Translate
	      s.translate = 0;

	      // Progress
	      s.progress = 0;

	      // Velocity
	      s.velocity = 0;

	      /*=========================
	        Locks, unlocks
	        ===========================*/
	      s.lockSwipeToNext = function () {
	          s.params.allowSwipeToNext = false;
	      };
	      s.lockSwipeToPrev = function () {
	          s.params.allowSwipeToPrev = false;
	      };
	      s.lockSwipes = function () {
	          s.params.allowSwipeToNext = s.params.allowSwipeToPrev = false;
	      };
	      s.unlockSwipeToNext = function () {
	          s.params.allowSwipeToNext = true;
	      };
	      s.unlockSwipeToPrev = function () {
	          s.params.allowSwipeToPrev = true;
	      };
	      s.unlockSwipes = function () {
	          s.params.allowSwipeToNext = s.params.allowSwipeToPrev = true;
	      };

	      /*=========================
	        Round helper
	        ===========================*/
	      function round(a) {
	          return Math.floor(a);
	      }
	      /*=========================
	        Set grab cursor
	        ===========================*/
	      if (s.params.grabCursor) {
	          s.container[0].style.cursor = 'move';
	          s.container[0].style.cursor = '-webkit-grab';
	          s.container[0].style.cursor = '-moz-grab';
	          s.container[0].style.cursor = 'grab';
	      }
	      /*=========================
	        Update on Images Ready
	        ===========================*/
	      s.imagesToLoad = [];
	      s.imagesLoaded = 0;

	      s.loadImage = function (imgElement, src, checkForComplete, callback) {
	          var image;
	          function onReady () {
	              if (callback) callback();
	          }
	          if (!imgElement.complete || !checkForComplete) {
	              if (src) {
	                  image = new window.Image();
	                  image.onload = onReady;
	                  image.onerror = onReady;
	                  image.src = src;
	              } else {
	                  onReady();
	              }

	          } else {//image already loaded...
	              onReady();
	          }
	      };
	      s.preloadImages = function () {
	          s.imagesToLoad = s.container.find('img');
	          function _onReady() {
	              if (typeof s === 'undefined' || s === null) return;
	              if (s.imagesLoaded !== undefined) s.imagesLoaded++;
	              if (s.imagesLoaded === s.imagesToLoad.length) {
	                  if (s.params.updateOnImagesReady) s.update();
	                  s.emit('onImagesReady', s);
	              }
	          }
	          for (var i = 0; i < s.imagesToLoad.length; i++) {
	              s.loadImage(s.imagesToLoad[i], (s.imagesToLoad[i].currentSrc || s.imagesToLoad[i].getAttribute('src')), true, _onReady);
	          }
	      };

	      /*=========================
	        Autoplay
	        ===========================*/
	      s.autoplayTimeoutId = undefined;
	      s.autoplaying = false;
	      s.autoplayPaused = false;
	      function autoplay() {
	          s.autoplayTimeoutId = setTimeout(function () {
	              if (s.params.loop) {
	                  s.fixLoop();
	                  s._slideNext();
	              }
	              else {
	                  if (!s.isEnd) {
	                      s._slideNext();
	                  }
	                  else {
	                      if (!params.autoplayStopOnLast) {
	                          s._slideTo(0);
	                      }
	                      else {
	                          s.stopAutoplay();
	                      }
	                  }
	              }
	          }, s.params.autoplay);
	      }
	      s.startAutoplay = function () {
	          if (typeof s.autoplayTimeoutId !== 'undefined') return false;
	          if (!s.params.autoplay) return false;
	          if (s.autoplaying) return false;
	          s.autoplaying = true;
	          s.emit('onAutoplayStart', s);
	          autoplay();
	      };
	      s.stopAutoplay = function (internal) {
	          if (!s.autoplayTimeoutId) return;
	          if (s.autoplayTimeoutId) clearTimeout(s.autoplayTimeoutId);
	          s.autoplaying = false;
	          s.autoplayTimeoutId = undefined;
	          s.emit('onAutoplayStop', s);
	      };
	      s.pauseAutoplay = function (speed) {
	          if (s.autoplayPaused) return;
	          if (s.autoplayTimeoutId) clearTimeout(s.autoplayTimeoutId);
	          s.autoplayPaused = true;
	          if (speed === 0) {
	              s.autoplayPaused = false;
	              autoplay();
	          }
	          else {
	              s.wrapper.transitionEnd(function () {
	                  if (!s) return;
	                  s.autoplayPaused = false;
	                  if (!s.autoplaying) {
	                      s.stopAutoplay();
	                  }
	                  else {
	                      autoplay();
	                  }
	              });
	          }
	      };
	      /*=========================
	        Min/Max Translate
	        ===========================*/
	      s.minTranslate = function () {
	          return (-s.snapGrid[0]);
	      };
	      s.maxTranslate = function () {
	          return (-s.snapGrid[s.snapGrid.length - 1]);
	      };
	      /*=========================
	        Slider/slides sizes
	        ===========================*/
	      s.updateContainerSize = function () {
	          var width, height;
	          if (typeof s.params.width !== 'undefined') {
	              width = s.params.width;
	          }
	          else {
	              width = s.container[0].clientWidth;
	          }
	          if (typeof s.params.height !== 'undefined') {
	              height = s.params.height;
	          }
	          else {
	              height = s.container[0].clientHeight;
	          }
	          if (width === 0 && isH() || height === 0 && !isH()) {
	              return;
	          }

	          //Subtract paddings
	          width = width - parseInt(s.container.css('padding-left'), 10) - parseInt(s.container.css('padding-right'), 10);
	          height = height - parseInt(s.container.css('padding-top'), 10) - parseInt(s.container.css('padding-bottom'), 10);

	          // Store values
	          s.width = width;
	          s.height = height;
	          s.size = isH() ? s.width : s.height;
	      };

	      s.updateSlidesSize = function () {
	          s.slides = s.wrapper.children('.' + s.params.slideClass);
	          s.snapGrid = [];
	          s.slidesGrid = [];
	          s.slidesSizesGrid = [];

	          var spaceBetween = s.params.spaceBetween,
	              slidePosition = -s.params.slidesOffsetBefore,
	              i,
	              prevSlideSize = 0,
	              index = 0;
	          if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
	              spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * s.size;
	          }

	          s.virtualSize = -spaceBetween;
	          // reset margins
	          if (s.rtl) s.slides.css({marginLeft: '', marginTop: ''});
	          else s.slides.css({marginRight: '', marginBottom: ''});

	          var slidesNumberEvenToRows;
	          if (s.params.slidesPerColumn > 1) {
	              if (Math.floor(s.slides.length / s.params.slidesPerColumn) === s.slides.length / s.params.slidesPerColumn) {
	                  slidesNumberEvenToRows = s.slides.length;
	              }
	              else {
	                  slidesNumberEvenToRows = Math.ceil(s.slides.length / s.params.slidesPerColumn) * s.params.slidesPerColumn;
	              }
	          }

	          // Calc slides
	          var slideSize;
	          var slidesPerColumn = s.params.slidesPerColumn;
	          var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
	          var numFullColumns = slidesPerRow - (s.params.slidesPerColumn * slidesPerRow - s.slides.length);
	          for (i = 0; i < s.slides.length; i++) {
	              slideSize = 0;
	              var slide = s.slides.eq(i);
	              if (s.params.slidesPerColumn > 1) {
	                  // Set slides order
	                  var newSlideOrderIndex;
	                  var column, row;
	                  if (s.params.slidesPerColumnFill === 'column') {
	                      column = Math.floor(i / slidesPerColumn);
	                      row = i - column * slidesPerColumn;
	                      if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn-1)) {
	                          if (++row >= slidesPerColumn) {
	                              row = 0;
	                              column++;
	                          }
	                      }
	                      newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
	                      slide
	                          .css({
	                              '-webkit-box-ordinal-group': newSlideOrderIndex,
	                              '-moz-box-ordinal-group': newSlideOrderIndex,
	                              '-ms-flex-order': newSlideOrderIndex,
	                              '-webkit-order': newSlideOrderIndex,
	                              'order': newSlideOrderIndex
	                          });
	                  }
	                  else {
	                      row = Math.floor(i / slidesPerRow);
	                      column = i - row * slidesPerRow;
	                  }
	                  slide
	                      .css({
	                          'margin-top': (row !== 0 && s.params.spaceBetween) && (s.params.spaceBetween + 'px')
	                      })
	                      .attr('data-swiper-column', column)
	                      .attr('data-swiper-row', row);

	              }
	              if (slide.css('display') === 'none') continue;
	              if (s.params.slidesPerView === 'auto') {
	                  slideSize = isH() ? slide.outerWidth(true) : slide.outerHeight(true);
	                  if (s.params.roundLengths) slideSize = round(slideSize);
	              }
	              else {
	                  slideSize = (s.size - (s.params.slidesPerView - 1) * spaceBetween) / s.params.slidesPerView;
	                  if (s.params.roundLengths) slideSize = round(slideSize);

	                  if (isH()) {
	                      s.slides[i].style.width = slideSize + 'px';
	                  }
	                  else {
	                      s.slides[i].style.height = slideSize + 'px';
	                  }
	              }
	              s.slides[i].swiperSlideSize = slideSize;
	              s.slidesSizesGrid.push(slideSize);


	              if (s.params.centeredSlides) {
	                  slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
	                  if (i === 0) slidePosition = slidePosition - s.size / 2 - spaceBetween;
	                  if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
	                  if ((index) % s.params.slidesPerGroup === 0) s.snapGrid.push(slidePosition);
	                  s.slidesGrid.push(slidePosition);
	              }
	              else {
	                  if ((index) % s.params.slidesPerGroup === 0) s.snapGrid.push(slidePosition);
	                  s.slidesGrid.push(slidePosition);
	                  slidePosition = slidePosition + slideSize + spaceBetween;
	              }

	              s.virtualSize += slideSize + spaceBetween;

	              prevSlideSize = slideSize;

	              index ++;
	          }
	          s.virtualSize = Math.max(s.virtualSize, s.size) + s.params.slidesOffsetAfter;

	          var newSlidesGrid;

	          if (
	              s.rtl && s.wrongRTL && (s.params.effect === 'slide' || s.params.effect === 'coverflow')) {
	              s.wrapper.css({width: s.virtualSize + s.params.spaceBetween + 'px'});
	          }
	          if (!s.support.flexbox || s.params.setWrapperSize) {
	              if (isH()) s.wrapper.css({width: s.virtualSize + s.params.spaceBetween + 'px'});
	              else s.wrapper.css({height: s.virtualSize + s.params.spaceBetween + 'px'});
	          }

	          if (s.params.slidesPerColumn > 1) {
	              s.virtualSize = (slideSize + s.params.spaceBetween) * slidesNumberEvenToRows;
	              s.virtualSize = Math.ceil(s.virtualSize / s.params.slidesPerColumn) - s.params.spaceBetween;
	              s.wrapper.css({width: s.virtualSize + s.params.spaceBetween + 'px'});
	              if (s.params.centeredSlides) {
	                  newSlidesGrid = [];
	                  for (i = 0; i < s.snapGrid.length; i++) {
	                      if (s.snapGrid[i] < s.virtualSize + s.snapGrid[0]) newSlidesGrid.push(s.snapGrid[i]);
	                  }
	                  s.snapGrid = newSlidesGrid;
	              }
	          }

	          // Remove last grid elements depending on width
	          if (!s.params.centeredSlides) {
	              newSlidesGrid = [];
	              for (i = 0; i < s.snapGrid.length; i++) {
	                  if (s.snapGrid[i] <= s.virtualSize - s.size) {
	                      newSlidesGrid.push(s.snapGrid[i]);
	                  }
	              }
	              s.snapGrid = newSlidesGrid;
	              if (Math.floor(s.virtualSize - s.size) > Math.floor(s.snapGrid[s.snapGrid.length - 1])) {
	                  s.snapGrid.push(s.virtualSize - s.size);
	              }
	          }
	          if (s.snapGrid.length === 0) s.snapGrid = [0];

	          if (s.params.spaceBetween !== 0) {
	              if (isH()) {
	                  if (s.rtl) s.slides.css({marginLeft: spaceBetween + 'px'});
	                  else s.slides.css({marginRight: spaceBetween + 'px'});
	              }
	              else s.slides.css({marginBottom: spaceBetween + 'px'});
	          }
	          if (s.params.watchSlidesProgress) {
	              s.updateSlidesOffset();
	          }
	      };
	      s.updateSlidesOffset = function () {
	          for (var i = 0; i < s.slides.length; i++) {
	              s.slides[i].swiperSlideOffset = isH() ? s.slides[i].offsetLeft : s.slides[i].offsetTop;
	          }
	      };

	      /*=========================
	        Slider/slides progress
	        ===========================*/
	      s.updateSlidesProgress = function (translate) {
	          if (typeof translate === 'undefined') {
	              translate = s.translate || 0;
	          }
	          if (s.slides.length === 0) return;
	          if (typeof s.slides[0].swiperSlideOffset === 'undefined') s.updateSlidesOffset();

	          var offsetCenter = -translate;
	          if (s.rtl) offsetCenter = translate;

	          // Visible Slides
	          var containerBox = s.container[0].getBoundingClientRect();
	          var sideBefore = isH() ? 'left' : 'top';
	          var sideAfter = isH() ? 'right' : 'bottom';
	          s.slides.removeClass(s.params.slideVisibleClass);
	          for (var i = 0; i < s.slides.length; i++) {
	              var slide = s.slides[i];
	              var slideProgress = (offsetCenter - slide.swiperSlideOffset) / (slide.swiperSlideSize + s.params.spaceBetween);
	              if (s.params.watchSlidesVisibility) {
	                  var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
	                  var slideAfter = slideBefore + s.slidesSizesGrid[i];
	                  var isVisible =
	                      (slideBefore >= 0 && slideBefore < s.size) ||
	                      (slideAfter > 0 && slideAfter <= s.size) ||
	                      (slideBefore <= 0 && slideAfter >= s.size);
	                  if (isVisible) {
	                      s.slides.eq(i).addClass(s.params.slideVisibleClass);
	                  }
	              }
	              slide.progress = s.rtl ? -slideProgress : slideProgress;
	          }
	      };
	      s.updateProgress = function (translate) {
	          if (typeof translate === 'undefined') {
	              translate = s.translate || 0;
	          }
	          var translatesDiff = s.maxTranslate() - s.minTranslate();
	          if (translatesDiff === 0) {
	              s.progress = 0;
	              s.isBeginning = s.isEnd = true;
	          }
	          else {
	              s.progress = (translate - s.minTranslate()) / (translatesDiff);
	              s.isBeginning = s.progress <= 0;
	              s.isEnd = s.progress >= 1;
	          }
	          if (s.isBeginning) s.emit('onReachBeginning', s);
	          if (s.isEnd) s.emit('onReachEnd', s);

	          if (s.params.watchSlidesProgress) s.updateSlidesProgress(translate);
	          s.emit('onProgress', s, s.progress);
	      };
	      s.updateActiveIndex = function () {
	          var translate = s.rtl ? s.translate : -s.translate;
	          var newActiveIndex, i, snapIndex;
	          for (i = 0; i < s.slidesGrid.length; i ++) {
	              if (typeof s.slidesGrid[i + 1] !== 'undefined') {
	                  if (translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1] - (s.slidesGrid[i + 1] - s.slidesGrid[i]) / 2) {
	                      newActiveIndex = i;
	                  }
	                  else if (translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1]) {
	                      newActiveIndex = i + 1;
	                  }
	              }
	              else {
	                  if (translate >= s.slidesGrid[i]) {
	                      newActiveIndex = i;
	                  }
	              }
	          }
	          // Normalize slideIndex
	          if (newActiveIndex < 0 || typeof newActiveIndex === 'undefined') newActiveIndex = 0;
	          // for (i = 0; i < s.slidesGrid.length; i++) {
	              // if (- translate >= s.slidesGrid[i]) {
	                  // newActiveIndex = i;
	              // }
	          // }
	          snapIndex = Math.floor(newActiveIndex / s.params.slidesPerGroup);
	          if (snapIndex >= s.snapGrid.length) snapIndex = s.snapGrid.length - 1;

	          if (newActiveIndex === s.activeIndex) {
	              return;
	          }
	          s.snapIndex = snapIndex;
	          s.previousIndex = s.activeIndex;
	          s.activeIndex = newActiveIndex;
	          s.updateClasses();
	      };

	      /*=========================
	        Classes
	        ===========================*/
	      s.updateClasses = function () {
	          s.slides.removeClass(s.params.slideActiveClass + ' ' + s.params.slideNextClass + ' ' + s.params.slidePrevClass);
	          var activeSlide = s.slides.eq(s.activeIndex);
	          // Active classes
	          activeSlide.addClass(s.params.slideActiveClass);
	          activeSlide.next('.' + s.params.slideClass).addClass(s.params.slideNextClass);
	          activeSlide.prev('.' + s.params.slideClass).addClass(s.params.slidePrevClass);

	          // Pagination
	          if (s.bullets && s.bullets.length > 0) {
	              s.bullets.removeClass(s.params.bulletActiveClass);
	              var bulletIndex;
	              if (s.params.loop) {
	                  bulletIndex = Math.ceil(s.activeIndex - s.loopedSlides)/s.params.slidesPerGroup;
	                  if (bulletIndex > s.slides.length - 1 - s.loopedSlides * 2) {
	                      bulletIndex = bulletIndex - (s.slides.length - s.loopedSlides * 2);
	                  }
	                  if (bulletIndex > s.bullets.length - 1) bulletIndex = bulletIndex - s.bullets.length;
	              }
	              else {
	                  if (typeof s.snapIndex !== 'undefined') {
	                      bulletIndex = s.snapIndex;
	                  }
	                  else {
	                      bulletIndex = s.activeIndex || 0;
	                  }
	              }
	              if (s.paginationContainer.length > 1) {
	                  s.bullets.each(function () {
	                      if ($(this).index() === bulletIndex) $(this).addClass(s.params.bulletActiveClass);
	                  });
	              }
	              else {
	                  s.bullets.eq(bulletIndex).addClass(s.params.bulletActiveClass);
	              }
	          }

	          // Next/active buttons
	          if (!s.params.loop) {
	              if (s.params.prevButton) {
	                  if (s.isBeginning) {
	                      $(s.params.prevButton).addClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.disable($(s.params.prevButton));
	                  }
	                  else {
	                      $(s.params.prevButton).removeClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.enable($(s.params.prevButton));
	                  }
	              }
	              if (s.params.nextButton) {
	                  if (s.isEnd) {
	                      $(s.params.nextButton).addClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.disable($(s.params.nextButton));
	                  }
	                  else {
	                      $(s.params.nextButton).removeClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.enable($(s.params.nextButton));
	                  }
	              }
	          }
	      };

	      /*=========================
	        Pagination
	        ===========================*/
	      s.updatePagination = function () {
	          if (!s.params.pagination) return;
	          if (s.paginationContainer && s.paginationContainer.length > 0) {
	              var bulletsHTML = '';
	              var numberOfBullets = s.params.loop ? Math.ceil((s.slides.length - s.loopedSlides * 2) / s.params.slidesPerGroup) : s.snapGrid.length;
	              for (var i = 0; i < numberOfBullets; i++) {
	                  if (s.params.paginationBulletRender) {
	                      bulletsHTML += s.params.paginationBulletRender(i, s.params.bulletClass);
	                  }
	                  else {
	                      bulletsHTML += '<' + s.params.paginationElement+' class="' + s.params.bulletClass + '"></' + s.params.paginationElement + '>';
	                  }
	              }
	              s.paginationContainer.html(bulletsHTML);
	              s.bullets = s.paginationContainer.find('.' + s.params.bulletClass);
	              if (s.params.paginationClickable && s.params.a11y && s.a11y) {
	                  s.a11y.initPagination();
	              }
	          }
	      };
	      /*=========================
	        Common update method
	        ===========================*/
	      s.update = function (updateTranslate) {
	          s.updateContainerSize();
	          s.updateSlidesSize();
	          s.updateProgress();
	          s.updatePagination();
	          s.updateClasses();
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.set();
	          }
	          function forceSetTranslate() {
	              newTranslate = Math.min(Math.max(s.translate, s.maxTranslate()), s.minTranslate());
	              s.setWrapperTranslate(newTranslate);
	              s.updateActiveIndex();
	              s.updateClasses();
	          }
	          if (updateTranslate) {
	              var translated, newTranslate;
	              if (s.controller && s.controller.spline) {
	                  s.controller.spline = undefined;
	              }
	              if (s.params.freeMode) {
	                  forceSetTranslate();
	              }
	              else {
	                  if ((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides) {
	                      translated = s.slideTo(s.slides.length - 1, 0, false, true);
	                  }
	                  else {
	                      translated = s.slideTo(s.activeIndex, 0, false, true);
	                  }
	                  if (!translated) {
	                      forceSetTranslate();
	                  }
	              }

	          }
	      };

	      /*=========================
	        Resize Handler
	        ===========================*/
	      s.onResize = function (forceUpdatePagination) {
	          // Disable locks on resize
	          var allowSwipeToPrev = s.params.allowSwipeToPrev;
	          var allowSwipeToNext = s.params.allowSwipeToNext;
	          s.params.allowSwipeToPrev = s.params.allowSwipeToNext = true;

	          s.updateContainerSize();
	          s.updateSlidesSize();
	          if (s.params.slidesPerView === 'auto' || s.params.freeMode || forceUpdatePagination) s.updatePagination();
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.set();
	          }
	          if (s.controller && s.controller.spline) {
	              s.controller.spline = undefined;
	          }
	          if (s.params.freeMode) {
	              var newTranslate = Math.min(Math.max(s.translate, s.maxTranslate()), s.minTranslate());
	              s.setWrapperTranslate(newTranslate);
	              s.updateActiveIndex();
	              s.updateClasses();
	          }
	          else {
	              s.updateClasses();
	              if ((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides) {
	                  s.slideTo(s.slides.length - 1, 0, false, true);
	              }
	              else {
	                  s.slideTo(s.activeIndex, 0, false, true);
	              }
	          }
	          // Return locks after resize
	          s.params.allowSwipeToPrev = allowSwipeToPrev;
	          s.params.allowSwipeToNext = allowSwipeToNext;
	      };

	      /*=========================
	        Events
	        ===========================*/

	      //Define Touch Events
	      var desktopEvents = ['mousedown', 'mousemove', 'mouseup'];
	      if (window.navigator.pointerEnabled) desktopEvents = ['pointerdown', 'pointermove', 'pointerup'];
	      else if (window.navigator.msPointerEnabled) desktopEvents = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
	      s.touchEvents = {
	          start : s.support.touch || !s.params.simulateTouch  ? 'touchstart' : desktopEvents[0],
	          move : s.support.touch || !s.params.simulateTouch ? 'touchmove' : desktopEvents[1],
	          end : s.support.touch || !s.params.simulateTouch ? 'touchend' : desktopEvents[2]
	      };


	      // WP8 Touch Events Fix
	      if (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) {
	          (s.params.touchEventsTarget === 'container' ? s.container : s.wrapper).addClass('swiper-wp8-' + s.params.direction);
	      }

	      // Attach/detach events
	      s.initEvents = function (detach) {
	          console.debug('swiper initEvents', detach ? 'detach' : 'attach');
	          var actionDom = detach ? 'off' : 'on';
	          var action = detach ? 'removeEventListener' : 'addEventListener';
	          var touchEventsTarget = s.params.touchEventsTarget === 'container' ? s.container[0] : s.wrapper[0];
	          var target = s.support.touch ? touchEventsTarget : document;

	          var moveCapture = s.params.nested ? true : false;

	          //Touch Events
	          if (s.browser.ie) {
	              touchEventsTarget[action](s.touchEvents.start, s.onTouchStart, false);
	              target[action](s.touchEvents.move, s.onTouchMove, moveCapture);
	              target[action](s.touchEvents.end, s.onTouchEnd, false);
	          }
	          else {
	              if (s.support.touch) {
	                  touchEventsTarget[action](s.touchEvents.start, s.onTouchStart, false);
	                  touchEventsTarget[action](s.touchEvents.move, s.onTouchMove, moveCapture);
	                  touchEventsTarget[action](s.touchEvents.end, s.onTouchEnd, false);
	              }
	              if (params.simulateTouch && !s.device.ios && !s.device.android) {
	                  touchEventsTarget[action]('mousedown', s.onTouchStart, false);
	                  document[action]('mousemove', s.onTouchMove, moveCapture);
	                  document[action]('mouseup', s.onTouchEnd, false);
	              }
	          }
	          window[action]('resize', s.onResize);

	          // Next, Prev, Index
	          if (s.params.nextButton) {
	              $(s.params.nextButton)[actionDom]('click', s.onClickNext);
	              if (s.params.a11y && s.a11y) $(s.params.nextButton)[actionDom]('keydown', s.a11y.onEnterKey);
	          }
	          if (s.params.prevButton) {
	              $(s.params.prevButton)[actionDom]('click', s.onClickPrev);
	              if (s.params.a11y && s.a11y) $(s.params.prevButton)[actionDom]('keydown', s.a11y.onEnterKey);
	          }
	          if (s.params.pagination && s.params.paginationClickable) {
	              $(s.paginationContainer)[actionDom]('click', '.' + s.params.bulletClass, s.onClickIndex);
	              if (s.params.a11y && s.a11y) $(s.paginationContainer)[actionDom]('keydown', '.' + s.params.bulletClass, s.a11y.onEnterKey);
	          }

	          // Prevent Links Clicks
	          if (s.params.preventClicks || s.params.preventClicksPropagation) touchEventsTarget[action]('click', s.preventClicks, true);
	      };
	      s.attachEvents = function (detach) {
	          s.initEvents();
	      };
	      s.detachEvents = function () {
	          s.initEvents(true);
	      };

	      /*=========================
	        Handle Clicks
	        ===========================*/
	      // Prevent Clicks
	      s.allowClick = true;
	      s.preventClicks = function (e) {
	          if (!s.allowClick) {
	              if (s.params.preventClicks) e.preventDefault();
	              if (s.params.preventClicksPropagation && s.animating) {
	                  e.stopPropagation();
	                  e.stopImmediatePropagation();
	              }
	          }
	      };
	      // Clicks
	      s.onClickNext = function (e) {
	          e.preventDefault();
	          if (s.isEnd && !s.params.loop) return;
	          s.slideNext();
	      };
	      s.onClickPrev = function (e) {
	          e.preventDefault();
	          if (s.isBeginning && !s.params.loop) return;
	          s.slidePrev();
	      };
	      s.onClickIndex = function (e) {
	          e.preventDefault();
	          var index = $(this).index() * s.params.slidesPerGroup;
	          if (s.params.loop) index = index + s.loopedSlides;
	          s.slideTo(index);
	      };

	      /*=========================
	        Handle Touches
	        ===========================*/
	      function findElementInEvent(e, selector) {
	          var el = $(e.target);
	          if (!el.is(selector)) {
	              if (typeof selector === 'string') {
	                  el = el.parents(selector);
	              }
	              else if (selector.nodeType) {
	                  var found;
	                  el.parents().each(function (index, _el) {
	                      if (_el === selector) found = selector;
	                  });
	                  if (!found) return undefined;
	                  else return selector;
	              }
	          }
	          if (el.length === 0) {
	              return undefined;
	          }
	          return el[0];
	      }
	      s.updateClickedSlide = function (e) {
	          var slide = findElementInEvent(e, '.' + s.params.slideClass);
	          var slideFound = false;
	          if (slide) {
	              for (var i = 0; i < s.slides.length; i++) {
	                  if (s.slides[i] === slide) slideFound = true;
	              }
	          }

	          if (slide && slideFound) {
	              s.clickedSlide = slide;
	              s.clickedIndex = $(slide).index();
	          }
	          else {
	              s.clickedSlide = undefined;
	              s.clickedIndex = undefined;
	              return;
	          }
	          if (s.params.slideToClickedSlide && s.clickedIndex !== undefined && s.clickedIndex !== s.activeIndex) {
	              var slideToIndex = s.clickedIndex,
	                  realIndex;
	              if (s.params.loop) {
	                  realIndex = $(s.clickedSlide).attr('data-swiper-slide-index');
	                  if (slideToIndex > s.slides.length - s.params.slidesPerView) {
	                      s.fixLoop();
	                      slideToIndex = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]').eq(0).index();
	                      setTimeout(function () {
	                          s.slideTo(slideToIndex);
	                      }, 0);
	                  }
	                  else if (slideToIndex < s.params.slidesPerView - 1) {
	                      s.fixLoop();
	                      var duplicatedSlides = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]');
	                      slideToIndex = duplicatedSlides.eq(duplicatedSlides.length - 1).index();
	                      setTimeout(function () {
	                          s.slideTo(slideToIndex);
	                      }, 0);
	                  }
	                  else {
	                      s.slideTo(slideToIndex);
	                  }
	              }
	              else {
	                  s.slideTo(slideToIndex);
	              }
	          }
	      };

	      var isTouched,
	          isMoved,
	          touchStartTime,
	          isScrolling,
	          currentTranslate,
	          startTranslate,
	          allowThresholdMove,
	          // Form elements to match
	          formElements = 'input, select, textarea, button',
	          // Last click time
	          lastClickTime = Date.now(), clickTimeout,
	          //Velocities
	          velocities = [],
	          allowMomentumBounce;

	      // Animating Flag
	      s.animating = false;

	      // Touches information
	      s.touches = {
	          startX: 0,
	          startY: 0,
	          currentX: 0,
	          currentY: 0,
	          diff: 0
	      };

	      // Touch handlers
	      var isTouchEvent, startMoving;
	      s.onTouchStart = function (e) {
	          if (e.originalEvent) e = e.originalEvent;
	          isTouchEvent = e.type === 'touchstart';
	          if (!isTouchEvent && 'which' in e && e.which === 3) return;
	          if (s.params.noSwiping && findElementInEvent(e, '.' + s.params.noSwipingClass)) {
	              s.allowClick = true;
	              return;
	          }
	          if (s.params.swipeHandler) {
	              if (!findElementInEvent(e, s.params.swipeHandler)) return;
	          }

	          var startX = s.touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
	          var startY = s.touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;

	          // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
	          if(s.device.ios && s.params.iOSEdgeSwipeDetection && startX <= s.params.iOSEdgeSwipeThreshold) {
	              return;
	          }

	          isTouched = true;
	          isMoved = false;
	          isScrolling = undefined;
	          startMoving = undefined;
	          s.touches.startX = startX;
	          s.touches.startY = startY;
	          touchStartTime = Date.now();
	          s.allowClick = true;
	          s.updateContainerSize();
	          s.swipeDirection = undefined;
	          if (s.params.threshold > 0) allowThresholdMove = false;
	          if (e.type !== 'touchstart') {
	              var preventDefault = true;
	              if ($(e.target).is(formElements)) preventDefault = false;
	              if (document.activeElement && $(document.activeElement).is(formElements)) {
	                  document.activeElement.blur();
	              }
	              if (preventDefault) {
	                  e.preventDefault();
	              }
	          }
	          s.emit('onTouchStart', s, e);
	      };

	      s.onTouchMove = function (e) {
	          if (e.originalEvent) e = e.originalEvent;
	          if (isTouchEvent && e.type === 'mousemove') return;
	          if (e.preventedByNestedSwiper) return;
	          if (s.params.onlyExternal) {
	              // isMoved = true;
	              s.allowClick = false;
	              if (isTouched) {
	                  s.touches.startX = s.touches.currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
	                  s.touches.startY = s.touches.currentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
	                  touchStartTime = Date.now();
	              }
	              return;
	          }
	          if (isTouchEvent && document.activeElement) {
	              if (e.target === document.activeElement && $(e.target).is(formElements)) {
	                  isMoved = true;
	                  s.allowClick = false;
	                  return;
	              }
	          }

	          s.emit('onTouchMove', s, e);

	          if (e.targetTouches && e.targetTouches.length > 1) return;

	          s.touches.currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
	          s.touches.currentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

	          if (typeof isScrolling === 'undefined') {
	              var touchAngle = Math.atan2(Math.abs(s.touches.currentY - s.touches.startY), Math.abs(s.touches.currentX - s.touches.startX)) * 180 / Math.PI;
	              isScrolling = isH() ? touchAngle > s.params.touchAngle : (90 - touchAngle > s.params.touchAngle);
	          }
	          if (isScrolling) {
	              s.emit('onTouchMoveOpposite', s, e);
	          }
	          if (typeof startMoving === 'undefined' && s.browser.ieTouch) {
	              if (s.touches.currentX !== s.touches.startX || s.touches.currentY !== s.touches.startY) {
	                  startMoving = true;
	              }
	          }
	          if (!isTouched) return;
	          if (isScrolling)  {
	              isTouched = false;
	              return;
	          }
	          if (!startMoving && s.browser.ieTouch) {
	              return;
	          }
	          s.allowClick = false;
	          s.emit('onSliderMove', s, e);
	          e.preventDefault();
	          if (s.params.touchMoveStopPropagation && !s.params.nested) {
	              e.stopPropagation();
	          }

	          if (!isMoved) {
	              if (params.loop) {
	                  s.fixLoop();
	              }
	              startTranslate = s.getWrapperTranslate();
	              s.setWrapperTransition(0);
	              if (s.animating) {
	                  s.wrapper.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');
	              }
	              if (s.params.autoplay && s.autoplaying) {
	                  if (s.params.autoplayDisableOnInteraction) {
	                      s.stopAutoplay();
	                  }
	                  else {
	                      s.pauseAutoplay();
	                  }
	              }
	              allowMomentumBounce = false;
	              //Grab Cursor
	              if (s.params.grabCursor) {
	                  s.container[0].style.cursor = 'move';
	                  s.container[0].style.cursor = '-webkit-grabbing';
	                  s.container[0].style.cursor = '-moz-grabbin';
	                  s.container[0].style.cursor = 'grabbing';
	              }
	          }
	          isMoved = true;

	          var diff = s.touches.diff = isH() ? s.touches.currentX - s.touches.startX : s.touches.currentY - s.touches.startY;

	          diff = diff * s.params.touchRatio;
	          if (s.rtl) diff = -diff;

	          s.swipeDirection = diff > 0 ? 'prev' : 'next';
	          currentTranslate = diff + startTranslate;

	          var disableParentSwiper = true;
	          if ((diff > 0 && currentTranslate > s.minTranslate())) {
	              disableParentSwiper = false;
	              if (s.params.resistance) currentTranslate = s.minTranslate() - 1 + Math.pow(-s.minTranslate() + startTranslate + diff, s.params.resistanceRatio);
	          }
	          else if (diff < 0 && currentTranslate < s.maxTranslate()) {
	              disableParentSwiper = false;
	              if (s.params.resistance) currentTranslate = s.maxTranslate() + 1 - Math.pow(s.maxTranslate() - startTranslate - diff, s.params.resistanceRatio);
	          }

	          if (disableParentSwiper) {
	              e.preventedByNestedSwiper = true;
	          }

	          // Directions locks
	          if (!s.params.allowSwipeToNext && s.swipeDirection === 'next' && currentTranslate < startTranslate) {
	              currentTranslate = startTranslate;
	          }
	          if (!s.params.allowSwipeToPrev && s.swipeDirection === 'prev' && currentTranslate > startTranslate) {
	              currentTranslate = startTranslate;
	          }

	          if (!s.params.followFinger) return;

	          // Threshold
	          if (s.params.threshold > 0) {
	              if (Math.abs(diff) > s.params.threshold || allowThresholdMove) {
	                  if (!allowThresholdMove) {
	                      allowThresholdMove = true;
	                      s.touches.startX = s.touches.currentX;
	                      s.touches.startY = s.touches.currentY;
	                      currentTranslate = startTranslate;
	                      s.touches.diff = isH() ? s.touches.currentX - s.touches.startX : s.touches.currentY - s.touches.startY;
	                      return;
	                  }
	              }
	              else {
	                  currentTranslate = startTranslate;
	                  return;
	              }
	          }
	          // Update active index in free mode
	          if (s.params.freeMode || s.params.watchSlidesProgress) {
	              s.updateActiveIndex();
	          }
	          if (s.params.freeMode) {
	              //Velocity
	              if (velocities.length === 0) {
	                  velocities.push({
	                      position: s.touches[isH() ? 'startX' : 'startY'],
	                      time: touchStartTime
	                  });
	              }
	              velocities.push({
	                  position: s.touches[isH() ? 'currentX' : 'currentY'],
	                  time: (new window.Date()).getTime()
	              });
	          }
	          // Update progress
	          s.updateProgress(currentTranslate);
	          // Update translate
	          s.setWrapperTranslate(currentTranslate);
	      };
	      s.onTouchEnd = function (e) {
	          if (e.originalEvent) e = e.originalEvent;
	          s.emit('onTouchEnd', s, e);
	          if (!isTouched) return;
	          //Return Grab Cursor
	          if (s.params.grabCursor && isMoved && isTouched) {
	              s.container[0].style.cursor = 'move';
	              s.container[0].style.cursor = '-webkit-grab';
	              s.container[0].style.cursor = '-moz-grab';
	              s.container[0].style.cursor = 'grab';
	          }

	          // Time diff
	          var touchEndTime = Date.now();
	          var timeDiff = touchEndTime - touchStartTime;

	          // Tap, doubleTap, Click
	          if (s.allowClick) {
	              s.updateClickedSlide(e);
	              s.emit('onTap', s, e);
	              if (timeDiff < 300 && (touchEndTime - lastClickTime) > 300) {
	                  if (clickTimeout) clearTimeout(clickTimeout);
	                  clickTimeout = setTimeout(function () {
	                      if (!s) return;
	                      if (s.params.paginationHide && s.paginationContainer.length > 0 && !$(e.target).hasClass(s.params.bulletClass)) {
	                          s.paginationContainer.toggleClass(s.params.paginationHiddenClass);
	                      }
	                      s.emit('onClick', s, e);
	                  }, 300);

	              }
	              if (timeDiff < 300 && (touchEndTime - lastClickTime) < 300) {
	                  if (clickTimeout) clearTimeout(clickTimeout);
	                  s.emit('onDoubleTap', s, e);
	              }
	          }

	          lastClickTime = Date.now();
	          setTimeout(function () {
	              if (s) s.allowClick = true;
	          }, 0);

	          if (!isTouched || !isMoved || !s.swipeDirection || s.touches.diff === 0 || currentTranslate === startTranslate) {
	              isTouched = isMoved = false;
	              return;
	          }
	          isTouched = isMoved = false;

	          var currentPos;
	          if (s.params.followFinger) {
	              currentPos = s.rtl ? s.translate : -s.translate;
	          }
	          else {
	              currentPos = -currentTranslate;
	          }
	          if (s.params.freeMode) {
	              if (currentPos < -s.minTranslate()) {
	                  s.slideTo(s.activeIndex);
	                  return;
	              }
	              else if (currentPos > -s.maxTranslate()) {
	                  if (s.slides.length < s.snapGrid.length) {
	                      s.slideTo(s.snapGrid.length - 1);
	                  }
	                  else {
	                      s.slideTo(s.slides.length - 1);
	                  }
	                  return;
	              }

	              if (s.params.freeModeMomentum) {
	                  if (velocities.length > 1) {
	                      var lastMoveEvent = velocities.pop(), velocityEvent = velocities.pop();

	                      var distance = lastMoveEvent.position - velocityEvent.position;
	                      var time = lastMoveEvent.time - velocityEvent.time;
	                      s.velocity = distance / time;
	                      s.velocity = s.velocity / 2;
	                      if (Math.abs(s.velocity) < 0.02) {
	                          s.velocity = 0;
	                      }
	                      // this implies that the user stopped moving a finger then released.
	                      // There would be no events with distance zero, so the last event is stale.
	                      if (time > 150 || (new window.Date().getTime() - lastMoveEvent.time) > 300) {
	                          s.velocity = 0;
	                      }
	                  } else {
	                      s.velocity = 0;
	                  }

	                  velocities.length = 0;
	                  var momentumDuration = 1000 * s.params.freeModeMomentumRatio;
	                  var momentumDistance = s.velocity * momentumDuration;

	                  var newPosition = s.translate + momentumDistance;
	                  if (s.rtl) newPosition = - newPosition;
	                  var doBounce = false;
	                  var afterBouncePosition;
	                  var bounceAmount = Math.abs(s.velocity) * 20 * s.params.freeModeMomentumBounceRatio;
	                  if (newPosition < s.maxTranslate()) {
	                      if (s.params.freeModeMomentumBounce) {
	                          if (newPosition + s.maxTranslate() < -bounceAmount) {
	                              newPosition = s.maxTranslate() - bounceAmount;
	                          }
	                          afterBouncePosition = s.maxTranslate();
	                          doBounce = true;
	                          allowMomentumBounce = true;
	                      }
	                      else {
	                          newPosition = s.maxTranslate();
	                      }
	                  }
	                  else if (newPosition > s.minTranslate()) {
	                      if (s.params.freeModeMomentumBounce) {
	                          if (newPosition - s.minTranslate() > bounceAmount) {
	                              newPosition = s.minTranslate() + bounceAmount;
	                          }
	                          afterBouncePosition = s.minTranslate();
	                          doBounce = true;
	                          allowMomentumBounce = true;
	                      }
	                      else {
	                          newPosition = s.minTranslate();
	                      }
	                  }
	                  else if (s.params.freeModeSticky) {
	                      var j = 0,
	                          nextSlide;
	                      for (j = 0; j < s.snapGrid.length; j += 1) {
	                          if (s.snapGrid[j] > -newPosition) {
	                              nextSlide = j;
	                              break;
	                          }

	                      }
	                      if (Math.abs(s.snapGrid[nextSlide] - newPosition) < Math.abs(s.snapGrid[nextSlide - 1] - newPosition) || s.swipeDirection === 'next') {
	                          newPosition = s.snapGrid[nextSlide];
	                      } else {
	                          newPosition = s.snapGrid[nextSlide - 1];
	                      }
	                      if (!s.rtl) newPosition = - newPosition;
	                  }
	                  //Fix duration
	                  if (s.velocity !== 0) {
	                      if (s.rtl) {
	                          momentumDuration = Math.abs((-newPosition - s.translate) / s.velocity);
	                      }
	                      else {
	                          momentumDuration = Math.abs((newPosition - s.translate) / s.velocity);
	                      }
	                  }
	                  else if (s.params.freeModeSticky) {
	                      s.slideReset();
	                      return;
	                  }

	                  if (s.params.freeModeMomentumBounce && doBounce) {
	                      s.updateProgress(afterBouncePosition);
	                      s.setWrapperTransition(momentumDuration);
	                      s.setWrapperTranslate(newPosition);
	                      s.onTransitionStart();
	                      s.animating = true;
	                      s.wrapper.transitionEnd(function () {
	                          if (!s || !allowMomentumBounce) return;
	                          s.emit('onMomentumBounce', s);

	                          s.setWrapperTransition(s.params.speed);
	                          s.setWrapperTranslate(afterBouncePosition);
	                          s.wrapper.transitionEnd(function () {
	                              if (!s) return;
	                              s.onTransitionEnd();
	                          });
	                      });
	                  } else if (s.velocity) {
	                      s.updateProgress(newPosition);
	                      s.setWrapperTransition(momentumDuration);
	                      s.setWrapperTranslate(newPosition);
	                      s.onTransitionStart();
	                      if (!s.animating) {
	                          s.animating = true;
	                          s.wrapper.transitionEnd(function () {
	                              if (!s) return;
	                              s.onTransitionEnd();
	                          });
	                      }

	                  } else {
	                      s.updateProgress(newPosition);
	                  }

	                  s.updateActiveIndex();
	              }
	              if (!s.params.freeModeMomentum || timeDiff >= s.params.longSwipesMs) {
	                  s.updateProgress();
	                  s.updateActiveIndex();
	              }
	              return;
	          }

	          // Find current slide
	          var i, stopIndex = 0, groupSize = s.slidesSizesGrid[0];
	          for (i = 0; i < s.slidesGrid.length; i += s.params.slidesPerGroup) {
	              if (typeof s.slidesGrid[i + s.params.slidesPerGroup] !== 'undefined') {
	                  if (currentPos >= s.slidesGrid[i] && currentPos < s.slidesGrid[i + s.params.slidesPerGroup]) {
	                      stopIndex = i;
	                      groupSize = s.slidesGrid[i + s.params.slidesPerGroup] - s.slidesGrid[i];
	                  }
	              }
	              else {
	                  if (currentPos >= s.slidesGrid[i]) {
	                      stopIndex = i;
	                      groupSize = s.slidesGrid[s.slidesGrid.length - 1] - s.slidesGrid[s.slidesGrid.length - 2];
	                  }
	              }
	          }

	          // Find current slide size
	          var ratio = (currentPos - s.slidesGrid[stopIndex]) / groupSize;

	          if (timeDiff > s.params.longSwipesMs) {
	              // Long touches
	              if (!s.params.longSwipes) {
	                  s.slideTo(s.activeIndex);
	                  return;
	              }
	              if (s.swipeDirection === 'next') {
	                  if (ratio >= s.params.longSwipesRatio) s.slideTo(stopIndex + s.params.slidesPerGroup);
	                  else s.slideTo(stopIndex);

	              }
	              if (s.swipeDirection === 'prev') {
	                  if (ratio > (1 - s.params.longSwipesRatio)) s.slideTo(stopIndex + s.params.slidesPerGroup);
	                  else s.slideTo(stopIndex);
	              }
	          }
	          else {
	              // Short swipes
	              if (!s.params.shortSwipes) {
	                  s.slideTo(s.activeIndex);
	                  return;
	              }
	              if (s.swipeDirection === 'next') {
	                  s.slideTo(stopIndex + s.params.slidesPerGroup);

	              }
	              if (s.swipeDirection === 'prev') {
	                  s.slideTo(stopIndex);
	              }
	          }
	      };
	      /*=========================
	        Transitions
	        ===========================*/
	      s._slideTo = function (slideIndex, speed) {
	          return s.slideTo(slideIndex, speed, true, true);
	      };
	      s.slideTo = function (slideIndex, speed, runCallbacks, internal) {
	          if (typeof runCallbacks === 'undefined') runCallbacks = true;
	          if (typeof slideIndex === 'undefined') slideIndex = 0;
	          if (slideIndex < 0) slideIndex = 0;
	          s.snapIndex = Math.floor(slideIndex / s.params.slidesPerGroup);
	          if (s.snapIndex >= s.snapGrid.length) s.snapIndex = s.snapGrid.length - 1;

	          var translate = - s.snapGrid[s.snapIndex];

	          // Stop autoplay
	          if (s.params.autoplay && s.autoplaying) {
	              if (internal || !s.params.autoplayDisableOnInteraction) {
	                  s.pauseAutoplay(speed);
	              }
	              else {
	                  s.stopAutoplay();
	              }
	          }
	          // Update progress
	          s.updateProgress(translate);

	          // Normalize slideIndex
	          for (var i = 0; i < s.slidesGrid.length; i++) {
	              if (- Math.floor(translate * 100) >= Math.floor(s.slidesGrid[i] * 100)) {
	                  slideIndex = i;
	              }
	          }

	          // Directions locks
	          if (!s.params.allowSwipeToNext && translate < s.translate && translate < s.minTranslate()) {
	              return false;
	          }
	          if (!s.params.allowSwipeToPrev && translate > s.translate && translate > s.maxTranslate()) {
	              if ((s.activeIndex || 0) !== slideIndex ) return false;
	          }

	          // Update Index
	          if (typeof speed === 'undefined') speed = s.params.speed;
	          s.previousIndex = s.activeIndex || 0;
	          s.activeIndex = slideIndex;

	          if (translate === s.translate) {
	              s.updateClasses();
	              return false;
	          }
	          s.updateClasses();
	          s.onTransitionStart(runCallbacks);
	          var translateX = isH() ? translate : 0, translateY = isH() ? 0 : translate;
	          if (speed === 0) {
	              s.setWrapperTransition(0);
	              s.setWrapperTranslate(translate);
	              s.onTransitionEnd(runCallbacks);
	          }
	          else {
	              s.setWrapperTransition(speed);
	              s.setWrapperTranslate(translate);
	              if (!s.animating) {
	                  s.animating = true;
	                  s.wrapper.transitionEnd(function () {
	                      if (!s) return;
	                      s.onTransitionEnd(runCallbacks);
	                  });
	              }

	          }

	          return true;
	      };

	      s.onTransitionStart = function (runCallbacks) {
	          if (typeof runCallbacks === 'undefined') runCallbacks = true;
	          if (s.lazy) s.lazy.onTransitionStart();
	          if (runCallbacks) {
	              s.emit('onTransitionStart', s);
	              if (s.activeIndex !== s.previousIndex) {
	                  s.emit('onSlideChangeStart', s);
	              }
	          }
	      };
	      s.onTransitionEnd = function (runCallbacks) {
	          s.animating = false;
	          s.setWrapperTransition(0);
	          if (typeof runCallbacks === 'undefined') runCallbacks = true;
	          if (s.lazy) s.lazy.onTransitionEnd();
	          if (runCallbacks) {
	              s.emit('onTransitionEnd', s);
	              if (s.activeIndex !== s.previousIndex) {
	                  s.emit('onSlideChangeEnd', s);
	              }
	          }
	          if (s.params.hashnav && s.hashnav) {
	              s.hashnav.setHash();
	          }

	      };
	      s.slideNext = function (runCallbacks, speed, internal) {
	          if (s.params.loop) {
	              if (s.animating) return false;
	              s.fixLoop();
	              var clientLeft = s.container[0].clientLeft;
	              return s.slideTo(s.activeIndex + s.params.slidesPerGroup, speed, runCallbacks, internal);
	          }
	          else return s.slideTo(s.activeIndex + s.params.slidesPerGroup, speed, runCallbacks, internal);
	      };
	      s._slideNext = function (speed) {
	          return s.slideNext(true, speed, true);
	      };
	      s.slidePrev = function (runCallbacks, speed, internal) {
	          if (s.params.loop) {
	              if (s.animating) return false;
	              s.fixLoop();
	              var clientLeft = s.container[0].clientLeft;
	              return s.slideTo(s.activeIndex - 1, speed, runCallbacks, internal);
	          }
	          else return s.slideTo(s.activeIndex - 1, speed, runCallbacks, internal);
	      };
	      s._slidePrev = function (speed) {
	          return s.slidePrev(true, speed, true);
	      };
	      s.slideReset = function (runCallbacks, speed, internal) {
	          return s.slideTo(s.activeIndex, speed, runCallbacks);
	      };

	      /*=========================
	        Translate/transition helpers
	        ===========================*/
	      s.setWrapperTransition = function (duration, byController) {
	          s.wrapper.transition(duration);
	          if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {
	              s.effects[s.params.effect].setTransition(duration);
	          }
	          if (s.params.parallax && s.parallax) {
	              s.parallax.setTransition(duration);
	          }
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.setTransition(duration);
	          }
	          if (s.params.control && s.controller) {
	              s.controller.setTransition(duration, byController);
	          }
	          s.emit('onSetTransition', s, duration);
	      };
	      s.setWrapperTranslate = function (translate, updateActiveIndex, byController) {
	          var x = 0, y = 0, z = 0;
	          if (isH()) {
	              x = s.rtl ? -translate : translate;
	          }
	          else {
	              y = translate;
	          }
	          if (!s.params.virtualTranslate) {
	              if (s.support.transforms3d) s.wrapper.transform('translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)');
	              else s.wrapper.transform('translate(' + x + 'px, ' + y + 'px)');
	          }

	          s.translate = isH() ? x : y;

	          if (updateActiveIndex) s.updateActiveIndex();
	          if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {
	              s.effects[s.params.effect].setTranslate(s.translate);
	          }
	          if (s.params.parallax && s.parallax) {
	              s.parallax.setTranslate(s.translate);
	          }
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.setTranslate(s.translate);
	          }
	          if (s.params.control && s.controller) {
	              s.controller.setTranslate(s.translate, byController);
	          }
	          s.emit('onSetTranslate', s, s.translate);
	      };

	      s.getTranslate = function (el, axis) {
	          var matrix, curTransform, curStyle, transformMatrix;

	          // automatic axis detection
	          if (typeof axis === 'undefined') {
	              axis = 'x';
	          }

	          if (s.params.virtualTranslate) {
	              return s.rtl ? -s.translate : s.translate;
	          }

	          curStyle = window.getComputedStyle(el, null);
	          if (window.WebKitCSSMatrix) {
	              // Some old versions of Webkit choke when 'none' is passed; pass
	              // empty string instead in this case
	              transformMatrix = new window.WebKitCSSMatrix(curStyle.webkitTransform === 'none' ? '' : curStyle.webkitTransform);
	          }
	          else {
	              transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform  || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
	              matrix = transformMatrix.toString().split(',');
	          }

	          if (axis === 'x') {
	              //Latest Chrome and webkits Fix
	              if (window.WebKitCSSMatrix)
	                  curTransform = transformMatrix.m41;
	              //Crazy IE10 Matrix
	              else if (matrix.length === 16)
	                  curTransform = parseFloat(matrix[12]);
	              //Normal Browsers
	              else
	                  curTransform = parseFloat(matrix[4]);
	          }
	          if (axis === 'y') {
	              //Latest Chrome and webkits Fix
	              if (window.WebKitCSSMatrix)
	                  curTransform = transformMatrix.m42;
	              //Crazy IE10 Matrix
	              else if (matrix.length === 16)
	                  curTransform = parseFloat(matrix[13]);
	              //Normal Browsers
	              else
	                  curTransform = parseFloat(matrix[5]);
	          }
	          if (s.rtl && curTransform) curTransform = -curTransform;
	          return curTransform || 0;
	      };
	      s.getWrapperTranslate = function (axis) {
	          if (typeof axis === 'undefined') {
	              axis = isH() ? 'x' : 'y';
	          }
	          return s.getTranslate(s.wrapper[0], axis);
	      };

	      /*=========================
	        Observer
	        ===========================*/
	      s.observers = [];
	      function initObserver(target, options) {
	          options = options || {};
	          // create an observer instance
	          var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
	          var observer = new ObserverFunc(function (mutations) {
	              mutations.forEach(function (mutation) {
	                  s.onResize(true);
	                  s.emit('onObserverUpdate', s, mutation);
	              });
	          });

	          observer.observe(target, {
	              attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
	              childList: typeof options.childList === 'undefined' ? true : options.childList,
	              characterData: typeof options.characterData === 'undefined' ? true : options.characterData
	          });

	          s.observers.push(observer);
	      }
	      s.initObservers = function () {
	          if (s.params.observeParents) {
	              var containerParents = s.container.parents();
	              for (var i = 0; i < containerParents.length; i++) {
	                  initObserver(containerParents[i]);
	              }
	          }

	          // Observe container
	          initObserver(s.container[0], {childList: false});

	          // Observe wrapper
	          initObserver(s.wrapper[0], {attributes: false});
	      };
	      s.disconnectObservers = function () {
	          for (var i = 0; i < s.observers.length; i++) {
	              s.observers[i].disconnect();
	          }
	          s.observers = [];
	      };
	      /*=========================
	        Loop
	        ===========================*/
	      // Create looped slides
	      s.createLoop = function () {
	          // Remove duplicated slides
	          s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();

	          var slides = s.wrapper.children('.' + s.params.slideClass);

	          if(s.params.slidesPerView === 'auto' && !s.params.loopedSlides) s.params.loopedSlides = slides.length;

	          s.loopedSlides = parseInt(s.params.loopedSlides || s.params.slidesPerView, 10);
	          s.loopedSlides = s.loopedSlides + s.params.loopAdditionalSlides;
	          if (s.loopedSlides > slides.length) {
	              s.loopedSlides = slides.length;
	          }

	          var prependSlides = [], appendSlides = [], i;
	          slides.each(function (index, el) {
	              var slide = $(this);
	              if (index < s.loopedSlides) appendSlides.push(el);
	              if (index < slides.length && index >= slides.length - s.loopedSlides) prependSlides.push(el);
	              slide.attr('data-swiper-slide-index', index);
	          });
	          for (i = 0; i < appendSlides.length; i++) {
	              s.wrapper.append($(appendSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));
	          }
	          for (i = prependSlides.length - 1; i >= 0; i--) {
	              s.wrapper.prepend($(prependSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));
	          }
	      };
	      s.destroyLoop = function () {
	          s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();
	          s.slides.removeAttr('data-swiper-slide-index');
	      };
	      s.fixLoop = function () {
	          var newIndex;
	          //Fix For Negative Oversliding
	          if (s.activeIndex < s.loopedSlides) {
	              newIndex = s.slides.length - s.loopedSlides * 3 + s.activeIndex;
	              newIndex = newIndex + s.loopedSlides;
	              s.slideTo(newIndex, 0, false, true);
	          }
	          //Fix For Positive Oversliding
	          else if ((s.params.slidesPerView === 'auto' && s.activeIndex >= s.loopedSlides * 2) || (s.activeIndex > s.slides.length - s.params.slidesPerView * 2)) {
	              newIndex = -s.slides.length + s.activeIndex + s.loopedSlides;
	              newIndex = newIndex + s.loopedSlides;
	              s.slideTo(newIndex, 0, false, true);
	          }
	      };
	      /*=========================
	        Append/Prepend/Remove Slides
	        ===========================*/
	      s.appendSlide = function (slides) {
	          if (s.params.loop) {
	              s.destroyLoop();
	          }
	          if (typeof slides === 'object' && slides.length) {
	              for (var i = 0; i < slides.length; i++) {
	                  if (slides[i]) s.wrapper.append(slides[i]);
	              }
	          }
	          else {
	              s.wrapper.append(slides);
	          }
	          if (s.params.loop) {
	              s.createLoop();
	          }
	          if (!(s.params.observer && s.support.observer)) {
	              s.update(true);
	          }
	      };
	      s.prependSlide = function (slides) {
	          if (s.params.loop) {
	              s.destroyLoop();
	          }
	          var newActiveIndex = s.activeIndex + 1;
	          if (typeof slides === 'object' && slides.length) {
	              for (var i = 0; i < slides.length; i++) {
	                  if (slides[i]) s.wrapper.prepend(slides[i]);
	              }
	              newActiveIndex = s.activeIndex + slides.length;
	          }
	          else {
	              s.wrapper.prepend(slides);
	          }
	          if (s.params.loop) {
	              s.createLoop();
	          }
	          if (!(s.params.observer && s.support.observer)) {
	              s.update(true);
	          }
	          s.slideTo(newActiveIndex, 0, false);
	      };
	      s.removeSlide = function (slidesIndexes) {
	          if (s.params.loop) {
	              s.destroyLoop();
	              s.slides = s.wrapper.children('.' + s.params.slideClass);
	          }
	          var newActiveIndex = s.activeIndex,
	              indexToRemove;
	          if (typeof slidesIndexes === 'object' && slidesIndexes.length) {
	              for (var i = 0; i < slidesIndexes.length; i++) {
	                  indexToRemove = slidesIndexes[i];
	                  if (s.slides[indexToRemove]) s.slides.eq(indexToRemove).remove();
	                  if (indexToRemove < newActiveIndex) newActiveIndex--;
	              }
	              newActiveIndex = Math.max(newActiveIndex, 0);
	          }
	          else {
	              indexToRemove = slidesIndexes;
	              if (s.slides[indexToRemove]) s.slides.eq(indexToRemove).remove();
	              if (indexToRemove < newActiveIndex) newActiveIndex--;
	              newActiveIndex = Math.max(newActiveIndex, 0);
	          }

	          if (s.params.loop) {
	              s.createLoop();
	          }

	          if (!(s.params.observer && s.support.observer)) {
	              s.update(true);
	          }
	          if (s.params.loop) {
	              s.slideTo(newActiveIndex + s.loopedSlides, 0, false);
	          }
	          else {
	              s.slideTo(newActiveIndex, 0, false);
	          }

	      };
	      s.removeAllSlides = function () {
	          var slidesIndexes = [];
	          for (var i = 0; i < s.slides.length; i++) {
	              slidesIndexes.push(i);
	          }
	          s.removeSlide(slidesIndexes);
	      };


	      /*=========================
	        Effects
	        ===========================*/
	      s.effects = {
	          fade: {
	              setTranslate: function () {
	                  for (var i = 0; i < s.slides.length; i++) {
	                      var slide = s.slides.eq(i);
	                      var offset = slide[0].swiperSlideOffset;
	                      var tx = -offset;
	                      if (!s.params.virtualTranslate) tx = tx - s.translate;
	                      var ty = 0;
	                      if (!isH()) {
	                          ty = tx;
	                          tx = 0;
	                      }
	                      var slideOpacity = s.params.fade.crossFade ?
	                              Math.max(1 - Math.abs(slide[0].progress), 0) :
	                              1 + Math.min(Math.max(slide[0].progress, -1), 0);
	                      slide
	                          .css({
	                              opacity: slideOpacity
	                          })
	                          .transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px)');

	                  }

	              },
	              setTransition: function (duration) {
	                  s.slides.transition(duration);
	                  if (s.params.virtualTranslate && duration !== 0) {
	                      var eventTriggered = false;
	                      s.slides.transitionEnd(function () {
	                          if (eventTriggered) return;
	                          if (!s) return;
	                          eventTriggered = true;
	                          s.animating = false;
	                          var triggerEvents = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'];
	                          for (var i = 0; i < triggerEvents.length; i++) {
	                              s.wrapper.trigger(triggerEvents[i]);
	                          }
	                      });
	                  }
	              }
	          },
	          cube: {
	              setTranslate: function () {
	                  var wrapperRotate = 0, cubeShadow;
	                  if (s.params.cube.shadow) {
	                      if (isH()) {
	                          cubeShadow = s.wrapper.find('.swiper-cube-shadow');
	                          if (cubeShadow.length === 0) {
	                              cubeShadow = $('<div class="swiper-cube-shadow"></div>');
	                              s.wrapper.append(cubeShadow);
	                          }
	                          cubeShadow.css({height: s.width + 'px'});
	                      }
	                      else {
	                          cubeShadow = s.container.find('.swiper-cube-shadow');
	                          if (cubeShadow.length === 0) {
	                              cubeShadow = $('<div class="swiper-cube-shadow"></div>');
	                              s.container.append(cubeShadow);
	                          }
	                      }
	                  }
	                  for (var i = 0; i < s.slides.length; i++) {
	                      var slide = s.slides.eq(i);
	                      var slideAngle = i * 90;
	                      var round = Math.floor(slideAngle / 360);
	                      if (s.rtl) {
	                          slideAngle = -slideAngle;
	                          round = Math.floor(-slideAngle / 360);
	                      }
	                      var progress = Math.max(Math.min(slide[0].progress, 1), -1);
	                      var tx = 0, ty = 0, tz = 0;
	                      if (i % 4 === 0) {
	                          tx = - round * 4 * s.size;
	                          tz = 0;
	                      }
	                      else if ((i - 1) % 4 === 0) {
	                          tx = 0;
	                          tz = - round * 4 * s.size;
	                      }
	                      else if ((i - 2) % 4 === 0) {
	                          tx = s.size + round * 4 * s.size;
	                          tz = s.size;
	                      }
	                      else if ((i - 3) % 4 === 0) {
	                          tx = - s.size;
	                          tz = 3 * s.size + s.size * 4 * round;
	                      }
	                      if (s.rtl) {
	                          tx = -tx;
	                      }

	                      if (!isH()) {
	                          ty = tx;
	                          tx = 0;
	                      }

	                      var transform = 'rotateX(' + (isH() ? 0 : -slideAngle) + 'deg) rotateY(' + (isH() ? slideAngle : 0) + 'deg) translate3d(' + tx + 'px, ' + ty + 'px, ' + tz + 'px)';
	                      if (progress <= 1 && progress > -1) {
	                          wrapperRotate = i * 90 + progress * 90;
	                          if (s.rtl) wrapperRotate = -i * 90 - progress * 90;
	                      }
	                      slide.transform(transform);
	                      if (s.params.cube.slideShadows) {
	                          //Set shadows
	                          var shadowBefore = isH() ? slide.find('.swiper-slide-shadow-left') : slide.find('.swiper-slide-shadow-top');
	                          var shadowAfter = isH() ? slide.find('.swiper-slide-shadow-right') : slide.find('.swiper-slide-shadow-bottom');
	                          if (shadowBefore.length === 0) {
	                              shadowBefore = $('<div class="swiper-slide-shadow-' + (isH() ? 'left' : 'top') + '"></div>');
	                              slide.append(shadowBefore);
	                          }
	                          if (shadowAfter.length === 0) {
	                              shadowAfter = $('<div class="swiper-slide-shadow-' + (isH() ? 'right' : 'bottom') + '"></div>');
	                              slide.append(shadowAfter);
	                          }
	                          var shadowOpacity = slide[0].progress;
	                          if (shadowBefore.length) shadowBefore[0].style.opacity = -slide[0].progress;
	                          if (shadowAfter.length) shadowAfter[0].style.opacity = slide[0].progress;
	                      }
	                  }
	                  s.wrapper.css({
	                      '-webkit-transform-origin': '50% 50% -' + (s.size / 2) + 'px',
	                      '-moz-transform-origin': '50% 50% -' + (s.size / 2) + 'px',
	                      '-ms-transform-origin': '50% 50% -' + (s.size / 2) + 'px',
	                      'transform-origin': '50% 50% -' + (s.size / 2) + 'px'
	                  });

	                  if (s.params.cube.shadow) {
	                      if (isH()) {
	                          cubeShadow.transform('translate3d(0px, ' + (s.width / 2 + s.params.cube.shadowOffset) + 'px, ' + (-s.width / 2) + 'px) rotateX(90deg) rotateZ(0deg) scale(' + (s.params.cube.shadowScale) + ')');
	                      }
	                      else {
	                          var shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
	                          var multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
	                          var scale1 = s.params.cube.shadowScale,
	                              scale2 = s.params.cube.shadowScale / multiplier,
	                              offset = s.params.cube.shadowOffset;
	                          cubeShadow.transform('scale3d(' + scale1 + ', 1, ' + scale2 + ') translate3d(0px, ' + (s.height / 2 + offset) + 'px, ' + (-s.height / 2 / scale2) + 'px) rotateX(-90deg)');
	                      }
	                  }
	                  var zFactor = (s.isSafari || s.isUiWebView) ? (-s.size / 2) : 0;
	                  s.wrapper.transform('translate3d(0px,0,' + zFactor + 'px) rotateX(' + (isH() ? 0 : wrapperRotate) + 'deg) rotateY(' + (isH() ? -wrapperRotate : 0) + 'deg)');
	              },
	              setTransition: function (duration) {
	                  s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
	                  if (s.params.cube.shadow && !isH()) {
	                      s.container.find('.swiper-cube-shadow').transition(duration);
	                  }
	              }
	          },
	          coverflow: {
	              setTranslate: function () {
	                  var transform = s.translate;
	                  var center = isH() ? -transform + s.width / 2 : -transform + s.height / 2;
	                  var rotate = isH() ? s.params.coverflow.rotate: -s.params.coverflow.rotate;
	                  var translate = s.params.coverflow.depth;
	                  //Each slide offset from center
	                  for (var i = 0, length = s.slides.length; i < length; i++) {
	                      var slide = s.slides.eq(i);
	                      var slideSize = s.slidesSizesGrid[i];
	                      var slideOffset = slide[0].swiperSlideOffset;
	                      var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * s.params.coverflow.modifier;

	                      var rotateY = isH() ? rotate * offsetMultiplier : 0;
	                      var rotateX = isH() ? 0 : rotate * offsetMultiplier;
	                      // var rotateZ = 0
	                      var translateZ = -translate * Math.abs(offsetMultiplier);

	                      var translateY = isH() ? 0 : s.params.coverflow.stretch * (offsetMultiplier);
	                      var translateX = isH() ? s.params.coverflow.stretch * (offsetMultiplier) : 0;

	                      //Fix for ultra small values
	                      if (Math.abs(translateX) < 0.001) translateX = 0;
	                      if (Math.abs(translateY) < 0.001) translateY = 0;
	                      if (Math.abs(translateZ) < 0.001) translateZ = 0;
	                      if (Math.abs(rotateY) < 0.001) rotateY = 0;
	                      if (Math.abs(rotateX) < 0.001) rotateX = 0;

	                      var slideTransform = 'translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px)  rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg)';

	                      slide.transform(slideTransform);
	                      slide[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
	                      if (s.params.coverflow.slideShadows) {
	                          //Set shadows
	                          var shadowBefore = isH() ? slide.find('.swiper-slide-shadow-left') : slide.find('.swiper-slide-shadow-top');
	                          var shadowAfter = isH() ? slide.find('.swiper-slide-shadow-right') : slide.find('.swiper-slide-shadow-bottom');
	                          if (shadowBefore.length === 0) {
	                              shadowBefore = $('<div class="swiper-slide-shadow-' + (isH() ? 'left' : 'top') + '"></div>');
	                              slide.append(shadowBefore);
	                          }
	                          if (shadowAfter.length === 0) {
	                              shadowAfter = $('<div class="swiper-slide-shadow-' + (isH() ? 'right' : 'bottom') + '"></div>');
	                              slide.append(shadowAfter);
	                          }
	                          if (shadowBefore.length) shadowBefore[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
	                          if (shadowAfter.length) shadowAfter[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0;
	                      }
	                  }

	                  //Set correct perspective for IE10
	                  if (s.browser.ie) {
	                      var ws = s.wrapper[0].style;
	                      ws.perspectiveOrigin = center + 'px 50%';
	                  }
	              },
	              setTransition: function (duration) {
	                  s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
	              }
	          }
	      };

	      /*=========================
	        Images Lazy Loading
	        ===========================*/
	      s.lazy = {
	          initialImageLoaded: false,
	          loadImageInSlide: function (index, loadInDuplicate) {
	              if (typeof index === 'undefined') return;
	              if (typeof loadInDuplicate === 'undefined') loadInDuplicate = true;
	              if (s.slides.length === 0) return;

	              var slide = s.slides.eq(index);
	              var img = slide.find('.swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)');
	              if (slide.hasClass('swiper-lazy') && !slide.hasClass('swiper-lazy-loaded') && !slide.hasClass('swiper-lazy-loading')) {
	                  img.add(slide[0]);
	              }
	              if (img.length === 0) return;

	              img.each(function () {
	                  var _img = $(this);
	                  _img.addClass('swiper-lazy-loading');
	                  var background = _img.attr('data-background');
	                  var src = _img.attr('data-src');
	                  s.loadImage(_img[0], (src || background), false, function () {
	                      if (background) {
	                          _img.css('background-image', 'url(' + background + ')');
	                          _img.removeAttr('data-background');
	                      }
	                      else {
	                          _img.attr('src', src);
	                          _img.removeAttr('data-src');
	                      }

	                      _img.addClass('swiper-lazy-loaded').removeClass('swiper-lazy-loading');
	                      slide.find('.swiper-lazy-preloader, .preloader').remove();
	                      if (s.params.loop && loadInDuplicate) {
	                          var slideOriginalIndex = slide.attr('data-swiper-slide-index');
	                          if (slide.hasClass(s.params.slideDuplicateClass)) {
	                              var originalSlide = s.wrapper.children('[data-swiper-slide-index="' + slideOriginalIndex + '"]:not(.' + s.params.slideDuplicateClass + ')');
	                              s.lazy.loadImageInSlide(originalSlide.index(), false);
	                          }
	                          else {
	                              var duplicatedSlide = s.wrapper.children('.' + s.params.slideDuplicateClass + '[data-swiper-slide-index="' + slideOriginalIndex + '"]');
	                              s.lazy.loadImageInSlide(duplicatedSlide.index(), false);
	                          }
	                      }
	                      s.emit('onLazyImageReady', s, slide[0], _img[0]);
	                  });

	                  s.emit('onLazyImageLoad', s, slide[0], _img[0]);
	              });

	          },
	          load: function () {
	              var i;
	              if (s.params.watchSlidesVisibility) {
	                  s.wrapper.children('.' + s.params.slideVisibleClass).each(function () {
	                      s.lazy.loadImageInSlide($(this).index());
	                  });
	              }
	              else {
	                  if (s.params.slidesPerView > 1) {
	                      for (i = s.activeIndex; i < s.activeIndex + s.params.slidesPerView ; i++) {
	                          if (s.slides[i]) s.lazy.loadImageInSlide(i);
	                      }
	                  }
	                  else {
	                      s.lazy.loadImageInSlide(s.activeIndex);
	                  }
	              }
	              if (s.params.lazyLoadingInPrevNext) {
	                  if (s.params.slidesPerView > 1) {
	                      // Next Slides
	                      for (i = s.activeIndex + s.params.slidesPerView; i < s.activeIndex + s.params.slidesPerView + s.params.slidesPerView; i++) {
	                          if (s.slides[i]) s.lazy.loadImageInSlide(i);
	                      }
	                      // Prev Slides
	                      for (i = s.activeIndex - s.params.slidesPerView; i < s.activeIndex ; i++) {
	                          if (s.slides[i]) s.lazy.loadImageInSlide(i);
	                      }
	                  }
	                  else {
	                      var nextSlide = s.wrapper.children('.' + s.params.slideNextClass);
	                      if (nextSlide.length > 0) s.lazy.loadImageInSlide(nextSlide.index());

	                      var prevSlide = s.wrapper.children('.' + s.params.slidePrevClass);
	                      if (prevSlide.length > 0) s.lazy.loadImageInSlide(prevSlide.index());
	                  }
	              }
	          },
	          onTransitionStart: function () {
	              if (s.params.lazyLoading) {
	                  if (s.params.lazyLoadingOnTransitionStart || (!s.params.lazyLoadingOnTransitionStart && !s.lazy.initialImageLoaded)) {
	                      s.lazy.load();
	                  }
	              }
	          },
	          onTransitionEnd: function () {
	              if (s.params.lazyLoading && !s.params.lazyLoadingOnTransitionStart) {
	                  s.lazy.load();
	              }
	          }
	      };


	      /*=========================
	        Scrollbar
	        ===========================*/
	      s.scrollbar = {
	          set: function () {
	              if (!s.params.scrollbar) return;
	              var sb = s.scrollbar;
	              sb.track = $(s.params.scrollbar);
	              sb.drag = sb.track.find('.swiper-scrollbar-drag');
	              if (sb.drag.length === 0) {
	                  sb.drag = $('<div class="swiper-scrollbar-drag"></div>');
	                  sb.track.append(sb.drag);
	              }
	              sb.drag[0].style.width = '';
	              sb.drag[0].style.height = '';
	              sb.trackSize = isH() ? sb.track[0].offsetWidth : sb.track[0].offsetHeight;

	              sb.divider = s.size / s.virtualSize;
	              sb.moveDivider = sb.divider * (sb.trackSize / s.size);
	              sb.dragSize = sb.trackSize * sb.divider;

	              if (isH()) {
	                  sb.drag[0].style.width = sb.dragSize + 'px';
	              }
	              else {
	                  sb.drag[0].style.height = sb.dragSize + 'px';
	              }

	              if (sb.divider >= 1) {
	                  sb.track[0].style.display = 'none';
	              }
	              else {
	                  sb.track[0].style.display = '';
	              }
	              if (s.params.scrollbarHide) {
	                  sb.track[0].style.opacity = 0;
	              }
	          },
	          setTranslate: function () {
	              if (!s.params.scrollbar) return;
	              var diff;
	              var sb = s.scrollbar;
	              var translate = s.translate || 0;
	              var newPos;

	              var newSize = sb.dragSize;
	              newPos = (sb.trackSize - sb.dragSize) * s.progress;
	              if (s.rtl && isH()) {
	                  newPos = -newPos;
	                  if (newPos > 0) {
	                      newSize = sb.dragSize - newPos;
	                      newPos = 0;
	                  }
	                  else if (-newPos + sb.dragSize > sb.trackSize) {
	                      newSize = sb.trackSize + newPos;
	                  }
	              }
	              else {
	                  if (newPos < 0) {
	                      newSize = sb.dragSize + newPos;
	                      newPos = 0;
	                  }
	                  else if (newPos + sb.dragSize > sb.trackSize) {
	                      newSize = sb.trackSize - newPos;
	                  }
	              }
	              if (isH()) {
	                  if (s.support.transforms3d) {
	                      sb.drag.transform('translate3d(' + (newPos) + 'px, 0, 0)');
	                  }
	                  else {
	                      sb.drag.transform('translateX(' + (newPos) + 'px)');
	                  }
	                  sb.drag[0].style.width = newSize + 'px';
	              }
	              else {
	                  if (s.support.transforms3d) {
	                      sb.drag.transform('translate3d(0px, ' + (newPos) + 'px, 0)');
	                  }
	                  else {
	                      sb.drag.transform('translateY(' + (newPos) + 'px)');
	                  }
	                  sb.drag[0].style.height = newSize + 'px';
	              }
	              if (s.params.scrollbarHide) {
	                  clearTimeout(sb.timeout);
	                  sb.track[0].style.opacity = 1;
	                  sb.timeout = setTimeout(function () {
	                      sb.track[0].style.opacity = 0;
	                      sb.track.transition(400);
	                  }, 1000);
	              }
	          },
	          setTransition: function (duration) {
	              if (!s.params.scrollbar) return;
	              s.scrollbar.drag.transition(duration);
	          }
	      };

	      /*=========================
	        Controller
	        ===========================*/
	      s.controller = {
	          LinearSpline: function (x, y) {
	              this.x = x;
	              this.y = y;
	              this.lastIndex = x.length - 1;
	              // Given an x value (x2), return the expected y2 value:
	              // (x1,y1) is the known point before given value,
	              // (x3,y3) is the known point after given value.
	              var i1, i3;
	              var l = this.x.length;

	              this.interpolate = function (x2) {
	                  if (!x2) return 0;

	                  // Get the indexes of x1 and x3 (the array indexes before and after given x2):
	                  i3 = binarySearch(this.x, x2);
	                  i1 = i3 - 1;

	                  // We have our indexes i1 & i3, so we can calculate already:
	                  // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
	                  return ((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1]) + this.y[i1];
	              };

	              var binarySearch = (function() {
	                  var maxIndex, minIndex, guess;
	                  return function(array, val) {
	                      minIndex = -1;
	                      maxIndex = array.length;
	                      while (maxIndex - minIndex > 1)
	                          if (array[guess = maxIndex + minIndex >> 1] <= val) {
	                              minIndex = guess;
	                          } else {
	                              maxIndex = guess;
	                          }
	                      return maxIndex;
	                  };
	              })();
	          },
	          //xxx: for now i will just save one spline function to to
	          getInterpolateFunction: function(c){
	              if(!s.controller.spline) s.controller.spline = s.params.loop ?
	                  new s.controller.LinearSpline(s.slidesGrid, c.slidesGrid) :
	                  new s.controller.LinearSpline(s.snapGrid, c.snapGrid);
	          },
	          setTranslate: function (translate, byController) {
	             var controlled = s.params.control;
	             var multiplier, controlledTranslate;
	             function setControlledTranslate(c) {
	                  // this will create an Interpolate function based on the snapGrids
	                  // x is the Grid of the scrolled scroller and y will be the controlled scroller
	                  // it makes sense to create this only once and recall it for the interpolation
	                  // the function does a lot of value caching for performance
	                  translate = c.rtl && c.params.direction === 'horizontal' ? -s.translate : s.translate;
	                  if (s.params.controlBy === 'slide') {
	                      s.controller.getInterpolateFunction(c);
	                      // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
	                      // but it did not work out
	                      controlledTranslate = -s.controller.spline.interpolate(-translate);
	                  }

	                  if(!controlledTranslate || s.params.controlBy === 'container'){
	                      multiplier = (c.maxTranslate() - c.minTranslate()) / (s.maxTranslate() - s.minTranslate());
	                      controlledTranslate = (translate - s.minTranslate()) * multiplier + c.minTranslate();
	                  }

	                  if (s.params.controlInverse) {
	                      controlledTranslate = c.maxTranslate() - controlledTranslate;
	                  }
	                  c.updateProgress(controlledTranslate);
	                  c.setWrapperTranslate(controlledTranslate, false, s);
	                  c.updateActiveIndex();
	             }
	             if (s.isArray(controlled)) {
	                 for (var i = 0; i < controlled.length; i++) {
	                     if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
	                         setControlledTranslate(controlled[i]);
	                     }
	                 }
	             }
	             else if (controlled instanceof Swiper && byController !== controlled) {

	                 setControlledTranslate(controlled);
	             }
	          },
	          setTransition: function (duration, byController) {
	              var controlled = s.params.control;
	              var i;
	              function setControlledTransition(c) {
	                  c.setWrapperTransition(duration, s);
	                  if (duration !== 0) {
	                      c.onTransitionStart();
	                      c.wrapper.transitionEnd(function(){
	                          if (!controlled) return;
	                          if (c.params.loop && s.params.controlBy === 'slide') {
	                              c.fixLoop();
	                          }
	                          c.onTransitionEnd();

	                      });
	                  }
	              }
	              if (s.isArray(controlled)) {
	                  for (i = 0; i < controlled.length; i++) {
	                      if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
	                          setControlledTransition(controlled[i]);
	                      }
	                  }
	              }
	              else if (controlled instanceof Swiper && byController !== controlled) {
	                  setControlledTransition(controlled);
	              }
	          }
	      };

	      /*=========================
	        Hash Navigation
	        ===========================*/
	      s.hashnav = {
	          init: function () {
	              if (!s.params.hashnav) return;
	              s.hashnav.initialized = true;
	              var hash = document.location.hash.replace('#', '');
	              if (!hash) return;
	              var speed = 0;
	              for (var i = 0, length = s.slides.length; i < length; i++) {
	                  var slide = s.slides.eq(i);
	                  var slideHash = slide.attr('data-hash');
	                  if (slideHash === hash && !slide.hasClass(s.params.slideDuplicateClass)) {
	                      var index = slide.index();
	                      s.slideTo(index, speed, s.params.runCallbacksOnInit, true);
	                  }
	              }
	          },
	          setHash: function () {
	              if (!s.hashnav.initialized || !s.params.hashnav) return;
	              document.location.hash = s.slides.eq(s.activeIndex).attr('data-hash') || '';
	          }
	      };

	      /*=========================
	        Keyboard Control
	        ===========================*/
	      function handleKeyboard(e) {
	          if (e.originalEvent) e = e.originalEvent; //jquery fix
	          var kc = e.keyCode || e.charCode;
	          // Directions locks
	          if (!s.params.allowSwipeToNext && (isH() && kc === 39 || !isH() && kc === 40)) {
	              return false;
	          }
	          if (!s.params.allowSwipeToPrev && (isH() && kc === 37 || !isH() && kc === 38)) {
	              return false;
	          }
	          if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
	              return;
	          }
	          if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {
	              return;
	          }
	          if (kc === 37 || kc === 39 || kc === 38 || kc === 40) {
	              var inView = false;
	              //Check that swiper should be inside of visible area of window
	              if (s.container.parents('.swiper-slide').length > 0 && s.container.parents('.swiper-slide-active').length === 0) {
	                  return;
	              }
	              var windowScroll = {
	                  left: window.pageXOffset,
	                  top: window.pageYOffset
	              };
	              var windowWidth = window.innerWidth;
	              var windowHeight = window.innerHeight;
	              var swiperOffset = s.container.offset();
	              if (s.rtl) swiperOffset.left = swiperOffset.left - s.container[0].scrollLeft;
	              var swiperCoord = [
	                  [swiperOffset.left, swiperOffset.top],
	                  [swiperOffset.left + s.width, swiperOffset.top],
	                  [swiperOffset.left, swiperOffset.top + s.height],
	                  [swiperOffset.left + s.width, swiperOffset.top + s.height]
	              ];
	              for (var i = 0; i < swiperCoord.length; i++) {
	                  var point = swiperCoord[i];
	                  if (
	                      point[0] >= windowScroll.left && point[0] <= windowScroll.left + windowWidth &&
	                      point[1] >= windowScroll.top && point[1] <= windowScroll.top + windowHeight
	                  ) {
	                      inView = true;
	                  }

	              }
	              if (!inView) return;
	          }
	          if (isH()) {
	              if (kc === 37 || kc === 39) {
	                  if (e.preventDefault) e.preventDefault();
	                  else e.returnValue = false;
	              }
	              if ((kc === 39 && !s.rtl) || (kc === 37 && s.rtl)) s.slideNext();
	              if ((kc === 37 && !s.rtl) || (kc === 39 && s.rtl)) s.slidePrev();
	          }
	          else {
	              if (kc === 38 || kc === 40) {
	                  if (e.preventDefault) e.preventDefault();
	                  else e.returnValue = false;
	              }
	              if (kc === 40) s.slideNext();
	              if (kc === 38) s.slidePrev();
	          }
	      }
	      s.disableKeyboardControl = function () {
	          $(document).off('keydown', handleKeyboard);
	      };
	      s.enableKeyboardControl = function () {
	          $(document).on('keydown', handleKeyboard);
	      };


	      /*=========================
	        Mousewheel Control
	        ===========================*/
	      s.mousewheel = {
	          event: false,
	          lastScrollTime: (new window.Date()).getTime()
	      };
	      if (s.params.mousewheelControl) {
	          try {
	              new window.WheelEvent('wheel');
	              s.mousewheel.event = 'wheel';
	          } catch (e) {}

	          if (!s.mousewheel.event && document.onmousewheel !== undefined) {
	              s.mousewheel.event = 'mousewheel';
	          }
	          if (!s.mousewheel.event) {
	              s.mousewheel.event = 'DOMMouseScroll';
	          }
	      }
	      function handleMousewheel(e) {
	          if (e.originalEvent) e = e.originalEvent; //jquery fix
	          var we = s.mousewheel.event;
	          var delta = 0;
	          //Opera & IE
	          if (e.detail) delta = -e.detail;
	          //WebKits
	          else if (we === 'mousewheel') {
	              if (s.params.mousewheelForceToAxis) {
	                  if (isH()) {
	                      if (Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY)) delta = e.wheelDeltaX;
	                      else return;
	                  }
	                  else {
	                      if (Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX)) delta = e.wheelDeltaY;
	                      else return;
	                  }
	              }
	              else {
	                  delta = e.wheelDelta;
	              }
	          }
	          //Old FireFox
	          else if (we === 'DOMMouseScroll') delta = -e.detail;
	          //New FireFox
	          else if (we === 'wheel') {
	              if (s.params.mousewheelForceToAxis) {
	                  if (isH()) {
	                      if (Math.abs(e.deltaX) > Math.abs(e.deltaY)) delta = -e.deltaX;
	                      else return;
	                  }
	                  else {
	                      if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) delta = -e.deltaY;
	                      else return;
	                  }
	              }
	              else {
	                  delta = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? - e.deltaX : - e.deltaY;
	              }
	          }

	          if (s.params.mousewheelInvert) delta = -delta;

	          if (!s.params.freeMode) {
	              if ((new window.Date()).getTime() - s.mousewheel.lastScrollTime > 60) {
	                  if (delta < 0) {
	                      if ((!s.isEnd || s.params.loop) && !s.animating) s.slideNext();
	                      else if (s.params.mousewheelReleaseOnEdges) return true;
	                  }
	                  else {
	                      if ((!s.isBeginning || s.params.loop) && !s.animating) s.slidePrev();
	                      else if (s.params.mousewheelReleaseOnEdges) return true;
	                  }
	              }
	              s.mousewheel.lastScrollTime = (new window.Date()).getTime();

	          }
	          else {
	              //Freemode or scrollContainer:

	              var position = s.getWrapperTranslate() + delta * s.params.mousewheelSensitivity;

	              if (position > 0) position = 0;
	              if (position < s.maxTranslate()) position = s.maxTranslate();

	              s.setWrapperTransition(0);
	              s.setWrapperTranslate(position);
	              s.updateProgress();
	              s.updateActiveIndex();

	              if (s.params.freeModeSticky) {
	                  clearTimeout(s.mousewheel.timeout);
	                  s.mousewheel.timeout = setTimeout(function () {
	                      s.slideReset();
	                  }, 300);
	              }

	              // Return page scroll on edge positions
	              if (position === 0 || position === s.maxTranslate()) return;
	          }
	          if (s.params.autoplay) s.stopAutoplay();

	          if (e.preventDefault) e.preventDefault();
	          else e.returnValue = false;
	          return false;
	      }
	      s.disableMousewheelControl = function () {
	          if (!s.mousewheel.event) return false;
	          s.container.off(s.mousewheel.event, handleMousewheel);
	          return true;
	      };

	      s.enableMousewheelControl = function () {
	          if (!s.mousewheel.event) return false;
	          s.container.on(s.mousewheel.event, handleMousewheel);
	          return true;
	      };

	      /*=========================
	        Parallax
	        ===========================*/
	      function setParallaxTransform(el, progress) {
	          el = $(el);
	          var p, pX, pY;

	          p = el.attr('data-swiper-parallax') || '0';
	          pX = el.attr('data-swiper-parallax-x');
	          pY = el.attr('data-swiper-parallax-y');
	          if (pX || pY) {
	              pX = pX || '0';
	              pY = pY || '0';
	          }
	          else {
	              if (isH()) {
	                  pX = p;
	                  pY = '0';
	              }
	              else {
	                  pY = p;
	                  pX = '0';
	              }
	          }
	          if ((pX).indexOf('%') >= 0) {
	              pX = parseInt(pX, 10) * progress + '%';
	          }
	          else {
	              pX = pX * progress + 'px' ;
	          }
	          if ((pY).indexOf('%') >= 0) {
	              pY = parseInt(pY, 10) * progress + '%';
	          }
	          else {
	              pY = pY * progress + 'px' ;
	          }
	          el.transform('translate3d(' + pX + ', ' + pY + ',0px)');
	      }
	      s.parallax = {
	          setTranslate: function () {
	              s.container.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){
	                  setParallaxTransform(this, s.progress);

	              });
	              s.slides.each(function () {
	                  var slide = $(this);
	                  slide.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function () {
	                      var progress = Math.min(Math.max(slide[0].progress, -1), 1);
	                      setParallaxTransform(this, progress);
	                  });
	              });
	          },
	          setTransition: function (duration) {
	              if (typeof duration === 'undefined') duration = s.params.speed;
	              s.container.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){
	                  var el = $(this);
	                  var parallaxDuration = parseInt(el.attr('data-swiper-parallax-duration'), 10) || duration;
	                  if (duration === 0) parallaxDuration = 0;
	                  el.transition(parallaxDuration);
	              });
	          }
	      };


	      /*=========================
	        Plugins API. Collect all and init all plugins
	        ===========================*/
	      s._plugins = [];
	      for (var plugin in s.plugins) {
	          var p = s.plugins[plugin](s, s.params[plugin]);
	          if (p) s._plugins.push(p);
	      }
	      // Method to call all plugins event/method
	      s.callPlugins = function (eventName) {
	          for (var i = 0; i < s._plugins.length; i++) {
	              if (eventName in s._plugins[i]) {
	                  s._plugins[i][eventName](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	              }
	          }
	      };

	      /*=========================
	        Events/Callbacks/Plugins Emitter
	        ===========================*/
	      function normalizeEventName (eventName) {
	          if (eventName.indexOf('on') !== 0) {
	              if (eventName[0] !== eventName[0].toUpperCase()) {
	                  eventName = 'on' + eventName[0].toUpperCase() + eventName.substring(1);
	              }
	              else {
	                  eventName = 'on' + eventName;
	              }
	          }
	          return eventName;
	      }
	      s.emitterEventListeners = {

	      };
	      s.emit = function (eventName) {
	          // Trigger callbacks
	          if (s.params[eventName]) {
	              s.params[eventName](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	          }
	          var i;
	          // Trigger events
	          if (s.emitterEventListeners[eventName]) {
	              for (i = 0; i < s.emitterEventListeners[eventName].length; i++) {
	                  s.emitterEventListeners[eventName][i](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	              }
	          }
	          // Trigger plugins
	          if (s.callPlugins) s.callPlugins(eventName, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	      };
	      s.on = function (eventName, handler) {
	          eventName = normalizeEventName(eventName);
	          if (!s.emitterEventListeners[eventName]) s.emitterEventListeners[eventName] = [];
	          s.emitterEventListeners[eventName].push(handler);
	          return s;
	      };
	      s.off = function (eventName, handler) {
	          var i;
	          eventName = normalizeEventName(eventName);
	          if (typeof handler === 'undefined') {
	              // Remove all handlers for such event
	              s.emitterEventListeners[eventName] = [];
	              return s;
	          }
	          if (!s.emitterEventListeners[eventName] || s.emitterEventListeners[eventName].length === 0) return;
	          for (i = 0; i < s.emitterEventListeners[eventName].length; i++) {
	              if(s.emitterEventListeners[eventName][i] === handler) s.emitterEventListeners[eventName].splice(i, 1);
	          }
	          return s;
	      };
	      s.once = function (eventName, handler) {
	          eventName = normalizeEventName(eventName);
	          var _handler = function () {
	              handler(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
	              s.off(eventName, _handler);
	          };
	          s.on(eventName, _handler);
	          return s;
	      };

	      // Accessibility tools
	      s.a11y = {
	          makeFocusable: function ($el) {
	              $el.attr('tabIndex', '0');
	              return $el;
	          },
	          addRole: function ($el, role) {
	              $el.attr('role', role);
	              return $el;
	          },

	          addLabel: function ($el, label) {
	              $el.attr('aria-label', label);
	              return $el;
	          },

	          disable: function ($el) {
	              $el.attr('aria-disabled', true);
	              return $el;
	          },

	          enable: function ($el) {
	              $el.attr('aria-disabled', false);
	              return $el;
	          },

	          onEnterKey: function (event) {
	              if (event.keyCode !== 13) return;
	              if ($(event.target).is(s.params.nextButton)) {
	                  s.onClickNext(event);
	                  if (s.isEnd) {
	                      s.a11y.notify(s.params.lastSlideMessage);
	                  }
	                  else {
	                      s.a11y.notify(s.params.nextSlideMessage);
	                  }
	              }
	              else if ($(event.target).is(s.params.prevButton)) {
	                  s.onClickPrev(event);
	                  if (s.isBeginning) {
	                      s.a11y.notify(s.params.firstSlideMessage);
	                  }
	                  else {
	                      s.a11y.notify(s.params.prevSlideMessage);
	                  }
	              }
	              if ($(event.target).is('.' + s.params.bulletClass)) {
	                  $(event.target)[0].click();
	              }
	          },

	          liveRegion: $('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),

	          notify: function (message) {
	              var notification = s.a11y.liveRegion;
	              if (notification.length === 0) return;
	              notification.html('');
	              notification.html(message);
	          },
	          init: function () {
	              // Setup accessibility
	              if (s.params.nextButton) {
	                  var nextButton = $(s.params.nextButton);
	                  s.a11y.makeFocusable(nextButton);
	                  s.a11y.addRole(nextButton, 'button');
	                  s.a11y.addLabel(nextButton, s.params.nextSlideMessage);
	              }
	              if (s.params.prevButton) {
	                  var prevButton = $(s.params.prevButton);
	                  s.a11y.makeFocusable(prevButton);
	                  s.a11y.addRole(prevButton, 'button');
	                  s.a11y.addLabel(prevButton, s.params.prevSlideMessage);
	              }

	              $(s.container).append(s.a11y.liveRegion);
	          },
	          initPagination: function () {
	              if (s.params.pagination && s.params.paginationClickable && s.bullets && s.bullets.length) {
	                  s.bullets.each(function () {
	                      var bullet = $(this);
	                      s.a11y.makeFocusable(bullet);
	                      s.a11y.addRole(bullet, 'button');
	                      s.a11y.addLabel(bullet, s.params.paginationBulletMessage.replace(/{{index}}/, bullet.index() + 1));
	                  });
	              }
	          },
	          destroy: function () {
	              if (s.a11y.liveRegion && s.a11y.liveRegion.length > 0) s.a11y.liveRegion.remove();
	          }
	      };


	      /*=========================
	        Init/Destroy
	        ===========================*/
	      s.init = function () {
	          if (s.params.loop) s.createLoop();
	          s.updateContainerSize();
	          s.updateSlidesSize();
	          s.updatePagination();
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.set();
	          }
	          if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {
	              if (!s.params.loop) s.updateProgress();
	              s.effects[s.params.effect].setTranslate();
	          }
	          if (s.params.loop) {
	              s.slideTo(s.params.initialSlide + s.loopedSlides, 0, s.params.runCallbacksOnInit);
	          }
	          else {
	              s.slideTo(s.params.initialSlide, 0, s.params.runCallbacksOnInit);
	              if (s.params.initialSlide === 0) {
	                  if (s.parallax && s.params.parallax) s.parallax.setTranslate();
	                  if (s.lazy && s.params.lazyLoading) {
	                      s.lazy.load();
	                      s.lazy.initialImageLoaded = true;
	                  }
	              }
	          }
	          s.attachEvents();
	          if (s.params.observer && s.support.observer) {
	              s.initObservers();
	          }
	          if (s.params.preloadImages && !s.params.lazyLoading) {
	              s.preloadImages();
	          }
	          if (s.params.autoplay) {
	              s.startAutoplay();
	          }
	          if (s.params.keyboardControl) {
	              if (s.enableKeyboardControl) s.enableKeyboardControl();
	          }
	          if (s.params.mousewheelControl) {
	              if (s.enableMousewheelControl) s.enableMousewheelControl();
	          }
	          if (s.params.hashnav) {
	              if (s.hashnav) s.hashnav.init();
	          }
	          if (s.params.a11y && s.a11y) s.a11y.init();
	          s.emit('onInit', s);
	      };

	      // Cleanup dynamic styles
	      s.cleanupStyles = function () {
	          // Container
	          s.container.removeClass(s.classNames.join(' ')).removeAttr('style');

	          // Wrapper
	          s.wrapper.removeAttr('style');

	          // Slides
	          if (s.slides && s.slides.length) {
	              s.slides
	                  .removeClass([
	                    s.params.slideVisibleClass,
	                    s.params.slideActiveClass,
	                    s.params.slideNextClass,
	                    s.params.slidePrevClass
	                  ].join(' '))
	                  .removeAttr('style')
	                  .removeAttr('data-swiper-column')
	                  .removeAttr('data-swiper-row');
	          }

	          // Pagination/Bullets
	          if (s.paginationContainer && s.paginationContainer.length) {
	              s.paginationContainer.removeClass(s.params.paginationHiddenClass);
	          }
	          if (s.bullets && s.bullets.length) {
	              s.bullets.removeClass(s.params.bulletActiveClass);
	          }

	          // Buttons
	          if (s.params.prevButton) $(s.params.prevButton).removeClass(s.params.buttonDisabledClass);
	          if (s.params.nextButton) $(s.params.nextButton).removeClass(s.params.buttonDisabledClass);

	          // Scrollbar
	          if (s.params.scrollbar && s.scrollbar) {
	              if (s.scrollbar.track && s.scrollbar.track.length) s.scrollbar.track.removeAttr('style');
	              if (s.scrollbar.drag && s.scrollbar.drag.length) s.scrollbar.drag.removeAttr('style');
	          }
	      };

	      // Destroy
	      s.destroy = function (deleteInstance, cleanupStyles) {
	          // Detach evebts
	          s.detachEvents();
	          // Stop autoplay
	          s.stopAutoplay();
	          // Destroy loop
	          if (s.params.loop) {
	              s.destroyLoop();
	          }
	          // Cleanup styles
	          if (cleanupStyles) {
	              s.cleanupStyles();
	          }
	          // Disconnect observer
	          s.disconnectObservers();
	          // Disable keyboard/mousewheel
	          if (s.params.keyboardControl) {
	              if (s.disableKeyboardControl) s.disableKeyboardControl();
	          }
	          if (s.params.mousewheelControl) {
	              if (s.disableMousewheelControl) s.disableMousewheelControl();
	          }
	          // Disable a11y
	          if (s.params.a11y && s.a11y) s.a11y.destroy();
	          // Destroy callback
	          s.emit('onDestroy');
	          // Delete instance
	          if (deleteInstance !== false) s = null;
	      };

	      s.init();



	      // Return swiper instance
	      return s;
	  };


	  /*==================================================
	      Prototype
	  ====================================================*/
	  Swiper.prototype = {
	      isSafari: (function () {
	          var ua = navigator.userAgent.toLowerCase();
	          return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
	      })(),
	      isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),
	      isArray: function (arr) {
	          return Object.prototype.toString.apply(arr) === '[object Array]';
	      },
	      /*==================================================
	      Browser
	      ====================================================*/
	      browser: {
	          ie: window.navigator.pointerEnabled || window.navigator.msPointerEnabled,
	          ieTouch: (window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1) || (window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1),
	      },
	      /*==================================================
	      Devices
	      ====================================================*/
	      device: (function () {
	          var ua = navigator.userAgent;
	          var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	          var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	          var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	          var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	          return {
	              ios: ipad || iphone || ipod,
	              android: android
	          };
	      })(),
	      /*==================================================
	      Feature Detection
	      ====================================================*/
	      support: {
	          touch : (window.Modernizr && Modernizr.touch === true) || (function () {
	              return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
	          })(),

	          transforms3d : (window.Modernizr && Modernizr.csstransforms3d === true) || (function () {
	              var div = document.createElement('div').style;
	              return ('webkitPerspective' in div || 'MozPerspective' in div || 'OPerspective' in div || 'MsPerspective' in div || 'perspective' in div);
	          })(),

	          flexbox: (function () {
	              var div = document.createElement('div').style;
	              var styles = ('alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient').split(' ');
	              for (var i = 0; i < styles.length; i++) {
	                  if (styles[i] in div) return true;
	              }
	          })(),

	          observer: (function () {
	              return ('MutationObserver' in window || 'WebkitMutationObserver' in window);
	          })()
	      },
	      /*==================================================
	      Plugins
	      ====================================================*/
	      plugins: {}
	  };


	  /*===========================
	  Dom7 Library
	  ===========================*/
	  var Dom7 = (function () {
	      var Dom7 = function (arr) {
	          var _this = this, i = 0;
	          // Create array-like object
	          for (i = 0; i < arr.length; i++) {
	              _this[i] = arr[i];
	          }
	          _this.length = arr.length;
	          // Return collection with methods
	          return this;
	      };
	      var $ = function (selector, context) {
	          var arr = [], i = 0;
	          if (selector && !context) {
	              if (selector instanceof Dom7) {
	                  return selector;
	              }
	          }
	          if (selector) {
	              // String
	              if (typeof selector === 'string') {
	                  var els, tempParent, html = selector.trim();
	                  if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
	                      var toCreate = 'div';
	                      if (html.indexOf('<li') === 0) toCreate = 'ul';
	                      if (html.indexOf('<tr') === 0) toCreate = 'tbody';
	                      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
	                      if (html.indexOf('<tbody') === 0) toCreate = 'table';
	                      if (html.indexOf('<option') === 0) toCreate = 'select';
	                      tempParent = document.createElement(toCreate);
	                      tempParent.innerHTML = selector;
	                      for (i = 0; i < tempParent.childNodes.length; i++) {
	                          arr.push(tempParent.childNodes[i]);
	                      }
	                  }
	                  else {
	                      if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
	                          // Pure ID selector
	                          els = [document.getElementById(selector.split('#')[1])];
	                      }
	                      else {
	                          // Other selectors
	                          els = (context || document).querySelectorAll(selector);
	                      }
	                      for (i = 0; i < els.length; i++) {
	                          if (els[i]) arr.push(els[i]);
	                      }
	                  }
	              }
	              // Node/element
	              else if (selector.nodeType || selector === window || selector === document) {
	                  arr.push(selector);
	              }
	              //Array of elements or instance of Dom
	              else if (selector.length > 0 && selector[0].nodeType) {
	                  for (i = 0; i < selector.length; i++) {
	                      arr.push(selector[i]);
	                  }
	              }
	          }
	          return new Dom7(arr);
	      };
	      Dom7.prototype = {
	          // Classes and attriutes
	          addClass: function (className) {
	              if (typeof className === 'undefined') {
	                  return this;
	              }
	              var classes = className.split(' ');
	              for (var i = 0; i < classes.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      this[j].classList.add(classes[i]);
	                  }
	              }
	              return this;
	          },
	          removeClass: function (className) {
	              var classes = className.split(' ');
	              for (var i = 0; i < classes.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      this[j].classList.remove(classes[i]);
	                  }
	              }
	              return this;
	          },
	          hasClass: function (className) {
	              if (!this[0]) return false;
	              else return this[0].classList.contains(className);
	          },
	          toggleClass: function (className) {
	              var classes = className.split(' ');
	              for (var i = 0; i < classes.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      this[j].classList.toggle(classes[i]);
	                  }
	              }
	              return this;
	          },
	          attr: function (attrs, value) {
	              if (arguments.length === 1 && typeof attrs === 'string') {
	                  // Get attr
	                  if (this[0]) return this[0].getAttribute(attrs);
	                  else return undefined;
	              }
	              else {
	                  // Set attrs
	                  for (var i = 0; i < this.length; i++) {
	                      if (arguments.length === 2) {
	                          // String
	                          this[i].setAttribute(attrs, value);
	                      }
	                      else {
	                          // Object
	                          for (var attrName in attrs) {
	                              this[i][attrName] = attrs[attrName];
	                              this[i].setAttribute(attrName, attrs[attrName]);
	                          }
	                      }
	                  }
	                  return this;
	              }
	          },
	          removeAttr: function (attr) {
	              for (var i = 0; i < this.length; i++) {
	                  this[i].removeAttribute(attr);
	              }
	              return this;
	          },
	          data: function (key, value) {
	              if (typeof value === 'undefined') {
	                  // Get value
	                  if (this[0]) {
	                      var dataKey = this[0].getAttribute('data-' + key);
	                      if (dataKey) return dataKey;
	                      else if (this[0].dom7ElementDataStorage && (key in this[0].dom7ElementDataStorage)) return this[0].dom7ElementDataStorage[key];
	                      else return undefined;
	                  }
	                  else return undefined;
	              }
	              else {
	                  // Set value
	                  for (var i = 0; i < this.length; i++) {
	                      var el = this[i];
	                      if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
	                      el.dom7ElementDataStorage[key] = value;
	                  }
	                  return this;
	              }
	          },
	          // Transforms
	          transform : function (transform) {
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;
	              }
	              return this;
	          },
	          transition: function (duration) {
	              if (typeof duration !== 'string') {
	                  duration = duration + 'ms';
	              }
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;
	              }
	              return this;
	          },
	          //Events
	          on: function (eventName, targetSelector, listener, capture) {
	              function handleLiveEvent(e) {
	                  var target = e.target;
	                  if ($(target).is(targetSelector)) listener.call(target, e);
	                  else {
	                      var parents = $(target).parents();
	                      for (var k = 0; k < parents.length; k++) {
	                          if ($(parents[k]).is(targetSelector)) listener.call(parents[k], e);
	                      }
	                  }
	              }
	              var events = eventName.split(' ');
	              var i, j;
	              for (i = 0; i < this.length; i++) {
	                  if (typeof targetSelector === 'function' || targetSelector === false) {
	                      // Usual events
	                      if (typeof targetSelector === 'function') {
	                          listener = arguments[1];
	                          capture = arguments[2] || false;
	                      }
	                      for (j = 0; j < events.length; j++) {
	                          this[i].addEventListener(events[j], listener, capture);
	                      }
	                  }
	                  else {
	                      //Live events
	                      for (j = 0; j < events.length; j++) {
	                          if (!this[i].dom7LiveListeners) this[i].dom7LiveListeners = [];
	                          this[i].dom7LiveListeners.push({listener: listener, liveListener: handleLiveEvent});
	                          this[i].addEventListener(events[j], handleLiveEvent, capture);
	                      }
	                  }
	              }

	              return this;
	          },
	          off: function (eventName, targetSelector, listener, capture) {
	              var events = eventName.split(' ');
	              for (var i = 0; i < events.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      if (typeof targetSelector === 'function' || targetSelector === false) {
	                          // Usual events
	                          if (typeof targetSelector === 'function') {
	                              listener = arguments[1];
	                              capture = arguments[2] || false;
	                          }
	                          this[j].removeEventListener(events[i], listener, capture);
	                      }
	                      else {
	                          // Live event
	                          if (this[j].dom7LiveListeners) {
	                              for (var k = 0; k < this[j].dom7LiveListeners.length; k++) {
	                                  if (this[j].dom7LiveListeners[k].listener === listener) {
	                                      this[j].removeEventListener(events[i], this[j].dom7LiveListeners[k].liveListener, capture);
	                                  }
	                              }
	                          }
	                      }
	                  }
	              }
	              return this;
	          },
	          once: function (eventName, targetSelector, listener, capture) {
	              var dom = this;
	              if (typeof targetSelector === 'function') {
	                  targetSelector = false;
	                  listener = arguments[1];
	                  capture = arguments[2];
	              }
	              function proxy(e) {
	                  listener(e);
	                  dom.off(eventName, targetSelector, proxy, capture);
	              }
	              dom.on(eventName, targetSelector, proxy, capture);
	          },
	          trigger: function (eventName, eventData) {
	              for (var i = 0; i < this.length; i++) {
	                  var evt;
	                  try {
	                      evt = new window.CustomEvent(eventName, {detail: eventData, bubbles: true, cancelable: true});
	                  }
	                  catch (e) {
	                      evt = document.createEvent('Event');
	                      evt.initEvent(eventName, true, true);
	                      evt.detail = eventData;
	                  }
	                  this[i].dispatchEvent(evt);
	              }
	              return this;
	          },
	          transitionEnd: function (callback) {
	              var events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],
	                  i, j, dom = this;
	              function fireCallBack(e) {
	                  /*jshint validthis:true */
	                  if (e.target !== this) return;
	                  callback.call(this, e);
	                  for (i = 0; i < events.length; i++) {
	                      dom.off(events[i], fireCallBack);
	                  }
	              }
	              if (callback) {
	                  for (i = 0; i < events.length; i++) {
	                      dom.on(events[i], fireCallBack);
	                  }
	              }
	              return this;
	          },
	          // Sizing/Styles
	          width: function () {
	              if (this[0] === window) {
	                  return window.innerWidth;
	              }
	              else {
	                  if (this.length > 0) {
	                      return parseFloat(this.css('width'));
	                  }
	                  else {
	                      return null;
	                  }
	              }
	          },
	          outerWidth: function (includeMargins) {
	              if (this.length > 0) {
	                  if (includeMargins)
	                      return this[0].offsetWidth + parseFloat(this.css('margin-right')) + parseFloat(this.css('margin-left'));
	                  else
	                      return this[0].offsetWidth;
	              }
	              else return null;
	          },
	          height: function () {
	              if (this[0] === window) {
	                  return window.innerHeight;
	              }
	              else {
	                  if (this.length > 0) {
	                      return parseFloat(this.css('height'));
	                  }
	                  else {
	                      return null;
	                  }
	              }
	          },
	          outerHeight: function (includeMargins) {
	              if (this.length > 0) {
	                  if (includeMargins)
	                      return this[0].offsetHeight + parseFloat(this.css('margin-top')) + parseFloat(this.css('margin-bottom'));
	                  else
	                      return this[0].offsetHeight;
	              }
	              else return null;
	          },
	          offset: function () {
	              if (this.length > 0) {
	                  var el = this[0];
	                  var box = el.getBoundingClientRect();
	                  var body = document.body;
	                  var clientTop  = el.clientTop  || body.clientTop  || 0;
	                  var clientLeft = el.clientLeft || body.clientLeft || 0;
	                  var scrollTop  = window.pageYOffset || el.scrollTop;
	                  var scrollLeft = window.pageXOffset || el.scrollLeft;
	                  return {
	                      top: box.top  + scrollTop  - clientTop,
	                      left: box.left + scrollLeft - clientLeft
	                  };
	              }
	              else {
	                  return null;
	              }
	          },
	          css: function (props, value) {
	              var i;
	              if (arguments.length === 1) {
	                  if (typeof props === 'string') {
	                      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
	                  }
	                  else {
	                      for (i = 0; i < this.length; i++) {
	                          for (var prop in props) {
	                              this[i].style[prop] = props[prop];
	                          }
	                      }
	                      return this;
	                  }
	              }
	              if (arguments.length === 2 && typeof props === 'string') {
	                  for (i = 0; i < this.length; i++) {
	                      this[i].style[props] = value;
	                  }
	                  return this;
	              }
	              return this;
	          },

	          //Dom manipulation
	          each: function (callback) {
	              for (var i = 0; i < this.length; i++) {
	                  callback.call(this[i], i, this[i]);
	              }
	              return this;
	          },
	          html: function (html) {
	              if (typeof html === 'undefined') {
	                  return this[0] ? this[0].innerHTML : undefined;
	              }
	              else {
	                  for (var i = 0; i < this.length; i++) {
	                      this[i].innerHTML = html;
	                  }
	                  return this;
	              }
	          },
	          is: function (selector) {
	              if (!this[0]) return false;
	              var compareWith, i;
	              if (typeof selector === 'string') {
	                  var el = this[0];
	                  if (el === document) return selector === document;
	                  if (el === window) return selector === window;

	                  if (el.matches) return el.matches(selector);
	                  else if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
	                  else if (el.mozMatchesSelector) return el.mozMatchesSelector(selector);
	                  else if (el.msMatchesSelector) return el.msMatchesSelector(selector);
	                  else {
	                      compareWith = $(selector);
	                      for (i = 0; i < compareWith.length; i++) {
	                          if (compareWith[i] === this[0]) return true;
	                      }
	                      return false;
	                  }
	              }
	              else if (selector === document) return this[0] === document;
	              else if (selector === window) return this[0] === window;
	              else {
	                  if (selector.nodeType || selector instanceof Dom7) {
	                      compareWith = selector.nodeType ? [selector] : selector;
	                      for (i = 0; i < compareWith.length; i++) {
	                          if (compareWith[i] === this[0]) return true;
	                      }
	                      return false;
	                  }
	                  return false;
	              }

	          },
	          index: function () {
	              if (this[0]) {
	                  var child = this[0];
	                  var i = 0;
	                  while ((child = child.previousSibling) !== null) {
	                      if (child.nodeType === 1) i++;
	                  }
	                  return i;
	              }
	              else return undefined;
	          },
	          eq: function (index) {
	              if (typeof index === 'undefined') return this;
	              var length = this.length;
	              var returnIndex;
	              if (index > length - 1) {
	                  return new Dom7([]);
	              }
	              if (index < 0) {
	                  returnIndex = length + index;
	                  if (returnIndex < 0) return new Dom7([]);
	                  else return new Dom7([this[returnIndex]]);
	              }
	              return new Dom7([this[index]]);
	          },
	          append: function (newChild) {
	              var i, j;
	              for (i = 0; i < this.length; i++) {
	                  if (typeof newChild === 'string') {
	                      var tempDiv = document.createElement('div');
	                      tempDiv.innerHTML = newChild;
	                      while (tempDiv.firstChild) {
	                          this[i].appendChild(tempDiv.firstChild);
	                      }
	                  }
	                  else if (newChild instanceof Dom7) {
	                      for (j = 0; j < newChild.length; j++) {
	                          this[i].appendChild(newChild[j]);
	                      }
	                  }
	                  else {
	                      this[i].appendChild(newChild);
	                  }
	              }
	              return this;
	          },
	          prepend: function (newChild) {
	              var i, j;
	              for (i = 0; i < this.length; i++) {
	                  if (typeof newChild === 'string') {
	                      var tempDiv = document.createElement('div');
	                      tempDiv.innerHTML = newChild;
	                      for (j = tempDiv.childNodes.length - 1; j >= 0; j--) {
	                          this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
	                      }
	                      // this[i].insertAdjacentHTML('afterbegin', newChild);
	                  }
	                  else if (newChild instanceof Dom7) {
	                      for (j = 0; j < newChild.length; j++) {
	                          this[i].insertBefore(newChild[j], this[i].childNodes[0]);
	                      }
	                  }
	                  else {
	                      this[i].insertBefore(newChild, this[i].childNodes[0]);
	                  }
	              }
	              return this;
	          },
	          insertBefore: function (selector) {
	              var before = $(selector);
	              for (var i = 0; i < this.length; i++) {
	                  if (before.length === 1) {
	                      before[0].parentNode.insertBefore(this[i], before[0]);
	                  }
	                  else if (before.length > 1) {
	                      for (var j = 0; j < before.length; j++) {
	                          before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
	                      }
	                  }
	              }
	          },
	          insertAfter: function (selector) {
	              var after = $(selector);
	              for (var i = 0; i < this.length; i++) {
	                  if (after.length === 1) {
	                      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
	                  }
	                  else if (after.length > 1) {
	                      for (var j = 0; j < after.length; j++) {
	                          after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
	                      }
	                  }
	              }
	          },
	          next: function (selector) {
	              if (this.length > 0) {
	                  if (selector) {
	                      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) return new Dom7([this[0].nextElementSibling]);
	                      else return new Dom7([]);
	                  }
	                  else {
	                      if (this[0].nextElementSibling) return new Dom7([this[0].nextElementSibling]);
	                      else return new Dom7([]);
	                  }
	              }
	              else return new Dom7([]);
	          },
	          nextAll: function (selector) {
	              var nextEls = [];
	              var el = this[0];
	              if (!el) return new Dom7([]);
	              while (el.nextElementSibling) {
	                  var next = el.nextElementSibling;
	                  if (selector) {
	                      if($(next).is(selector)) nextEls.push(next);
	                  }
	                  else nextEls.push(next);
	                  el = next;
	              }
	              return new Dom7(nextEls);
	          },
	          prev: function (selector) {
	              if (this.length > 0) {
	                  if (selector) {
	                      if (this[0].previousElementSibling && $(this[0].previousElementSibling).is(selector)) return new Dom7([this[0].previousElementSibling]);
	                      else return new Dom7([]);
	                  }
	                  else {
	                      if (this[0].previousElementSibling) return new Dom7([this[0].previousElementSibling]);
	                      else return new Dom7([]);
	                  }
	              }
	              else return new Dom7([]);
	          },
	          prevAll: function (selector) {
	              var prevEls = [];
	              var el = this[0];
	              if (!el) return new Dom7([]);
	              while (el.previousElementSibling) {
	                  var prev = el.previousElementSibling;
	                  if (selector) {
	                      if($(prev).is(selector)) prevEls.push(prev);
	                  }
	                  else prevEls.push(prev);
	                  el = prev;
	              }
	              return new Dom7(prevEls);
	          },
	          parent: function (selector) {
	              var parents = [];
	              for (var i = 0; i < this.length; i++) {
	                  if (selector) {
	                      if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
	                  }
	                  else {
	                      parents.push(this[i].parentNode);
	                  }
	              }
	              return $($.unique(parents));
	          },
	          parents: function (selector) {
	              var parents = [];
	              for (var i = 0; i < this.length; i++) {
	                  var parent = this[i].parentNode;
	                  while (parent) {
	                      if (selector) {
	                          if ($(parent).is(selector)) parents.push(parent);
	                      }
	                      else {
	                          parents.push(parent);
	                      }
	                      parent = parent.parentNode;
	                  }
	              }
	              return $($.unique(parents));
	          },
	          find : function (selector) {
	              var foundElements = [];
	              for (var i = 0; i < this.length; i++) {
	                  var found = this[i].querySelectorAll(selector);
	                  for (var j = 0; j < found.length; j++) {
	                      foundElements.push(found[j]);
	                  }
	              }
	              return new Dom7(foundElements);
	          },
	          children: function (selector) {
	              var children = [];
	              for (var i = 0; i < this.length; i++) {
	                  var childNodes = this[i].childNodes;

	                  for (var j = 0; j < childNodes.length; j++) {
	                      if (!selector) {
	                          if (childNodes[j].nodeType === 1) children.push(childNodes[j]);
	                      }
	                      else {
	                          if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) children.push(childNodes[j]);
	                      }
	                  }
	              }
	              return new Dom7($.unique(children));
	          },
	          remove: function () {
	              for (var i = 0; i < this.length; i++) {
	                  if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
	              }
	              return this;
	          },
	          add: function () {
	              var dom = this;
	              var i, j;
	              for (i = 0; i < arguments.length; i++) {
	                  var toAdd = $(arguments[i]);
	                  for (j = 0; j < toAdd.length; j++) {
	                      dom[dom.length] = toAdd[j];
	                      dom.length++;
	                  }
	              }
	              return dom;
	          }
	      };
	      $.fn = Dom7.prototype;
	      $.unique = function (arr) {
	          var unique = [];
	          for (var i = 0; i < arr.length; i++) {
	              if (unique.indexOf(arr[i]) === -1) unique.push(arr[i]);
	          }
	          return unique;
	      };

	      return $;
	  })();


	  /*===========================
	   Get Dom libraries
	   ===========================*/
	  var swiperDomPlugins = ['jQuery', 'Zepto', 'Dom7'];
	  for (var i = 0; i < swiperDomPlugins.length; i++) {
	  	if (window[swiperDomPlugins[i]]) {
	  		addLibraryPlugin(window[swiperDomPlugins[i]]);
	  	}
	  }
	  // Required DOM Plugins
	  var domLib;
	  if (typeof Dom7 === 'undefined') {
	  	domLib = window.Dom7 || window.Zepto || window.jQuery;
	  }
	  else {
	  	domLib = Dom7;
	  }

	  /*===========================
	  Add .swiper plugin from Dom libraries
	  ===========================*/
	  function addLibraryPlugin(lib) {
	      lib.fn.swiper = function (params) {
	          var firstInstance;
	          lib(this).each(function () {
	              var s = new Swiper(this, params);
	              if (!firstInstance) firstInstance = s;
	          });
	          return firstInstance;
	      };
	  }

	  if (domLib) {
	      if (!('transitionEnd' in domLib.fn)) {
	          domLib.fn.transitionEnd = function (callback) {
	              var events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],
	                  i, j, dom = this;
	              function fireCallBack(e) {
	                  /*jshint validthis:true */
	                  if (e.target !== this) return;
	                  callback.call(this, e);
	                  for (i = 0; i < events.length; i++) {
	                      dom.off(events[i], fireCallBack);
	                  }
	              }
	              if (callback) {
	                  for (i = 0; i < events.length; i++) {
	                      dom.on(events[i], fireCallBack);
	                  }
	              }
	              return this;
	          };
	      }
	      if (!('transform' in domLib.fn)) {
	          domLib.fn.transform = function (transform) {
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;
	              }
	              return this;
	          };
	      }
	      if (!('transition' in domLib.fn)) {
	          domLib.fn.transition = function (duration) {
	              if (typeof duration !== 'string') {
	                  duration = duration + 'ms';
	              }
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;
	              }
	              return this;
	          };
	      }
	  }


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var ion_1 = __webpack_require__(134);
	var util_1 = __webpack_require__(127);
	var item_sliding_gesture_1 = __webpack_require__(174);
	/**
	 * The List is a widely used interface element in almost any mobile app,
	 * and can include content ranging from basic text all the way to
	 * buttons, toggles, icons, and thumbnails.
	 *
	 * Both the list, which contains items, and the list items themselves
	 * can be any HTML element.
	 *
	 * Using the List and Item components make it easy to support various
	 * interaction modes such as swipe to edit, drag to reorder, and
	 * removing items.
	 *
	 * @demo /docs/v2/demos/list/
	 * @see {@link /docs/v2/components#lists List Component Docs}
	 *
	 */
	var List = (function (_super) {
	    __extends(List, _super);
	    function List(elementRef, _rendered) {
	        _super.call(this, elementRef);
	        this._rendered = _rendered;
	        this._enableSliding = true;
	        this._containsSlidingItems = false;
	    }
	    /**
	     * @private
	     */
	    List.prototype.ngOnDestroy = function () {
	        this._slidingGesture && this._slidingGesture.destroy();
	    };
	    Object.defineProperty(List.prototype, "sliding", {
	        /**
	         * Enable the sliding items.
	         *
	         * ```ts
	         * import {Component, ViewChild} from '@angular/core';
	         * import {List} from 'ionic-angular';
	         *
	         * @Component({...})
	         * export class MyClass {
	         *   @ViewChild(List) list: List;
	         *
	         *   constructor() { }
	         *
	         *   stopSliding() {
	         *     this.list.enableSlidingItems(false);
	         *   }
	         * }
	         * ```
	         * @param {boolean} shouldEnable whether the item-sliding should be enabled or not
	         */
	        get: function () {
	            return this._enableSliding;
	        },
	        set: function (val) {
	            this._enableSliding = util_1.isTrueProperty(val);
	            this._updateSlidingState();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    List.prototype.containsSlidingItem = function (contains) {
	        this._containsSlidingItems = contains;
	        this._updateSlidingState();
	    };
	    List.prototype._updateSlidingState = function () {
	        var shouldSlide = this._enableSliding && this._containsSlidingItems;
	        if (!shouldSlide) {
	            this._slidingGesture && this._slidingGesture.unlisten();
	            this._slidingGesture = null;
	        }
	        else if (!this._slidingGesture) {
	            void 0;
	            this._slidingGesture = new item_sliding_gesture_1.ItemSlidingGesture(this);
	        }
	    };
	    /**
	     * Close the open sliding item.
	     *
	     * ```ts
	     * import {Component, ViewChild} from '@angular/core';
	     * import {List} from 'ionic-angular';
	     *
	     * @Component({...})
	     * export class MyClass {
	     *   @ViewChild(List) list: List;
	     *
	     *   constructor() { }
	     *
	     *   closeItems() {
	     *     this.list.closeSlidingItems();
	     *   }
	     * }
	     * ```
	     */
	    List.prototype.closeSlidingItems = function () {
	        this._slidingGesture && this._slidingGesture.closeOpened();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], List.prototype, "sliding", null);
	    List = __decorate([
	        core_1.Directive({
	            selector: 'ion-list',
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
	    ], List);
	    return List;
	}(ion_1.Ion));
	exports.List = List;
	/**
	 * @private
	 */
	var ListHeader = (function () {
	    function ListHeader(_renderer, _elementRef, _id) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._id = _id;
	    }
	    Object.defineProperty(ListHeader.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        set: function (val) {
	            this._id = val;
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListHeader = __decorate([
	        core_1.Directive({
	            selector: 'ion-list-header'
	        }),
	        __param(2, core_1.Attribute('id')), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef, String])
	    ], ListHeader);
	    return ListHeader;
	}());
	exports.ListHeader = ListHeader;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var drag_gesture_1 = __webpack_require__(140);
	var dom_1 = __webpack_require__(124);
	var DRAG_THRESHOLD = 20;
	var MAX_ATTACK_ANGLE = 20;
	var ItemSlidingGesture = (function (_super) {
	    __extends(ItemSlidingGesture, _super);
	    function ItemSlidingGesture(list) {
	        _super.call(this, list.getNativeElement(), {
	            direction: 'x',
	            threshold: DRAG_THRESHOLD
	        });
	        this.list = list;
	        this.selectedContainer = null;
	        this.openContainer = null;
	        this.listen();
	    }
	    ItemSlidingGesture.prototype.onTapCallback = function (ev) {
	        if (isFromOptionButtons(ev.target)) {
	            return;
	        }
	        var didClose = this.closeOpened();
	        if (didClose) {
	            void 0;
	            ev.preventDefault();
	        }
	    };
	    ItemSlidingGesture.prototype.onDragStart = function (ev) {
	        var angle = Math.abs(ev.angle);
	        if (angle > MAX_ATTACK_ANGLE && Math.abs(angle - 180) > MAX_ATTACK_ANGLE) {
	            this.closeOpened();
	            return false;
	        }
	        if (this.selectedContainer) {
	            void 0;
	            return false;
	        }
	        var container = getContainer(ev);
	        if (!container) {
	            void 0;
	            return false;
	        }
	        // Close open container if it is not the selected one.
	        if (container !== this.openContainer) {
	            this.closeOpened();
	        }
	        this.selectedContainer = container;
	        this.openContainer = container;
	        container.startSliding(ev.center.x);
	        return true;
	    };
	    ItemSlidingGesture.prototype.onDrag = function (ev) {
	        if (this.selectedContainer) {
	            this.selectedContainer.moveSliding(ev.center.x);
	            ev.preventDefault();
	        }
	        return;
	    };
	    ItemSlidingGesture.prototype.onDragEnd = function (ev) {
	        var _this = this;
	        if (!this.selectedContainer) {
	            return;
	        }
	        ev.preventDefault();
	        var openAmount = this.selectedContainer.endSliding(ev.velocityX);
	        this.selectedContainer = null;
	        // TODO: I am not sure listening for a tap event is the best idea
	        // we should try mousedown/touchstart
	        if (openAmount === 0) {
	            this.openContainer = null;
	            this.off('tap', this.onTap);
	            this.onTap = null;
	        }
	        else if (!this.onTap) {
	            this.onTap = function (event) { return _this.onTapCallback(event); };
	            this.on('tap', this.onTap);
	        }
	    };
	    ItemSlidingGesture.prototype.closeOpened = function () {
	        if (!this.openContainer) {
	            return false;
	        }
	        this.openContainer.close();
	        this.openContainer = null;
	        this.selectedContainer = null;
	        this.off('tap', this.onTap);
	        this.onTap = null;
	        return true;
	    };
	    ItemSlidingGesture.prototype.unlisten = function () {
	        this.closeOpened();
	        _super.prototype.unlisten.call(this);
	        this.list = null;
	    };
	    return ItemSlidingGesture;
	}(drag_gesture_1.DragGesture));
	exports.ItemSlidingGesture = ItemSlidingGesture;
	function getContainer(ev) {
	    var ele = dom_1.closest(ev.target, 'ion-item-sliding', true);
	    if (ele) {
	        return ele['$ionComponent'];
	    }
	    return null;
	}
	function isFromOptionButtons(ele) {
	    return !!dom_1.closest(ele, 'ion-item-options', true);
	}


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var button_1 = __webpack_require__(157);
	var form_1 = __webpack_require__(130);
	var icon_1 = __webpack_require__(176);
	var item_reorder_1 = __webpack_require__(177);
	var label_1 = __webpack_require__(179);
	/**
	 * @name Item
	 * @description
	 * An item can contain text, images, and anything else. Generally it is placed in a list with other
	 * items. It can easily be swiped, deleted, reordered, edited, and more. An item is only required to
	 * be in a [List](../../list/List) if manipulating the item via gestures is required. It requires an
	 * [ItemSliding](../ItemSliding) wrapper element in order to be swiped.
	 *
	 *
	 * ## Common Usage
	 * There are a few elements that are considered items, but not all of them are styled to look the same.
	 * The basic item can be written as an `<ion-item>` element or it can be added to any element by adding
	 * `ion-item` as an attribute. List headers and item dividers, although styled differently, are also items
	 * and can be written as `<ion-list-header>` and `<ion-item-divider>`, respectively.
	 *
	 * ### As an Element
	 * A basic item should be written as a `<ion-item>` element when it is not clickable.
	 *
	 * ```html
	 * <ion-item>
	 *   Item
	 * </ion-item>
	 * ```
	 *
	 * A list header should be written as `<ion-list-header>`.
	 *
	 * ```html
	 * <ion-list-header>
	 *   List Header
	 * </ion-list-header>
	 * ```
	 *
	 * An item divider should be written as `<ion-item-divider>`.
	 *
	 * ```html
	 * <ion-item-divider>
	 *   Item Divider
	 * </ion-item-divider>
	 * ```
	 *
	 * ### As an Attribute
	 * The attribute `ion-item` should be added to a `<button>` when the item can be clicked or tapped. It
	 * should be added to an `<a>` element when the item needs to contain a `href`. It can be added as an
	 * attribute to any element to take on the item styling.
	 *
	 * ```html
	 * <button ion-item (click)="buttonClick()">
	 *   Button Item
	 * </button>
	 *
	 * <a ion-item href="https://www.ionicframework.com">
	 *   Anchor Item
	 * </a>
	 * ```
	 *
	 * Note: do not add `ion-item` as an attribute to an `<ion-list-header>` or `<ion-item-divider>` element
	 * as they are already items and their styling will be changed to look like a basic item.
	 *
	 * ## Detail Arrows
	 * By default, `<button>` and `<a>` elements with the `ion-item` attribute will display a right arrow icon
	 * on `ios` mode. To hide the right arrow icon on either of these elements, add the `detail-none` attribute
	 * to the item. To show the right arrow icon on an element that doesn't display is naturally, add the
	 * `detail-push` attribute to the item.
	 *
	 * ```html
	 * <ion-item detail-push>
	 *   Item with Detail Arrow
	 * </ion-item>
	 *
	 * <button ion-item (click)="buttonClick()">
	 *   Button Item with Detail Arrow
	 * </button>
	 *
	 * <a ion-item detail-none href="https://www.ionicframework.com">
	 *   Anchor Item with no Detail Arrow
	 * </a>
	 * ```
	 *
	 * This feature is not enabled by default for `md` and `wp` modes, but it can be enabled by setting the
	 * Sass variables `$item-md-detail-push-show` and `$item-wp-detail-push-show`, respectively, to `true`.
	 * It can also be disabled for ios by setting `$item-ios-detail-push-show` to `false`. See the
	 * [theming documentation](http://ionicframework.com/docs/v2/theming/overriding-ionic-variables/) for
	 * more information on overriding Sass variables.
	 *
	 *
	 * ## Item Placement
	 * Items rely heavily on content projection to position content. The item grabs content based on the
	 * element or attribute and positions it that way. This logic makes it possible to write a complex
	 * item with simple, understandable markup without having to worry about styling and positioning
	 * the elements.
	 *
	 * The below chart details the attributes item looks for and where it will place the element with
	 * that attribute inside of the item:
	 *
	 *  | Attribute      | Description                                                                                          |
	 *  |----------------|----------------------------------------------------------------------------------------------------- |
	 *  | `item-left`    | Placed to the left of all other elements, outside of the inner item.                                 |
	 *  | `item-right`   | Placed to the right of all other elements, inside of the inner item, outside of the input wrapper.   |
	 *  | `item-content` | Placed to the right of any `ion-label`, inside of the input wrapper.                                 |
	 *
	 * ### Checkboxes, Radios and Toggles
	 * [Checkboxes](../../checkbox/Checkbox) are positioned in the same place as the `item-left` attribute.
	 * [Radios](../../radio/RadioButton) and [Toggles](../../toggle/Toggle) are positioned in the same place
	 * as the `item-right` attribute. All of these components can be positioned differently by adding the
	 * `item-left` or `item-right` attribute.
	 *
	 * ### Content and Inputs
	 * A [Label](../../label/Label) is placed inside of the item to the left of all content and inputs. The
	 * following components are all placed in the same position as the `item-content` attribute: [Select](../../select/Select),
	 * [Input](../../input/Input), [TextArea](../../input/TextArea), [DateTime](../../datetime/DateTime), and
	 * [Range](../../range/Range).
	 *
	 * Any element directly placed inside of an `<ion-item>` that does not have one of the previously mentioned
	 * attributes and isn't one of the above elements will be placed inside of a [Label](../../label/Label).
	 *
	 *
	 * @usage
	 *
	 * ```html
	 * <ion-list>
	 *
	 *   <ion-list-header>
	 *     Header
	 *   </ion-list-header>
	 *
	 *   <ion-item>
	 *     Item
	 *   </ion-item>
	 *
	 *   <ion-item detail-push>
	 *     Item with Detail Arrow
	 *   </ion-item>
	 *
	 *   <button ion-item (click)="buttonClick()">
	 *     Button Item
	 *   </button>
	 *
	 *   <ion-item-divider>
	 *     Item Divider
	 *   </ion-item-divider>
	 *
	 *   <button ion-item detail-none (click)="buttonClick()">
	 *     Button Item with no Detail Arrow
	 *   </button>
	 *
	 *   <a ion-item href="https://www.ionicframework.com">
	 *     Anchor Item
	 *   </a>
	 *
	 *   <ion-item no-lines>
	 *     Item with no border
	 *   </ion-item>
	 *
	 *   <ion-item text-wrap>
	 *     Multiline text that should wrap when it is too long
	 *     to fit on one line in the item.
	 *   </ion-item>
	 *
	 * </ion-list>
	 * ```
	 *
	 *
	 * @advanced
	 *
	 * ```html
	 * <ion-list>
	 *
	 *   <!-- List header with buttons on each side -->
	 *   <ion-list-header>
	 *     <button item-left (click)="buttonClick()">Button</button>
	 *     List Header
	 *     <button outline item-right (click)="buttonClick()">Outline</button>
	 *   </ion-list-header>
	 *
	 *   <!-- Loops through and creates multiple items -->
	 *   <ion-item *ngFor="let item of items">
	 *     Item {% raw %}{{item}}{% endraw %}
	 *   </ion-item>
	 *
	 *   <!-- Button item with an icon on the left -->
	 *   <button ion-item>
	 *     <ion-icon name="star" item-left></ion-icon>
	 *     Button Item
	 *   </button>
	 *
	 *   <!-- Item with a label and content -->
	 *   <ion-item>
	 *     <ion-label>
	 *       Item Label
	 *     </ion-label>
	 *     <div item-content>
	 *       Item Content next to the label
	 *     </div>
	 *   </ion-item>
	 *
	 *   <!-- Item with left and right buttons -->
	 *   <ion-item>
	 *     <button item-left (click)="buttonClick()">Button</button>
	 *     Item
	 *     <button outline item-right (click)="buttonClick()">Outline</button>
	 *   </ion-item>
	 *
	 *   <!-- Item divider with a right button -->
	 *   <ion-item-divider>
	 *     Item Divider
	 *     <button item-right>Button</button>
	 *   </ion-item-divider>
	 *
	 *   <!-- Disabled button item with left and right buttons -->
	 *   <button ion-item disabled>
	 *     <button item-left (click)="buttonClick()">
	 *       <ion-icon name="home"></ion-icon>
	 *       Left Icon
	 *     </button>
	 *     Disabled Button Item
	 *     <button outline item-right (click)="buttonClick()">
	 *       <ion-icon name="star"></ion-icon>
	 *       Left Icon
	 *     </button>
	 *   </button>
	 *
	 *   <!-- Item with an avatar on the left and button on the right -->
	 *   <ion-item>
	 *     <ion-avatar item-left>
	 *       <img src="img/my-avatar.png">
	 *     </ion-avatar>
	 *     Avatar Item
	 *     <button outline item-right>View</button>
	 *   </ion-item>
	 *
	 *   <!-- Item with a thumbnail on the right -->
	 *   <ion-item>
	 *     <h2>Item</h2>
	 *     <p>Item Paragraph</p>
	 *     <ion-thumbnail item-right>
	 *       <img src="img/my-thumbnail.png">
	 *     </ion-thumbnail>
	 *   </ion-item>
	 *
	 *   <!-- Sliding item -->
	 *   <ion-item-sliding>
	 *     <ion-item>
	 *       Item
	 *     </ion-item>
	 *     <ion-item-options>
	 *       <button primary (click)="archive()">Archive</button>
	 *     </ion-item-options>
	 *   </ion-item-sliding>
	 *
	 * </ion-list>
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/item/
	 * @see {@link /docs/v2/components#lists List Component Docs}
	 * @see {@link ../../list/List List API Docs}
	 * @see {@link ../ItemSliding ItemSliding API Docs}
	 */
	var Item = (function () {
	    function Item(form, _renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._ids = -1;
	        this._inputs = [];
	        this._viewLabel = true;
	        /**
	         * @private
	         */
	        this.labelId = null;
	        this.id = form.nextId().toString();
	    }
	    /**
	     * @private
	     */
	    Item.prototype.registerInput = function (type) {
	        this._inputs.push(type);
	        return this.id + '-' + (++this._ids);
	    };
	    /**
	     * @private
	     */
	    Item.prototype.ngAfterContentInit = function () {
	        if (this._viewLabel && this._inputs.length) {
	            var labelText = this.getLabelText().trim();
	            this._viewLabel = (labelText.length > 0);
	        }
	        if (this._inputs.length > 1) {
	            this.setCssClass('item-multiple-inputs', true);
	        }
	    };
	    /**
	     * @private
	     */
	    Item.prototype.getLabelText = function () {
	        return this._label ? this._label.text : '';
	    };
	    Object.defineProperty(Item.prototype, "contentLabel", {
	        /**
	         * @private
	         */
	        set: function (label) {
	            if (label) {
	                this._label = label;
	                this.labelId = label.id = ('lbl-' + this.id);
	                if (label.type) {
	                    this.setCssClass('item-label-' + label.type, true);
	                }
	                this._viewLabel = false;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Item.prototype, "viewLabel", {
	        /**
	         * @private
	         */
	        set: function (label) {
	            if (!this._label) {
	                this._label = label;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Item.prototype, "_buttons", {
	        /**
	         * @private
	         */
	        set: function (buttons) {
	            buttons.toArray().forEach(function (button) {
	                // Don't add the item-button class if the user specifies
	                // a different size button
	                if (!button.isItem && !button._size) {
	                    button.addClass('item-button');
	                }
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Item.prototype, "_icons", {
	        /**
	         * @private
	         */
	        set: function (icons) {
	            icons.toArray().forEach(function (icon) {
	                icon.addClass('item-icon');
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Item.prototype.setCssClass = function (cssClass, shouldAdd) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
	    };
	    /**
	     * @private
	     */
	    Item.prototype.setCssStyle = function (property, value) {
	        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
	    };
	    /**
	     * @private
	     */
	    Item.prototype.getNativeElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    __decorate([
	        core_1.ContentChild(label_1.Label), 
	        __metadata('design:type', label_1.Label), 
	        __metadata('design:paramtypes', [label_1.Label])
	    ], Item.prototype, "contentLabel", null);
	    __decorate([
	        core_1.ViewChild(label_1.Label), 
	        __metadata('design:type', label_1.Label), 
	        __metadata('design:paramtypes', [label_1.Label])
	    ], Item.prototype, "viewLabel", null);
	    __decorate([
	        core_1.ContentChildren(button_1.Button), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], Item.prototype, "_buttons", null);
	    __decorate([
	        core_1.ContentChildren(icon_1.Icon), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], Item.prototype, "_icons", null);
	    Item = __decorate([
	        core_1.Component({
	            selector: 'ion-list-header,ion-item,[ion-item],ion-item-divider',
	            template: '<ng-content select="[item-left],ion-checkbox:not([item-right])"></ng-content>' +
	                '<div class="item-inner">' +
	                '<div class="input-wrapper">' +
	                '<ng-content select="ion-label"></ng-content>' +
	                '<ion-label *ngIf="_viewLabel">' +
	                '<ng-content></ng-content>' +
	                '</ion-label>' +
	                '<ng-content select="ion-select,ion-input,ion-textarea,ion-datetime,ion-range,[item-content]"></ng-content>' +
	                '</div>' +
	                '<ng-content select="[item-right],ion-radio,ion-toggle"></ng-content>' +
	                '<ion-reorder></ion-reorder>' +
	                '</div>' +
	                '<ion-button-effect></ion-button-effect>',
	            directives: [core_1.forwardRef(function () { return item_reorder_1.ItemReorder; })],
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [form_1.Form, core_1.Renderer, core_1.ElementRef])
	    ], Item);
	    return Item;
	}());
	exports.Item = Item;
	/**
	 * @private
	 */
	var ItemContent = (function () {
	    function ItemContent() {
	    }
	    ItemContent = __decorate([
	        core_1.Directive({
	            selector: 'ion-item,[ion-item]',
	            host: {
	                'class': 'item'
	            }
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ItemContent);
	    return ItemContent;
	}());
	exports.ItemContent = ItemContent;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	/**
	 * @name Icon
	 * @description
	 * Icons can be used on their own, or inside of a number of Ionic components.
	 * For a full list of available icons, check out the
	 * [Ionicons docs](../../../../ionicons).
	 *
	 * One feature of Ionicons in Ionic is when icon names are set, the actual icon
	 * which is rendered can change slightly depending on the mode the app is
	 * running from. For example, by setting the icon name of `alarm`, on iOS the
	 * icon will automatically apply `ios-alarm`, and on Material Design it will
	 * automatically apply `md-alarm`. This allows the developer to write the
	 * markup once while Ionic applies the appropriate icon based on the mode.
	 *
	 * @usage
	 * ```html
	 * <!-- automatically uses the correct "star" icon depending on the mode -->
	 * <ion-icon name="star"></ion-icon>
	 *
	 * <!-- explicity set the icon for each mode -->
	 * <ion-icon ios="ios-home" md="md-home"></ion-icon>
	 *
	 * <!-- always use the same icon, no matter what the mode -->
	 * <ion-icon name="ios-clock"></ion-icon>
	 * <ion-icon name="logo-twitter"></ion-icon>
	 * ```
	 *
	 * @demo /docs/v2/demos/icon/
	 * @see {@link /docs/v2/components#icons Icon Component Docs}
	 *
	 */
	var Icon = (function () {
	    function Icon(config, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._name = '';
	        this._ios = '';
	        this._md = '';
	        this._css = '';
	        this.mode = config.get('iconMode');
	    }
	    /**
	     * @private
	     */
	    Icon.prototype.ngOnDestroy = function () {
	        if (this._css) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
	        }
	    };
	    Object.defineProperty(Icon.prototype, "name", {
	        /**
	         * @input {string} Icon to use. Will load the appropriate icon for each mode
	         */
	        get: function () {
	            return this._name;
	        },
	        set: function (val) {
	            if (!(/^md-|^ios-|^logo-/.test(val))) {
	                // this does not have one of the defaults
	                // so lets auto add in the mode prefix for them
	                val = this.mode + '-' + val;
	            }
	            this._name = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Icon.prototype, "ios", {
	        /**
	         * @input {string} Explicitly set the icon to use on iOS
	         */
	        get: function () {
	            return this._ios;
	        },
	        set: function (val) {
	            this._ios = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Icon.prototype, "md", {
	        /**
	         * @input {string} Explicitly set the icon to use on MD
	         */
	        get: function () {
	            return this._md;
	        },
	        set: function (val) {
	            this._md = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Icon.prototype, "isActive", {
	        /**
	         * @input {bool} Whether or not the icon has an "active" appearance. On iOS an active icon is filled in or full appearance, and an inactive icon on iOS will use an outlined version of the icon same icon. Material Design icons do not change appearance depending if they're active or not. The `isActive` property is largely used by the tabbar.
	         */
	        get: function () {
	            return (this._isActive === undefined || this._isActive === true || this._isActive === 'true');
	        },
	        set: function (val) {
	            this._isActive = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Icon.prototype.update = function () {
	        var css = 'ion-';
	        if (this._ios && this.mode === 'ios') {
	            css += this._ios;
	        }
	        else if (this._md && this.mode === 'md') {
	            css += this._md;
	        }
	        else {
	            css += this._name;
	        }
	        if (this.mode === 'ios' && !this.isActive && css.indexOf('logo') < 0) {
	            css += '-outline';
	        }
	        if (this._css !== css) {
	            if (this._css) {
	                this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
	            }
	            this._css = css;
	            this._renderer.setElementClass(this._elementRef.nativeElement, css, true);
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', css.replace('ion-', '').replace('ios-', '').replace('md-', '').replace('-', ' '));
	        }
	    };
	    /**
	     * @private
	     * @param {string} add class name
	     */
	    Icon.prototype.addClass = function (className) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Icon.prototype, "name", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Icon.prototype, "ios", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Icon.prototype, "md", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Icon.prototype, "isActive", null);
	    Icon = __decorate([
	        core_1.Directive({
	            selector: 'ion-icon',
	            host: {
	                'role': 'img'
	            }
	        }), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef, core_1.Renderer])
	    ], Icon);
	    return Icon;
	}());
	exports.Icon = Icon;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var content_1 = __webpack_require__(158);
	var dom_1 = __webpack_require__(124);
	var item_1 = __webpack_require__(175);
	var item_reorder_gesture_1 = __webpack_require__(178);
	var util_1 = __webpack_require__(127);
	/**
	 * @private
	 */
	var Reorder = (function () {
	    function Reorder(elementRef, _rendered, _zone, _content) {
	        this._rendered = _rendered;
	        this._zone = _zone;
	        this._content = _content;
	        this._enableReorder = false;
	        this._lastToIndex = -1;
	        this.ionItemReorder = new core_1.EventEmitter();
	        this._element = elementRef.nativeElement;
	    }
	    /**
	     * @private
	     */
	    Reorder.prototype.ngOnDestroy = function () {
	        this._element = null;
	        this._reorderGesture && this._reorderGesture.destroy();
	    };
	    Object.defineProperty(Reorder.prototype, "reorder", {
	        get: function () {
	            return this._enableReorder;
	        },
	        set: function (val) {
	            this._enableReorder = util_1.isTrueProperty(val);
	            if (!this._enableReorder) {
	                this._reorderGesture && this._reorderGesture.destroy();
	                this._reorderGesture = null;
	            }
	            else if (!this._reorderGesture) {
	                void 0;
	                this._reorderGesture = new item_reorder_gesture_1.ItemReorderGesture(this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Reorder.prototype.reorderStart = function () {
	        var children = this._element.children;
	        var len = children.length;
	        this.setCssClass('reorder-active', true);
	        for (var i = 0; i < len; i++) {
	            children[i]['$ionIndex'] = i;
	        }
	    };
	    /**
	     * @private
	     */
	    Reorder.prototype.reorderEmit = function (fromIndex, toIndex) {
	        var _this = this;
	        this.reorderReset();
	        if (fromIndex !== toIndex) {
	            this._zone.run(function () {
	                _this.ionItemReorder.emit({
	                    from: fromIndex,
	                    to: toIndex,
	                });
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    Reorder.prototype.scrollContent = function (scroll) {
	        var scrollTop = this._content.getScrollTop() + scroll;
	        if (scroll !== 0) {
	            this._content.scrollTo(0, scrollTop, 0);
	        }
	        return scrollTop;
	    };
	    /**
	     * @private
	     */
	    Reorder.prototype.reorderReset = function () {
	        var children = this._element.children;
	        var len = children.length;
	        this.setCssClass('reorder-active', false);
	        var transform = dom_1.CSS.transform;
	        for (var i = 0; i < len; i++) {
	            children[i].style[transform] = '';
	        }
	        this._lastToIndex = -1;
	    };
	    /**
	     * @private
	     */
	    Reorder.prototype.reorderMove = function (fromIndex, toIndex, itemHeight) {
	        if (this._lastToIndex === -1) {
	            this._lastToIndex = fromIndex;
	        }
	        var lastToIndex = this._lastToIndex;
	        this._lastToIndex = toIndex;
	        // TODO: I think both loops can be merged into a single one
	        // but I had no luck last time I tried
	        /********* DOM READ ********** */
	        var children = this._element.children;
	        /********* DOM WRITE ********* */
	        var transform = dom_1.CSS.transform;
	        if (toIndex >= lastToIndex) {
	            for (var i = lastToIndex; i <= toIndex; i++) {
	                if (i !== fromIndex) {
	                    children[i].style[transform] = (i > fromIndex)
	                        ? "translateY(" + -itemHeight + "px)" : '';
	                }
	            }
	        }
	        if (toIndex <= lastToIndex) {
	            for (var i = toIndex; i <= lastToIndex; i++) {
	                if (i !== fromIndex) {
	                    children[i].style[transform] = (i < fromIndex)
	                        ? "translateY(" + itemHeight + "px)" : '';
	                }
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Reorder.prototype.setCssClass = function (classname, add) {
	        this._rendered.setElementClass(this._element, classname, add);
	    };
	    /**
	     * @private
	     */
	    Reorder.prototype.getNativeElement = function () {
	        return this._element;
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Reorder.prototype, "ionItemReorder", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Reorder.prototype, "reorder", null);
	    Reorder = __decorate([
	        core_1.Directive({
	            selector: '[reorder]',
	            host: {
	                '[class.reorder-enabled]': '_enableReorder',
	            }
	        }),
	        __param(3, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, core_1.NgZone, content_1.Content])
	    ], Reorder);
	    return Reorder;
	}());
	exports.Reorder = Reorder;
	/**
	 * @private
	 */
	var ItemReorder = (function () {
	    function ItemReorder(item, elementRef) {
	        this.item = item;
	        this.elementRef = elementRef;
	    }
	    ItemReorder.prototype.ngAfterContentInit = function () {
	        var item = this.item.getNativeElement();
	        if (item.parentNode.nodeName === 'ION-ITEM-SLIDING') {
	            this.elementRef.nativeElement['$ionReorderNode'] = item.parentNode;
	        }
	        else {
	            this.elementRef.nativeElement['$ionReorderNode'] = item;
	        }
	    };
	    ItemReorder = __decorate([
	        core_1.Component({
	            selector: 'ion-reorder',
	            template: "<ion-icon name=\"menu\"></ion-icon>"
	        }),
	        __param(0, core_1.Inject(core_1.forwardRef(function () { return item_1.Item; }))), 
	        __metadata('design:paramtypes', [item_1.Item, core_1.ElementRef])
	    ], ItemReorder);
	    return ItemReorder;
	}());
	exports.ItemReorder = ItemReorder;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ui_event_manager_1 = __webpack_require__(169);
	var dom_1 = __webpack_require__(124);
	var AUTO_SCROLL_MARGIN = 60;
	var SCROLL_JUMP = 10;
	var ITEM_REORDER_ACTIVE = 'reorder-active';
	/**
	 * @private
	 */
	var ItemReorderGesture = (function () {
	    function ItemReorderGesture(list) {
	        this.list = list;
	        this.selectedItemEle = null;
	        this.events = new ui_event_manager_1.UIEventManager(false);
	        var element = this.list.getNativeElement();
	        this.events.pointerEvents(element, this.onDragStart.bind(this), this.onDragMove.bind(this), this.onDragEnd.bind(this));
	    }
	    ItemReorderGesture.prototype.onDragStart = function (ev) {
	        var reorderElement = ev.target;
	        if (reorderElement.nodeName !== 'ION-REORDER') {
	            return false;
	        }
	        var item = reorderElement['$ionReorderNode'];
	        if (!item) {
	            void 0;
	            return false;
	        }
	        ev.preventDefault();
	        // Preparing state
	        this.selectedItemEle = item;
	        this.selectedItemHeight = item.offsetHeight;
	        this.lastYcoord = this.lastToIndex = -100;
	        this.windowHeight = window.innerHeight - AUTO_SCROLL_MARGIN;
	        this.lastScrollPosition = this.list.scrollContent(0);
	        this.offset = dom_1.pointerCoord(ev);
	        this.offset.y += this.lastScrollPosition;
	        item.classList.add(ITEM_REORDER_ACTIVE);
	        this.list.reorderStart();
	        return true;
	    };
	    ItemReorderGesture.prototype.onDragMove = function (ev) {
	        var selectedItem = this.selectedItemEle;
	        if (!selectedItem) {
	            return;
	        }
	        ev.preventDefault();
	        // Get coordinate
	        var coord = dom_1.pointerCoord(ev);
	        var posY = coord.y;
	        // Scroll if we reach the scroll margins
	        var scrollPosition = this.scroll(posY);
	        // Only perform hit test if we moved at least 30px from previous position
	        if (Math.abs(posY - this.lastYcoord) > 30) {
	            var overItem = this.itemForCoord(coord);
	            if (overItem) {
	                var toIndex = indexForItem(overItem);
	                if (toIndex && (toIndex !== this.lastToIndex || this.emptyZone)) {
	                    var fromIndex = indexForItem(this.selectedItemEle);
	                    this.lastToIndex = toIndex;
	                    this.lastYcoord = posY;
	                    this.emptyZone = false;
	                    this.list.reorderMove(fromIndex, toIndex, this.selectedItemHeight);
	                }
	            }
	            else {
	                this.emptyZone = true;
	            }
	        }
	        // Update selected item position
	        var ydiff = Math.round(posY - this.offset.y + scrollPosition);
	        selectedItem.style[dom_1.CSS.transform] = "translateY(" + ydiff + "px)";
	    };
	    ItemReorderGesture.prototype.onDragEnd = function () {
	        if (!this.selectedItemEle) {
	            return;
	        }
	        var toIndex = this.lastToIndex;
	        var fromIndex = indexForItem(this.selectedItemEle);
	        this.selectedItemEle.classList.remove(ITEM_REORDER_ACTIVE);
	        this.selectedItemEle = null;
	        this.list.reorderEmit(fromIndex, toIndex);
	    };
	    ItemReorderGesture.prototype.itemForCoord = function (coord) {
	        return itemForPosition(this.offset.x - 100, coord.y);
	    };
	    ItemReorderGesture.prototype.scroll = function (posY) {
	        if (posY < AUTO_SCROLL_MARGIN) {
	            this.lastScrollPosition = this.list.scrollContent(-SCROLL_JUMP);
	        }
	        else if (posY > this.windowHeight) {
	            this.lastScrollPosition = this.list.scrollContent(SCROLL_JUMP);
	        }
	        return this.lastScrollPosition;
	    };
	    /**
	     * @private
	     */
	    ItemReorderGesture.prototype.destroy = function () {
	        this.onDragEnd();
	        this.events.unlistenAll();
	        this.events = null;
	        this.list = null;
	    };
	    return ItemReorderGesture;
	}());
	exports.ItemReorderGesture = ItemReorderGesture;
	function itemForPosition(x, y) {
	    var element = document.elementFromPoint(x, y);
	    if (!element) {
	        return null;
	    }
	    if (element.nodeName !== 'ION-ITEM' && !element.hasAttribute('ion-item')) {
	        return null;
	    }
	    if (indexForItem(element)) {
	        return element;
	    }
	    var parent = element.parentNode;
	    if (indexForItem(parent)) {
	        return parent;
	    }
	    return null;
	}
	function indexForItem(element) {
	    return element['$ionIndex'];
	}


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	/**
	 * @name Label
	 * @description
	 * Labels are placed inside of an `ion-item` element and can be used
	 * to describe an `ion-input`, `ion-toggle`, `ion-checkbox`, and more.
	 *
	 * @property [fixed] - A persistent label that sits next the input.
	 * @property [floating] - A label that will float about the input if the input is empty or loses focus.
	 * @property [stacked] - A stacked label will always appear on top of the input.

	 *
	 * @usage
	 * ```html
	 *  <ion-item>
	 *    <ion-label>Username</ion-label>
	 *    <ion-input></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label fixed>Website</ion-label>
	 *    <ion-input type="url"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label floating>Email</ion-label>
	 *    <ion-input type="email"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label stacked>Phone</ion-label>
	 *    <ion-input type="tel"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label>Toggle</ion-label>
	 *    <ion-toggle></ion-toggle>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label>Checkbox</ion-label>
	 *    <ion-checkbox></ion-checkbox>
	 *  </ion-item>
	 * ```
	 *
	 * @demo /docs/v2/demos/label/
	 * @see {@link ../../../../components#inputs Input Component Docs}
	 * @see {@link ../../input/Input Input API Docs}
	 *
	 */
	var Label = (function () {
	    function Label(_elementRef, _renderer, isFloating, isStacked, isFixed, isInset) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.type = (isFloating === '' ? 'floating' : (isStacked === '' ? 'stacked' : (isFixed === '' ? 'fixed' : (isInset === '' ? 'inset' : null))));
	    }
	    Object.defineProperty(Label.prototype, "id", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._id;
	        },
	        set: function (val) {
	            this._id = val;
	            if (val) {
	                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Label.prototype, "text", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._elementRef.nativeElement.textContent || '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * @param {string} add class name
	     */
	    Label.prototype.addClass = function (className) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Label.prototype, "id", null);
	    Label = __decorate([
	        core_1.Directive({
	            selector: 'ion-label'
	        }),
	        __param(2, core_1.Attribute('floating')),
	        __param(3, core_1.Attribute('stacked')),
	        __param(4, core_1.Attribute('fixed')),
	        __param(5, core_1.Attribute('inset')), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, String, String, String, String])
	    ], Label);
	    return Label;
	}());
	exports.Label = Label;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var dom_1 = __webpack_require__(124);
	var item_1 = __webpack_require__(175);
	var util_1 = __webpack_require__(127);
	var list_1 = __webpack_require__(173);
	var SWIPE_MARGIN = 20;
	var ELASTIC_FACTOR = 0.55;
	/**
	 * @name ItemOptions
	 * @description
	 * The option buttons for an `ion-item-sliding`. These buttons can be placed either on the left or right side.
	 * You can combind the `(ionSiwpe)` event plus the `expandable` directive to create a full swipe action for the item.
	 *
	 * @usage
	 *
	 * ```html
	 * <ion-item-sliding>
	 *   <ion-item>
	 *     Item 1
	 *   </ion-item>
	 *   <ion-item-options side="right" (ionSwipe)="saveItem(item)">
	 *     <button expandable (click)="saveItem(item)">
	 *       <ion-icon name="star"></ion-icon>
	 *     </button>
	 *   </ion-item-options>
	 * </ion-item-sliding>
	 *```
	 */
	var ItemOptions = (function () {
	    function ItemOptions(_elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /**
	         * @output {event} Expression to evaluate when the item has been fully swiped.
	         */
	        this.ionSwipe = new core_1.EventEmitter();
	    }
	    /**
	     * @private
	     */
	    ItemOptions.prototype.setCssStyle = function (property, value) {
	        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
	    };
	    /**
	     * @private
	     */
	    ItemOptions.prototype.getSides = function () {
	        if (util_1.isPresent(this.side) && this.side === 'left') {
	            return 1 /* Left */;
	        }
	        else {
	            return 2 /* Right */;
	        }
	    };
	    /**
	     * @private
	     */
	    ItemOptions.prototype.width = function () {
	        return this._elementRef.nativeElement.offsetWidth;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], ItemOptions.prototype, "side", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ItemOptions.prototype, "ionSwipe", void 0);
	    ItemOptions = __decorate([
	        core_1.Directive({
	            selector: 'ion-item-options',
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
	    ], ItemOptions);
	    return ItemOptions;
	}());
	exports.ItemOptions = ItemOptions;
	/**
	 * @name ItemSliding
	 * @description
	 * A sliding item is a list item that can be swiped to reveal buttons. It requires
	 * an [Item](../Item) component as a child and a [List](../../list/List) component as
	 * a parent. All buttons to reveal can be placed in the `<ion-item-options>` element.
	 *
	 * @usage
	 * ```html
	 * <ion-list>
	 *   <ion-item-sliding #item>
	 *     <ion-item>
	 *       Item
	 *     </ion-item>
	 *     <ion-item-options side="left">
	 *       <button (click)="favorite(item)">Favorite</button>
	 *       <button danger (click)="share(item)">Share</button>
	 *     </ion-item-options>

	 *     <ion-item-options side="right">
	 *       <button (click)="unread(item)">Unread</button>
	 *     </ion-item-options>
	 *   </ion-item-sliding>
	 * </ion-list>
	 * ```
	 *
	 * ### Swipe Direction
	 * By default, the buttons are revealed when the sliding item is swiped from right to left,
	 * so the buttons are placed in the right side. But it's also possible to reveal them
	 * in the right side (sliding from left to right) by setting the `side` attribute
	 * on the `ion-item-options` element. Up to 2 `ion-item-options` can used at the same time
	 * in order to reveal two different sets of buttons depending the swipping direction.
	 *
	 * ```html
	 * <ion-item-options side="right">
	 *   <button (click)="archive(item)">
	 *     <ion-icon name="archive"></ion-icon>
	 *     Archive
	 *   </button>
	 * </ion-item-options>

	 * <ion-item-options side="left">
	 *   <button (click)="archive(item)">
	 *     <ion-icon name="archive"></ion-icon>
	 *     Archive
	 *   </button>
	 * </ion-item-options>
	 * ```
	 *
	 * ### Listening for events (ionDrag) and (ionSwipe)
	 * It's possible to know the current relative position of the sliding item by subscribing
	 * to the (ionDrag)` event.
	 *
	 * ```html
	 * <ion-item-sliding (ionDrag)="logDrag($event)">
	 *   <ion-item>Item</ion-item>
	 *   <ion-item-options>
	 *     <button>Favorite</button>
	 *   </ion-item-options>
	 * </ion-item-sliding>
	 * ```
	 *
	 * ### Button Layout
	 * If an icon is placed with text in the option button, by default it will
	 * display the icon on top of the text. This can be changed to display the icon
	 * to the left of the text by setting `icon-left` as an attribute on the
	 * `<ion-item-options>` element.
	 *
	 * ```html
	 * <ion-item-options icon-left>
	 *    <button (click)="archive(item)">
	 *      <ion-icon name="archive"></ion-icon>
	 *      Archive
	 *    </button>
	 *  </ion-item-options>
	 *
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/item-sliding/
	 * @see {@link /docs/v2/components#lists List Component Docs}
	 * @see {@link ../Item Item API Docs}
	 * @see {@link ../../list/List List API Docs}
	 */
	var ItemSliding = (function () {
	    function ItemSliding(list, _renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._openAmount = 0;
	        this._startX = 0;
	        this._optsWidthRightSide = 0;
	        this._optsWidthLeftSide = 0;
	        this._timer = null;
	        this._optsDirty = true;
	        this._state = 2 /* Disabled */;
	        /**
	         * @output {event} Expression to evaluate when the sliding position changes.
	         * It reports the relative position.
	         *
	         * ```ts
	         * ondrag(item) {
	         *   let percent = item.getSlidingPercent();
	         *   if (percent > 0) {
	         *     // positive
	         *     console.log('right side');
	         *   } else {
	         *     // negative
	         *     console.log('left side');
	         *   }
	         *   if (Math.abs(percent) > 1) {
	         *     console.log('overscroll');
	         *   }
	         * }
	         * ```
	         *
	         */
	        this.ionDrag = new core_1.EventEmitter();
	        list && list.containsSlidingItem(true);
	        _elementRef.nativeElement.$ionComponent = this;
	        this.setCssClass('item-wrapper', true);
	    }
	    Object.defineProperty(ItemSliding.prototype, "_itemOptions", {
	        set: function (itemOptions) {
	            var sides = 0;
	            for (var _i = 0, _a = itemOptions.toArray(); _i < _a.length; _i++) {
	                var item = _a[_i];
	                var side = item.getSides();
	                if (side === 1 /* Left */) {
	                    this._leftOptions = item;
	                }
	                else {
	                    this._rightOptions = item;
	                }
	                sides |= item.getSides();
	            }
	            this._optsDirty = true;
	            this._sides = sides;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    ItemSliding.prototype.getOpenAmount = function () {
	        return this._openAmount;
	    };
	    /**
	     * @private
	     */
	    ItemSliding.prototype.getSlidingPercent = function () {
	        var openAmount = this._openAmount;
	        if (openAmount > 0) {
	            return openAmount / this._optsWidthRightSide;
	        }
	        else if (openAmount < 0) {
	            return openAmount / this._optsWidthLeftSide;
	        }
	        else {
	            return 0;
	        }
	    };
	    /**
	     * @private
	     */
	    ItemSliding.prototype.startSliding = function (startX) {
	        if (this._timer) {
	            dom_1.clearNativeTimeout(this._timer);
	            this._timer = null;
	        }
	        if (this._openAmount === 0) {
	            this._optsDirty = true;
	            this._setState(4 /* Enabled */);
	        }
	        this._startX = startX + this._openAmount;
	        this.item.setCssStyle(dom_1.CSS.transition, 'none');
	    };
	    /**
	     * @private
	     */
	    ItemSliding.prototype.moveSliding = function (x) {
	        if (this._optsDirty) {
	            this.calculateOptsWidth();
	            return;
	        }
	        var openAmount = (this._startX - x);
	        switch (this._sides) {
	            case 2 /* Right */:
	                openAmount = Math.max(0, openAmount);
	                break;
	            case 1 /* Left */:
	                openAmount = Math.min(0, openAmount);
	                break;
	            case 3 /* Both */: break;
	            default: return;
	        }
	        if (openAmount > this._optsWidthRightSide) {
	            var optsWidth = this._optsWidthRightSide;
	            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
	        }
	        else if (openAmount < -this._optsWidthLeftSide) {
	            var optsWidth = -this._optsWidthLeftSide;
	            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
	        }
	        this._setOpenAmount(openAmount, false);
	        return openAmount;
	    };
	    /**
	     * @private
	     */
	    ItemSliding.prototype.endSliding = function (velocity) {
	        var restingPoint = (this._openAmount > 0)
	            ? this._optsWidthRightSide
	            : -this._optsWidthLeftSide;
	        // Check if the drag didn't clear the buttons mid-point
	        // and we aren't moving fast enough to swipe open
	        var isCloseDirection = (this._openAmount > 0) === !(velocity < 0);
	        var isMovingFast = Math.abs(velocity) > 0.3;
	        var isOnCloseZone = Math.abs(this._openAmount) < Math.abs(restingPoint / 2);
	        if (shouldClose(isCloseDirection, isMovingFast, isOnCloseZone)) {
	            restingPoint = 0;
	        }
	        this._setOpenAmount(restingPoint, true);
	        this.fireSwipeEvent();
	        return restingPoint;
	    };
	    ItemSliding.prototype.fireSwipeEvent = function () {
	        if (this._state & 32 /* SwipeRight */) {
	            this._rightOptions.ionSwipe.emit(this);
	        }
	        else if (this._state & 64 /* SwipeLeft */) {
	            this._leftOptions.ionSwipe.emit(this);
	        }
	    };
	    ItemSliding.prototype.calculateOptsWidth = function () {
	        var _this = this;
	        dom_1.nativeRaf(function () {
	            if (!_this._optsDirty) {
	                return;
	            }
	            _this._optsWidthRightSide = 0;
	            if (_this._rightOptions) {
	                _this._optsWidthRightSide = _this._rightOptions.width();
	            }
	            _this._optsWidthLeftSide = 0;
	            if (_this._leftOptions) {
	                _this._optsWidthLeftSide = _this._leftOptions.width();
	            }
	            _this._optsDirty = false;
	        });
	    };
	    ItemSliding.prototype._setOpenAmount = function (openAmount, isFinal) {
	        var _this = this;
	        if (this._timer) {
	            dom_1.clearNativeTimeout(this._timer);
	            this._timer = null;
	        }
	        this._openAmount = openAmount;
	        if (isFinal) {
	            this.item.setCssStyle(dom_1.CSS.transition, '');
	        }
	        else {
	            if (openAmount > 0) {
	                var state = (openAmount >= (this._optsWidthRightSide + SWIPE_MARGIN))
	                    ? 8 /* Right */ | 32 /* SwipeRight */
	                    : 8 /* Right */;
	                this._setState(state);
	            }
	            else if (openAmount < 0) {
	                var state = (openAmount <= (-this._optsWidthLeftSide - SWIPE_MARGIN))
	                    ? 16 /* Left */ | 64 /* SwipeLeft */
	                    : 16 /* Left */;
	                this._setState(state);
	            }
	        }
	        if (openAmount === 0) {
	            this._timer = dom_1.nativeTimeout(function () {
	                _this._setState(2 /* Disabled */);
	                _this._timer = null;
	            }, 600);
	            this.item.setCssStyle(dom_1.CSS.transform, '');
	            return;
	        }
	        this.item.setCssStyle(dom_1.CSS.transform, "translate3d(" + -openAmount + "px,0,0)");
	        this.ionDrag.emit(this);
	    };
	    ItemSliding.prototype._setState = function (state) {
	        if (state === this._state) {
	            return;
	        }
	        this.setCssClass('active-slide', (state !== 2 /* Disabled */));
	        this.setCssClass('active-options-right', !!(state & 8 /* Right */));
	        this.setCssClass('active-options-left', !!(state & 16 /* Left */));
	        this.setCssClass('active-swipe-right', !!(state & 32 /* SwipeRight */));
	        this.setCssClass('active-swipe-left', !!(state & 64 /* SwipeLeft */));
	        this._state = state;
	    };
	    /**
	     * Close the sliding item. Items can also be closed from the [List](../../list/List).
	     *
	     * The sliding item can be closed by grabbing a reference to `ItemSliding`. In the
	     * below example, the template reference variable `slidingItem` is placed on the element
	     * and passed to the `share` method.
	     *
	     * ```html
	     * <ion-list>
	     *   <ion-item-sliding #slidingItem>
	     *     <ion-item>
	     *       Item
	     *     </ion-item>
	     *     <ion-item-options>
	     *       <button (click)="share(slidingItem)">Share</button>
	     *     </ion-item-options>
	     *   </ion-item-sliding>
	     * </ion-list>
	     * ```
	     *
	     * ```ts
	     * import {Component} from '@angular/core';
	     * import {ItemSliding} from 'ionic-angular';
	     *
	     * @Component({...})
	     * export class MyClass {
	     *   constructor() { }
	     *
	     *   share(slidingItem: ItemSliding) {
	     *     slidingItem.close();
	     *   }
	     * }
	     * ```
	     */
	    ItemSliding.prototype.close = function () {
	        this._setOpenAmount(0, true);
	    };
	    /**
	     * @private
	     */
	    ItemSliding.prototype.setCssClass = function (cssClass, shouldAdd) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
	    };
	    /**
	     * @private
	     */
	    ItemSliding.prototype.setCssStyle = function (property, value) {
	        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
	    };
	    __decorate([
	        core_1.ContentChild(item_1.Item), 
	        __metadata('design:type', item_1.Item)
	    ], ItemSliding.prototype, "item", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ItemSliding.prototype, "ionDrag", void 0);
	    __decorate([
	        core_1.ContentChildren(ItemOptions), 
	        __metadata('design:type', core_1.QueryList), 
	        __metadata('design:paramtypes', [core_1.QueryList])
	    ], ItemSliding.prototype, "_itemOptions", null);
	    ItemSliding = __decorate([
	        core_1.Component({
	            selector: 'ion-item-sliding',
	            template: '<ng-content select="ion-item,[ion-item]"></ng-content>' +
	                '<ng-content select="ion-item-options"></ng-content>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [list_1.List, core_1.Renderer, core_1.ElementRef])
	    ], ItemSliding);
	    return ItemSliding;
	}());
	exports.ItemSliding = ItemSliding;
	function shouldClose(isCloseDirection, isMovingFast, isOnCloseZone) {
	    // The logic required to know when the sliding item should close (openAmount=0)
	    // depends on three booleans (isCloseDirection, isMovingFast, isOnCloseZone)
	    // and it ended up being too complicated to be written manually without errors
	    // so the truth table is attached below: (0=false, 1=true)
	    // isCloseDirection | isMovingFast | isOnCloseZone || shouldClose
	    //         0        |       0      |       0       ||    0
	    //         0        |       0      |       1       ||    1
	    //         0        |       1      |       0       ||    0
	    //         0        |       1      |       1       ||    0
	    //         1        |       0      |       0       ||    0
	    //         1        |       0      |       1       ||    1
	    //         1        |       1      |       0       ||    1
	    //         1        |       1      |       1       ||    1
	    // The resulting expression was generated by resolving the K-map (Karnaugh map):
	    var shouldClose = (!isMovingFast && isOnCloseZone) || (isCloseDirection && isMovingFast);
	    return shouldClose;
	}


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var virtual_util_1 = __webpack_require__(182);
	var dom_1 = __webpack_require__(124);
	var config_1 = __webpack_require__(125);
	var content_1 = __webpack_require__(158);
	var img_1 = __webpack_require__(164);
	var util_1 = __webpack_require__(127);
	var platform_1 = __webpack_require__(126);
	var view_controller_1 = __webpack_require__(153);
	var virtual_item_1 = __webpack_require__(183);
	/**
	 * @name VirtualScroll
	 * @description
	 * Virtual Scroll displays a virtual, "infinite" list. An array of records
	 * is passed to the virtual scroll containing the data to create templates
	 * for. The template created for each record, referred to as a cell, can
	 * consist of items, headers, and footers.
	 *
	 * For performance reasons, not every record in the list is rendered at once;
	 * instead a small subset of records (enough to fill the viewport) are rendered
	 * and reused as the user scrolls.
	 *
	 * ### The Basics
	 *
	 * The array of records should be passed to the `virtualScroll` property.
	 * The data given to the `virtualScroll` property must be an array. An item
	 * template with the `*virtualItem` property is required in the `virtualScroll`.
	 * The `virtualScroll` and `*virtualItem` properties can be added to any element.
	 *
	 * ```html
	 * <ion-list [virtualScroll]="items">
	 *
	 *   <ion-item *virtualItem="let item">
	 *     {% raw %}{{ item }}{% endraw %}
	 *   </ion-item>
	 *
	 * </ion-list>
	 * ```
	 *
	 *
	 * ### Section Headers and Footers
	 *
	 * Section headers and footers are optional. They can be dynamically created
	 * from developer-defined functions. For example, a large list of contacts
	 * usually has a divider for each letter in the alphabet. Developers provide
	 * their own custom function to be called on each record. The logic in the
	 * custom function should determine whether to create the section template
	 * and what data to provide to the template. The custom function should
	 * return `null` if a template shouldn't be created.
	 *
	 * ```html
	 * <ion-list [virtualScroll]="items" [headerFn]="myHeaderFn">
	 *
	 *   <ion-item-divider *virtualHeader="let header">
	 *     Header: {% raw %}{{ header }}{% endraw %}
	 *   </ion-item-divider>
	 *
	 *   <ion-item *virtualItem="let item">
	 *     Item: {% raw %}{{ item }}{% endraw %}
	 *   </ion-item>
	 *
	 * </ion-list>
	 * ```
	 *
	 * Below is an example of a custom function called on every record. It
	 * gets passed the individual record, the record's index number,
	 * and the entire array of records. In this example, after every 20
	 * records a header will be inserted. So between the 19th and 20th records,
	 * between the 39th and 40th, and so on, a `<ion-item-divider>` will
	 * be created and the template's data will come from the function's
	 * returned data.
	 *
	 * ```ts
	 * myHeaderFn(record, recordIndex, records) {
	 *   if (recordIndex % 20 === 0) {
	 *     return 'Header ' + recordIndex;
	 *   }
	 *   return null;
	 * }
	 * ```
	 *
	 *
	 * ### Approximate Widths and Heights
	 *
	 * The approximate width and height of each template is used to help
	 * determine how many cells should be created, and to help calculate
	 * the height of the scrollable area. Note that the actual rendered size
	 * of each cell comes from the app's CSS, whereas this approximation
	 * is only used to help calculate initial dimensions.
	 *
	 * It's also important to know that Ionic's default item sizes have
	 * slightly different heights between platforms, which is perfectly fine.
	 * An exact pixel-perfect size is not necessary, but a good estimation
	 * is important. Basically if each item is roughly 500px tall, rather than
	 * the default of 40px tall, it's extremely important to know for virtual
	 * scroll to calculate a good height.
	 *
	 *
	 * ### Images Within Virtual Scroll
	 *
	 * Ionic provides `<ion-img>` to manage HTTP requests and image rendering.
	 * Additionally, it includes a customizable placeholder element which shows
	 * before the image has finished loading. While scrolling through items
	 * quickly, `<ion-img>` knows not to make any image requests, and only loads
	 * the images that are viewable after scrolling. It's also important for app
	 * developers to ensure image sizes are locked in, and after images have fully
	 * loaded they do not change size and affect any other element sizes.
	 *
	 * We recommend using our `<ion-img>` element over the native `<img>` element
	 * because when an `<img>` element is added to the DOM, it immediately
	 * makes a HTTP request for the image file. HTTP requests, image
	 * decoding, and image rendering can cause issues while scrolling. For virtual
	 * scrolling, the natural effects of the `<img>` are not desirable features.
	 *
	 * ```html
	 * <ion-list [virtualScroll]="items">
	 *
	 *   <ion-item *virtualItem="let item">
	 *     <ion-avatar item-left>
	 *       <ion-img [src]="item.avatarUrl"></ion-img>
	 *     </ion-avatar>
	 *    {% raw %} {{ item.firstName }} {{ item.lastName }}{% endraw %}
	 *   </ion-item>
	 *
	 * </ion-list>
	 * ```
	 *
	 *
	 * ### Performance Tips
	 *
	 * - Use `<ion-img>` rather than `<img>` so images are lazy loaded
	 *   while scrolling.
	 * - Image sizes should be locked in, meaning the size of any element
	 *   should not change after the image has loaded.
	 * - Provide an approximate width and height so the virtual scroll can
	 *   best calculate the cell height.
	 * - Changing the dataset requires the entire virtual scroll to be
	 *   reset, which is an expensive operation and should be avoided
	 *   if possible.
	 * - Do not perform any DOM manipulation within section header and
	 *   footer functions. These functions are called for every record in the
	 *   dataset, so please make sure they're performant.
	 *
	 */
	var VirtualScroll = (function () {
	    function VirtualScroll(_iterableDiffers, _elementRef, _renderer, _zone, _cd, _content, _platform, _ctrl, config) {
	        this._iterableDiffers = _iterableDiffers;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._zone = _zone;
	        this._cd = _cd;
	        this._content = _content;
	        this._platform = _platform;
	        this._ctrl = _ctrl;
	        this._records = [];
	        this._cells = [];
	        this._nodes = [];
	        this._vHeight = 0;
	        this._lastCheck = 0;
	        this._data = {
	            scrollTop: 0,
	        };
	        this._queue = null;
	        /**
	         * @input {number} The buffer ratio is used to decide how many cells
	         * should get created when initially rendered. The number is a
	         * multiplier against the viewable area's height. For example, if it
	         * takes `20` cells to fill up the height of the viewable area, then
	         * with a buffer ratio of `2` it will create `40` cells that are
	         * available for reuse while scrolling. For better performance, it's
	         * better to have more cells than what are required to fill the
	         * viewable area. Default is `2`.
	         */
	        this.bufferRatio = 2;
	        /**
	         * @input {string} The approximate width of each item template's cell.
	         * This dimension is used to help determine how many cells should
	         * be created when initialized, and to help calculate the height of
	         * the scrollable area. This value can use either `px` or `%` units.
	         * Note that the actual rendered size of each cell comes from the
	         * app's CSS, whereas this approximation is used to help calculate
	         * initial dimensions. Default is `100%`.
	         */
	        this.approxItemWidth = '100%';
	        /**
	         * @input {string} The approximate height of each item template's cell.
	         * This dimension is used to help determine how many cells should
	         * be created when initialized, and to help calculate the height of
	         * the scrollable area. This height value can only use `px` units.
	         * Note that the actual rendered size of each cell comes from the
	         * app's CSS, whereas this approximation is used to help calculate
	         * initial dimensions. Default is `40px`.
	         */
	        this.approxItemHeight = '40px';
	        /**
	         * @input {string} The approximate width of each header template's cell.
	         * This dimension is used to help determine how many cells should
	         * be created when initialized, and to help calculate the height of
	         * the scrollable area. This value can use either `px` or `%` units.
	         * Note that the actual rendered size of each cell comes from the
	         * app's CSS, whereas this approximation is used to help calculate
	         * initial dimensions. Default is `100%`.
	         */
	        this.approxHeaderWidth = '100%';
	        /**
	         * @input {string} The approximate height of each header template's cell.
	         * This dimension is used to help determine how many cells should
	         * be created when initialized, and to help calculate the height of
	         * the scrollable area. This height value can only use `px` units.
	         * Note that the actual rendered size of each cell comes from the
	         * app's CSS, whereas this approximation is used to help calculate
	         * initial dimensions. Default is `40px`.
	         */
	        this.approxHeaderHeight = '40px';
	        /**
	         * @input {string} The approximate width of each footer template's cell.
	         * This dimension is used to help determine how many cells should
	         * be created when initialized, and to help calculate the height of
	         * the scrollable area. This value can use either `px` or `%` units.
	         * Note that the actual rendered size of each cell comes from the
	         * app's CSS, whereas this approximation is used to help calculate
	         * initial dimensions. Default is `100%`.
	         */
	        this.approxFooterWidth = '100%';
	        /**
	         * @input {string} The approximate height of each footer template's cell.
	         * This dimension is used to help determine how many cells should
	         * be created when initialized, and to help calculate the height of
	         * the scrollable area. This height value can only use `px` units.
	         * Note that the actual rendered size of each cell comes from the
	         * app's CSS, whereas this approximation is used to help calculate
	         * initial dimensions. Default is `40px`.
	         */
	        this.approxFooterHeight = '40px';
	        this._eventAssist = config.getBoolean('virtualScrollEventAssist');
	    }
	    Object.defineProperty(VirtualScroll.prototype, "virtualScroll", {
	        /**
	         * @input {array} The data that builds the templates within the virtual scroll.
	         * This is the same data that you'd pass to `ngFor`. It's important to note
	         * that when this data has changed, then the entire virtual scroll is reset,
	         * which is an expensive operation and should be avoided if possible.
	         */
	        set: function (val) {
	            this._records = val;
	            if (util_1.isBlank(this._differ) && util_1.isPresent(val)) {
	                this._differ = this._iterableDiffers.find(val).create(this._cd, this._trackBy);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VirtualScroll.prototype, "headerFn", {
	        /**
	         * @input {function} Section headers and the data used within its given
	         * template can be dynamically created by passing a function to `headerFn`.
	         * For example, a large list of contacts usually has dividers between each
	         * letter in the alphabet. App's can provide their own custom `headerFn`
	         * which is called with each record within the dataset. The logic within
	         * the header function can decide if the header template should be used,
	         * and what data to give to the header template. The function must return
	         * `null` if a header cell shouldn't be created.
	         */
	        set: function (val) {
	            if (util_1.isFunction(val)) {
	                this._hdrFn = val.bind((this._ctrl && this._ctrl.instance) || this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VirtualScroll.prototype, "footerFn", {
	        /**
	         * @input {function} Section footers and the data used within its given
	         * template can be dynamically created by passing a function to `footerFn`.
	         * The logic within the footer function can decide if the footer template
	         * should be used, and what data to give to the footer template. The function
	         * must return `null` if a footer cell shouldn't be created.
	         */
	        set: function (val) {
	            if (util_1.isFunction(val)) {
	                this._ftrFn = val.bind((this._ctrl && this._ctrl.instance) || this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VirtualScroll.prototype, "virtualTrackBy", {
	        /**
	         * @input {function} Same as `ngForTrackBy` which can be used on `ngFor`.
	         */
	        set: function (val) {
	            this._trackBy = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    VirtualScroll.prototype.ngDoCheck = function () {
	        if (this._init) {
	            this.update(true);
	        }
	    };
	    /**
	     * @private
	     */
	    VirtualScroll.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        if (!this._init) {
	            if (!this._itmTmp) {
	                throw 'virtualItem required within virtualScroll';
	            }
	            this._init = true;
	            this.update(true);
	            this._platform.onResize(function () {
	                void 0;
	                _this.update(false);
	            });
	        }
	    };
	    /**
	     * @private
	     * DOM READ THEN DOM WRITE
	     */
	    VirtualScroll.prototype.update = function (checkChanges) {
	        var self = this;
	        if (!self._records || !self._records.length)
	            return;
	        if (checkChanges) {
	            if (util_1.isPresent(self._differ)) {
	                var changes = self._differ.diff(self._records);
	                if (!util_1.isPresent(changes))
	                    return;
	            }
	        }
	        void 0;
	        // reset everything
	        self._cells.length = 0;
	        self._nodes.length = 0;
	        self._itmTmp.viewContainer.clear();
	        self._elementRef.nativeElement.parentElement.scrollTop = 0;
	        var attempts = 0;
	        function readDimensions(done /* cuz promises add unnecessary overhead here */) {
	            if (self._data.valid) {
	                // good to go, we already have good dimension data
	                done();
	            }
	            else {
	                // ******** DOM READ ****************
	                virtual_util_1.calcDimensions(self._data, self._elementRef.nativeElement.parentElement, self.approxItemWidth, self.approxItemHeight, self.approxHeaderWidth, self.approxHeaderHeight, self.approxFooterWidth, self.approxFooterHeight, self.bufferRatio);
	                if (self._data.valid) {
	                    // sweet, we got some good dimension data!
	                    done();
	                }
	                else if (attempts < 30) {
	                    // oh no! the DOM doesn't have good data yet!
	                    // let's try again in XXms, and give up eventually if we never get data
	                    attempts++;
	                    dom_1.nativeRaf(function () {
	                        readDimensions(done);
	                    });
	                }
	            }
	        }
	        // ******** DOM READ ****************
	        readDimensions(function () {
	            virtual_util_1.processRecords(self._data.renderHeight, self._records, self._cells, self._hdrFn, self._ftrFn, self._data);
	            // ******** DOM WRITE ****************
	            self.renderVirtual();
	            // list for scroll events
	            self.addScrollListener();
	        });
	    };
	    /**
	     * @private
	     * DOM WRITE
	     */
	    VirtualScroll.prototype.renderVirtual = function () {
	        // initialize nodes with the correct cell data
	        this._data.topCell = 0;
	        this._data.bottomCell = (this._cells.length - 1);
	        virtual_util_1.populateNodeData(0, this._data.bottomCell, this._data.viewWidth, true, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, true);
	        // ******** DOM WRITE ****************
	        this._cd.detectChanges();
	        // wait a frame before trying to read and calculate the dimensions
	        dom_1.nativeRaf(this.postRenderVirtual.bind(this));
	    };
	    /**
	     * @private
	     * DOM READ THEN DOM WRITE
	     */
	    VirtualScroll.prototype.postRenderVirtual = function () {
	        // ******** DOM READ THEN DOM WRITE ****************
	        virtual_util_1.initReadNodes(this._nodes, this._cells, this._data);
	        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
	        // ******** DOM WRITE ****************
	        this._renderer.setElementClass(this._elementRef.nativeElement, 'virtual-scroll', true);
	        // ******** DOM WRITE ****************
	        virtual_util_1.writeToNodes(this._nodes, this._cells, this._records.length);
	        // ******** DOM WRITE ****************
	        this.setVirtualHeight(virtual_util_1.estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
	    };
	    /**
	     * @private
	     */
	    VirtualScroll.prototype.scrollUpdate = function () {
	        dom_1.clearNativeTimeout(this._tmId);
	        this._tmId = dom_1.nativeTimeout(this.onScrollEnd.bind(this), SCROLL_END_TIMEOUT_MS);
	        var data = this._data;
	        if (this._queue === QUEUE_CHANGE_DETECTION) {
	            // ******** DOM WRITE ****************
	            this._cd.detectChanges();
	            // ******** DOM WRITE ****************
	            virtual_util_1.writeToNodes(this._nodes, this._cells, this._records.length);
	            // ******** DOM WRITE ****************
	            this.setVirtualHeight(virtual_util_1.estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
	            this._queue = null;
	        }
	        else {
	            data.scrollDiff = (data.scrollTop - this._lastCheck);
	            if (Math.abs(data.scrollDiff) > SCROLL_DIFFERENCE_MINIMUM) {
	                // don't bother updating if the scrollTop hasn't changed much
	                this._lastCheck = data.scrollTop;
	                if (data.scrollDiff > 0) {
	                    // load data we may not have processed yet
	                    var stopAtHeight = (data.scrollTop + data.renderHeight);
	                    virtual_util_1.processRecords(stopAtHeight, this._records, this._cells, this._hdrFn, this._ftrFn, data);
	                }
	                // ******** DOM READ ****************
	                virtual_util_1.updateDimensions(this._nodes, this._cells, data, false);
	                virtual_util_1.adjustRendered(this._cells, data);
	                var madeChanges = virtual_util_1.populateNodeData(data.topCell, data.bottomCell, data.viewWidth, data.scrollDiff > 0, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, false);
	                if (madeChanges) {
	                    // do not update images while scrolling
	                    this._imgs.forEach(function (img) {
	                        img.enable(false);
	                    });
	                    // queue making updates in the next frame
	                    this._queue = QUEUE_CHANGE_DETECTION;
	                }
	                else {
	                    this._queue = null;
	                }
	            }
	        }
	    };
	    /**
	     * @private
	     * DOM WRITE
	     */
	    VirtualScroll.prototype.onScrollEnd = function () {
	        // scrolling is done, allow images to be updated now
	        this._imgs.forEach(function (img) {
	            img.enable(true);
	        });
	        // ******** DOM READ ****************
	        virtual_util_1.updateDimensions(this._nodes, this._cells, this._data, false);
	        virtual_util_1.adjustRendered(this._cells, this._data);
	        // ******** DOM WRITE ****************
	        this._cd.detectChanges();
	        // ******** DOM WRITE ****************
	        this.setVirtualHeight(virtual_util_1.estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.05));
	    };
	    /**
	     * @private
	     * DOM WRITE
	     */
	    VirtualScroll.prototype.setVirtualHeight = function (newVirtualHeight) {
	        if (newVirtualHeight !== this._vHeight) {
	            // ******** DOM WRITE ****************
	            this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', newVirtualHeight > 0 ? newVirtualHeight + 'px' : '');
	            this._vHeight = newVirtualHeight;
	            void 0;
	        }
	    };
	    /**
	     * @private
	     * NO DOM
	     */
	    VirtualScroll.prototype.addScrollListener = function () {
	        var self = this;
	        if (!self._unreg) {
	            self._zone.runOutsideAngular(function () {
	                function onScroll() {
	                    // ******** DOM READ ****************
	                    self._data.scrollTop = self._content.getScrollTop();
	                    // ******** DOM READ THEN DOM WRITE ****************
	                    self.scrollUpdate();
	                }
	                if (self._eventAssist) {
	                    // use JS scrolling for iOS UIWebView
	                    // goal is to completely remove this when iOS
	                    // fully supports scroll events
	                    // listen to JS scroll events
	                    self._unreg = self._content.jsScroll(onScroll);
	                }
	                else {
	                    // listen to native scroll events
	                    self._unreg = self._content.addScrollListener(onScroll);
	                }
	            });
	        }
	    };
	    /**
	     * @private
	     * NO DOM
	     */
	    VirtualScroll.prototype.ngOnDestroy = function () {
	        this._unreg && this._unreg();
	        this._unreg = null;
	    };
	    __decorate([
	        core_1.ContentChild(virtual_item_1.VirtualItem), 
	        __metadata('design:type', virtual_item_1.VirtualItem)
	    ], VirtualScroll.prototype, "_itmTmp", void 0);
	    __decorate([
	        core_1.ContentChild(virtual_item_1.VirtualHeader), 
	        __metadata('design:type', virtual_item_1.VirtualHeader)
	    ], VirtualScroll.prototype, "_hdrTmp", void 0);
	    __decorate([
	        core_1.ContentChild(virtual_item_1.VirtualFooter), 
	        __metadata('design:type', virtual_item_1.VirtualFooter)
	    ], VirtualScroll.prototype, "_ftrTmp", void 0);
	    __decorate([
	        core_1.ContentChildren(img_1.Img), 
	        __metadata('design:type', core_1.QueryList)
	    ], VirtualScroll.prototype, "_imgs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], VirtualScroll.prototype, "virtualScroll", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], VirtualScroll.prototype, "bufferRatio", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], VirtualScroll.prototype, "approxItemWidth", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], VirtualScroll.prototype, "approxItemHeight", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], VirtualScroll.prototype, "approxHeaderWidth", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], VirtualScroll.prototype, "approxHeaderHeight", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], VirtualScroll.prototype, "approxFooterWidth", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], VirtualScroll.prototype, "approxFooterHeight", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Function])
	    ], VirtualScroll.prototype, "headerFn", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Function])
	    ], VirtualScroll.prototype, "footerFn", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Function])
	    ], VirtualScroll.prototype, "virtualTrackBy", null);
	    VirtualScroll = __decorate([
	        core_1.Directive({
	            selector: '[virtualScroll]'
	        }),
	        __param(7, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.IterableDiffers, core_1.ElementRef, core_1.Renderer, core_1.NgZone, core_1.ChangeDetectorRef, content_1.Content, platform_1.Platform, view_controller_1.ViewController, config_1.Config])
	    ], VirtualScroll);
	    return VirtualScroll;
	}());
	exports.VirtualScroll = VirtualScroll;
	var SCROLL_END_TIMEOUT_MS = 140;
	var SCROLL_DIFFERENCE_MINIMUM = 20;
	var QUEUE_CHANGE_DETECTION = 0;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dom_1 = __webpack_require__(124);
	/**
	 * NO DOM
	 */
	function processRecords(stopAtHeight, records, cells, headerFn, footerFn, data) {
	    var record;
	    var startRecordIndex;
	    var previousCell;
	    var tmpData;
	    var lastRecordIndex = (records.length - 1);
	    if (cells.length) {
	        // we already have cells
	        previousCell = cells[cells.length - 1];
	        if (previousCell.top + previousCell.height > stopAtHeight) {
	            return;
	        }
	        startRecordIndex = (previousCell.record + 1);
	    }
	    else {
	        // no cells have been created yet
	        previousCell = {
	            row: 0,
	            width: 0,
	            height: 0,
	            top: 0,
	            left: 0,
	            tmpl: -1
	        };
	        startRecordIndex = 0;
	    }
	    var processedTotal = 0;
	    for (var recordIndex = startRecordIndex; recordIndex <= lastRecordIndex; recordIndex++) {
	        record = records[recordIndex];
	        if (headerFn) {
	            tmpData = headerFn(record, recordIndex, records);
	            if (tmpData !== null) {
	                // add header data
	                previousCell = addCell(previousCell, recordIndex, TEMPLATE_HEADER, tmpData, data.hdrWidth, data.hdrHeight, data.viewWidth);
	                cells.push(previousCell);
	            }
	        }
	        // add item data
	        previousCell = addCell(previousCell, recordIndex, TEMPLATE_ITEM, null, data.itmWidth, data.itmHeight, data.viewWidth);
	        cells.push(previousCell);
	        if (footerFn) {
	            tmpData = footerFn(record, recordIndex, records);
	            if (tmpData !== null) {
	                // add footer data
	                previousCell = addCell(previousCell, recordIndex, TEMPLATE_FOOTER, tmpData, data.ftrWidth, data.ftrHeight, data.viewWidth);
	                cells.push(previousCell);
	            }
	        }
	        if (previousCell.record === lastRecordIndex) {
	            previousCell.isLast = true;
	        }
	        // should always process at least 3 records
	        processedTotal++;
	        if (previousCell.top + previousCell.height + data.itmHeight > stopAtHeight && processedTotal > 3) {
	            return;
	        }
	    }
	}
	exports.processRecords = processRecords;
	function addCell(previousCell, recordIndex, tmpl, tmplData, cellWidth, cellHeight, viewportWidth) {
	    var newCell;
	    if (previousCell.left + previousCell.width + cellWidth > viewportWidth) {
	        // add a new cell in a new row
	        newCell = {
	            record: recordIndex,
	            tmpl: tmpl,
	            row: (previousCell.row + 1),
	            width: cellWidth,
	            height: cellHeight,
	            top: (previousCell.top + previousCell.height),
	            left: 0,
	            reads: 0,
	        };
	    }
	    else {
	        // add a new cell in the same row
	        newCell = {
	            record: recordIndex,
	            tmpl: tmpl,
	            row: previousCell.row,
	            width: cellWidth,
	            height: cellHeight,
	            top: previousCell.top,
	            left: (previousCell.left + previousCell.width),
	            reads: 0,
	        };
	    }
	    if (tmplData) {
	        newCell.data = tmplData;
	    }
	    return newCell;
	}
	/**
	 * NO DOM
	 */
	function populateNodeData(startCellIndex, endCellIndex, viewportWidth, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp, initialLoad) {
	    var madeChanges = false;
	    var node;
	    var availableNode;
	    var cell;
	    var previousCell;
	    var isAlreadyRendered;
	    var lastRecordIndex = (records.length - 1);
	    var viewInsertIndex = null;
	    var totalNodes = nodes.length;
	    var templateRef;
	    startCellIndex = Math.max(startCellIndex, 0);
	    endCellIndex = Math.min(endCellIndex, cells.length - 1);
	    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {
	        cell = cells[cellIndex];
	        availableNode = null;
	        isAlreadyRendered = false;
	        // find the first one that's available
	        if (!initialLoad) {
	            for (var i = 0; i < totalNodes; i++) {
	                node = nodes[i];
	                if (cell.tmpl !== node.tmpl || i === 0 && cellIndex !== 0) {
	                    // the cell must use the correct template
	                    // first node can only be used by the first cell (css :first-child reasons)
	                    // this node is never available to be reused
	                    continue;
	                }
	                else if (node.isLastRecord) {
	                    // very last record, but could be a header/item/footer
	                    if (cell.record === lastRecordIndex) {
	                        availableNode = nodes[i];
	                        availableNode.hidden = false;
	                        break;
	                    }
	                    // this node is for the last record, but not actually the last
	                    continue;
	                }
	                if (node.cell === cellIndex) {
	                    isAlreadyRendered = true;
	                    break;
	                }
	                if (node.cell < startCellIndex || node.cell > endCellIndex) {
	                    if (!availableNode) {
	                        // havent gotten an available node yet
	                        availableNode = nodes[i];
	                    }
	                    else if (scrollingDown) {
	                        // scrolling down
	                        if (node.cell < availableNode.cell) {
	                            availableNode = nodes[i];
	                        }
	                    }
	                    else {
	                        // scrolling up
	                        if (node.cell > availableNode.cell) {
	                            availableNode = nodes[i];
	                        }
	                    }
	                }
	            }
	            if (isAlreadyRendered) {
	                continue;
	            }
	        }
	        if (!availableNode) {
	            // did not find an available node to put the cell data into
	            // insert a new node before the last record nodes
	            if (viewInsertIndex === null) {
	                viewInsertIndex = -1;
	                for (var j = totalNodes - 1; j >= 0; j--) {
	                    node = nodes[j];
	                    if (node && !node.isLastRecord) {
	                        viewInsertIndex = viewContainer.indexOf(node.view);
	                        break;
	                    }
	                }
	            }
	            // select which templateRef should be used for this cell
	            templateRef = cell.tmpl === TEMPLATE_HEADER ? hdrTmp : cell.tmpl === TEMPLATE_FOOTER ? ftrTmp : itmTmp;
	            if (!templateRef) {
	                void 0;
	                continue;
	            }
	            availableNode = {
	                tmpl: cell.tmpl,
	                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)
	            };
	            totalNodes = nodes.push(availableNode);
	        }
	        // console.debug(`node was cell ${availableNode.cell} but is now ${cellIndex}, was top: ${cell.top}`);
	        // assign who's the new cell index for this node
	        availableNode.cell = cellIndex;
	        // apply the cell's data to this node
	        availableNode.view.context.$implicit = cell.data || records[cell.record];
	        availableNode.view.context.index = cellIndex;
	        availableNode.hasChanges = true;
	        availableNode.lastTransform = null;
	        madeChanges = true;
	    }
	    if (initialLoad) {
	        // add nodes that go at the very end, and only represent the last record
	        var lastNodeTempData = (records[lastRecordIndex] || {});
	        addLastNodes(nodes, viewContainer, TEMPLATE_HEADER, hdrTmp, lastNodeTempData);
	        addLastNodes(nodes, viewContainer, TEMPLATE_ITEM, itmTmp, lastNodeTempData);
	        addLastNodes(nodes, viewContainer, TEMPLATE_FOOTER, ftrTmp, lastNodeTempData);
	    }
	    return madeChanges;
	}
	exports.populateNodeData = populateNodeData;
	function addLastNodes(nodes, viewContainer, templateType, templateRef, temporaryData) {
	    if (templateRef) {
	        var node = {
	            tmpl: templateType,
	            view: viewContainer.createEmbeddedView(templateRef),
	            isLastRecord: true,
	            hidden: true,
	        };
	        node.view.context.$implicit = temporaryData;
	        nodes.push(node);
	    }
	}
	/**
	 * DOM READ THEN DOM WRITE
	 */
	function initReadNodes(nodes, cells, data) {
	    if (nodes.length && cells.length) {
	        // first node
	        // ******** DOM READ ****************
	        var firstEle = getElement(nodes[0]);
	        cells[0].top = firstEle.clientTop;
	        cells[0].left = firstEle.clientLeft;
	        cells[0].row = 0;
	        // ******** DOM READ ****************
	        updateDimensions(nodes, cells, data, true);
	        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
	        for (var i = 0; i < nodes.length; i++) {
	            if (nodes[i].hidden) {
	                // ******** DOM WRITE ****************
	                getElement(nodes[i]).classList.add('virtual-hidden');
	            }
	        }
	    }
	}
	exports.initReadNodes = initReadNodes;
	/**
	 * DOM READ
	 */
	function updateDimensions(nodes, cells, data, initialUpdate) {
	    var node;
	    var element;
	    var totalCells = cells.length;
	    var cell;
	    var previousCell;
	    for (var i = 0; i < nodes.length; i++) {
	        node = nodes[i];
	        cell = cells[node.cell];
	        // read element dimensions if they haven't been checked enough times
	        if (cell && cell.reads < REQUIRED_DOM_READS && !node.hidden) {
	            element = getElement(node);
	            // ******** DOM READ ****************
	            readElements(cell, element);
	            if (initialUpdate) {
	                // update estimated dimensions with more accurate dimensions
	                if (cell.tmpl === TEMPLATE_HEADER) {
	                    data.hdrHeight = cell.height;
	                    if (cell.left === 0) {
	                        data.hdrWidth = cell.width;
	                    }
	                }
	                else if (cell.tmpl === TEMPLATE_FOOTER) {
	                    data.ftrHeight = cell.height;
	                    if (cell.left === 0) {
	                        data.ftrWidth = cell.width;
	                    }
	                }
	                else {
	                    data.itmHeight = cell.height;
	                    if (cell.left === 0) {
	                        data.itmWidth = cell.width;
	                    }
	                }
	            }
	            cell.reads++;
	        }
	    }
	    // figure out which cells are currently viewable within the viewport
	    var viewableBottom = (data.scrollTop + data.viewHeight);
	    data.topViewCell = totalCells;
	    data.bottomViewCell = 0;
	    // completely realign position to ensure they're all accurately placed
	    for (var i = 1; i < totalCells; i++) {
	        cell = cells[i];
	        previousCell = cells[i - 1];
	        if (previousCell.left + previousCell.width + cell.width > data.viewWidth) {
	            // new row
	            cell.row++;
	            cell.top = (previousCell.top + previousCell.height);
	            cell.left = 0;
	        }
	        else {
	            // same row
	            cell.row = previousCell.row;
	            cell.top = previousCell.top;
	            cell.left = (previousCell.left + previousCell.width);
	        }
	        // figure out which cells are viewable within the viewport
	        if (cell.top + cell.height > data.scrollTop && i < data.topViewCell) {
	            data.topViewCell = i;
	        }
	        else if (cell.top < viewableBottom && i > data.bottomViewCell) {
	            data.bottomViewCell = i;
	        }
	    }
	}
	exports.updateDimensions = updateDimensions;
	/**
	 * DOM READ
	 */
	function readElements(cell, element) {
	    // ******** DOM READ ****************
	    var styles = window.getComputedStyle(element);
	    // ******** DOM READ ****************
	    cell.left = (element.offsetLeft - parseFloat(styles.marginLeft));
	    // ******** DOM READ ****************
	    cell.width = (element.offsetWidth + parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));
	    // ******** DOM READ ****************
	    cell.height = (element.offsetHeight + parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));
	}
	/**
	 * DOM WRITE
	 */
	function writeToNodes(nodes, cells, totalRecords) {
	    var node;
	    var element;
	    var cell;
	    var totalCells = Math.max(totalRecords, cells.length).toString();
	    var transform;
	    for (var i = 0, ilen = nodes.length; i < ilen; i++) {
	        node = nodes[i];
	        if (!node.hidden) {
	            cell = cells[node.cell];
	            transform = "translate3d(" + cell.left + "px," + cell.top + "px,0px)";
	            if (node.lastTransform !== transform) {
	                element = getElement(node);
	                if (element) {
	                    // ******** DOM WRITE ****************
	                    element.style[dom_1.CSS.transform] = node.lastTransform = transform;
	                    // ******** DOM WRITE ****************
	                    element.classList.add('virtual-position');
	                    if (node.isLastRecord) {
	                        // its the last record, now with data and safe to show
	                        // ******** DOM WRITE ****************
	                        element.classList.remove('virtual-hidden');
	                    }
	                    // https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset
	                    // ******** DOM WRITE ****************
	                    element.setAttribute('aria-posinset', (node.cell + 1).toString());
	                    // https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize
	                    // ******** DOM WRITE ****************
	                    element.setAttribute('aria-setsize', totalCells);
	                }
	            }
	        }
	    }
	}
	exports.writeToNodes = writeToNodes;
	/**
	 * NO DOM
	 */
	function adjustRendered(cells, data) {
	    // figure out which cells should be rendered
	    var cell;
	    var lastRow = -1;
	    var cellsRenderHeight = 0;
	    var maxRenderHeight = (data.renderHeight - data.itmHeight);
	    var totalCells = cells.length;
	    var viewableRenderedPadding = (data.itmHeight < 90 ? VIEWABLE_RENDERED_PADDING : 0);
	    if (data.scrollDiff > 0) {
	        // scrolling down
	        data.topCell = Math.max(data.topViewCell - viewableRenderedPadding, 0);
	        data.bottomCell = Math.min(data.topCell + 2, totalCells - 1);
	        for (var i = data.topCell; i < totalCells; i++) {
	            cell = cells[i];
	            if (cell.row !== lastRow) {
	                cellsRenderHeight += cell.height;
	                lastRow = cell.row;
	            }
	            if (i > data.bottomCell) {
	                data.bottomCell = i;
	            }
	            if (cellsRenderHeight >= maxRenderHeight) {
	                break;
	            }
	        }
	    }
	    else {
	        // scroll up
	        data.bottomCell = Math.min(data.bottomViewCell + viewableRenderedPadding, totalCells - 1);
	        data.topCell = Math.max(data.bottomCell - 2, 0);
	        for (var i = data.bottomCell; i >= 0; i--) {
	            cell = cells[i];
	            if (cell.row !== lastRow) {
	                cellsRenderHeight += cell.height;
	                lastRow = cell.row;
	            }
	            if (i < data.topCell) {
	                data.topCell = i;
	            }
	            if (cellsRenderHeight >= maxRenderHeight) {
	                break;
	            }
	        }
	    }
	    // console.log(`adjustRendered topCell: ${data.topCell}, bottomCell: ${data.bottomCell}, cellsRenderHeight: ${cellsRenderHeight}, data.renderHeight: ${data.renderHeight}`);
	}
	exports.adjustRendered = adjustRendered;
	/**
	 * NO DOM
	 */
	function getVirtualHeight(totalRecords, lastCell) {
	    if (lastCell.record >= totalRecords - 1) {
	        return (lastCell.top + lastCell.height);
	    }
	    var unknownRecords = (totalRecords - lastCell.record - 1);
	    var knownHeight = (lastCell.top + lastCell.height);
	    return Math.ceil(knownHeight + ((knownHeight / (totalRecords - unknownRecords)) * unknownRecords));
	}
	exports.getVirtualHeight = getVirtualHeight;
	/**
	 * NO DOM
	 */
	function estimateHeight(totalRecords, lastCell, existingHeight, difference) {
	    var newHeight = getVirtualHeight(totalRecords, lastCell);
	    var percentToBottom = (lastCell.record / (totalRecords - 1));
	    var diff = Math.abs(existingHeight - newHeight);
	    if ((diff > (newHeight * difference)) ||
	        (percentToBottom > .995)) {
	        return newHeight;
	    }
	    return existingHeight;
	}
	exports.estimateHeight = estimateHeight;
	/**
	 * DOM READ
	 */
	function calcDimensions(data, viewportElement, approxItemWidth, approxItemHeight, appoxHeaderWidth, approxHeaderHeight, approxFooterWidth, approxFooterHeight, bufferRatio) {
	    // get the parent container's viewport height
	    // ******** DOM READ ****************
	    data.viewWidth = viewportElement.offsetWidth;
	    // ******** DOM READ ****************
	    data.viewHeight = viewportElement.offsetHeight;
	    // the height we'd like to render, which is larger than viewable
	    data.renderHeight = (data.viewHeight * bufferRatio);
	    if (data.viewWidth > 0 && data.viewHeight > 0) {
	        data.itmWidth = calcWidth(data.viewWidth, approxItemWidth);
	        data.itmHeight = calcHeight(data.viewHeight, approxItemHeight);
	        data.hdrWidth = calcWidth(data.viewWidth, appoxHeaderWidth);
	        data.hdrHeight = calcHeight(data.viewHeight, approxHeaderHeight);
	        data.ftrWidth = calcWidth(data.viewWidth, approxFooterWidth);
	        data.ftrHeight = calcHeight(data.viewHeight, approxFooterHeight);
	        data.valid = true;
	    }
	}
	exports.calcDimensions = calcDimensions;
	/**
	 * NO DOM
	 */
	function calcWidth(viewportWidth, approxWidth) {
	    if (approxWidth.indexOf('%') > 0) {
	        return (viewportWidth * (parseFloat(approxWidth) / 100));
	    }
	    else if (approxWidth.indexOf('px') > 0) {
	        return parseFloat(approxWidth);
	    }
	    throw 'virtual scroll width can only use "%" or "px" units';
	}
	/**
	 * NO DOM
	 */
	function calcHeight(viewportHeight, approxHeight) {
	    if (approxHeight.indexOf('px') > 0) {
	        return parseFloat(approxHeight);
	    }
	    throw 'virtual scroll height must use "px" units';
	}
	/**
	 * NO DOM
	 */
	function getElement(node) {
	    var rootNodes = node.view.rootNodes;
	    for (var i = 0; i < rootNodes.length; i++) {
	        if (rootNodes[i].nodeType === 1) {
	            return rootNodes[i];
	        }
	    }
	    return null;
	}
	var VirtualContext = (function () {
	    function VirtualContext($implicit, index, count) {
	        this.$implicit = $implicit;
	        this.index = index;
	        this.count = count;
	    }
	    Object.defineProperty(VirtualContext.prototype, "first", {
	        get: function () { return this.index === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VirtualContext.prototype, "last", {
	        get: function () { return this.index === this.count - 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VirtualContext.prototype, "even", {
	        get: function () { return this.index % 2 === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VirtualContext.prototype, "odd", {
	        get: function () { return !this.even; },
	        enumerable: true,
	        configurable: true
	    });
	    return VirtualContext;
	}());
	exports.VirtualContext = VirtualContext;
	var TEMPLATE_ITEM = 0;
	var TEMPLATE_HEADER = 1;
	var TEMPLATE_FOOTER = 2;
	var VIEWABLE_RENDERED_PADDING = 3;
	var REQUIRED_DOM_READS = 2;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	/**
	 * @private
	 */
	var VirtualHeader = (function () {
	    function VirtualHeader(templateRef) {
	        this.templateRef = templateRef;
	    }
	    VirtualHeader = __decorate([
	        core_1.Directive({ selector: '[virtualHeader]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], VirtualHeader);
	    return VirtualHeader;
	}());
	exports.VirtualHeader = VirtualHeader;
	/**
	 * @private
	 */
	var VirtualFooter = (function () {
	    function VirtualFooter(templateRef) {
	        this.templateRef = templateRef;
	    }
	    VirtualFooter = __decorate([
	        core_1.Directive({ selector: '[virtualFooter]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], VirtualFooter);
	    return VirtualFooter;
	}());
	exports.VirtualFooter = VirtualFooter;
	/**
	 * @private
	 */
	var VirtualItem = (function () {
	    function VirtualItem(templateRef, viewContainer) {
	        this.templateRef = templateRef;
	        this.viewContainer = viewContainer;
	    }
	    VirtualItem = __decorate([
	        core_1.Directive({ selector: '[virtualItem]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef, core_1.ViewContainerRef])
	    ], VirtualItem);
	    return VirtualItem;
	}());
	exports.VirtualItem = VirtualItem;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var button_1 = __webpack_require__(157);
	var navbar_1 = __webpack_require__(147);
	var toolbar_1 = __webpack_require__(154);
	/**
	 * @private
	 */
	var ToolbarItem = (function () {
	    function ToolbarItem(elementRef, toolbar, navbar) {
	        toolbar && toolbar.addItemRef(elementRef);
	        navbar && navbar.addItemRef(elementRef);
	        this.inToolbar = !!(toolbar || navbar);
	    }
	    Object.defineProperty(ToolbarItem.prototype, "_buttons", {
	        set: function (buttons) {
	            if (this.inToolbar) {
	                button_1.Button.setRoles(buttons, 'bar-button');
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.ContentChildren(button_1.Button), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], ToolbarItem.prototype, "_buttons", null);
	    ToolbarItem = __decorate([
	        core_1.Directive({
	            selector: 'ion-buttons,[menuToggle]'
	        }),
	        __param(1, core_1.Optional()),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Inject(core_1.forwardRef(function () { return navbar_1.Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, toolbar_1.Toolbar, navbar_1.Navbar])
	    ], ToolbarItem);
	    return ToolbarItem;
	}());
	exports.ToolbarItem = ToolbarItem;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var ion_1 = __webpack_require__(134);
	var navbar_1 = __webpack_require__(147);
	var toolbar_1 = __webpack_require__(154);
	/**
	 * @name Title
	 * @description
	 * `ion-title` is a component that sets the title of the `Toolbar` or `Navbar`
	 *
	 * @usage
	 *
	 * ```html
	 * <ion-header>
	 *
	 *   <ion-navbar>
	 *     <ion-title>Settings</ion-title>
	 *   </ion-navbar>
	 *
	 * </ion-header>
	 * ```
	 *
	 * Or to create a navbar with a toolbar as a subheader:
	 *
	 * ```html
	 * <ion-header>
	 *
	 *   <ion-navbar>
	 *     <ion-title>Main Heder</ion-title>
	 *   </ion-navbar>
	 *
	 *   <ion-toolbar>
	 *     <ion-title>Subheader</ion-title>
	 *   </ion-toolbar>
	 *
	 * </ion-header>
	 * ```
	 *
	 * @demo /docs/v2/demos/title/
	 */
	var ToolbarTitle = (function (_super) {
	    __extends(ToolbarTitle, _super);
	    function ToolbarTitle(_elementRef, toolbar, navbar) {
	        _super.call(this, _elementRef);
	        this._elementRef = _elementRef;
	        toolbar && toolbar.setTitleCmp(this);
	        navbar && navbar.setTitleCmp(this);
	    }
	    /**
	     * @private
	     */
	    ToolbarTitle.prototype.getTitleText = function () {
	        return this._elementRef.nativeElement.textContent;
	    };
	    ToolbarTitle = __decorate([
	        core_1.Component({
	            selector: 'ion-title',
	            template: '<div class="toolbar-title">' +
	                '<ng-content></ng-content>' +
	                '</div>',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(1, core_1.Optional()),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Inject(core_1.forwardRef(function () { return navbar_1.Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, toolbar_1.Toolbar, navbar_1.Navbar])
	    ], ToolbarTitle);
	    return ToolbarTitle;
	}(ion_1.Ion));
	exports.ToolbarTitle = ToolbarTitle;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var config_1 = __webpack_require__(125);
	/**
	 * @name Spinner
	 * @description
	 * The `ion-spinner` component provides a variety of animated SVG spinners.
	 * Spinners enables you to give users feedback that the app is actively
	 * processing/thinking/waiting/chillin’ out, or whatever you’d like it to indicate.
	 * By default, the `ion-refresher` feature uses this spinner component while it's
	 * the refresher is in the `refreshing` state.
	 *
	 * Ionic offers a handful of spinners out of the box, and by default, it will use
	 * the appropriate spinner for the platform on which it’s running.
	 *
	 * <table class="table spinner-table">
	 *  <tr>
	 *    <th>
	 *      <code>ios</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="ios"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>ios-small</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="ios-small"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>bubbles</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="bubbles"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>circles</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="circles"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>crescent</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="crescent"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>dots</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="dots"></ion-spinner>
	 *    </td>
	 *  </tr>
	 * </table>
	 *
	 * @usage
	 * The following code would use the default spinner for the platform it's
	 * running from. If it's neither iOS or Android, it'll default to use `ios`.
	 *
	 * ```html
	 * <ion-spinner></ion-spinner>
	 * ```
	 *
	 * By setting the `name` property, you can specify which predefined spinner to
	 * use, no matter what the platform is.
	 *
	 * ```html
	 * <ion-spinner name="bubbles"></ion-spinner>
	 * ```
	 *
	 * ## Styling SVG with CSS
	 * One cool thing about SVG is its ability to be styled with CSS! One thing to note
	 * is that some of the CSS properties on an SVG element have different names. For
	 * example, SVG uses the term `stroke` instead of `border`, and `fill` instead
	 * of `background-color`.
	 *
	 * ```css
	 * ion-spinner svg {
	 *   width: 28px;
	 *   height: 28px;
	 *   stroke: #444;
	 *   fill: #222;
	 * }
	 * ```
	 */
	var Spinner = (function () {
	    function Spinner(_config) {
	        this._config = _config;
	        this._dur = null;
	        /**
	         * @input {string} If the animation is paused or not. Defaults to `false`.
	         */
	        this.paused = false;
	    }
	    Object.defineProperty(Spinner.prototype, "name", {
	        /**
	         * @input {string} SVG spinner name.
	         */
	        get: function () {
	            return this._name;
	        },
	        set: function (val) {
	            this._name = val;
	            this.load();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Spinner.prototype, "duration", {
	        /**
	         * @input {string} How long it takes it to do one loop.
	         */
	        get: function () {
	            return this._dur;
	        },
	        set: function (val) {
	            this._dur = val;
	            this.load();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Spinner.prototype.ngOnInit = function () {
	        this._init = true;
	        this.load();
	    };
	    /**
	     * @private
	     */
	    Spinner.prototype.load = function () {
	        if (this._init) {
	            this._l = [];
	            this._c = [];
	            var name = this._name || this._config.get('spinner', 'ios');
	            var spinner = SPINNERS[name];
	            if (spinner) {
	                this._applied = 'spinner-' + name;
	                if (spinner.lines) {
	                    for (var i = 0, l = spinner.lines; i < l; i++) {
	                        this._l.push(this._loadEle(spinner, i, l));
	                    }
	                }
	                else if (spinner.circles) {
	                    for (var i = 0, l = spinner.circles; i < l; i++) {
	                        this._c.push(this._loadEle(spinner, i, l));
	                    }
	                }
	            }
	        }
	    };
	    Spinner.prototype._loadEle = function (spinner, index, total) {
	        var duration = this._dur || spinner.dur;
	        var data = spinner.fn(duration, index, total);
	        data.style.animationDuration = duration + 'ms';
	        return data;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Spinner.prototype, "name", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Spinner.prototype, "duration", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Spinner.prototype, "paused", void 0);
	    Spinner = __decorate([
	        core_1.Component({
	            selector: 'ion-spinner',
	            template: '<svg viewBox="0 0 64 64" *ngFor="let i of _c" [ngStyle]="i.style">' +
	                '<circle [attr.r]="i.r" transform="translate(32,32)"></circle>' +
	                '</svg>' +
	                '<svg viewBox="0 0 64 64" *ngFor="let i of _l" [ngStyle]="i.style">' +
	                '<line [attr.y1]="i.y1" [attr.y2]="i.y2" transform="translate(32,32)"></line>' +
	                '</svg>',
	            host: {
	                '[class]': '_applied',
	                '[class.spinner-paused]': 'paused'
	            },
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [config_1.Config])
	    ], Spinner);
	    return Spinner;
	}());
	exports.Spinner = Spinner;
	var SPINNERS = {
	    ios: {
	        dur: 1000,
	        lines: 12,
	        fn: function (dur, index, total) {
	            return {
	                y1: 17,
	                y2: 29,
	                style: {
	                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    'ios-small': {
	        dur: 1000,
	        lines: 12,
	        fn: function (dur, index, total) {
	            return {
	                y1: 12,
	                y2: 20,
	                style: {
	                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    bubbles: {
	        dur: 1000,
	        circles: 9,
	        fn: function (dur, index, total) {
	            return {
	                r: 5,
	                style: {
	                    top: 9 * Math.sin(2 * Math.PI * index / total),
	                    left: 9 * Math.cos(2 * Math.PI * index / total),
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    circles: {
	        dur: 1000,
	        circles: 8,
	        fn: function (dur, index, total) {
	            return {
	                r: 5,
	                style: {
	                    top: 9 * Math.sin(2 * Math.PI * index / total),
	                    left: 9 * Math.cos(2 * Math.PI * index / total),
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    crescent: {
	        dur: 750,
	        circles: 1,
	        fn: function (dur) {
	            return {
	                r: 26,
	                style: {}
	            };
	        }
	    },
	    dots: {
	        dur: 750,
	        circles: 3,
	        fn: function (dur, index, total) {
	            return {
	                r: 6,
	                style: {
	                    left: (9 - (9 * index)),
	                    animationDelay: -(110 * index) + 'ms'
	                }
	            };
	        }
	    }
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var form_1 = __webpack_require__(130);
	var item_1 = __webpack_require__(175);
	var util_1 = __webpack_require__(127);
	var CHECKBOX_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return Checkbox; }), multi: true });
	/**
	 * @name Checkbox
	 * @module ionic
	 *
	 * @description
	 * The Checkbox is a simple component styled based on the mode. It can be
	 * placed in an `ion-item` or used as a stand-alone checkbox.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
	 * for more info on forms and inputs.
	 *
	 *
	 * @usage
	 * ```html
	 *
	 *  <ion-list>
	 *
	 *    <ion-item>
	 *      <ion-label>Pepperoni</ion-label>
	 *      <ion-checkbox [(ngModel)]="pepperoni"></ion-checkbox>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Sausage</ion-label>
	 *      <ion-checkbox [(ngModel)]="sausage" disabled="true"></ion-checkbox>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Mushrooms</ion-label>
	 *      <ion-checkbox [(ngModel)]="mushrooms"></ion-checkbox>
	 *    </ion-item>
	 *
	 *  </ion-list>
	 * ```
	 *
	 * @demo /docs/v2/demos/checkbox/
	 * @see {@link /docs/v2/components#checkbox Checkbox Component Docs}
	 */
	var Checkbox = (function () {
	    function Checkbox(_form, _item) {
	        this._form = _form;
	        this._item = _item;
	        this._checked = false;
	        this._disabled = false;
	        /**
	         * @output {Checkbox} expression to evaluate when the checkbox value changes
	         */
	        this.ionChange = new core_1.EventEmitter();
	        _form.register(this);
	        if (_item) {
	            this.id = 'chk-' + _item.registerInput('checkbox');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-checkbox', true);
	        }
	    }
	    /**
	     * @private
	     */
	    Checkbox.prototype._click = function (ev) {
	        void 0;
	        ev.preventDefault();
	        ev.stopPropagation();
	        this.onChange(!this._checked);
	    };
	    Object.defineProperty(Checkbox.prototype, "checked", {
	        /**
	         * @input {boolean} whether or not the checkbox is checked (defaults to false)
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (val) {
	            this._setChecked(util_1.isTrueProperty(val));
	            this.onChange(this._checked);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Checkbox.prototype._setChecked = function (isChecked) {
	        if (isChecked !== this._checked) {
	            this._checked = isChecked;
	            if (this._init) {
	                this.ionChange.emit(this);
	            }
	            this._item && this._item.setCssClass('item-checkbox-checked', isChecked);
	        }
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.writeValue = function (val) {
	        this._setChecked(util_1.isTrueProperty(val));
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (isChecked) {
	            void 0;
	            fn(isChecked);
	            _this._setChecked(isChecked);
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    Object.defineProperty(Checkbox.prototype, "disabled", {
	        /**
	         * @input {boolean} whether or not the checkbox is disabled or not.
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-checkbox-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Checkbox.prototype.onChange = function (isChecked) {
	        // used when this input does not have an ngModel or ngControl
	        void 0;
	        this._setChecked(isChecked);
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    Checkbox.prototype.ngAfterContentInit = function () {
	        this._init = true;
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Checkbox.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [UIEvent]), 
	        __metadata('design:returntype', void 0)
	    ], Checkbox.prototype, "_click", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Checkbox.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Checkbox.prototype, "disabled", null);
	    Checkbox = __decorate([
	        core_1.Component({
	            selector: 'ion-checkbox',
	            template: '<div class="checkbox-icon" [class.checkbox-checked]="_checked">' +
	                '<div class="checkbox-inner"></div>' +
	                '</div>' +
	                '<button role="checkbox" ' +
	                'type="button" ' +
	                'category="item-cover" ' +
	                '[id]="id" ' +
	                '[attr.aria-checked]="_checked" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.checkbox-disabled]': '_disabled'
	            },
	            providers: [CHECKBOX_VALUE_ACCESSOR],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, item_1.Item])
	    ], Checkbox);
	    return Checkbox;
	}());
	exports.Checkbox = Checkbox;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var action_sheet_1 = __webpack_require__(189);
	var alert_1 = __webpack_require__(190);
	var form_1 = __webpack_require__(130);
	var util_1 = __webpack_require__(127);
	var item_1 = __webpack_require__(175);
	var nav_controller_1 = __webpack_require__(148);
	var option_1 = __webpack_require__(191);
	var SELECT_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return Select; }), multi: true });
	/**
	 * @name Select
	 * @description
	 * The `ion-select` component is similar to an HTML `<select>` element, however,
	 * Ionic's select component makes it easier for users to sort through and select
	 * the preferred option or options. When users tap the select component, a
	 * dialog will appear with all of the options in a large, easy to select list
	 * for users.
	 *
	 * The select component takes child `ion-option` components. If `ion-option` is not
	 * given a `value` attribute then it will use its text as the value.
	 *
	 * ### Interfaces
	 *
	 * By default, the `ion-select` uses the {@link ../../alert/Alert Alert API} to
	 * open up the overlay of options in an alert. The interface can be changed to use the
	 * {@link ../../action-sheet/ActionSheet ActionSheet API} by passing `action-sheet` to
	 * the `interface` property. Read the other sections for the limitations of the
	 * action sheet interface.
	 *
	 * ### Single Value: Radio Buttons
	 *
	 * The standard `ion-select` component allows the user to select only one
	 * option. When selecting only one option the alert interface presents users with
	 * a radio button styled list of options. The action sheet interface can only be
	 * used with a single value select. If the number of options exceed 6, it will
	 * use the `alert` interface even if `action-sheet` is passed. The `ion-select`
	 * component's value receives the value of the selected option's value.
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Gender</ion-label>
	 *   <ion-select [(ngModel)]="gender">
	 *     <ion-option value="f" checked="true">Female</ion-option>
	 *     <ion-option value="m">Male</ion-option>
	 *   </ion-select>
	 * </ion-item>
	 * ```
	 *
	 * ### Multiple Value: Checkboxes
	 *
	 * By adding the `multiple="true"` attribute to `ion-select`, users are able
	 * to select multiple options. When multiple options can be selected, the alert
	 * overlay presents users with a checkbox styled list of options. The
	 * `ion-select multiple="true"` component's value receives an array of all the
	 * selected option values. In the example below, because each option is not given
	 * a `value`, then it'll use its text as the value instead.
	 *
	 * Note: the action sheet interface will not work with a multi-value select.
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Toppings</ion-label>
	 *   <ion-select [(ngModel)]="toppings" multiple="true">
	 *     <ion-option>Bacon</ion-option>
	 *     <ion-option>Black Olives</ion-option>
	 *     <ion-option>Extra Cheese</ion-option>
	 *     <ion-option>Mushrooms</ion-option>
	 *     <ion-option>Pepperoni</ion-option>
	 *     <ion-option>Sausage</ion-option>
	 *   </ion-select>
	 * </ion-item>
	 * ```
	 *
	 * ### Select Buttons
	 * By default, the two buttons read `Cancel` and `OK`. Each button's text
	 * can be customized using the `cancelText` and `okText` attributes:
	 *
	 * ```html
	 * <ion-select okText="Okay" cancelText="Dismiss">
	 *   ...
	 * </ion-select>
	 * ```
	 *
	 * The action sheet interface does not have an `OK` button, clicking
	 * on any of the options will automatically close the overlay and select
	 * that value.
	 *
	 * ### Alert Options
	 *
	 * Since `ion-select` is a wrapper to `Alert`, by default, it can be
	 * passed options in the `alertOptions` property. This can be used to
	 * pass a custom alert title, subtitle or message. See the {@link ../../alert/Alert Alert API docs}
	 * for more properties.
	 *
	 * ```html
	 * <ion-select [alertOptions]="alertOptions">
	 *   ...
	 * </ion-select>
	 * ```
	 *
	 * ```ts
	 * this.alertOptions = {
	 *   title: 'Pizza Toppings',
	 *   subTitle: 'Select your toppings'
	 * };
	 * ```
	 *
	 * @demo /docs/v2/demos/select/
	 */
	var Select = (function () {
	    function Select(_form, _elementRef, _renderer, _item, _nav) {
	        this._form = _form;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._item = _item;
	        this._nav = _nav;
	        this._disabled = false;
	        this._multi = false;
	        this._values = [];
	        this._texts = [];
	        this._text = '';
	        this._isOpen = false;
	        /**
	         * @input {string} The text to display on the cancel button. Default: `Cancel`.
	         */
	        this.cancelText = 'Cancel';
	        /**
	         * @input {string} The text to display on the ok button. Default: `OK`.
	         */
	        this.okText = 'OK';
	        /**
	         * @input {any} Any addition options that the alert interface can take.
	         * See the [Alert API docs](../../alert/Alert) for the create options.
	         */
	        this.alertOptions = {};
	        /**
	         * @private
	         */
	        this.checked = false;
	        /**
	         * @input {string} The interface the select should use: `action-sheet` or `alert`. Default: `alert`.
	         */
	        this.interface = '';
	        /**
	         * @output {any} Any expression you want to evaluate when the selection has changed.
	         */
	        this.ionChange = new core_1.EventEmitter();
	        /**
	         * @output {any} Any expression you want to evaluate when the selection was cancelled.
	         */
	        this.ionCancel = new core_1.EventEmitter();
	        this._form.register(this);
	        if (_item) {
	            this.id = 'sel-' + _item.registerInput('select');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-select', true);
	        }
	        if (!_nav) {
	            void 0;
	        }
	    }
	    Select.prototype._click = function (ev) {
	        if (ev.detail === 0) {
	            // do not continue if the click event came from a form submit
	            return;
	        }
	        ev.preventDefault();
	        ev.stopPropagation();
	        this._open();
	    };
	    Select.prototype._keyup = function () {
	        if (!this._isOpen) {
	            this._open();
	        }
	    };
	    Select.prototype._open = function () {
	        var _this = this;
	        if (this._disabled) {
	            return;
	        }
	        void 0;
	        // the user may have assigned some options specifically for the alert
	        var alertOptions = util_1.merge({}, this.alertOptions);
	        // make sure their buttons array is removed from the options
	        // and we create a new array for the alert's two buttons
	        alertOptions.buttons = [{
	                text: this.cancelText,
	                role: 'cancel',
	                handler: function () {
	                    _this.ionCancel.emit(null);
	                }
	            }];
	        // if the alertOptions didn't provide an title then use the label's text
	        if (!alertOptions.title && this._item) {
	            alertOptions.title = this._item.getLabelText();
	        }
	        var options = this._options.toArray();
	        if (this.interface === 'action-sheet' && options.length > 6) {
	            void 0;
	            this.interface = 'alert';
	        }
	        if (this.interface === 'action-sheet' && this._multi) {
	            void 0;
	            this.interface = 'alert';
	        }
	        var overlay;
	        if (this.interface === 'action-sheet') {
	            alertOptions.buttons = alertOptions.buttons.concat(options.map(function (input) {
	                return {
	                    role: (input.checked ? 'selected' : ''),
	                    text: input.text,
	                    handler: function () {
	                        _this.onChange(input.value);
	                        _this.ionChange.emit(input.value);
	                    }
	                };
	            }));
	            alertOptions.cssClass = 'select-action-sheet';
	            overlay = action_sheet_1.ActionSheet.create(alertOptions);
	        }
	        else {
	            // default to use the alert interface
	            this.interface = 'alert';
	            // user cannot provide inputs from alertOptions
	            // alert inputs must be created by ionic from ion-options
	            alertOptions.inputs = this._options.map(function (input) {
	                return {
	                    type: (_this._multi ? 'checkbox' : 'radio'),
	                    label: input.text,
	                    value: input.value,
	                    checked: input.checked
	                };
	            });
	            // create the alert instance from our built up alertOptions
	            overlay = alert_1.Alert.create(alertOptions);
	            if (this._multi) {
	                // use checkboxes
	                overlay.setCssClass('select-alert multiple-select-alert');
	            }
	            else {
	                // use radio buttons
	                overlay.setCssClass('select-alert single-select-alert');
	            }
	            overlay.addButton({
	                text: this.okText,
	                handler: function (selectedValues) {
	                    _this.onChange(selectedValues);
	                    _this.ionChange.emit(selectedValues);
	                }
	            });
	        }
	        this._nav.present(overlay, alertOptions);
	        this._isOpen = true;
	        overlay.onDismiss(function () {
	            _this._isOpen = false;
	        });
	    };
	    Object.defineProperty(Select.prototype, "multiple", {
	        /**
	         * @input {boolean} Whether or not the select component can accept multiple values. Default: `false`.
	         */
	        get: function () {
	            return this._multi;
	        },
	        set: function (val) {
	            this._multi = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Select.prototype, "text", {
	        /**
	         * @private
	         */
	        get: function () {
	            return (this._multi ? this._texts : this._texts.join());
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Select.prototype, "options", {
	        /**
	         * @private
	         */
	        set: function (val) {
	            this._options = val;
	            if (!this._values.length) {
	                // there are no values set at this point
	                // so check to see who should be checked
	                this._values = val.filter(function (o) { return o.checked; }).map(function (o) { return o.value; });
	            }
	            this._updOpts();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Select.prototype._updOpts = function () {
	        var _this = this;
	        this._texts = [];
	        if (this._options) {
	            this._options.forEach(function (option) {
	                // check this option if the option's value is in the values array
	                option.checked = _this._values.some(function (selectValue) {
	                    return util_1.isCheckedProperty(selectValue, option.value);
	                });
	                if (option.checked) {
	                    _this._texts.push(option.text);
	                }
	            });
	        }
	        this._text = this._texts.join(', ');
	    };
	    Object.defineProperty(Select.prototype, "disabled", {
	        /**
	         * @input {boolean} Whether or not the select component is disabled. Default `false`.
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-select-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Select.prototype.writeValue = function (val) {
	        void 0;
	        this._values = (Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val]);
	        this._updOpts();
	    };
	    /**
	     * @private
	     */
	    Select.prototype.ngAfterContentInit = function () {
	        this._updOpts();
	    };
	    /**
	     * @private
	     */
	    Select.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (val) {
	            void 0;
	            fn(val);
	            _this._values = (Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val]);
	            _this._updOpts();
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    Select.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    /**
	     * @private
	     */
	    Select.prototype.onChange = function (val) {
	        // onChange used when there is not an ngControl
	        void 0;
	        this._values = (Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val]);
	        this._updOpts();
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    Select.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    Select.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Select.prototype, "cancelText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Select.prototype, "okText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Select.prototype, "placeholder", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "alertOptions", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "checked", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Select.prototype, "interface", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Select.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Select.prototype, "ionCancel", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [UIEvent]), 
	        __metadata('design:returntype', void 0)
	    ], Select.prototype, "_click", null);
	    __decorate([
	        core_1.HostListener('keyup.space'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], Select.prototype, "_keyup", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "multiple", null);
	    __decorate([
	        core_1.ContentChildren(option_1.Option), 
	        __metadata('design:type', core_1.QueryList), 
	        __metadata('design:paramtypes', [core_1.QueryList])
	    ], Select.prototype, "options", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "disabled", null);
	    Select = __decorate([
	        core_1.Component({
	            selector: 'ion-select',
	            template: '<div *ngIf="!_text" class="select-placeholder select-text">{{placeholder}}</div>' +
	                '<div *ngIf="_text" class="select-text">{{_text}}</div>' +
	                '<div class="select-icon">' +
	                '<div class="select-icon-inner"></div>' +
	                '</div>' +
	                '<button aria-haspopup="true" ' +
	                '[id]="id" ' +
	                'category="item-cover" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.select-disabled]': '_disabled'
	            },
	            providers: [SELECT_VALUE_ACCESSOR],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(3, core_1.Optional()),
	        __param(4, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, core_1.ElementRef, core_1.Renderer, item_1.Item, nav_controller_1.NavController])
	    ], Select);
	    return Select;
	}());
	exports.Select = Select;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var animation_1 = __webpack_require__(152);
	var transition_1 = __webpack_require__(151);
	var config_1 = __webpack_require__(125);
	var util_1 = __webpack_require__(127);
	var key_1 = __webpack_require__(136);
	var nav_params_1 = __webpack_require__(149);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name ActionSheet
	 * @description
	 * An Action Sheet is a dialog that lets the user choose from a set of
	 * options. It appears on top of the app's content, and must be manually
	 * dismissed by the user before they can resume interaction with the app.
	 * Dangerous (destructive) options are made obvious in `ios` mode. There are easy
	 * ways to cancel out of the action sheet, such as tapping the backdrop or
	 * hitting the escape key on desktop.
	 *
	 * An action sheet is created from an array of `buttons`, with each button
	 * including properties for its `text`, and optionally a `handler` and `role`.
	 * If a handler returns `false` then the action sheet will not be dismissed. An
	 * action sheet can also optionally have a `title`, `subTitle` and an `icon`.
	 *
	 * A button's `role` property can either be `destructive` or `cancel`. Buttons
	 * without a role property will have the default look for the platform. Buttons
	 * with the `cancel` role will always load as the bottom button, no matter where
	 * they are in the array. All other buttons will be displayed in the order they
	 * have been added to the `buttons` array. Note: We recommend that `destructive`
	 * buttons are always the first button in the array, making them the top button.
	 * Additionally, if the action sheet is dismissed by tapping the backdrop, then
	 * it will fire the handler from the button with the cancel role.
	 *
	 * You can pass all of the action sheet's options in the first argument of
	 * the create method: `ActionSheet.create(opts)`. Otherwise the action sheet's
	 * instance has methods to add options, like `setTitle()` or `addButton()`.
	 *
	 * @usage
	 * ```ts
	 * constructor(nav: NavController) {
	 *   this.nav = nav;
	 * }
	 *
	 * presentActionSheet() {
	 *   let actionSheet = ActionSheet.create({
	 *     title: 'Modify your album',
	 *     buttons: [
	 *       {
	 *         text: 'Destructive',
	 *         role: 'destructive',
	 *         handler: () => {
	 *           console.log('Destructive clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Archive',
	 *         handler: () => {
	 *           console.log('Archive clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Cancel',
	 *         role: 'cancel',
	 *         handler: () => {
	 *           console.log('Cancel clicked');
	 *         }
	 *       }
	 *     ]
	 *   });
	 *
	 *   this.nav.present(actionSheet);
	 * }
	 * ```
	 *
	 *
	 * ### Dismissing And Async Navigation
	 *
	 * After an action sheet has been dismissed, the app may need to also transition
	 * to another page depending on the handler's logic. However, because multiple
	 * transitions were fired at roughly the same time, it's difficult for the
	 * nav controller to cleanly animate multiple transitions that may
	 * have been kicked off asynchronously. This is further described in the
	 * [`Nav Transition Promises`](../../nav/NavController/#nav-transition-promises) section. For action sheets,
	 * this means it's best to wait for the action sheet to finish its transition
	 * out before starting a new transition on the same nav controller.
	 *
	 * In the example below, after the button has been clicked, its handler
	 * waits on async operation to complete, *then* it uses `pop` to navigate
	 * back a page in the same stack. The potential problem is that the async operation
	 * may have been completed before the action sheet has even finished its transition
	 * out. In this case, it's best to ensure the action sheet has finished its transition
	 * out first, *then* start the next transition.
	 *
	 * ```ts
	 * let actionSheet = ActionSheet.create({
	 *   title: 'Hello',
	 *   buttons: [{
	 *     text: 'Ok',
	 *     handler: () => {
	 *       // user has clicked the action sheet button
	 *       // begin the action sheet's dimiss transition
	 *       let navTransition = actionSheet.dismiss();
	 *
	 *       // start some async method
	 *       someAsyncOperation().then(() => {
	 *         // once the async operation has completed
	 *         // then run the next nav transition after the
	 *         // first transition has finished animating out
	 *
	 *         navTransition.then(() => {
	 *           this.nav.pop();
	 *         });
	 *       });
	 *       return false;
	 *     }
	 *   }]
	 * });
	 *
	 * this.nav.present(actionSheet);
	 * ```
	 *
	 * It's important to note that the handler returns `false`. A feature of
	 * button handlers is that they automatically dismiss the action sheet when their button
	 * was clicked, however, we'll need more control regarding the transition. Because
	 * the handler returns `false`, then the action sheet does not automatically dismiss
	 * itself. Instead, you now have complete control of when the action sheet has finished
	 * transitioning, and the ability to wait for the action sheet to finish transitioning
	 * out before starting a new transition.
	 *
	 *
	 * @demo /docs/v2/demos/action-sheet/
	 * @see {@link /docs/v2/components#action-sheets ActionSheet Component Docs}
	 */
	var ActionSheet = (function (_super) {
	    __extends(ActionSheet, _super);
	    function ActionSheet(opts) {
	        if (opts === void 0) { opts = {}; }
	        opts.buttons = opts.buttons || [];
	        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
	        _super.call(this, ActionSheetCmp, opts);
	        this.isOverlay = true;
	        // by default, actionsheets should not fire lifecycle events of other views
	        // for example, when an actionsheets enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	    }
	    /**
	    * @private
	    */
	    ActionSheet.prototype.getTransitionName = function (direction) {
	        var key = 'actionSheet' + (direction === 'back' ? 'Leave' : 'Enter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * @param {string} title Action sheet title
	     */
	    ActionSheet.prototype.setTitle = function (title) {
	        this.data.title = title;
	    };
	    /**
	     * @param {string} subTitle Action sheet subtitle
	     */
	    ActionSheet.prototype.setSubTitle = function (subTitle) {
	        this.data.subTitle = subTitle;
	    };
	    /**
	     * @param {object} button Action sheet button
	     */
	    ActionSheet.prototype.addButton = function (button) {
	        this.data.buttons.push(button);
	    };
	    /**
	     * Open an action sheet with the following options
	     *
	     * | Option                | Type       | Description                                                     |
	     * |-----------------------|------------|-----------------------------------------------------------------|
	     * | title                 |`string`    | The title for the actionsheet                                   |
	     * | subTitle              |`string`    | The sub-title for the actionsheet                               |
	     * | cssClass              |`string`    | An additional class for custom styles                           |
	     * | enableBackdropDismiss |`boolean`   | If the actionsheet should close when the user taps the backdrop |
	     * | buttons               |`array<any>`| An array of buttons to display                                  |
	     *
	     * For the buttons:
	     *
	     * | Option   | Type     | Description                                                                                                                                      |
	     * |----------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------|
	     * | text     | `string` | The buttons text                                                                                                                                 |
	     * | icon     | `icon`   | The buttons icons                                                                                                                                |
	     * | handler  | `any`    | An express the button should evaluate                                                                                                            |
	     * | cssClass | `string` | An additional class for custom styles                                                                                                            |
	     * | role     | `string` | How the button should be displayed, `destructive` or `cancel`. If not role is provided, it will display the button without any additional styles |
	     *
	     *
	     *
	     * @param {object} opts Action sheet options
	     */
	    ActionSheet.create = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        return new ActionSheet(opts);
	    };
	    return ActionSheet;
	}(view_controller_1.ViewController));
	exports.ActionSheet = ActionSheet;
	/**
	* @private
	*/
	var ActionSheetCmp = (function () {
	    function ActionSheetCmp(_viewCtrl, _config, _elementRef, params, renderer) {
	        this._viewCtrl = _viewCtrl;
	        this._config = _config;
	        this._elementRef = _elementRef;
	        this.d = params.data;
	        if (this.d.cssClass) {
	            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
	        }
	        this.id = (++actionSheetIds);
	        if (this.d.title) {
	            this.hdrId = 'acst-hdr-' + this.id;
	        }
	        if (this.d.subTitle) {
	            this.descId = 'acst-subhdr-' + this.id;
	        }
	    }
	    ActionSheetCmp.prototype.ionViewLoaded = function () {
	        var _this = this;
	        // normalize the data
	        var buttons = [];
	        this.d.buttons.forEach(function (button) {
	            if (typeof button === 'string') {
	                button = { text: button };
	            }
	            if (!button.cssClass) {
	                button.cssClass = '';
	            }
	            // deprecated warning
	            if (button.style) {
	                void 0;
	                button.role = button.style;
	            }
	            if (button.role === 'cancel') {
	                _this.d.cancelButton = button;
	            }
	            else {
	                if (button.role === 'destructive') {
	                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-destructive';
	                }
	                else if (button.role === 'selected') {
	                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-selected';
	                }
	                buttons.push(button);
	            }
	        });
	        this.d.buttons = buttons;
	    };
	    ActionSheetCmp.prototype.ionViewDidEnter = function () {
	        var activeElement = document.activeElement;
	        if (document.activeElement) {
	            activeElement.blur();
	        }
	        var focusableEle = this._elementRef.nativeElement.querySelector('button');
	        if (focusableEle) {
	            focusableEle.focus();
	        }
	        this.enabled = true;
	    };
	    ActionSheetCmp.prototype._keyUp = function (ev) {
	        if (this.enabled && this._viewCtrl.isLast()) {
	            if (ev.keyCode === key_1.Key.ESCAPE) {
	                void 0;
	                this.bdClick();
	            }
	        }
	    };
	    ActionSheetCmp.prototype.click = function (button, dismissDelay) {
	        var _this = this;
	        if (!this.enabled) {
	            return;
	        }
	        var shouldDismiss = true;
	        if (button.handler) {
	            // a handler has been provided, execute it
	            if (button.handler() === false) {
	                // if the return value of the handler is false then do not dismiss
	                shouldDismiss = false;
	            }
	        }
	        if (shouldDismiss) {
	            setTimeout(function () {
	                _this.dismiss(button.role);
	            }, dismissDelay || this._config.get('pageTransitionDelay'));
	        }
	    };
	    ActionSheetCmp.prototype.bdClick = function () {
	        if (this.enabled && this.d.enableBackdropDismiss) {
	            if (this.d.cancelButton) {
	                this.click(this.d.cancelButton, 1);
	            }
	            else {
	                this.dismiss('backdrop');
	            }
	        }
	    };
	    ActionSheetCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(null, role);
	    };
	    __decorate([
	        core_1.HostListener('body:keyup', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], ActionSheetCmp.prototype, "_keyUp", null);
	    ActionSheetCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-action-sheet',
	            template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' +
	                '<div class="action-sheet-wrapper">' +
	                '<div class="action-sheet-container">' +
	                '<div class="action-sheet-group">' +
	                '<div class="action-sheet-title" id="{{hdrId}}" *ngIf="d.title">{{d.title}}</div>' +
	                '<div class="action-sheet-sub-title" id="{{descId}}" *ngIf="d.subTitle">{{d.subTitle}}</div>' +
	                '<button category="action-sheet-button" (click)="click(b)" *ngFor="let b of d.buttons" class="disable-hover" [ngClass]="b.cssClass">' +
	                '<ion-icon [name]="b.icon" *ngIf="b.icon" class="action-sheet-icon"></ion-icon> ' +
	                '{{b.text}}' +
	                '</button>' +
	                '</div>' +
	                '<div class="action-sheet-group" *ngIf="d.cancelButton">' +
	                '<button category="action-sheet-button" (click)="click(d.cancelButton)" class="action-sheet-cancel disable-hover" [ngClass]="d.cancelButton.cssClass">' +
	                '<ion-icon [name]="d.cancelButton.icon" *ngIf="d.cancelButton.icon" class="action-sheet-icon"></ion-icon> ' +
	                '{{d.cancelButton.text}}' +
	                '</button>' +
	                '</div>' +
	                '</div>' +
	                '</div>',
	            host: {
	                'role': 'dialog',
	                '[attr.aria-labelledby]': 'hdrId',
	                '[attr.aria-describedby]': 'descId'
	            },
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, config_1.Config, core_1.ElementRef, nav_params_1.NavParams, core_1.Renderer])
	    ], ActionSheetCmp);
	    return ActionSheetCmp;
	}());
	var ActionSheetSlideIn = (function (_super) {
	    __extends(ActionSheetSlideIn, _super);
	    function ActionSheetSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.4);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
	    }
	    return ActionSheetSlideIn;
	}(transition_1.Transition));
	transition_1.Transition.register('action-sheet-slide-in', ActionSheetSlideIn);
	var ActionSheetSlideOut = (function (_super) {
	    __extends(ActionSheetSlideOut, _super);
	    function ActionSheetSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.4, 0);
	        wrapper.fromTo('translateY', '0%', '100%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(backdrop).add(wrapper);
	    }
	    return ActionSheetSlideOut;
	}(transition_1.Transition));
	transition_1.Transition.register('action-sheet-slide-out', ActionSheetSlideOut);
	var ActionSheetMdSlideIn = (function (_super) {
	    __extends(ActionSheetMdSlideIn, _super);
	    function ActionSheetMdSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.26);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
	    }
	    return ActionSheetMdSlideIn;
	}(transition_1.Transition));
	transition_1.Transition.register('action-sheet-md-slide-in', ActionSheetMdSlideIn);
	var ActionSheetMdSlideOut = (function (_super) {
	    __extends(ActionSheetMdSlideOut, _super);
	    function ActionSheetMdSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.26, 0);
	        wrapper.fromTo('translateY', '0%', '100%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
	    }
	    return ActionSheetMdSlideOut;
	}(transition_1.Transition));
	transition_1.Transition.register('action-sheet-md-slide-out', ActionSheetMdSlideOut);
	var ActionSheetWpSlideIn = (function (_super) {
	    __extends(ActionSheetWpSlideIn, _super);
	    function ActionSheetWpSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.16);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
	    }
	    return ActionSheetWpSlideIn;
	}(transition_1.Transition));
	transition_1.Transition.register('action-sheet-wp-slide-in', ActionSheetWpSlideIn);
	var ActionSheetWpSlideOut = (function (_super) {
	    __extends(ActionSheetWpSlideOut, _super);
	    function ActionSheetWpSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.1, 0);
	        wrapper.fromTo('translateY', '0%', '100%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
	    }
	    return ActionSheetWpSlideOut;
	}(transition_1.Transition));
	transition_1.Transition.register('action-sheet-wp-slide-out', ActionSheetWpSlideOut);
	var actionSheetIds = -1;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var animation_1 = __webpack_require__(152);
	var transition_1 = __webpack_require__(151);
	var config_1 = __webpack_require__(125);
	var util_1 = __webpack_require__(127);
	var key_1 = __webpack_require__(136);
	var nav_params_1 = __webpack_require__(149);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name Alert
	 * @description
	 * An Alert is a dialog that presents users with information or collects
	 * information from the user using inputs. An alert appears on top
	 * of the app's content, and must be manually dismissed by the user before
	 * they can resume interaction with the app. It can also optionally have a
	 * `title`, `subTitle` and `message`.
	 *
	 * You can pass all of the alert's options in the first argument of
	 * the create method: `Alert.create(opts)`. Otherwise the alert's instance
	 * has methods to add options, such as `setTitle()` or `addButton()`.
	 *
	 *
	 * ### Alert Buttons
	 *
	 * In the array of `buttons`, each button includes properties for its `text`,
	 * and optionally a `handler`. If a handler returns `false` then the alert
	 * will not automatically be dismissed when the button is clicked. All
	 * buttons will show  up in the order they have been added to the `buttons`
	 * array, from left to right. Note: The right most button (the last one in
	 * the array) is the main button.
	 *
	 * Optionally, a `role` property can be added to a button, such as `cancel`.
	 * If a `cancel` role is on one of the buttons, then if the alert is
	 * dismissed by tapping the backdrop, then it will fire the handler from
	 * the button with a cancel role.
	 *
	 *
	 * ### Alert Inputs
	 *
	 * Alerts can also include several different inputs whose data can be passed
	 * back to the app. Inputs can be used as a simple way to prompt users for
	 * information. Radios, checkboxes and text inputs are all accepted, but they
	 * cannot be mixed. For example, an alert could have all radio button inputs,
	 * or all checkbox inputs, but the same alert cannot mix radio and checkbox
	 * inputs. Do note however, different types of "text"" inputs can be mixed,
	 * such as `url`, `email`, `text`, etc. If you require a complex form UI
	 * which doesn't fit within the guidelines of an alert then we recommend
	 * building the form within a modal instead.
	 *
	 *
	 * @usage
	 * ```ts
	 * constructor(nav: NavController) {
	 *   this.nav = nav;
	 * }
	 *
	 * presentAlert() {
	 *   let alert = Alert.create({
	 *     title: 'Low battery',
	 *     subTitle: '10% of battery remaining',
	 *     buttons: ['Dismiss']
	 *   });
	 *   this.nav.present(alert);
	 * }
	 *
	 * presentConfirm() {
	 *   let alert = Alert.create({
	 *     title: 'Confirm purchase',
	 *     message: 'Do you want to buy this book?',
	 *     buttons: [
	 *       {
	 *         text: 'Cancel',
	 *         role: 'cancel',
	 *         handler: () => {
	 *           console.log('Cancel clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Buy',
	 *         handler: () => {
	 *           console.log('Buy clicked');
	 *         }
	 *       }
	 *     ]
	 *   });
	 *   this.nav.present(alert);
	 * }
	 *
	 * presentPrompt() {
	 *   let alert = Alert.create({
	 *     title: 'Login',
	 *     inputs: [
	 *       {
	 *         name: 'username',
	 *         placeholder: 'Username'
	 *       },
	 *       {
	 *         name: 'password',
	 *         placeholder: 'Password',
	 *         type: 'password'
	 *       }
	 *     ],
	 *     buttons: [
	 *       {
	 *         text: 'Cancel',
	 *         role: 'cancel',
	 *         handler: data => {
	 *           console.log('Cancel clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Login',
	 *         handler: data => {
	 *           if (User.isValid(data.username, data.password)) {
	 *             // logged in!
	 *           } else {
	 *             // invalid login
	 *             return false;
	 *           }
	 *         }
	 *       }
	 *     ]
	 *   });
	 *   this.nav.present(alert);
	 * }
	 * ```
	 *
	 *
	 * ### Dismissing And Async Navigation
	 *
	 * After an alert has been dismissed, the app may need to also transition
	 * to another page depending on the handler's logic. However, because multiple
	 * transitions were fired at roughly the same time, it's difficult for the
	 * nav controller to cleanly animate multiple transitions that may
	 * have been kicked off asynchronously. This is further described in the
	 * [`Nav Transition Promises`](../../nav/NavController) section. For alerts,
	 * this means it's best to wait for the alert to finish its transition
	 * out before starting a new transition on the same nav controller.
	 *
	 * In the example below, after the alert button has been clicked, its handler
	 * waits on async operation to complete, *then* it uses `pop` to navigate
	 * back a page in the same stack. The potential problem is that the async operation
	 * may have been completed before the alert has even finished its transition
	 * out. In this case, it's best to ensure the alert has finished its transition
	 * out first, *then* start the next transition.
	 *
	 * ```ts
	 * let alert = Alert.create({
	 *   title: 'Hello',
	 *   buttons: [{
	 *     text: 'Ok',
	 *     handler: () => {
	 *       // user has clicked the alert button
	 *       // begin the alert's dismiss transition
	 *       let navTransition = alert.dismiss();
	 *
	 *       // start some async method
	 *       someAsyncOperation().then(() => {
	 *         // once the async operation has completed
	 *         // then run the next nav transition after the
	 *         // first transition has finished animating out
	 *
	 *         navTransition.then(() => {
	 *           this.nav.pop();
	 *         });
	 *       });
	 *       return false;
	 *     }
	 *   }]
	 * });
	 *
	 * this.nav.present(alert);
	 * ```
	 *
	 * It's important to note that the handler returns `false`. A feature of
	 * button handlers is that they automatically dismiss the alert when their button
	 * was clicked, however, we'll need more control regarding the transition. Because
	 * the handler returns `false`, then the alert does not automatically dismiss
	 * itself. Instead, you now have complete control of when the alert has finished
	 * transitioning, and the ability to wait for the alert to finish transitioning
	 * out before starting a new transition.
	 *
	 *
	 * @demo /docs/v2/demos/alert/
	 */
	var Alert = (function (_super) {
	    __extends(Alert, _super);
	    function Alert(opts) {
	        if (opts === void 0) { opts = {}; }
	        opts.inputs = opts.inputs || [];
	        opts.buttons = opts.buttons || [];
	        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
	        _super.call(this, AlertCmp, opts);
	        this.isOverlay = true;
	        // by default, alerts should not fire lifecycle events of other views
	        // for example, when an alert enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	    }
	    /**
	    * @private
	    */
	    Alert.prototype.getTransitionName = function (direction) {
	        var key = (direction === 'back' ? 'alertLeave' : 'alertEnter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * @param {string} title Alert title
	     */
	    Alert.prototype.setTitle = function (title) {
	        this.data.title = title;
	    };
	    /**
	     * @param {string} subTitle Alert subtitle
	     */
	    Alert.prototype.setSubTitle = function (subTitle) {
	        this.data.subTitle = subTitle;
	    };
	    /**
	     * @private
	     */
	    Alert.prototype.setBody = function (message) {
	        // deprecated warning
	        void 0;
	        this.setMessage(message);
	    };
	    /**
	     * @param {string} message  Alert message content
	     */
	    Alert.prototype.setMessage = function (message) {
	        this.data.message = message;
	    };
	    /**
	     * @param {object} input Alert input
	     */
	    Alert.prototype.addInput = function (input) {
	        this.data.inputs.push(input);
	    };
	    /**
	     * @param {any} button Alert button
	     */
	    Alert.prototype.addButton = function (button) {
	        this.data.buttons.push(button);
	    };
	    /**
	     * @param {string} cssClass CSS class name to add to the alert's outer wrapper
	     */
	    Alert.prototype.setCssClass = function (cssClass) {
	        this.data.cssClass = cssClass;
	    };
	    /**
	     *
	     *  Alert options
	     *
	     *  | Property              | Type      | Description                                                               |
	     *  |-----------------------|-----------|---------------------------------------------------------------------------|
	     *  | title                 | `string`  | The string for the alert (optional)                                       |
	     *  | subTitle              | `string`  | The subtitle for the alert (optional)                                     |
	     *  | message               | `string`  | The message for the alert (optional)                                      |
	     *  | cssClass              | `string`  | Any additional class for the alert (optional)                             |
	     *  | inputs                | `array`   | An array of inputs for the alert. See input options. (optional)           |
	     *  | buttons               | `array`   | An array of buttons for the alert. See buttons options. (optional)        |
	     *  | enableBackdropDismiss | `boolean` | Whether the alert should be dismissed by tapping the backdrop (optional)  |
	     *
	     *
	     *  Input options
	     *
	     *  | Property    | Type      | Description                                                     |
	     *  |-------------|-----------|-----------------------------------------------------------------|
	     *  | type        | `string`  | The type the input should be, text, tel, number, etc (optional) |
	     *  | name        | `string`  | The name for the input (optional)                               |
	     *  | placeholder | `string`  | The input's placeholder (optional, for textual/numeric inputs)  |
	     *  | value       | `string`  | The input's value (optional)                                    |
	     *  | label       | `string`  | The input's label (optional, only for radio/checkbox inputs)    |
	     *  | checked     | `boolean` | Whether or not the input is checked or not (optional)           |
	     *  | id          | `string`  | The input's id (optional)                                       |
	     *
	     *  Button options
	     *
	     *  | Property | Type     | Description                                                    |
	     *  |----------|----------|----------------------------------------------------------------|
	     *  | text     | `string` | The buttons displayed text                                     |
	     *  | handler  | `any`    | Expression that should be evaluated when the button is pressed |
	     *  | cssClass | `string` | An additional CSS class for the button                         |
	     *  | role     | `string` | The buttons role, null or `cancel`                             |
	     *
	     * @param {object} opts Alert. See the table above
	     */
	    Alert.create = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        return new Alert(opts);
	    };
	    return Alert;
	}(view_controller_1.ViewController));
	exports.Alert = Alert;
	/**
	 * @private
	 */
	var AlertCmp = (function () {
	    function AlertCmp(_viewCtrl, _elementRef, _config, params, renderer) {
	        this._viewCtrl = _viewCtrl;
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this.d = params.data;
	        if (this.d.cssClass) {
	            this.d.cssClass.split(' ').forEach(function (cssClass) {
	                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
	            });
	        }
	        this.id = (++alertIds);
	        this.descId = '';
	        this.hdrId = 'alert-hdr-' + this.id;
	        this.subHdrId = 'alert-subhdr-' + this.id;
	        this.msgId = 'alert-msg-' + this.id;
	        this.activeId = '';
	        this.lastClick = 0;
	        if (this.d.message) {
	            this.descId = this.msgId;
	        }
	        else if (this.d.subTitle) {
	            this.descId = this.subHdrId;
	        }
	        if (!this.d.message) {
	            this.d.message = '';
	        }
	    }
	    AlertCmp.prototype.ionViewLoaded = function () {
	        var _this = this;
	        // normalize the data
	        var data = this.d;
	        data.buttons = data.buttons.map(function (button) {
	            if (typeof button === 'string') {
	                return { text: button };
	            }
	            return button;
	        });
	        data.inputs = data.inputs.map(function (input, index) {
	            return {
	                type: input.type || 'text',
	                name: util_1.isPresent(input.name) ? input.name : index,
	                placeholder: util_1.isPresent(input.placeholder) ? input.placeholder : '',
	                value: util_1.isPresent(input.value) ? input.value : '',
	                label: input.label,
	                checked: !!input.checked,
	                id: 'alert-input-' + _this.id + '-' + index
	            };
	        });
	        // An alert can be created with several different inputs. Radios,
	        // checkboxes and inputs are all accepted, but they cannot be mixed.
	        var inputTypes = [];
	        data.inputs.forEach(function (input) {
	            if (inputTypes.indexOf(input.type) < 0) {
	                inputTypes.push(input.type);
	            }
	        });
	        if (inputTypes.length > 1 && (inputTypes.indexOf('checkbox') > -1 || inputTypes.indexOf('radio') > -1)) {
	            void 0;
	        }
	        this.inputType = inputTypes.length ? inputTypes[0] : null;
	        var checkedInput = this.d.inputs.find(function (input) { return input.checked; });
	        if (checkedInput) {
	            this.activeId = checkedInput.id;
	        }
	    };
	    AlertCmp.prototype._keyUp = function (ev) {
	        if (this.enabled && this._viewCtrl.isLast()) {
	            if (ev.keyCode === key_1.Key.ENTER) {
	                if (this.lastClick + 1000 < Date.now()) {
	                    // do not fire this click if there recently was already a click
	                    // this can happen when the button has focus and used the enter
	                    // key to click the button. However, both the click handler and
	                    // this keyup event will fire, so only allow one of them to go.
	                    void 0;
	                    var button = this.d.buttons[this.d.buttons.length - 1];
	                    this.btnClick(button);
	                }
	            }
	            else if (ev.keyCode === key_1.Key.ESCAPE) {
	                void 0;
	                this.bdClick();
	            }
	        }
	    };
	    AlertCmp.prototype.ionViewDidEnter = function () {
	        var activeElement = document.activeElement;
	        if (document.activeElement) {
	            activeElement.blur();
	        }
	        var focusableEle = this._elementRef.nativeElement.querySelector('input,button');
	        if (focusableEle) {
	            focusableEle.focus();
	        }
	        this.enabled = true;
	    };
	    AlertCmp.prototype.btnClick = function (button, dismissDelay) {
	        var _this = this;
	        if (!this.enabled) {
	            return;
	        }
	        // keep the time of the most recent button click
	        this.lastClick = Date.now();
	        var shouldDismiss = true;
	        if (button.handler) {
	            // a handler has been provided, execute it
	            // pass the handler the values from the inputs
	            if (button.handler(this.getValues()) === false) {
	                // if the return value of the handler is false then do not dismiss
	                shouldDismiss = false;
	            }
	        }
	        if (shouldDismiss) {
	            setTimeout(function () {
	                _this.dismiss(button.role);
	            }, dismissDelay || this._config.get('pageTransitionDelay'));
	        }
	    };
	    AlertCmp.prototype.rbClick = function (checkedInput) {
	        if (this.enabled) {
	            this.d.inputs.forEach(function (input) {
	                input.checked = (checkedInput === input);
	            });
	            this.activeId = checkedInput.id;
	        }
	    };
	    AlertCmp.prototype.cbClick = function (checkedInput) {
	        if (this.enabled) {
	            checkedInput.checked = !checkedInput.checked;
	        }
	    };
	    AlertCmp.prototype.bdClick = function () {
	        if (this.enabled && this.d.enableBackdropDismiss) {
	            var cancelBtn = this.d.buttons.find(function (b) { return b.role === 'cancel'; });
	            if (cancelBtn) {
	                this.btnClick(cancelBtn, 1);
	            }
	            else {
	                this.dismiss('backdrop');
	            }
	        }
	    };
	    AlertCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(this.getValues(), role);
	    };
	    AlertCmp.prototype.getValues = function () {
	        if (this.inputType === 'radio') {
	            // this is an alert with radio buttons (single value select)
	            // return the one value which is checked, otherwise undefined
	            var checkedInput = this.d.inputs.find(function (i) { return i.checked; });
	            return checkedInput ? checkedInput.value : undefined;
	        }
	        if (this.inputType === 'checkbox') {
	            // this is an alert with checkboxes (multiple value select)
	            // return an array of all the checked values
	            return this.d.inputs.filter(function (i) { return i.checked; }).map(function (i) { return i.value; });
	        }
	        // this is an alert with text inputs
	        // return an object of all the values with the input name as the key
	        var values = {};
	        this.d.inputs.forEach(function (i) {
	            values[i.name] = i.value;
	        });
	        return values;
	    };
	    __decorate([
	        core_1.HostListener('body:keyup', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], AlertCmp.prototype, "_keyUp", null);
	    AlertCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-alert',
	            template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' +
	                '<div class="alert-wrapper">' +
	                '<div class="alert-head">' +
	                '<h2 id="{{hdrId}}" class="alert-title" *ngIf="d.title" [innerHTML]="d.title"></h2>' +
	                '<h3 id="{{subHdrId}}" class="alert-sub-title" *ngIf="d.subTitle" [innerHTML]="d.subTitle"></h3>' +
	                '</div>' +
	                '<div id="{{msgId}}" class="alert-message" [innerHTML]="d.message"></div>' +
	                '<div *ngIf="d.inputs.length" [ngSwitch]="inputType">' +
	                '<template ngSwitchCase="radio">' +
	                '<div class="alert-radio-group" role="radiogroup" [attr.aria-labelledby]="hdrId" [attr.aria-activedescendant]="activeId">' +
	                '<button category="alert-radio-button" *ngFor="let i of d.inputs" (click)="rbClick(i)" [attr.aria-checked]="i.checked" [attr.id]="i.id" class="alert-tappable alert-radio" role="radio">' +
	                '<div class="alert-radio-icon"><div class="alert-radio-inner"></div></div>' +
	                '<div class="alert-radio-label">' +
	                '{{i.label}}' +
	                '</div>' +
	                '</button>' +
	                '</div>' +
	                '</template>' +
	                '<template ngSwitchCase="checkbox">' +
	                '<div class="alert-checkbox-group">' +
	                '<button category="alert-checkbox-button" *ngFor="let i of d.inputs" (click)="cbClick(i)" [attr.aria-checked]="i.checked" class="alert-tappable alert-checkbox" role="checkbox">' +
	                '<div class="alert-checkbox-icon"><div class="alert-checkbox-inner"></div></div>' +
	                '<div class="alert-checkbox-label">' +
	                '{{i.label}}' +
	                '</div>' +
	                '</button>' +
	                '</div>' +
	                '</template>' +
	                '<template ngSwitchDefault>' +
	                '<div class="alert-input-group">' +
	                '<div *ngFor="let i of d.inputs" class="alert-input-wrapper">' +
	                '<input [placeholder]="i.placeholder" [(ngModel)]="i.value" [type]="i.type" class="alert-input">' +
	                '</div>' +
	                '</div>' +
	                '</template>' +
	                '</div>' +
	                '<div class="alert-button-group" [ngClass]="{vertical: d.buttons.length>2}">' +
	                '<button category="alert-button" *ngFor="let b of d.buttons" (click)="btnClick(b)" [ngClass]="b.cssClass">' +
	                '{{b.text}}' +
	                '</button>' +
	                '</div>' +
	                '</div>',
	            host: {
	                'role': 'dialog',
	                '[attr.aria-labelledby]': 'hdrId',
	                '[attr.aria-describedby]': 'descId'
	            },
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, core_1.ElementRef, config_1.Config, nav_params_1.NavParams, core_1.Renderer])
	    ], AlertCmp);
	    return AlertCmp;
	}());
	/**
	 * Animations for alerts
	 */
	var AlertPopIn = (function (_super) {
	    __extends(AlertPopIn, _super);
	    function AlertPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
	        backdrop.fromTo('opacity', 0.01, 0.3);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertPopIn;
	}(transition_1.Transition));
	transition_1.Transition.register('alert-pop-in', AlertPopIn);
	var AlertPopOut = (function (_super) {
	    __extends(AlertPopOut, _super);
	    function AlertPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
	        backdrop.fromTo('opacity', 0.3, 0);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertPopOut;
	}(transition_1.Transition));
	transition_1.Transition.register('alert-pop-out', AlertPopOut);
	var AlertMdPopIn = (function (_super) {
	    __extends(AlertMdPopIn, _super);
	    function AlertMdPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
	        backdrop.fromTo('opacity', 0.01, 0.5);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertMdPopIn;
	}(transition_1.Transition));
	transition_1.Transition.register('alert-md-pop-in', AlertMdPopIn);
	var AlertMdPopOut = (function (_super) {
	    __extends(AlertMdPopOut, _super);
	    function AlertMdPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
	        backdrop.fromTo('opacity', 0.5, 0);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertMdPopOut;
	}(transition_1.Transition));
	transition_1.Transition.register('alert-md-pop-out', AlertMdPopOut);
	var AlertWpPopIn = (function (_super) {
	    __extends(AlertWpPopIn, _super);
	    function AlertWpPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.3, 1);
	        backdrop.fromTo('opacity', 0.01, 0.5);
	        this
	            .easing('cubic-bezier(0,0 0.05,1)')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertWpPopIn;
	}(transition_1.Transition));
	transition_1.Transition.register('alert-wp-pop-in', AlertWpPopIn);
	var AlertWpPopOut = (function (_super) {
	    __extends(AlertWpPopOut, _super);
	    function AlertWpPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 1.3);
	        backdrop.fromTo('opacity', 0.5, 0);
	        this
	            .easing('ease-out')
	            .duration(150)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertWpPopOut;
	}(transition_1.Transition));
	transition_1.Transition.register('alert-wp-pop-out', AlertWpPopOut);
	var alertIds = -1;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var util_1 = __webpack_require__(127);
	/**
	 * @name Option
	 * @description
	 * `ion-option` is a child component of `ion-select`. Similar to the native option element, `ion-option` can take a value and a checked property.
	 *
	 * @demo /docs/v2/demos/item-sliding/
	 */
	var Option = (function () {
	    function Option(_elementRef) {
	        this._elementRef = _elementRef;
	        this._checked = false;
	        /**
	         * @input {any} Event to evaluate when option is selected
	         */
	        this.ionSelect = new core_1.EventEmitter();
	    }
	    Object.defineProperty(Option.prototype, "checked", {
	        /**
	         * @input {boolean} Whether or not the option is already checked and selected
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (val) {
	            this._checked = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Option.prototype, "value", {
	        /**
	         * @input {any} The value of the option
	         */
	        get: function () {
	            if (util_1.isPresent(this._value)) {
	                return this._value;
	            }
	            return this.text;
	        },
	        set: function (val) {
	            this._value = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Option.prototype, "text", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._elementRef.nativeElement.textContent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Option.prototype, "ionSelect", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Option.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Option.prototype, "value", null);
	    Option = __decorate([
	        core_1.Directive({
	            selector: 'ion-option'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Option);
	    return Option;
	}());
	exports.Option = Option;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var config_1 = __webpack_require__(125);
	var picker_1 = __webpack_require__(193);
	var form_1 = __webpack_require__(130);
	var item_1 = __webpack_require__(175);
	var util_1 = __webpack_require__(127);
	var datetime_util_1 = __webpack_require__(143);
	var nav_controller_1 = __webpack_require__(148);
	var DATETIME_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return DateTime; }), multi: true });
	/**
	 * @name DateTime
	 * @description
	 * The DateTime component is used to present an interface which makes it easy for
	 * users to select dates and times. Tapping on `<ion-datetime>` will display a picker
	 * interface that slides up from the bottom of the page. The picker then displays
	 * scrollable columns that can be used to individually select years, months, days,
	 * hours and minute values. The DateTime component is similar to the native
	 * `<input type="datetime-local">` element, however, Ionic's DateTime component makes
	 * it easy to display the date and time in a preferred format, and manage the datetime
	 * values.
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Date</ion-label>
	 *   <ion-datetime displayFormat="MM/DD/YYYY" [(ngModel)]="myDate"></ion-datetime>
	 * </ion-item>
	 * ```
	 *
	 *
	 * ## Display and Picker Formats
	 *
	 * The DateTime component displays the values in two places: in the `<ion-datetime>`
	 * component, and in the interface that is presented from the bottom of the screen.
	 * The following chart lists all of the formats that can be used.
	 *
	 * | Format  | Description                    | Example                 |
	 * |---------|--------------------------------|-------------------------|
	 * | `YYYY`  | Year, 4 digits                 | `2018`                  |
	 * | `YY`    | Year, 2 digits                 | `18`                    |
	 * | `M`     | Month                          | `1` ... `12`            |
	 * | `MM`    | Month, leading zero            | `01` ... `12`           |
	 * | `MMM`   | Month, short name              | `Jan`                   |
	 * | `MMMM`  | Month, full name               | `January`               |
	 * | `D`     | Day                            | `1` ... `31`            |
	 * | `DD`    | Day, leading zero              | `01` ... `31`           |
	 * | `DDD`   | Day, short name                | `Fri`                   |
	 * | `DDDD`  | Day, full name                 | `Friday`                |
	 * | `H`     | Hour, 24-hour                  | `0` ... `23`            |
	 * | `HH`    | Hour, 24-hour, leading zero    | `00` ... `23`           |
	 * | `h`     | Hour, 12-hour                  | `1` ... `12`            |
	 * | `hh`    | Hour, 12-hour, leading zero    | `01` ... `12`           |
	 * | `a`     | 12-hour time period, lowercase | `am` `pm`               |
	 * | `A`     | 12-hour time period, uppercase | `AM` `PM`               |
	 * | `m`     | Minute                         | `1` ... `59`            |
	 * | `mm`    | Minute, leading zero           | `01` ... `59`           |
	 * | `s`     | Second                         | `1` ... `59`            |
	 * | `ss`    | Second, leading zero           | `01` ... `59`           |
	 * | `Z`     | UTC Timezone Offset            | `Z or +HH:mm or -HH:mm` |
	 *
	 * **Important**: See the [Month Names and Day of the Week Names](#month-names-and-day-of-the-week-names)
	 * section below on how to use different names for the month and day.
	 *
	 * ### Display Format
	 *
	 * The `displayFormat` input property specifies how a datetime's value should be
	 * printed, as formatted text, within the `ion-datetime` component.
	 *
	 * In the following example, the display in the `<ion-datetime>` will use the
	 * month's short name, the numerical day with a leading zero, a comma and the
	 * four-digit year. In addition to the date, it will display the time with the hours
	 * in the 24-hour format and the minutes. Any character can be used as a separator.
	 * An example display using this format is: `Jun 17, 2005 11:06`.
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Date</ion-label>
	 *   <ion-datetime displayFormat="MMM DD, YYYY HH:mm" [(ngModel)]="myDate"></ion-datetime>
	 * </ion-item>
	 * ```
	 *
	 * ### Picker Format
	 *
	 * The `pickerFormat` input property determines which columns should be shown in the
	 * interface, the order of the columns, and which format to use within each column.
	 * If the `pickerFormat` input is not provided then it will default to the `displayFormat`.
	 *
	 * In the following example, the display in the `<ion-datetime>` will use the
	 * `MM/YYYY` format, such as `06/2020`. However, the picker interface
	 * will display two columns with the month's long name, and the four-digit year.
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Date</ion-label>
	 *   <ion-datetime displayFormat="MM/YYYY" pickerFormat="MMMM YYYY" [(ngModel)]="myDate"></ion-datetime>
	 * </ion-item>
	 * ```
	 *
	 * ### Datetime Data
	 *
	 * Historically, handling datetime values within JavaScript, or even within HTML
	 * inputs, has always been a challenge. Specifically, JavaScript's `Date` object is
	 * notoriously difficult to correctly parse apart datetime strings or to format
	 * datetime values. Even worse is how different browsers and JavaScript versions
	 * parse various datetime strings differently, especially per locale.
	 *
	 * But no worries, all is not lost! Ionic's datetime input has been designed so
	 * developers can avoid the common pitfalls, allowing developers to easily format
	 * datetime values within the input, and give the user a simple datetime picker for a
	 * great user experience.
	 *
	 * ##### ISO 8601 Datetime Format: YYYY-MM-DDTHH:mmZ
	 *
	 * Ionic uses the [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime)
	 * for its value. The value is simply a string, rather than using JavaScript's `Date`
	 * object. Additionally, when using the ISO datetime format, it makes it easier
	 * to serialize and pass within JSON objects, and sending databases a standardized
	 * format which it can be easily parsed if need be.
	 *
	 * An ISO format can be used as a simple year, or just the hour and minute, or get more
	 * detailed down to the millisecond and timezone. Any of the ISO formats below can be used,
	 * and after a user selects a new value, Ionic will continue to use the same ISO format
	 * which datetime value was originally given as.
	 *
	 * | Description          | Format                 | Datetime Value Example       |
	 * |----------------------|------------------------|------------------------------|
	 * | Year                 | YYYY                   | 1994                         |
	 * | Year and Month       | YYYY-MM                | 1994-12                      |
	 * | Complete Date        | YYYY-MM-DD             | 1994-12-15                   |
	 * | Date and Time        | YYYY-MM-DDTHH:mm       | 1994-12-15T13:47             |
	 * | UTC Timezone         | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789Z     |
	 * | Timezone Offset      | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789+5:00 |
	 * | Hour and Minute      | HH:mm                  | 13:47                        |
	 * | Hour, Minute, Second | HH:mm:ss               | 13:47:20                     |
	 *
	 * Note that the year is always four-digits, milliseconds (if it's added) is always
	 * three-digits, and all others are always two-digits. So the number representing
	 * January always has a leading zero, such as `01`. Additionally, the hour is always
	 * in the 24-hour format, so `00` is `12am` on a 12-hour clock, `13` means `1pm`,
	 * and `23` means `11pm`.
	 *
	 * It's also important to note that neither the `displayFormat` or `pickerFormat` can
	 * set the datetime value's output, which is the value that is set by the component's
	 * `ngModel`. The format's are merely for displaying the value as text and the picker's
	 * interface, but the datetime's value is always persisted as a valid ISO 8601 datetime
	 * string.
	 *
	 *
	 * ## Min and Max Datetimes
	 *
	 * Dates are infinite in either direction, so for a user's selection there should be at
	 * least some form of restricting the dates that can be selected. Be default, the maximum
	 * date is to the end of the current year, and the minimum date is from the beginning
	 * of the year that was 100 years ago.
	 *
	 * To customize the minimum and maximum datetime values, the `min` and `max` component
	 * inputs can be provided which may make more sense for the app's use-case, rather
	 * than the default of the last 100 years. Following the same IS0 8601 format listed
	 * in the table above, each component can restrict which dates can be selected by the
	 * user. Below is an example of restricting the date selection between the beginning
	 * of 2016, and October 31st of 2020:
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Date</ion-label>
	 *   <ion-datetime displayFormat="MMMM YYYY" min="2016" max="2020-10-31" [(ngModel)]="myDate">
	 *   </ion-datetime>
	 * </ion-item>
	 * ```
	 *
	 *
	 * ## Month Names and Day of the Week Names
	 *
	 * At this time, there is no one-size-fits-all standard to automatically choose the correct
	 * language/spelling for a month name, or day of the week name, depending on the language
	 * or locale. Good news is that there is an
	 * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)
	 * standard which *most* browsers have adopted. However, at this time the standard has not
	 * been fully implemented by all popular browsers so Ionic is unavailable to take advantage
	 * of it *yet*. Additionally, Angular also provides an internationalization service, but it
	 * is still under heavy development so Ionic does not depend on it at this time.
	 *
	 * All things considered, the by far easiest solution is to just provide an array of names
	 * if the app needs to use names other than the default English version of month and day
	 * names. The month names and day names can be either configured at the app level, or
	 * individual `ion-datetime` level.
	 *
	 * ### App Config Level
	 *
	 * ```ts
	 * import {ionicBootstrap} from 'ionic-angular';
	 *
	 * ionicBootstrap(MyApp, customProviders, {
	 *   monthNames: ['janeiro', 'fevereiro', 'mar\u00e7o', ... ],
	 *   monthShortNames: ['jan', 'fev', 'mar', ... ],
	 *   dayNames: ['domingo', 'segunda-feira', 'ter\u00e7a-feira', ... ],
	 *   dayShortNames: ['dom', 'seg', 'ter', ... ],
	 * });
	 * ```
	 *
	 * ### Component Input Level
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Período</ion-label>
	 *   <ion-datetime displayFormat="DDDD MMM D, YYYY" [(ngModel)]="myDate"
	 *     monthNames="janeiro, fevereiro, mar\u00e7o, ..."
	 *     monthShortNames="jan, fev, mar, ..."
	 *     dayNames="domingo, segunda-feira, ter\u00e7a-feira, ..."
	 *     dayShortNames="dom, seg, ter, ..."></ion-datetime>
	 * </ion-item>
	 * ```
	 *
	 *
	 * ### Advanced Datetime Validation and Manipulation
	 *
	 * The datetime picker provides the simplicity of selecting an exact format, and persists
	 * the datetime values as a string using the standardized
	 * [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime).
	 * However, it's important to note that `ion-datetime` does not attempt to solve all
	 * situtations when validating and manipulating datetime values. If datetime values need
	 * to be parsed from a certain format, or manipulated (such as adding 5 days to a date,
	 * subtracting 30 minutes, etc.), or even formatting data to a specific locale, then we highly
	 * recommend using [moment.js](http://momentjs.com/) to "Parse, validate, manipulate, and
	 * display dates in JavaScript". [Moment.js](http://momentjs.com/) has quickly become
	 * our goto standard when dealing with datetimes within JavaScript, but Ionic does not
	 * prepackage this dependency since most apps will not require it, and its locale
	 * configuration should be decided by the end-developer.
	 *
	 *
	 * @usage
	 * ```html
	 * <ion-item>
	 *   <ion-label>Date</ion-label>
	 *   <ion-datetime displayFormat="MM/DD/YYYY" [(ngModel)]="myDate">
	 *   </ion-datetime>
	 * </ion-item>
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/datetime/
	 */
	var DateTime = (function () {
	    function DateTime(_form, _config, _item, _nav) {
	        this._form = _form;
	        this._config = _config;
	        this._item = _item;
	        this._nav = _nav;
	        this._disabled = false;
	        this._text = '';
	        this._isOpen = false;
	        this._value = {};
	        this._locale = {};
	        /**
	         * @input {string} The display format of the date and time as text that shows
	         * within the item. When the `pickerFormat` input is not used, then the
	         * `displayFormat` is used for both display the formatted text, and determining
	         * the datetime picker's columns. See the `pickerFormat` input description for
	         * more info. Defaults to `MMM D, YYYY`.
	         */
	        this.displayFormat = 'MMM D, YYYY';
	        /**
	         * @input {string} The text to display on the picker's cancel button. Default: `Cancel`.
	         */
	        this.cancelText = 'Cancel';
	        /**
	         * @input {string} The text to display on the picker's "Done" button. Default: `Done`.
	         */
	        this.doneText = 'Done';
	        /**
	         * @input {any} Any additional options that the picker interface can accept.
	         * See the [Picker API docs](../../picker/Picker) for the picker options.
	         */
	        this.pickerOptions = {};
	        /**
	         * @output {any} Any expression to evaluate when the datetime selection has changed.
	         */
	        this.ionChange = new core_1.EventEmitter();
	        /**
	         * @output {any} Any expression to evaluate when the datetime selection was cancelled.
	         */
	        this.ionCancel = new core_1.EventEmitter();
	        this._form.register(this);
	        if (_item) {
	            this.id = 'dt-' + _item.registerInput('datetime');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-datetime', true);
	        }
	        if (!_nav) {
	            void 0;
	        }
	    }
	    DateTime.prototype._click = function (ev) {
	        if (ev.detail === 0) {
	            // do not continue if the click event came from a form submit
	            return;
	        }
	        ev.preventDefault();
	        ev.stopPropagation();
	        this.open();
	    };
	    DateTime.prototype._keyup = function () {
	        if (!this._isOpen) {
	            this.open();
	        }
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.open = function () {
	        var _this = this;
	        if (this._disabled) {
	            return;
	        }
	        void 0;
	        // the user may have assigned some options specifically for the alert
	        var pickerOptions = util_1.merge({}, this.pickerOptions);
	        var picker = picker_1.Picker.create(pickerOptions);
	        pickerOptions.buttons = [
	            {
	                text: this.cancelText,
	                role: 'cancel',
	                handler: function () {
	                    _this.ionCancel.emit(null);
	                }
	            },
	            {
	                text: this.doneText,
	                handler: function (data) {
	                    void 0;
	                    _this.onChange(data);
	                    _this.ionChange.emit(data);
	                }
	            }
	        ];
	        this.generate(picker);
	        this.validate(picker);
	        picker.ionChange.subscribe(function () {
	            _this.validate(picker);
	        });
	        this._nav.present(picker, pickerOptions);
	        this._isOpen = true;
	        picker.onDismiss(function () {
	            _this._isOpen = false;
	        });
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.generate = function (picker) {
	        var _this = this;
	        // if a picker format wasn't provided, then fallback
	        // to use the display format
	        var template = this.pickerFormat || this.displayFormat;
	        if (util_1.isPresent(template)) {
	            // make sure we've got up to date sizing information
	            this.calcMinMax();
	            // does not support selecting by day name
	            // automaticallly remove any day name formats
	            template = template.replace('DDDD', '{~}').replace('DDD', '{~}');
	            if (template.indexOf('D') === -1) {
	                // there is not a day in the template
	                // replace the day name with a numeric one if it exists
	                template = template.replace('{~}', 'D');
	            }
	            // make sure no day name replacer is left in the string
	            template = template.replace(/{~}/g, '');
	            // parse apart the given template into an array of "formats"
	            datetime_util_1.parseTemplate(template).forEach(function (format) {
	                // loop through each format in the template
	                // create a new picker column to build up with data
	                var key = datetime_util_1.convertFormatToKey(format);
	                var values;
	                // first see if they have exact values to use for this input
	                if (util_1.isPresent(_this[key + 'Values'])) {
	                    // user provide exact values for this date part
	                    values = convertToArrayOfNumbers(_this[key + 'Values'], key);
	                }
	                else {
	                    // use the default date part values
	                    values = datetime_util_1.dateValueRange(format, _this._min, _this._max);
	                }
	                var column = {
	                    name: key,
	                    options: values.map(function (val) {
	                        return {
	                            value: val,
	                            text: datetime_util_1.renderTextFormat(format, val, null, _this._locale),
	                        };
	                    })
	                };
	                if (column.options.length) {
	                    // cool, we've loaded up the columns with options
	                    // preselect the option for this column
	                    var selected = column.options.find(function (opt) { return opt.value === datetime_util_1.getValueFromFormat(_this._value, format); });
	                    if (selected) {
	                        // set the select index for this column's options
	                        column.selectedIndex = column.options.indexOf(selected);
	                    }
	                    // add our newly created column to the picker
	                    picker.addColumn(column);
	                }
	            });
	            this.divyColumns(picker);
	        }
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.validate = function (picker) {
	        var i;
	        var today = new Date();
	        var columns = picker.getColumns();
	        // find the columns used
	        var yearCol = columns.find(function (col) { return col.name === 'year'; });
	        var monthCol = columns.find(function (col) { return col.name === 'month'; });
	        var dayCol = columns.find(function (col) { return col.name === 'day'; });
	        var yearOpt;
	        var monthOpt;
	        var dayOpt;
	        // default to assuming today's year
	        var selectedYear = today.getFullYear();
	        if (yearCol) {
	            yearOpt = yearCol.options[yearCol.selectedIndex];
	            if (yearOpt) {
	                // they have a selected year value
	                selectedYear = yearOpt.value;
	            }
	        }
	        // default to assuming this month has 31 days
	        var numDaysInMonth = 31;
	        var selectedMonth;
	        if (monthCol) {
	            monthOpt = monthCol.options[monthCol.selectedIndex];
	            if (monthOpt) {
	                // they have a selected month value
	                selectedMonth = monthOpt.value;
	                // calculate how many days are in this month
	                numDaysInMonth = datetime_util_1.daysInMonth(selectedMonth, selectedYear);
	            }
	        }
	        // create sort values for the min/max datetimes
	        var minCompareVal = datetime_util_1.dateDataSortValue(this._min);
	        var maxCompareVal = datetime_util_1.dateDataSortValue(this._max);
	        if (monthCol) {
	            // enable/disable which months are valid
	            // to show within the min/max date range
	            for (i = 0; i < monthCol.options.length; i++) {
	                monthOpt = monthCol.options[i];
	                // loop through each month and see if it
	                // is within the min/max date range
	                monthOpt.disabled = (datetime_util_1.dateSortValue(selectedYear, monthOpt.value, 31) < minCompareVal ||
	                    datetime_util_1.dateSortValue(selectedYear, monthOpt.value, 1) > maxCompareVal);
	            }
	        }
	        if (dayCol) {
	            if (util_1.isPresent(selectedMonth)) {
	                // enable/disable which days are valid
	                // to show within the min/max date range
	                for (i = 0; i < 31; i++) {
	                    dayOpt = dayCol.options[i];
	                    // loop through each day and see if it
	                    // is within the min/max date range
	                    var compareVal = datetime_util_1.dateSortValue(selectedYear, selectedMonth, dayOpt.value);
	                    dayOpt.disabled = (compareVal < minCompareVal ||
	                        compareVal > maxCompareVal ||
	                        numDaysInMonth <= i);
	                }
	            }
	            else {
	                // enable/disable which numbers of days to show in this month
	                for (i = 0; i < 31; i++) {
	                    dayCol.options[i].disabled = (numDaysInMonth <= i);
	                }
	            }
	        }
	        picker.refresh();
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.divyColumns = function (picker) {
	        var pickerColumns = picker.getColumns();
	        var columns = [];
	        pickerColumns.forEach(function (col, i) {
	            columns.push(0);
	            col.options.forEach(function (opt) {
	                if (opt.text.length > columns[i]) {
	                    columns[i] = opt.text.length;
	                }
	            });
	        });
	        if (columns.length === 2) {
	            var width = Math.max(columns[0], columns[1]);
	            pickerColumns[0].columnWidth = pickerColumns[1].columnWidth = width * 16 + "px";
	        }
	        else if (columns.length === 3) {
	            var width = Math.max(columns[0], columns[2]);
	            pickerColumns[1].columnWidth = columns[1] * 16 + "px";
	            pickerColumns[0].columnWidth = pickerColumns[2].columnWidth = width * 16 + "px";
	        }
	        else if (columns.length > 3) {
	            columns.forEach(function (col, i) {
	                pickerColumns[i].columnWidth = col * 12 + "px";
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.setValue = function (newData) {
	        datetime_util_1.updateDate(this._value, newData);
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.getValue = function () {
	        return this._value;
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.checkHasValue = function (inputValue) {
	        if (this._item) {
	            this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
	        }
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.updateText = function () {
	        // create the text of the formatted data
	        this._text = datetime_util_1.renderDateTime(this.displayFormat, this._value, this._locale);
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.calcMinMax = function () {
	        var todaysYear = new Date().getFullYear();
	        if (util_1.isBlank(this.min)) {
	            if (util_1.isPresent(this.yearValues)) {
	                this.min = Math.min.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
	            }
	            else {
	                this.min = (todaysYear - 100).toString();
	            }
	        }
	        if (util_1.isBlank(this.max)) {
	            if (util_1.isPresent(this.yearValues)) {
	                this.max = Math.max.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
	            }
	            else {
	                this.max = todaysYear.toString();
	            }
	        }
	        var min = this._min = datetime_util_1.parseDate(this.min);
	        var max = this._max = datetime_util_1.parseDate(this.max);
	        min.month = min.month || 1;
	        min.day = min.day || 1;
	        min.hour = min.hour || 0;
	        min.minute = min.minute || 0;
	        min.second = min.second || 0;
	        max.month = max.month || 12;
	        max.day = max.day || 31;
	        max.hour = max.hour || 23;
	        max.minute = max.minute || 59;
	        max.second = max.second || 59;
	    };
	    Object.defineProperty(DateTime.prototype, "disabled", {
	        /**
	         * @input {boolean} Whether or not the datetime component is disabled. Default `false`.
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-datetime-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    DateTime.prototype.writeValue = function (val) {
	        void 0;
	        this.setValue(val);
	        this.updateText();
	        this.checkHasValue(val);
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        // first see if locale names were provided in the inputs
	        // then check to see if they're in the config
	        // if neither were provided then it will use default English names
	        ['monthNames', 'monthShortNames', 'dayNames', 'dayShortNames'].forEach(function (type) {
	            _this._locale[type] = convertToArrayOfStrings(util_1.isPresent(_this[type]) ? _this[type] : _this._config.get(type), type);
	        });
	        // update how the datetime value is displayed as formatted text
	        this.updateText();
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (val) {
	            void 0;
	            _this.setValue(val);
	            _this.updateText();
	            _this.checkHasValue(val);
	            // convert DateTimeData value to iso datetime format
	            fn(datetime_util_1.convertDataToISO(_this._value));
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    /**
	     * @private
	     */
	    DateTime.prototype.onChange = function (val) {
	        // onChange used when there is not an ngControl
	        void 0;
	        this.setValue(val);
	        this.updateText();
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    DateTime.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    DateTime.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DateTime.prototype, "min", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DateTime.prototype, "max", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DateTime.prototype, "displayFormat", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DateTime.prototype, "pickerFormat", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DateTime.prototype, "cancelText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DateTime.prototype, "doneText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "yearValues", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "monthValues", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "dayValues", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "hourValues", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "minuteValues", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "monthNames", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "monthShortNames", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "dayNames", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "dayShortNames", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "pickerOptions", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DateTime.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DateTime.prototype, "ionCancel", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [UIEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DateTime.prototype, "_click", null);
	    __decorate([
	        core_1.HostListener('keyup.space'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], DateTime.prototype, "_keyup", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DateTime.prototype, "disabled", null);
	    DateTime = __decorate([
	        core_1.Component({
	            selector: 'ion-datetime',
	            template: '<div class="datetime-text">{{_text}}</div>' +
	                '<button aria-haspopup="true" ' +
	                'type="button" ' +
	                '[id]="id" ' +
	                'category="item-cover" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.datetime-disabled]': '_disabled'
	            },
	            providers: [DATETIME_VALUE_ACCESSOR],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(2, core_1.Optional()),
	        __param(3, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, config_1.Config, item_1.Item, nav_controller_1.NavController])
	    ], DateTime);
	    return DateTime;
	}());
	exports.DateTime = DateTime;
	/**
	 * @private
	 * Use to convert a string of comma separated numbers or
	 * an array of numbers, and clean up any user input
	 */
	function convertToArrayOfNumbers(input, type) {
	    var values = [];
	    if (util_1.isString(input)) {
	        // convert the string to an array of strings
	        // auto remove any whitespace and [] characters
	        input = input.replace(/\[|\]|\s/g, '').split(',');
	    }
	    if (util_1.isArray(input)) {
	        // ensure each value is an actual number in the returned array
	        input.forEach(function (num) {
	            num = parseInt(num, 10);
	            if (!isNaN(num)) {
	                values.push(num);
	            }
	        });
	    }
	    if (!values.length) {
	        void 0;
	    }
	    return values;
	}
	/**
	 * @private
	 * Use to convert a string of comma separated strings or
	 * an array of strings, and clean up any user input
	 */
	function convertToArrayOfStrings(input, type) {
	    if (util_1.isPresent(input)) {
	        var values = [];
	        if (util_1.isString(input)) {
	            // convert the string to an array of strings
	            // auto remove any [] characters
	            input = input.replace(/\[|\]/g, '').split(',');
	        }
	        if (util_1.isArray(input)) {
	            // trim up each string value
	            input.forEach(function (val) {
	                val = val.trim();
	                if (val) {
	                    values.push(val);
	                }
	            });
	        }
	        if (!values.length) {
	            void 0;
	        }
	        return values;
	    }
	}


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var platform_browser_1 = __webpack_require__(110);
	var animation_1 = __webpack_require__(152);
	var dom_1 = __webpack_require__(124);
	var util_1 = __webpack_require__(127);
	var config_1 = __webpack_require__(125);
	var key_1 = __webpack_require__(136);
	var nav_params_1 = __webpack_require__(149);
	var transition_1 = __webpack_require__(151);
	var ui_event_manager_1 = __webpack_require__(169);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name Picker
	 * @description
	 *
	 */
	var Picker = (function (_super) {
	    __extends(Picker, _super);
	    function Picker(opts) {
	        if (opts === void 0) { opts = {}; }
	        opts.columns = opts.columns || [];
	        opts.buttons = opts.buttons || [];
	        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
	        _super.call(this, PickerDisplayCmp, opts);
	        this.isOverlay = true;
	        this.ionChange = new core_1.EventEmitter();
	        // by default, pickers should not fire lifecycle events of other views
	        // for example, when an picker enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	        this.usePortal = true;
	    }
	    /**
	    * @private
	    */
	    Picker.prototype.getTransitionName = function (direction) {
	        var key = (direction === 'back' ? 'pickerLeave' : 'pickerEnter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * @param {any} button Picker toolbar button
	     */
	    Picker.prototype.addButton = function (button) {
	        this.data.buttons.push(button);
	    };
	    /**
	     * @param {any} button Picker toolbar button
	     */
	    Picker.prototype.addColumn = function (column) {
	        this.data.columns.push(column);
	    };
	    Picker.prototype.getColumns = function () {
	        return this.data.columns;
	    };
	    Picker.prototype.refresh = function () {
	        this.instance.refresh && this.instance.refresh();
	    };
	    /**
	     * @param {string} cssClass CSS class name to add to the picker's outer wrapper.
	     */
	    Picker.prototype.setCssClass = function (cssClass) {
	        this.data.cssClass = cssClass;
	    };
	    Picker.create = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        return new Picker(opts);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Picker.prototype, "ionChange", void 0);
	    return Picker;
	}(view_controller_1.ViewController));
	exports.Picker = Picker;
	/**
	 * @private
	 */
	var PickerColumnCmp = (function () {
	    function PickerColumnCmp(config, elementRef, _sanitizer) {
	        this.elementRef = elementRef;
	        this._sanitizer = _sanitizer;
	        this.y = 0;
	        this.pos = [];
	        this.startY = null;
	        this.receivingEvents = false;
	        this.events = new ui_event_manager_1.UIEventManager();
	        this.ionChange = new core_1.EventEmitter();
	        this.rotateFactor = config.getNumber('pickerRotateFactor', 0);
	    }
	    PickerColumnCmp.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        // get the scrollable element within the column
	        var colEle = this.colEle.nativeElement;
	        this.colHeight = colEle.clientHeight;
	        // get the height of one option
	        this.optHeight = (colEle.firstElementChild ? colEle.firstElementChild.clientHeight : 0);
	        // set the scroll position for the selected option
	        this.setSelected(this.col.selectedIndex, 0);
	        // Listening for pointer events
	        this.events.pointerEventsRef(this.elementRef, function (ev) { return _this.pointerStart(ev); }, function (ev) { return _this.pointerMove(ev); }, function (ev) { return _this.pointerEnd(ev); });
	    };
	    PickerColumnCmp.prototype.ngOnDestroy = function () {
	        this.events.unlistenAll();
	    };
	    PickerColumnCmp.prototype.pointerStart = function (ev) {
	        void 0;
	        // cancel any previous raf's that haven't fired yet
	        dom_1.cancelRaf(this.rafId);
	        // remember where the pointer started from`
	        this.startY = dom_1.pointerCoord(ev).y;
	        // reset everything
	        this.receivingEvents = true;
	        this.velocity = 0;
	        this.pos.length = 0;
	        this.pos.push(this.startY, Date.now());
	        var minY = (this.col.options.length - 1);
	        var maxY = 0;
	        for (var i = 0; i < this.col.options.length; i++) {
	            if (!this.col.options[i].disabled) {
	                minY = Math.min(minY, i);
	                maxY = Math.max(maxY, i);
	            }
	        }
	        this.minY = (minY * this.optHeight * -1);
	        this.maxY = (maxY * this.optHeight * -1);
	        return true;
	    };
	    PickerColumnCmp.prototype.pointerMove = function (ev) {
	        ev.preventDefault();
	        ev.stopPropagation();
	        if (this.startY === null) {
	            return;
	        }
	        var currentY = dom_1.pointerCoord(ev).y;
	        this.pos.push(currentY, Date.now());
	        // update the scroll position relative to pointer start position
	        var y = this.y + (currentY - this.startY);
	        if (y > this.minY) {
	            // scrolling up higher than scroll area
	            y = Math.pow(y, 0.8);
	            this.bounceFrom = y;
	        }
	        else if (y < this.maxY) {
	            // scrolling down below scroll area
	            y += Math.pow(this.maxY - y, 0.9);
	            this.bounceFrom = y;
	        }
	        else {
	            this.bounceFrom = 0;
	        }
	        this.update(y, 0, false, false);
	    };
	    PickerColumnCmp.prototype.pointerEnd = function (ev) {
	        if (!this.receivingEvents) {
	            return;
	        }
	        this.receivingEvents = false;
	        this.velocity = 0;
	        if (this.bounceFrom > 0) {
	            // bounce back up
	            this.update(this.minY, 100, true, true);
	        }
	        else if (this.bounceFrom < 0) {
	            // bounce back down
	            this.update(this.maxY, 100, true, true);
	        }
	        else if (this.startY !== null) {
	            var endY = dom_1.pointerCoord(ev).y;
	            void 0;
	            this.pos.push(endY, Date.now());
	            var endPos = (this.pos.length - 1);
	            var startPos = endPos;
	            var timeRange = (Date.now() - 100);
	            // move pointer to position measured 100ms ago
	            for (var i = endPos; i > 0 && this.pos[i] > timeRange; i -= 2) {
	                startPos = i;
	            }
	            if (startPos !== endPos) {
	                // compute relative movement between these two points
	                var timeOffset = (this.pos[endPos] - this.pos[startPos]);
	                var movedTop = (this.pos[startPos - 1] - this.pos[endPos - 1]);
	                // based on XXms compute the movement to apply for each render step
	                this.velocity = ((movedTop / timeOffset) * FRAME_MS);
	            }
	            if (Math.abs(endY - this.startY) > 3) {
	                ev.preventDefault();
	                ev.stopPropagation();
	                var y = this.y + (endY - this.startY);
	                this.update(y, 0, true, true);
	            }
	        }
	        this.startY = null;
	        this.decelerate();
	    };
	    PickerColumnCmp.prototype.decelerate = function () {
	        var y = 0;
	        dom_1.cancelRaf(this.rafId);
	        if (isNaN(this.y) || !this.optHeight) {
	            // fallback in case numbers get outta wack
	            this.update(y, 0, true, true);
	        }
	        else if (Math.abs(this.velocity) > 0) {
	            // still decelerating
	            this.velocity *= DECELERATION_FRICTION;
	            // do not let it go slower than a velocity of 1
	            this.velocity = (this.velocity > 0 ? Math.max(this.velocity, 1) : Math.min(this.velocity, -1));
	            y = Math.round(this.y - this.velocity);
	            if (y > this.minY) {
	                // whoops, it's trying to scroll up farther than the options we have!
	                y = this.minY;
	                this.velocity = 0;
	            }
	            else if (y < this.maxY) {
	                // gahh, it's trying to scroll down farther than we can!
	                y = this.maxY;
	                this.velocity = 0;
	            }
	            void 0;
	            var notLockedIn = (y % this.optHeight !== 0 || Math.abs(this.velocity) > 1);
	            this.update(y, 0, true, !notLockedIn);
	            if (notLockedIn) {
	                // isn't locked in yet, keep decelerating until it is
	                this.rafId = dom_1.raf(this.decelerate.bind(this));
	            }
	        }
	        else if (this.y % this.optHeight !== 0) {
	            // needs to still get locked into a position so options line up
	            var currentPos = Math.abs(this.y % this.optHeight);
	            // create a velocity in the direction it needs to scroll
	            this.velocity = (currentPos > (this.optHeight / 2) ? 1 : -1);
	            this.decelerate();
	        }
	    };
	    PickerColumnCmp.prototype.optClick = function (ev, index) {
	        if (!this.velocity) {
	            ev.preventDefault();
	            ev.stopPropagation();
	            this.setSelected(index, 150);
	        }
	    };
	    PickerColumnCmp.prototype.setSelected = function (selectedIndex, duration) {
	        // if there is a selected index, then figure out it's y position
	        // if there isn't a selected index, then just use the top y position
	        var y = (selectedIndex > -1) ? ((selectedIndex * this.optHeight) * -1) : 0;
	        dom_1.cancelRaf(this.rafId);
	        this.velocity = 0;
	        // so what y position we're at
	        this.update(y, duration, true, true);
	    };
	    PickerColumnCmp.prototype.update = function (y, duration, saveY, emitChange) {
	        // ensure we've got a good round number :)
	        y = Math.round(y);
	        this.col.selectedIndex = Math.max(Math.abs(Math.round(y / this.optHeight)), 0);
	        for (var i = 0; i < this.col.options.length; i++) {
	            var opt = this.col.options[i];
	            var optTop = (i * this.optHeight);
	            var optOffset = (optTop + y);
	            var rotateX = (optOffset * this.rotateFactor);
	            var translateX = 0;
	            var translateY = 0;
	            var translateZ = 0;
	            if (this.rotateFactor !== 0) {
	                translateX = 0;
	                translateZ = 90;
	                if (rotateX > 90 || rotateX < -90) {
	                    translateX = -9999;
	                    rotateX = 0;
	                }
	            }
	            else {
	                translateY = optOffset;
	            }
	            opt._trans = this._sanitizer.bypassSecurityTrustStyle("rotateX(" + rotateX + "deg) translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)");
	            opt._dur = (duration > 0 ? duration + 'ms' : '');
	        }
	        if (saveY) {
	            this.y = y;
	        }
	        if (emitChange) {
	            if (this.lastIndex === undefined) {
	                // have not set a last index yet
	                this.lastIndex = this.col.selectedIndex;
	            }
	            else if (this.lastIndex !== this.col.selectedIndex) {
	                // new selected index has changed from the last index
	                // update the lastIndex and emit that it has changed
	                this.lastIndex = this.col.selectedIndex;
	                this.ionChange.emit(this.col.options[this.col.selectedIndex]);
	            }
	        }
	    };
	    PickerColumnCmp.prototype.refresh = function () {
	        var min = this.col.options.length - 1;
	        var max = 0;
	        for (var i = 0; i < this.col.options.length; i++) {
	            if (!this.col.options[i].disabled) {
	                min = Math.min(min, i);
	                max = Math.max(max, i);
	            }
	        }
	        var selectedIndex = util_1.clamp(min, this.col.selectedIndex, max);
	        if (selectedIndex !== this.col.selectedIndex) {
	            var y = (selectedIndex * this.optHeight) * -1;
	            this.update(y, 150, true, true);
	        }
	    };
	    __decorate([
	        core_1.ViewChild('colEle'), 
	        __metadata('design:type', core_1.ElementRef)
	    ], PickerColumnCmp.prototype, "colEle", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], PickerColumnCmp.prototype, "col", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], PickerColumnCmp.prototype, "ionChange", void 0);
	    PickerColumnCmp = __decorate([
	        core_1.Component({
	            selector: '.picker-col',
	            template: '<div *ngIf="col.prefix" class="picker-prefix" [style.width]="col.prefixWidth">{{col.prefix}}</div>' +
	                '<div class="picker-opts" #colEle [style.width]="col.optionsWidth">' +
	                '<button *ngFor="let o of col.options; let i=index" [style.transform]="o._trans" [style.transitionDuration]="o._dur" [class.picker-opt-selected]="col.selectedIndex === i" [class.picker-opt-disabled]="o.disabled" (click)="optClick($event, i)" type="button" category="picker-opt">' +
	                '{{o.text}}' +
	                '</button>' +
	                '</div>' +
	                '<div *ngIf="col.suffix" class="picker-suffix" [style.width]="col.suffixWidth">{{col.suffix}}</div>',
	            host: {
	                '[style.min-width]': 'col.columnWidth',
	                '[class.picker-opts-left]': 'col.align=="left"',
	                '[class.picker-opts-right]': 'col.align=="right"',
	            }
	        }), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef, platform_browser_1.DomSanitizationService])
	    ], PickerColumnCmp);
	    return PickerColumnCmp;
	}());
	/**
	 * @private
	 */
	var PickerDisplayCmp = (function () {
	    function PickerDisplayCmp(_viewCtrl, _elementRef, _config, params, renderer) {
	        this._viewCtrl = _viewCtrl;
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this.d = params.data;
	        if (this.d.cssClass) {
	            this.d.cssClass.split(' ').forEach(function (cssClass) {
	                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
	            });
	        }
	        this.id = (++pickerIds);
	        this.lastClick = 0;
	    }
	    PickerDisplayCmp.prototype.ionViewLoaded = function () {
	        // normalize the data
	        var data = this.d;
	        data.buttons = data.buttons.map(function (button) {
	            if (util_1.isString(button)) {
	                return { text: button };
	            }
	            if (button.role) {
	                button.cssRole = "picker-toolbar-" + button.role;
	            }
	            return button;
	        });
	        // clean up dat data
	        data.columns = data.columns.map(function (column) {
	            if (!util_1.isPresent(column.columnWidth)) {
	                column.columnWidth = (100 / data.columns.length) + '%';
	            }
	            if (!util_1.isPresent(column.options)) {
	                column.options = [];
	            }
	            column.options = column.options.map(function (inputOpt) {
	                var opt = {
	                    text: '',
	                    value: '',
	                    disabled: inputOpt.disabled,
	                };
	                if (util_1.isPresent(inputOpt)) {
	                    if (util_1.isString(inputOpt) || util_1.isNumber(inputOpt)) {
	                        opt.text = inputOpt.toString();
	                        opt.value = inputOpt;
	                    }
	                    else {
	                        opt.text = util_1.isPresent(inputOpt.text) ? inputOpt.text : inputOpt.value;
	                        opt.value = util_1.isPresent(inputOpt.value) ? inputOpt.value : inputOpt.text;
	                    }
	                }
	                return opt;
	            });
	            return column;
	        });
	    };
	    PickerDisplayCmp.prototype.refresh = function () {
	        this._cols.forEach(function (column) {
	            column.refresh();
	        });
	    };
	    PickerDisplayCmp.prototype._colChange = function (selectedOption) {
	        // one of the columns has changed its selected index
	        var picker = this._viewCtrl;
	        picker.ionChange.emit(this.getSelected());
	    };
	    PickerDisplayCmp.prototype._keyUp = function (ev) {
	        if (this.enabled && this._viewCtrl.isLast()) {
	            if (ev.keyCode === key_1.Key.ENTER) {
	                if (this.lastClick + 1000 < Date.now()) {
	                    // do not fire this click if there recently was already a click
	                    // this can happen when the button has focus and used the enter
	                    // key to click the button. However, both the click handler and
	                    // this keyup event will fire, so only allow one of them to go.
	                    void 0;
	                    var button = this.d.buttons[this.d.buttons.length - 1];
	                    this.btnClick(button);
	                }
	            }
	            else if (ev.keyCode === key_1.Key.ESCAPE) {
	                void 0;
	                this.bdClick();
	            }
	        }
	    };
	    PickerDisplayCmp.prototype.ionViewDidEnter = function () {
	        var activeElement = document.activeElement;
	        if (activeElement) {
	            activeElement.blur();
	        }
	        var focusableEle = this._elementRef.nativeElement.querySelector('button');
	        if (focusableEle) {
	            focusableEle.focus();
	        }
	        this.enabled = true;
	    };
	    PickerDisplayCmp.prototype.btnClick = function (button, dismissDelay) {
	        var _this = this;
	        if (!this.enabled) {
	            return;
	        }
	        // keep the time of the most recent button click
	        this.lastClick = Date.now();
	        var shouldDismiss = true;
	        if (button.handler) {
	            // a handler has been provided, execute it
	            // pass the handler the values from the inputs
	            if (button.handler(this.getSelected()) === false) {
	                // if the return value of the handler is false then do not dismiss
	                shouldDismiss = false;
	            }
	        }
	        if (shouldDismiss) {
	            setTimeout(function () {
	                _this.dismiss(button.role);
	            }, dismissDelay || this._config.get('pageTransitionDelay'));
	        }
	    };
	    PickerDisplayCmp.prototype.bdClick = function () {
	        if (this.enabled && this.d.enableBackdropDismiss) {
	            this.dismiss('backdrop');
	        }
	    };
	    PickerDisplayCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(this.getSelected(), role);
	    };
	    PickerDisplayCmp.prototype.getSelected = function () {
	        var selected = {};
	        this.d.columns.forEach(function (col, index) {
	            var selectedColumn = col.options[col.selectedIndex];
	            selected[col.name] = {
	                text: selectedColumn ? selectedColumn.text : null,
	                value: selectedColumn ? selectedColumn.value : null,
	                columnIndex: index,
	            };
	        });
	        return selected;
	    };
	    __decorate([
	        core_1.ViewChildren(PickerColumnCmp), 
	        __metadata('design:type', core_1.QueryList)
	    ], PickerDisplayCmp.prototype, "_cols", void 0);
	    __decorate([
	        core_1.HostListener('body:keyup', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], PickerDisplayCmp.prototype, "_keyUp", null);
	    PickerDisplayCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-picker-cmp',
	            template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' +
	                '<div class="picker-wrapper">' +
	                '<div class="picker-toolbar">' +
	                '<div *ngFor="let b of d.buttons" class="picker-toolbar-button" [ngClass]="b.cssRole">' +
	                '<button (click)="btnClick(b)" [ngClass]="b.cssClass" class="picker-button" clear>' +
	                '{{b.text}}' +
	                '</button>' +
	                '</div>' +
	                '</div>' +
	                '<div class="picker-columns">' +
	                '<div class="picker-above-highlight"></div>' +
	                '<div *ngFor="let c of d.columns" [col]="c" class="picker-col" (ionChange)="_colChange($event)"></div>' +
	                '<div class="picker-below-highlight"></div>' +
	                '</div>' +
	                '</div>',
	            host: {
	                'role': 'dialog'
	            },
	            directives: [PickerColumnCmp],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, core_1.ElementRef, config_1.Config, nav_params_1.NavParams, core_1.Renderer])
	    ], PickerDisplayCmp);
	    return PickerDisplayCmp;
	}());
	/**
	 * Animations for pickers
	 */
	var PickerSlideIn = (function (_super) {
	    __extends(PickerSlideIn, _super);
	    function PickerSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.picker-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.26);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
	    }
	    return PickerSlideIn;
	}(transition_1.Transition));
	transition_1.Transition.register('picker-slide-in', PickerSlideIn);
	var PickerSlideOut = (function (_super) {
	    __extends(PickerSlideOut, _super);
	    function PickerSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.picker-wrapper'));
	        backdrop.fromTo('opacity', 0.26, 0);
	        wrapper.fromTo('translateY', '0%', '100%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
	    }
	    return PickerSlideOut;
	}(transition_1.Transition));
	transition_1.Transition.register('picker-slide-out', PickerSlideOut);
	var pickerIds = -1;
	var DECELERATION_FRICTION = 0.97;
	var FRAME_MS = (1000 / 60);


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var form_1 = __webpack_require__(130);
	var util_1 = __webpack_require__(127);
	var item_1 = __webpack_require__(175);
	var dom_1 = __webpack_require__(124);
	var ui_event_manager_1 = __webpack_require__(169);
	var TOGGLE_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return Toggle; }), multi: true });
	/**
	 * @name Toggle
	 * @description
	 * A toggle technically is the same thing as an HTML checkbox input,
	 * except it looks different and is easier to use on a touch device.
	 * Toggles can also have colors assigned to them, by adding any color
	 * attribute.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
	 * for more info on forms and inputs.
	 *
	 * @usage
	 * ```html
	 *
	 *  <ion-list>
	 *
	 *    <ion-item>
	 *      <ion-label>Pepperoni</ion-label>
	 *      <ion-toggle [(ngModel)]="pepperoni"></ion-toggle>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Sausage</ion-label>
	 *      <ion-toggle [(ngModel)]="sausage" disabled="true"></ion-toggle>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Mushrooms</ion-label>
	 *      <ion-toggle [(ngModel)]="mushrooms"></ion-toggle>
	 *    </ion-item>
	 *
	 *  </ion-list>
	 * ```
	 *
	 * @demo /docs/v2/demos/toggle/
	 * @see {@link /docs/v2/components#toggle Toggle Component Docs}
	 */
	var Toggle = (function () {
	    function Toggle(_form, _elementRef, _renderer, _item) {
	        this._form = _form;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._item = _item;
	        this._checked = false;
	        this._disabled = false;
	        this._activated = false;
	        this._msPrv = 0;
	        this._events = new ui_event_manager_1.UIEventManager();
	        /**
	         * @output {Toggle} expression to evaluate when the toggle value changes
	         */
	        this.ionChange = new core_1.EventEmitter();
	        this._form.register(this);
	        if (_item) {
	            this.id = 'tgl-' + _item.registerInput('toggle');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-toggle', true);
	        }
	    }
	    /**
	     * @private
	     */
	    Toggle.prototype.pointerDown = function (ev) {
	        this._startX = dom_1.pointerCoord(ev).x;
	        this._activated = true;
	        return true;
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.pointerMove = function (ev) {
	        if (this._startX) {
	            var currentX = dom_1.pointerCoord(ev).x;
	            void 0;
	            if (this._checked) {
	                if (currentX + 15 < this._startX) {
	                    this.onChange(false);
	                    this._startX = currentX;
	                    this._activated = true;
	                }
	            }
	            else if (currentX - 15 > this._startX) {
	                this.onChange(true);
	                this._startX = currentX;
	                this._activated = (currentX < this._startX + 5);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.pointerUp = function (ev) {
	        if (this._startX) {
	            var endX = dom_1.pointerCoord(ev).x;
	            if (this.checked) {
	                if (this._startX + 4 > endX) {
	                    this.onChange(false);
	                }
	            }
	            else if (this._startX - 4 < endX) {
	                this.onChange(true);
	            }
	            this._activated = false;
	            this._startX = null;
	        }
	    };
	    Object.defineProperty(Toggle.prototype, "checked", {
	        /**
	         * @input {boolean} whether the toggle it toggled or not
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (val) {
	            this._setChecked(util_1.isTrueProperty(val));
	            this.onChange(this._checked);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Toggle.prototype._setChecked = function (isChecked) {
	        if (isChecked !== this._checked) {
	            this._checked = isChecked;
	            if (this._init) {
	                this.ionChange.emit(this);
	            }
	            this._item && this._item.setCssClass('item-toggle-checked', isChecked);
	        }
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.writeValue = function (val) {
	        this._setChecked(util_1.isTrueProperty(val));
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (isChecked) {
	            void 0;
	            fn(isChecked);
	            _this._setChecked(isChecked);
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    Object.defineProperty(Toggle.prototype, "disabled", {
	        /**
	         * @input {boolean} whether the toggle is disabled or not
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-toggle-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Toggle.prototype.onChange = function (isChecked) {
	        // used when this input does not have an ngModel or ngControl
	        void 0;
	        this._setChecked(isChecked);
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    Toggle.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._init = true;
	        this._events.pointerEventsRef(this._elementRef, function (ev) { return _this.pointerDown(ev); }, function (ev) { return _this.pointerMove(ev); }, function (ev) { return _this.pointerUp(ev); });
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	        this._events.unlistenAll();
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Toggle.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Toggle.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Toggle.prototype, "disabled", null);
	    Toggle = __decorate([
	        core_1.Component({
	            selector: 'ion-toggle',
	            template: '<div class="toggle-icon" [class.toggle-checked]="_checked" [class.toggle-activated]="_activated">' +
	                '<div class="toggle-inner"></div>' +
	                '</div>' +
	                '<button role="checkbox" ' +
	                'type="button" ' +
	                'category="item-cover" ' +
	                '[id]="id" ' +
	                '[attr.aria-checked]="_checked" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.toggle-disabled]': '_disabled'
	            },
	            providers: [TOGGLE_VALUE_ACCESSOR],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(3, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, core_1.ElementRef, core_1.Renderer, item_1.Item])
	    ], Toggle);
	    return Toggle;
	}());
	exports.Toggle = Toggle;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var app_1 = __webpack_require__(122);
	var config_1 = __webpack_require__(125);
	var content_1 = __webpack_require__(158);
	var form_1 = __webpack_require__(130);
	var input_base_1 = __webpack_require__(196);
	var item_1 = __webpack_require__(175);
	var native_input_1 = __webpack_require__(197);
	var nav_controller_1 = __webpack_require__(148);
	var platform_1 = __webpack_require__(126);
	/**
	 * @name Input
	 * @description
	 *
	 * `ion-input` is meant for text type inputs only, such as `text`,
	 * `password`, `email`, `number`, `search`, `tel`, and `url`. Ionic
	 * still uses an actual `<input type="text">` HTML element within the
	 * component, however, with Ionic wrapping the native HTML input
	 * element it's able to better handle the user experience and
	 * interactivity.
	 *
	 * Similarily, `<ion-textarea>` should be used in place of `<textarea>`.
	 *
	 * An `ion-input` is **not** used for non-text type inputs, such as a
	 * `checkbox`, `radio`, `toggle`, `range`, `select`, etc.
	 *
	 * @property [type] - The HTML input type (text, password, email, number, search, tel, or url)
	 * @property [clearInput] - A clear icon will appear in the input when there is a value. Clicking it clears the input.
	 *
	 * @usage
	 * ```html
	 * <ion-list>
	 *   <ion-item>
	 *     <ion-label primary>Inline Label</ion-label>
	 *     <ion-input placeholder="Text Input"></ion-input>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label primary fixed>Fixed Label</ion-label>
	 *     <ion-input type="tel" placeholder="Tel Input"></ion-input>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-input type="number" placeholder="Number Input with no label"></ion-input>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label primary stacked>Stacked Label</ion-label>
	 *     <ion-input type="email" placeholder="Email Input"></ion-input>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label primary stacked>Stacked Label</ion-label>
	 *     <ion-input type="password" placeholder="Password Input"></ion-input>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label primary floating>Floating Label</ion-label>
	 *     <ion-input></ion-input>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-input placeholder="Clear Input" clearInput></ion-input>
	 *   </ion-item>
	 * </ion-list>
	 * ```
	 *
	 * @demo /docs/v2/demos/input/
	 */
	var TextInput = (function (_super) {
	    __extends(TextInput, _super);
	    function TextInput(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
	        _super.call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl);
	    }
	    /**
	     * @private
	     */
	    TextInput.prototype.inputBlurred = function (ev) {
	        this.blur.emit(ev);
	    };
	    /**
	     * @private
	     */
	    TextInput.prototype.inputFocused = function (ev) {
	        this.focus.emit(ev);
	    };
	    /**
	     * @private
	     */
	    TextInput.prototype.clearTextInput = function () {
	        void 0;
	        this._value = '';
	        this.onChange(this._value);
	        this.writeValue(this._value);
	    };
	    TextInput = __decorate([
	        core_1.Component({
	            selector: 'ion-input',
	            template: '<input [type]="type" [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input">' +
	                '<input [type]="type" aria-hidden="true" next-input *ngIf="_useAssist">' +
	                '<button clear [hidden]="!clearInput" type="button" class="text-input-clear-icon" (click)="clearTextInput()" (mousedown)="clearTextInput()"></button>' +
	                '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
	            directives: [
	                native_input_1.NextInput,
	                native_input_1.NativeInput,
	            ],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(2, core_1.Optional()),
	        __param(6, core_1.Optional()),
	        __param(7, core_1.Optional()),
	        __param(8, core_1.Optional()), 
	        __metadata('design:paramtypes', [config_1.Config, form_1.Form, item_1.Item, app_1.App, platform_1.Platform, core_1.ElementRef, content_1.Content, nav_controller_1.NavController, common_1.NgControl])
	    ], TextInput);
	    return TextInput;
	}(input_base_1.InputBase));
	exports.TextInput = TextInput;
	/**
	 * @name TextArea
	 * @description
	 *
	 * `ion-textarea` is is used for multi-line text inputs. Ionic still
	 * uses an actual `<textarea>` HTML element within the component;
	 * however, with Ionic wrapping the native HTML text area element, Ionic
	 * is able to better handle the user experience and interactivity.
	 *
	 * Not that `<ion-textarea>` must load its value from the `value` or
	 * `[(ngModel)]` attribute. Unlike the native `<textarea>` element,
	 * `<ion-textarea>` does not support loading its value from the
	 * textarea's inner content.
	 *
	 * When requiring only a single-line text input, we recommend using
	 * `<ion-input>` instead.
	 *
	 * @usage
	 * ```html
	 *  <ion-item>
	 *    <ion-label>Comments</ion-label>
	 *    <ion-textarea></ion-textarea>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label stacked>Message</ion-label>
	 *    <ion-textarea [(ngModel)]="msg"></ion-textarea>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label floating>Description</ion-label>
	 *    <ion-textarea></ion-textarea>
	 *  </ion-item>
	 * ```
	 *
	 * @demo /docs/v2/demos/textarea/
	 */
	var TextArea = (function (_super) {
	    __extends(TextArea, _super);
	    function TextArea(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
	        _super.call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl);
	    }
	    /**
	     * @private
	     */
	    TextArea.prototype.ngOnInit = function () {
	        _super.prototype.ngOnInit.call(this);
	        if (this._item) {
	            this._item.setCssClass('item-textarea', true);
	        }
	    };
	    /**
	     * @private
	     */
	    TextArea.prototype.inputBlurred = function (ev) {
	        this.blur.emit(ev);
	    };
	    /**
	     * @private
	     */
	    TextArea.prototype.inputFocused = function (ev) {
	        this.focus.emit(ev);
	    };
	    TextArea = __decorate([
	        core_1.Component({
	            selector: 'ion-textarea',
	            template: '<textarea [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input"></textarea>' +
	                '<input type="text" aria-hidden="true" next-input *ngIf="_useAssist">' +
	                '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
	            directives: [
	                native_input_1.NextInput,
	                native_input_1.NativeInput
	            ],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(2, core_1.Optional()),
	        __param(6, core_1.Optional()),
	        __param(7, core_1.Optional()),
	        __param(8, core_1.Optional()), 
	        __metadata('design:paramtypes', [config_1.Config, form_1.Form, item_1.Item, app_1.App, platform_1.Platform, core_1.ElementRef, content_1.Content, nav_controller_1.NavController, common_1.NgControl])
	    ], TextArea);
	    return TextArea;
	}(input_base_1.InputBase));
	exports.TextArea = TextArea;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var util_1 = __webpack_require__(127);
	var dom_1 = __webpack_require__(124);
	var native_input_1 = __webpack_require__(197);
	var InputBase = (function () {
	    function InputBase(config, _form, _item, _app, _platform, _elementRef, _scrollView, _nav, ngControl) {
	        this._form = _form;
	        this._item = _item;
	        this._app = _app;
	        this._platform = _platform;
	        this._elementRef = _elementRef;
	        this._scrollView = _scrollView;
	        this._nav = _nav;
	        this._disabled = false;
	        this._type = 'text';
	        this._value = '';
	        this.placeholder = '';
	        this.blur = new core_1.EventEmitter;
	        this.focus = new core_1.EventEmitter;
	        this._useAssist = config.getBoolean('scrollAssist', false);
	        this._usePadding = config.getBoolean('scrollPadding', this._useAssist);
	        this._keyboardHeight = config.getNumber('keyboardHeight');
	        this._autoFocusAssist = config.get('autoFocusAssist', 'delay');
	        this._autoComplete = config.get('autocomplete', 'off');
	        this._autoCorrect = config.get('autocorrect', 'off');
	        if (ngControl) {
	            ngControl.valueAccessor = this;
	            this.inputControl = ngControl;
	        }
	        _form.register(this);
	    }
	    InputBase.prototype.ngOnInit = function () {
	        if (this._item) {
	            this._item.setCssClass('item-input', true);
	            this._item.registerInput(this._type);
	        }
	        var clearInput = this.clearInput;
	        if (typeof clearInput === 'string') {
	            this.clearInput = (clearInput === '' || clearInput === 'true');
	        }
	    };
	    InputBase.prototype.ngAfterContentInit = function () {
	        var self = this;
	        self._scrollMove = function (ev) {
	            // scroll move event listener this instance can reuse
	            if (!(self._nav && self._nav.isTransitioning())) {
	                self.deregScrollMove();
	                if (self.hasFocus()) {
	                    self._native.hideFocus(true);
	                    self._scrollView.onScrollEnd(function () {
	                        self._native.hideFocus(false);
	                        if (self.hasFocus()) {
	                            // if it still has focus then keep listening
	                            self.regScrollMove();
	                        }
	                    });
	                }
	            }
	        };
	        this.setItemInputControlCss();
	    };
	    InputBase.prototype.ngAfterContentChecked = function () {
	        this.setItemInputControlCss();
	    };
	    InputBase.prototype.setItemInputControlCss = function () {
	        var item = this._item;
	        var nativeInput = this._native;
	        var inputControl = this.inputControl;
	        // Set the control classes on the item
	        if (item && inputControl) {
	            this.setControlCss(item, inputControl);
	        }
	        // Set the control classes on the native input
	        if (nativeInput && inputControl) {
	            this.setControlCss(nativeInput, inputControl);
	        }
	    };
	    InputBase.prototype.setControlCss = function (element, control) {
	        element.setCssClass('ng-untouched', control.untouched);
	        element.setCssClass('ng-touched', control.touched);
	        element.setCssClass('ng-pristine', control.pristine);
	        element.setCssClass('ng-dirty', control.dirty);
	        element.setCssClass('ng-valid', control.valid);
	        element.setCssClass('ng-invalid', !control.valid);
	    };
	    InputBase.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    Object.defineProperty(InputBase.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (val) {
	            this._value = val;
	            this.checkHasValue(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (val) {
	            this._type = 'text';
	            if (val) {
	                val = val.toLowerCase();
	                if (/password|email|number|search|tel|url|date|month|time|week/.test(val)) {
	                    this._type = val;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-input-disabled', this._disabled);
	            this._native && this._native.isDisabled(this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "_nativeInput", {
	        /**
	         * @private
	         */
	        set: function (nativeInput) {
	            var _this = this;
	            this._native = nativeInput;
	            if (this._item && this._item.labelId !== null) {
	                nativeInput.labelledBy(this._item.labelId);
	            }
	            nativeInput.valueChange.subscribe(function (inputValue) {
	                _this.onChange(inputValue);
	            });
	            this.focusChange(this.hasFocus());
	            nativeInput.focusChange.subscribe(function (textInputHasFocus) {
	                _this.focusChange(textInputHasFocus);
	                _this.checkHasValue(nativeInput.getValue());
	                if (!textInputHasFocus) {
	                    _this.onTouched(textInputHasFocus);
	                }
	            });
	            this.checkHasValue(nativeInput.getValue());
	            this.disabled = this._disabled;
	            var ionInputEle = this._elementRef.nativeElement;
	            var nativeInputEle = nativeInput.element();
	            // copy ion-input attributes to the native input element
	            dom_1.copyInputAttributes(ionInputEle, nativeInputEle);
	            if (ionInputEle.hasAttribute('autofocus')) {
	                // the ion-input element has the autofocus attributes
	                ionInputEle.removeAttribute('autofocus');
	                if (this._autoFocusAssist === 'immediate') {
	                    // config says to immediate focus on the input
	                    // works best on android devices
	                    nativeInputEle.focus();
	                }
	                else if (this._autoFocusAssist === 'delay') {
	                    // config says to chill out a bit and focus on the input after transitions
	                    // works best on desktop
	                    setTimeout(function () {
	                        nativeInputEle.focus();
	                    }, 650);
	                }
	            }
	            // by default set autocomplete="off" unless specified by the input
	            if (ionInputEle.hasAttribute('autocomplete')) {
	                this._autoComplete = ionInputEle.getAttribute('autocomplete');
	            }
	            nativeInputEle.setAttribute('autocomplete', this._autoComplete);
	            // by default set autocorrect="off" unless specified by the input
	            if (ionInputEle.hasAttribute('autocorrect')) {
	                this._autoCorrect = ionInputEle.getAttribute('autocorrect');
	            }
	            nativeInputEle.setAttribute('autocorrect', this._autoCorrect);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "_nextInput", {
	        /**
	         * @private
	         */
	        set: function (nextInput) {
	            var _this = this;
	            if (nextInput) {
	                nextInput.focused.subscribe(function () {
	                    _this._form.tabFocus(_this);
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * Angular2 Forms API method called by the model (Control) on change to update
	     * the checked value.
	     * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
	     */
	    InputBase.prototype.writeValue = function (val) {
	        this._value = val;
	        this.checkHasValue(val);
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.onChange = function (val) {
	        this.checkHasValue(val);
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.onTouched = function (val) { };
	    /**
	     * @private
	     */
	    InputBase.prototype.hasFocus = function () {
	        // check if an input has focus or not
	        return this._native.hasFocus();
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.checkHasValue = function (inputValue) {
	        if (this._item) {
	            this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
	        }
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.focusChange = function (inputHasFocus) {
	        if (this._item) {
	            this._item.setCssClass('input-has-focus', inputHasFocus);
	        }
	        if (!inputHasFocus) {
	            this.deregScrollMove();
	        }
	    };
	    InputBase.prototype.pointerStart = function (ev) {
	        // input cover touchstart
	        void 0;
	        if (ev.type === 'touchstart') {
	            this._isTouch = true;
	        }
	        if ((this._isTouch || (!this._isTouch && ev.type === 'mousedown')) && this._app.isEnabled()) {
	            // remember where the touchstart/mousedown started
	            this._coord = dom_1.pointerCoord(ev);
	        }
	    };
	    InputBase.prototype.pointerEnd = function (ev) {
	        // input cover touchend/mouseup
	        void 0;
	        if ((this._isTouch && ev.type === 'mouseup') || !this._app.isEnabled()) {
	            // the app is actively doing something right now
	            // don't try to scroll in the input
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	        else if (this._coord) {
	            // get where the touchend/mouseup ended
	            var endCoord = dom_1.pointerCoord(ev);
	            // focus this input if the pointer hasn't moved XX pixels
	            // and the input doesn't already have focus
	            if (!dom_1.hasPointerMoved(8, this._coord, endCoord) && !this.hasFocus()) {
	                ev.preventDefault();
	                ev.stopPropagation();
	                // begin the input focus process
	                void 0;
	                this.initFocus();
	            }
	        }
	        this._coord = null;
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.initFocus = function () {
	        var _this = this;
	        // begin the process of setting focus to the inner input element
	        var scrollView = this._scrollView;
	        if (scrollView) {
	            // this input is inside of a scroll view
	            // find out if text input should be manually scrolled into view
	            // get container of this input, probably an ion-item a few nodes up
	            var ele = this._elementRef.nativeElement;
	            ele = dom_1.closest(ele, 'ion-item,[ion-item]') || ele;
	            var scrollData = InputBase.getScrollData(ele.offsetTop, ele.offsetHeight, scrollView.getContentDimensions(), this._keyboardHeight, this._platform.height());
	            if (scrollData.scrollAmount > -3 && scrollData.scrollAmount < 3) {
	                // the text input is in a safe position that doesn't
	                // require it to be scrolled into view, just set focus now
	                this.setFocus();
	                this.regScrollMove();
	                return;
	            }
	            if (this._usePadding) {
	                // add padding to the bottom of the scroll view (if needed)
	                scrollView.addScrollPadding(scrollData.scrollPadding);
	            }
	            // manually scroll the text input to the top
	            // do not allow any clicks while it's scrolling
	            var scrollDuration = getScrollAssistDuration(scrollData.scrollAmount);
	            this._app.setEnabled(false, scrollDuration);
	            this._nav && this._nav.setTransitioning(true, scrollDuration);
	            // temporarily move the focus to the focus holder so the browser
	            // doesn't freak out while it's trying to get the input in place
	            // at this point the native text input still does not have focus
	            this._native.beginFocus(true, scrollData.inputSafeY);
	            // scroll the input into place
	            scrollView.scrollTo(0, scrollData.scrollTo, scrollDuration).then(function () {
	                // the scroll view is in the correct position now
	                // give the native text input focus
	                _this._native.beginFocus(false, 0);
	                // ensure this is the focused input
	                _this.setFocus();
	                // all good, allow clicks again
	                _this._app.setEnabled(true);
	                _this._nav && _this._nav.setTransitioning(false);
	                _this.regScrollMove();
	                if (_this._usePadding) {
	                    _this._scrollView.clearScrollPaddingFocusOut();
	                }
	            });
	        }
	        else {
	            // not inside of a scroll view, just focus it
	            this.setFocus();
	            this.regScrollMove();
	        }
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.setFocus = function () {
	        // immediately set focus
	        this._form.setAsFocused(this);
	        // set focus on the actual input element
	        void 0;
	        this._native.setFocus();
	        // ensure the body hasn't scrolled down
	        document.body.scrollTop = 0;
	    };
	    /**
	     * @private
	     * Angular2 Forms API method called by the view (NgControl) to register the
	     * onChange event handler that updates the model (Control).
	     * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
	     * @param {Function} fn  the onChange event handler.
	     */
	    InputBase.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    /**
	     * @private
	     * Angular2 Forms API method called by the view (NgControl) to register
	     * the onTouched event handler that marks model (Control) as touched.
	     * @param {Function} fn  onTouched event handler.
	     */
	    InputBase.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    /**
	     * @private
	     */
	    InputBase.prototype.regScrollMove = function () {
	        var _this = this;
	        // register scroll move listener
	        if (this._useAssist && this._scrollView) {
	            setTimeout(function () {
	                _this.deregScrollMove();
	                _this._deregScroll = _this._scrollView.addScrollListener(_this._scrollMove);
	            }, 80);
	        }
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.deregScrollMove = function () {
	        // deregister the scroll move listener
	        this._deregScroll && this._deregScroll();
	    };
	    InputBase.prototype.focusNext = function () {
	        this._form.tabFocus(this);
	    };
	    /**
	     * @private
	     */
	    InputBase.getScrollData = function (inputOffsetTop, inputOffsetHeight, scrollViewDimensions, keyboardHeight, plaformHeight) {
	        // compute input's Y values relative to the body
	        var inputTop = (inputOffsetTop + scrollViewDimensions.contentTop - scrollViewDimensions.scrollTop);
	        var inputBottom = (inputTop + inputOffsetHeight);
	        // compute the safe area which is the viewable content area when the soft keyboard is up
	        var safeAreaTop = scrollViewDimensions.contentTop;
	        var safeAreaHeight = plaformHeight - keyboardHeight - safeAreaTop;
	        safeAreaHeight /= 2;
	        var safeAreaBottom = safeAreaTop + safeAreaHeight;
	        var inputTopWithinSafeArea = (inputTop >= safeAreaTop && inputTop <= safeAreaBottom);
	        var inputTopAboveSafeArea = (inputTop < safeAreaTop);
	        var inputTopBelowSafeArea = (inputTop > safeAreaBottom);
	        var inputBottomWithinSafeArea = (inputBottom >= safeAreaTop && inputBottom <= safeAreaBottom);
	        var inputBottomBelowSafeArea = (inputBottom > safeAreaBottom);
	        /*
	        Text Input Scroll To Scenarios
	        ---------------------------------------
	        1) Input top within safe area, bottom within safe area
	        2) Input top within safe area, bottom below safe area, room to scroll
	        3) Input top above safe area, bottom within safe area, room to scroll
	        4) Input top below safe area, no room to scroll, input smaller than safe area
	        5) Input top within safe area, bottom below safe area, no room to scroll, input smaller than safe area
	        6) Input top within safe area, bottom below safe area, no room to scroll, input larger than safe area
	        7) Input top below safe area, no room to scroll, input larger than safe area
	        */
	        var scrollData = {
	            scrollAmount: 0,
	            scrollTo: 0,
	            scrollPadding: 0,
	            inputSafeY: 0
	        };
	        if (inputTopWithinSafeArea && inputBottomWithinSafeArea) {
	            // Input top within safe area, bottom within safe area
	            // no need to scroll to a position, it's good as-is
	            return scrollData;
	        }
	        // looks like we'll have to do some auto-scrolling
	        if (inputTopBelowSafeArea || inputBottomBelowSafeArea) {
	            // Input top and bottom below safe area
	            // auto scroll the input up so at least the top of it shows
	            if (safeAreaHeight > inputOffsetHeight) {
	                // safe area height is taller than the input height, so we
	                // can bring it up the input just enough to show the input bottom
	                scrollData.scrollAmount = Math.round(safeAreaBottom - inputBottom);
	            }
	            else {
	                // safe area height is smaller than the input height, so we can
	                // only scroll it up so the input top is at the top of the safe area
	                // however the input bottom will be below the safe area
	                scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
	            }
	            scrollData.inputSafeY = -(inputTop - safeAreaTop) + 4;
	        }
	        else if (inputTopAboveSafeArea) {
	            // Input top above safe area
	            // auto scroll the input down so at least the top of it shows
	            scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
	            scrollData.inputSafeY = (safeAreaTop - inputTop) + 4;
	        }
	        // figure out where it should scroll to for the best position to the input
	        scrollData.scrollTo = (scrollViewDimensions.scrollTop - scrollData.scrollAmount);
	        if (scrollData.scrollAmount < 0) {
	            // when auto-scrolling up, there also needs to be enough
	            // content padding at the bottom of the scroll view
	            // manually add it if there isn't enough scrollable area
	            // figure out how many scrollable area is left to scroll up
	            var availablePadding = (scrollViewDimensions.scrollHeight - scrollViewDimensions.scrollTop) - scrollViewDimensions.contentHeight;
	            var paddingSpace = availablePadding + scrollData.scrollAmount;
	            if (paddingSpace < 0) {
	                // there's not enough scrollable area at the bottom, so manually add more
	                scrollData.scrollPadding = (scrollViewDimensions.contentHeight - safeAreaHeight);
	            }
	        }
	        // if (!window.safeAreaEle) {
	        //   window.safeAreaEle = document.createElement('div');
	        //   window.safeAreaEle.style.position = 'absolute';
	        //   window.safeAreaEle.style.background = 'rgba(0, 128, 0, 0.7)';
	        //   window.safeAreaEle.style.padding = '2px 5px';
	        //   window.safeAreaEle.style.textShadow = '1px 1px white';
	        //   window.safeAreaEle.style.left = '0px';
	        //   window.safeAreaEle.style.right = '0px';
	        //   window.safeAreaEle.style.fontWeight = 'bold';
	        //   window.safeAreaEle.style.pointerEvents = 'none';
	        //   document.body.appendChild(window.safeAreaEle);
	        // }
	        // window.safeAreaEle.style.top = safeAreaTop + 'px';
	        // window.safeAreaEle.style.height = safeAreaHeight + 'px';
	        // window.safeAreaEle.innerHTML = `
	        //   <div>scrollTo: ${scrollData.scrollTo}</div>
	        //   <div>scrollAmount: ${scrollData.scrollAmount}</div>
	        //   <div>scrollPadding: ${scrollData.scrollPadding}</div>
	        //   <div>inputSafeY: ${scrollData.inputSafeY}</div>
	        //   <div>scrollHeight: ${scrollViewDimensions.scrollHeight}</div>
	        //   <div>scrollTop: ${scrollViewDimensions.scrollTop}</div>
	        //   <div>contentHeight: ${scrollViewDimensions.contentHeight}</div>
	        // `;
	        return scrollData;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "clearInput", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InputBase.prototype, "placeholder", void 0);
	    __decorate([
	        core_1.ViewChild(native_input_1.NativeInput), 
	        __metadata('design:type', native_input_1.NativeInput)
	    ], InputBase.prototype, "_native", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], InputBase.prototype, "blur", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], InputBase.prototype, "focus", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "value", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "type", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "disabled", null);
	    __decorate([
	        core_1.ViewChild(native_input_1.NativeInput), 
	        __metadata('design:type', native_input_1.NativeInput), 
	        __metadata('design:paramtypes', [native_input_1.NativeInput])
	    ], InputBase.prototype, "_nativeInput", null);
	    __decorate([
	        core_1.ViewChild(native_input_1.NextInput), 
	        __metadata('design:type', native_input_1.NextInput), 
	        __metadata('design:paramtypes', [native_input_1.NextInput])
	    ], InputBase.prototype, "_nextInput", null);
	    return InputBase;
	}());
	exports.InputBase = InputBase;
	var SCROLL_ASSIST_SPEED = 0.3;
	function getScrollAssistDuration(distanceToScroll) {
	    distanceToScroll = Math.abs(distanceToScroll);
	    var duration = distanceToScroll / SCROLL_ASSIST_SPEED;
	    return Math.min(400, Math.max(150, duration));
	}


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var config_1 = __webpack_require__(125);
	var dom_1 = __webpack_require__(124);
	/**
	 * @private
	 */
	var NativeInput = (function () {
	    function NativeInput(_elementRef, _renderer, config, ngControl) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.ngControl = ngControl;
	        this.focusChange = new core_1.EventEmitter();
	        this.valueChange = new core_1.EventEmitter();
	        this._clone = config.getBoolean('inputCloning', false);
	        this._blurring = config.getBoolean('inputBlurring', false);
	    }
	    NativeInput.prototype._change = function (ev) {
	        this.valueChange.emit(ev.target.value);
	    };
	    NativeInput.prototype._focus = function () {
	        var self = this;
	        self.focusChange.emit(true);
	        function docTouchEnd(ev) {
	            var tapped = ev.target;
	            if (tapped && self.element()) {
	                if (tapped.tagName !== 'INPUT' && tapped.tagName !== 'TEXTAREA' && !tapped.classList.contains('input-cover')) {
	                    self.element().blur();
	                }
	            }
	        }
	        if (self._blurring) {
	            // automatically blur input if:
	            // 1) this input has focus
	            // 2) the newly tapped document element is not an input
	            void 0;
	            document.addEventListener('touchend', docTouchEnd, true);
	            self._unrefBlur = function () {
	                void 0;
	                document.removeEventListener('touchend', docTouchEnd, true);
	            };
	        }
	    };
	    NativeInput.prototype._blur = function () {
	        this.focusChange.emit(false);
	        this.hideFocus(false);
	        this._unrefBlur && this._unrefBlur();
	        this._unrefBlur = null;
	    };
	    NativeInput.prototype.labelledBy = function (val) {
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-labelledby', val);
	    };
	    NativeInput.prototype.isDisabled = function (val) {
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'disabled', val ? '' : null);
	    };
	    NativeInput.prototype.setFocus = function () {
	        // let's set focus to the element
	        // but only if it does not already have focus
	        if (document.activeElement !== this.element()) {
	            this.element().focus();
	        }
	    };
	    NativeInput.prototype.beginFocus = function (shouldFocus, inputRelativeY) {
	        if (this._relocated !== shouldFocus) {
	            var focusedInputEle = this.element();
	            if (shouldFocus) {
	                // we should focus into this element
	                if (this._clone) {
	                    // this platform needs the input to be cloned
	                    // this allows for the actual input to receive the focus from
	                    // the user's touch event, but before it receives focus, it
	                    // moves the actual input to a location that will not screw
	                    // up the app's layout, and does not allow the native browser
	                    // to attempt to scroll the input into place (messing up headers/footers)
	                    // the cloned input fills the area of where native input should be
	                    // while the native input fakes out the browser by relocating itself
	                    // before it receives the actual focus event
	                    var clonedInputEle = cloneInput(focusedInputEle, 'cloned-focus');
	                    focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
	                    // move the native input to a location safe to receive focus
	                    // according to the browser, the native input receives focus in an
	                    // area which doesn't require the browser to scroll the input into place
	                    focusedInputEle.style[dom_1.CSS.transform] = "translate3d(-9999px," + inputRelativeY + "px,0)";
	                    focusedInputEle.style.opacity = '0';
	                }
	                // let's now set focus to the actual native element
	                // at this point it is safe to assume the browser will not attempt
	                // to scroll the input into view itself (screwing up headers/footers)
	                this.setFocus();
	                if (this._clone) {
	                    focusedInputEle.classList.add('cloned-active');
	                }
	            }
	            else {
	                // should remove the focus
	                if (this._clone) {
	                    // should remove the cloned node
	                    focusedInputEle.classList.remove('cloned-active');
	                    focusedInputEle.style[dom_1.CSS.transform] = '';
	                    focusedInputEle.style.opacity = '';
	                    removeClone(focusedInputEle, 'cloned-focus');
	                }
	            }
	            this._relocated = shouldFocus;
	        }
	    };
	    NativeInput.prototype.hideFocus = function (shouldHideFocus) {
	        var focusedInputEle = this.element();
	        void 0;
	        if (shouldHideFocus) {
	            var clonedInputEle = cloneInput(focusedInputEle, 'cloned-move');
	            focusedInputEle.classList.add('cloned-active');
	            focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
	        }
	        else {
	            focusedInputEle.classList.remove('cloned-active');
	            removeClone(focusedInputEle, 'cloned-move');
	        }
	    };
	    NativeInput.prototype.hasFocus = function () {
	        return dom_1.hasFocus(this.element());
	    };
	    NativeInput.prototype.getValue = function () {
	        return this.element().value;
	    };
	    NativeInput.prototype.setCssClass = function (cssClass, shouldAdd) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
	    };
	    NativeInput.prototype.element = function () {
	        return this._elementRef.nativeElement;
	    };
	    NativeInput.prototype.ngOnDestroy = function () {
	        this._unrefBlur && this._unrefBlur();
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], NativeInput.prototype, "focusChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], NativeInput.prototype, "valueChange", void 0);
	    __decorate([
	        core_1.HostListener('input', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], NativeInput.prototype, "_change", null);
	    __decorate([
	        core_1.HostListener('focus'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], NativeInput.prototype, "_focus", null);
	    __decorate([
	        core_1.HostListener('blur'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], NativeInput.prototype, "_blur", null);
	    NativeInput = __decorate([
	        core_1.Directive({
	            selector: '.text-input'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, config_1.Config, common_1.NgControl])
	    ], NativeInput);
	    return NativeInput;
	}());
	exports.NativeInput = NativeInput;
	function cloneInput(focusedInputEle, addCssClass) {
	    var clonedInputEle = focusedInputEle.cloneNode(true);
	    clonedInputEle.classList.add('cloned-input');
	    clonedInputEle.classList.add(addCssClass);
	    clonedInputEle.setAttribute('aria-hidden', true);
	    clonedInputEle.removeAttribute('aria-labelledby');
	    clonedInputEle.tabIndex = -1;
	    clonedInputEle.style.width = (focusedInputEle.offsetWidth + 10) + 'px';
	    clonedInputEle.style.height = focusedInputEle.offsetHeight + 'px';
	    clonedInputEle.value = focusedInputEle.value;
	    return clonedInputEle;
	}
	function removeClone(focusedInputEle, queryCssClass) {
	    var clonedInputEle = focusedInputEle.parentElement.querySelector('.' + queryCssClass);
	    if (clonedInputEle) {
	        clonedInputEle.parentNode.removeChild(clonedInputEle);
	    }
	}
	/**
	 * @private
	 */
	var NextInput = (function () {
	    function NextInput() {
	        this.focused = new core_1.EventEmitter();
	    }
	    NextInput.prototype.receivedFocus = function () {
	        void 0;
	        this.focused.emit(true);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], NextInput.prototype, "focused", void 0);
	    __decorate([
	        core_1.HostListener('focus'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], NextInput.prototype, "receivedFocus", null);
	    NextInput = __decorate([
	        core_1.Directive({
	            selector: '[next-input]'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NextInput);
	    return NextInput;
	}());
	exports.NextInput = NextInput;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var util_1 = __webpack_require__(127);
	/**
	 * @name SegmentButton
	 * @description
	 * The child buttons of the `ion-segment` component. Each `ion-segment-button` must have a value.
	 * @usage
	 * ```html
	 * <ion-segment [(ngModel)]="relationship" primary>
	 *   <ion-segment-button value="friends" (ionSelect)="selectedFriends()">
	 *     Friends
	 *   </ion-segment-button>
	 *   <ion-segment-button value="enemies" (ionSelect)="selectedEnemies()">
	 *     Enemies
	 *   </ion-segment-button>
	 * </ion-segment>
	 *```
	 *
	 * Or with `FormBuilder`
	 *
	 *```html
	 * <form [ngFormModel]="myForm">
	 *   <ion-segment ngControl="mapStyle" danger>
	 *     <ion-segment-button value="standard">
	 *       Standard
	 *     </ion-segment-button>
	 *     <ion-segment-button value="hybrid">
	 *       Hybrid
	 *     </ion-segment-button>
	 *     <ion-segment-button value="sat">
	 *       Satellite
	 *     </ion-segment-button>
	 *   </ion-segment>
	 * </form>
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/segment/
	 * @see {@link /docs/v2/components#segment Segment Component Docs}
	 * @see {@link /docs/v2/api/components/segment/Segment/ Segment API Docs}
	 */
	var SegmentButton = (function () {
	    function SegmentButton(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._disabled = false;
	        /**
	         * @output {SegmentButton} expression to evaluate when a segment button has been clicked
	         */
	        this.ionSelect = new core_1.EventEmitter();
	    }
	    Object.defineProperty(SegmentButton.prototype, "disabled", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this.setCssClass('segment-button-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    SegmentButton.prototype.setCssClass = function (cssClass, shouldAdd) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
	    };
	    /**
	     * @private
	     * On click of a SegmentButton
	     */
	    SegmentButton.prototype.onClick = function () {
	        void 0;
	        this.ionSelect.emit(this);
	    };
	    /**
	     * @private
	     */
	    SegmentButton.prototype.ngOnInit = function () {
	        if (!util_1.isPresent(this.value)) {
	            void 0;
	        }
	    };
	    Object.defineProperty(SegmentButton.prototype, "isActive", {
	        /**
	         * @private
	         */
	        set: function (isActive) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, 'segment-activated', isActive);
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-pressed', isActive);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], SegmentButton.prototype, "value", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], SegmentButton.prototype, "ionSelect", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], SegmentButton.prototype, "disabled", null);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], SegmentButton.prototype, "onClick", null);
	    SegmentButton = __decorate([
	        core_1.Component({
	            selector: 'ion-segment-button',
	            template: '<ng-content></ng-content>' +
	                '<ion-button-effect></ion-button-effect>',
	            host: {
	                'tappable': '',
	                'class': 'segment-button',
	                'role': 'button'
	            },
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], SegmentButton);
	    return SegmentButton;
	}());
	exports.SegmentButton = SegmentButton;
	/**
	 * @name Segment
	 * @description
	 * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.
	 * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.
	 * You could use Angular 2's `ngModel` or `FormBuilder` API. For an overview on how `FormBuilder` works, checkout [Angular 2 Forms](http://learnangular2.com/forms/), or [Angular FormBuilder](https://angular.io/docs/ts/latest/api/common/FormBuilder-class.html)
	 *
	 *
	 * @usage
	 * ```html
	 * <ion-segment [(ngModel)]="relationship" (ionChange)="onSegmentChanged($event)" danger>
	 *   <ion-segment-button value="friends">
	 *     Friends
	 *   </ion-segment-button>
	 *   <ion-segment-button value="enemies">
	 *     Enemies
	 *   </ion-segment-button>
	 * </ion-segment>
	 *```
	 *
	 * Or with `FormBuilder`
	 *
	 *```html
	 * <form [ngFormModel]="myForm">
	 *   <ion-segment ngControl="mapStyle" danger>
	 *     <ion-segment-button value="standard">
	 *       Standard
	 *     </ion-segment-button>
	 *     <ion-segment-button value="hybrid">
	 *       Hybrid
	 *     </ion-segment-button>
	 *     <ion-segment-button value="sat">
	 *       Satellite
	 *     </ion-segment-button>
	 *   </ion-segment>
	 * </form>
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/segment/
	 * @see {@link /docs/v2/components#segment Segment Component Docs}
	 * @see [Angular 2 Forms](http://learnangular2.com/forms/)
	 */
	var Segment = (function () {
	    function Segment(ngControl) {
	        this._disabled = false;
	        /**
	         * @output {Any}  expression to evaluate when a segment button has been changed
	         */
	        this.ionChange = new core_1.EventEmitter();
	        /**
	         * @private
	         */
	        this.onChange = function (_) { };
	        /**
	         * @private
	         */
	        this.onTouched = function (_) { };
	        if (ngControl) {
	            ngControl.valueAccessor = this;
	        }
	    }
	    Object.defineProperty(Segment.prototype, "disabled", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            if (this._buttons) {
	                var buttons = this._buttons.toArray();
	                for (var _i = 0, buttons_1 = buttons; _i < buttons_1.length; _i++) {
	                    var button = buttons_1[_i];
	                    button.setCssClass('segment-button-disabled', this._disabled);
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * Write a new value to the element.
	     */
	    Segment.prototype.writeValue = function (value) {
	        this.value = util_1.isPresent(value) ? value : '';
	        if (this._buttons) {
	            var buttons = this._buttons.toArray();
	            for (var _i = 0, buttons_2 = buttons; _i < buttons_2.length; _i++) {
	                var button = buttons_2[_i];
	                button.isActive = (button.value === this.value);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Segment.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        var buttons = this._buttons.toArray();
	        for (var _i = 0, buttons_3 = buttons; _i < buttons_3.length; _i++) {
	            var button = buttons_3[_i];
	            button.ionSelect.subscribe(function (selectedButton) {
	                _this.writeValue(selectedButton.value);
	                _this.onChange(selectedButton.value);
	                _this.ionChange.emit(selectedButton);
	            });
	            if (util_1.isPresent(this.value)) {
	                button.isActive = (button.value === this.value);
	            }
	            if (util_1.isTrueProperty(this._disabled)) {
	                button.setCssClass('segment-button-disabled', this._disabled);
	            }
	        }
	    };
	    /**
	     * @private
	     * Set the function to be called when the control receives a change event.
	     */
	    Segment.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    /**
	     * @private
	     * Set the function to be called when the control receives a touch event.
	     */
	    Segment.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Segment.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.ContentChildren(SegmentButton), 
	        __metadata('design:type', core_1.QueryList)
	    ], Segment.prototype, "_buttons", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Segment.prototype, "disabled", null);
	    Segment = __decorate([
	        core_1.Directive({
	            selector: 'ion-segment'
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [common_1.NgControl])
	    ], Segment);
	    return Segment;
	}());
	exports.Segment = Segment;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var form_1 = __webpack_require__(130);
	var util_1 = __webpack_require__(127);
	var item_1 = __webpack_require__(175);
	var radio_group_1 = __webpack_require__(200);
	/**
	 * @description
	 * A radio button is a button that can be either checked or unchecked. A user can tap
	 * the button to check or uncheck it. It can also be checked from the template using
	 * the `checked` property.
	 *
	 * Use an element with a `radio-group` attribute to group a set of radio buttons. When
	 * radio buttons are inside a [radio group](../RadioGroup), exactly one radio button
	 * in the group can be checked at any time. If a radio button is not placed in a group,
	 * they will all have the ability to be checked at the same time.
	 *
	 * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html) for
	 * more information on forms and input.
	 *
	 * @usage
	 * ```html
	 * <ion-list radio-group [(ngModel)]="relationship">
	 *   <ion-item>
	 *     <ion-label>Friends</ion-label>
	 *     <ion-radio value="friends" checked></ion-radio>
	 *   </ion-item>
	 *   <ion-item>
	 *     <ion-label>Family</ion-label>
	 *     <ion-radio value="family"></ion-radio>
	 *   </ion-item>
	 *   <ion-item>
	 *     <ion-label>Enemies</ion-label>
	 *     <ion-radio value="enemies" [disabled]="isDisabled"></ion-radio>
	 *   </ion-item>
	 * </ion-list>
	 * ```
	 * @demo /docs/v2/demos/radio/
	 * @see {@link /docs/v2/components#radio Radio Component Docs}
	 * @see {@link ../RadioGroup RadioGroup API Docs}
	 */
	var RadioButton = (function () {
	    function RadioButton(_form, _item, _group) {
	        this._form = _form;
	        this._item = _item;
	        this._group = _group;
	        this._checked = false;
	        this._disabled = false;
	        this._value = null;
	        /**
	         * @output {any} expression to be evaluated when selected
	         */
	        this.ionSelect = new core_1.EventEmitter();
	        _form.register(this);
	        if (_group) {
	            // register with the radiogroup
	            this.id = 'rb-' + _group.add(this);
	        }
	        if (_item) {
	            // register the input inside of the item
	            // reset to the item's id instead of the radiogroup id
	            this.id = 'rb-' + _item.registerInput('radio');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-radio', true);
	        }
	    }
	    Object.defineProperty(RadioButton.prototype, "value", {
	        /**
	         * @input {any} The value of the radio button. Defaults to the generated id.
	         */
	        get: function () {
	            // if the value is not defined then use it's unique id
	            return util_1.isBlank(this._value) ? this.id : this._value;
	        },
	        set: function (val) {
	            this._value = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RadioButton.prototype, "checked", {
	        /**
	         * @input {boolean} Whether the radio button should be checked or not. Default false.
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (isChecked) {
	            this._checked = util_1.isTrueProperty(isChecked);
	            if (this._item) {
	                this._item.setCssClass('item-radio-checked', this._checked);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RadioButton.prototype, "disabled", {
	        /**
	         * @input {boolean} Whether the radio button should be disabled or not. Default false.
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-radio-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    RadioButton.prototype._click = function (ev) {
	        void 0;
	        ev.preventDefault();
	        ev.stopPropagation();
	        this.checked = true;
	        this.ionSelect.emit(this.value);
	    };
	    /**
	     * @private
	     */
	    RadioButton.prototype.ngOnInit = function () {
	        if (this._group && util_1.isPresent(this._group.value)) {
	            this.checked = util_1.isCheckedProperty(this._group.value, this.value);
	        }
	    };
	    /**
	     * @private
	     */
	    RadioButton.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	        this._group && this._group.remove(this);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], RadioButton.prototype, "ionSelect", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], RadioButton.prototype, "value", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], RadioButton.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], RadioButton.prototype, "disabled", null);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [UIEvent]), 
	        __metadata('design:returntype', void 0)
	    ], RadioButton.prototype, "_click", null);
	    RadioButton = __decorate([
	        core_1.Component({
	            selector: 'ion-radio',
	            template: '<div class="radio-icon" [class.radio-checked]="_checked">' +
	                '<div class="radio-inner"></div>' +
	                '</div>' +
	                '<button role="radio" ' +
	                'type="button" ' +
	                'category="item-cover" ' +
	                '[id]="id" ' +
	                '[attr.aria-checked]="_checked" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.radio-disabled]': '_disabled'
	            },
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(1, core_1.Optional()),
	        __param(2, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, item_1.Item, radio_group_1.RadioGroup])
	    ], RadioButton);
	    return RadioButton;
	}());
	exports.RadioButton = RadioButton;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var list_1 = __webpack_require__(173);
	var util_1 = __webpack_require__(127);
	var RADIO_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return RadioGroup; }), multi: true });
	/**
	 * @name RadioGroup
	 * @description
	 * A radio group is a group of [radio buttons](../RadioButton). It allows
	 * a user to select at most one radio button from a set. Checking one radio
	 * button that belongs to a radio group unchecks any previous checked
	 * radio button within the same group.
	 *
	 * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html)
	 * for more information on forms and inputs.
	 *
	 * @usage
	 * ```html
	 * <ion-list radio-group [(ngModel)]="autoManufacturers">
	 *
	 *   <ion-list-header>
	 *     Auto Manufacturers
	 *   </ion-list-header>
	 *
	 *   <ion-item>
	 *     <ion-label>Cord</ion-label>
	 *     <ion-radio value="cord"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Duesenberg</ion-label>
	 *     <ion-radio value="duesenberg"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Hudson</ion-label>
	 *     <ion-radio value="hudson"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Packard</ion-label>
	 *     <ion-radio value="packard"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Studebaker</ion-label>
	 *     <ion-radio value="studebaker"></ion-radio>
	 *   </ion-item>
	 *
	 * </ion-list>
	 * ```
	 *
	 * @demo /docs/v2/demos/radio/
	 * @see {@link /docs/v2/components#radio Radio Component Docs}
	 * @see {@link ../RadioButton RadioButton API Docs}
	*/
	var RadioGroup = (function () {
	    function RadioGroup(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._btns = [];
	        this._ids = -1;
	        this._init = false;
	        /**
	         * @output {any} expression to be evaluated when selection has been changed
	         */
	        this.ionChange = new core_1.EventEmitter();
	        this.id = ++radioGroupIds;
	    }
	    /**
	     * @private
	     */
	    RadioGroup.prototype.writeValue = function (val) {
	        void 0;
	        this.value = val;
	        if (this._init) {
	            this._update();
	            this.onTouched();
	            this.ionChange.emit(val);
	        }
	        this._init = true;
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.ngAfterContentInit = function () {
	        var activeButton = this._btns.find(function (b) { return b.checked; });
	        if (activeButton) {
	            this._setActive(activeButton);
	        }
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (val) {
	            // onChange used when there's an ngControl
	            void 0;
	            fn(val);
	            _this.value = val;
	            _this._update();
	            _this.onTouched();
	            _this.ionChange.emit(val);
	        };
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    /**
	     * @private
	     */
	    RadioGroup.prototype._update = function () {
	        var _this = this;
	        // loop through each of the radiobuttons
	        var hasChecked = false;
	        this._btns.forEach(function (radioButton) {
	            // check this radiobutton if its value is
	            // the same as the radiogroups value
	            radioButton.checked = util_1.isCheckedProperty(_this.value, radioButton.value) && !hasChecked;
	            if (radioButton.checked) {
	                // if this button is checked, then set it as
	                // the radiogroup's active descendant
	                _this._setActive(radioButton);
	                hasChecked = true;
	            }
	        });
	    };
	    RadioGroup.prototype._setActive = function (radioButton) {
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-activedescendant', radioButton.id);
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.add = function (button) {
	        var _this = this;
	        this._btns.push(button);
	        // listen for radiobutton select events
	        button.ionSelect.subscribe(function (val) {
	            // this radiobutton has been selected
	            _this.onChange(val);
	        });
	        return this.id + '-' + (++this._ids);
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.remove = function (button) {
	        var index = this._btns.indexOf(button);
	        if (index > -1) {
	            if (button.value === this.value) {
	                this.value = null;
	            }
	            this._btns.splice(index, 1);
	        }
	    };
	    Object.defineProperty(RadioGroup.prototype, "_header", {
	        /**
	         * @private
	         */
	        set: function (header) {
	            if (header) {
	                if (!header.id) {
	                    header.id = 'rg-hdr-' + this.id;
	                }
	                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-describedby', header.id);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    RadioGroup.prototype.onChange = function (val) {
	        // onChange used when there is not an ngControl
	        void 0;
	        this.value = val;
	        this._update();
	        this.onTouched();
	        this.ionChange.emit(val);
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.onTouched = function () { };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], RadioGroup.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.ContentChild(list_1.ListHeader), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], RadioGroup.prototype, "_header", null);
	    RadioGroup = __decorate([
	        core_1.Directive({
	            selector: '[radio-group]',
	            host: {
	                '[attr.aria-activedescendant]': 'activeId',
	                'role': 'radiogroup'
	            },
	            providers: [RADIO_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], RadioGroup);
	    return RadioGroup;
	}());
	exports.RadioGroup = RadioGroup;
	var radioGroupIds = -1;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var util_1 = __webpack_require__(127);
	var dom_1 = __webpack_require__(124);
	var debouncer_1 = __webpack_require__(202);
	var form_1 = __webpack_require__(130);
	var item_1 = __webpack_require__(175);
	var ui_event_manager_1 = __webpack_require__(169);
	var RANGE_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return Range; }), multi: true });
	/**
	 * @private
	 */
	var RangeKnob = (function () {
	    function RangeKnob(range) {
	        this.range = range;
	    }
	    Object.defineProperty(RangeKnob.prototype, "ratio", {
	        get: function () {
	            return this._ratio;
	        },
	        set: function (ratio) {
	            this._ratio = util_1.clamp(0, ratio, 1);
	            this._val = this.range.ratioToValue(this._ratio);
	            if (this.range.snaps) {
	                this._ratio = this.range.valueToRatio(this._val);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeKnob.prototype, "value", {
	        get: function () {
	            return this._val;
	        },
	        set: function (val) {
	            if (util_1.isString(val)) {
	                val = Math.round(val);
	            }
	            if (util_1.isNumber(val) && !isNaN(val)) {
	                this._ratio = this.range.valueToRatio(val);
	                this._val = this.range.ratioToValue(this._ratio);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RangeKnob.prototype.position = function () {
	        this._x = this._ratio * 100 + "%";
	    };
	    RangeKnob.prototype.ngOnInit = function () {
	        if (util_1.isPresent(this.range.value)) {
	            // we already have a value
	            if (this.range.dualKnobs) {
	                // we have a value and there are two knobs
	                if (this.upper) {
	                    // this is the upper knob
	                    this.value = this.range.value.upper;
	                }
	                else {
	                    // this is the lower knob
	                    this.value = this.range.value.lower;
	                }
	            }
	            else {
	                // we have a value and there is only one knob
	                this.value = this.range.value;
	            }
	        }
	        else {
	            // we do not have a value so set defaults
	            this.ratio = ((this.range.dualKnobs && this.upper) ? 1 : 0);
	        }
	        this.position();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], RangeKnob.prototype, "upper", void 0);
	    RangeKnob = __decorate([
	        core_1.Component({
	            selector: '.range-knob-handle',
	            template: '<div class="range-pin" *ngIf="range.pin">{{_val}}</div>' +
	                '<div class="range-knob"></div>',
	            host: {
	                '[class.range-knob-pressed]': 'pressed',
	                '[class.range-knob-min]': '_val===range.min',
	                '[class.range-knob-max]': '_val===range.max',
	                '[style.left]': '_x',
	                '[style.top]': '_y',
	                '[style.transform]': '_trns',
	                '[attr.aria-valuenow]': '_val',
	                '[attr.aria-valuemin]': 'range.min',
	                '[attr.aria-valuemax]': 'range.max',
	                'role': 'slider',
	                'tabindex': '0'
	            }
	        }),
	        __param(0, core_1.Inject(core_1.forwardRef(function () { return Range; }))), 
	        __metadata('design:paramtypes', [Range])
	    ], RangeKnob);
	    return RangeKnob;
	}());
	exports.RangeKnob = RangeKnob;
	/**
	 * @name Range
	 * @description
	 * The Range slider lets users select from a range of values by moving
	 * the slider knob. It can accept dual knobs, but by default one knob
	 * controls the value of the range.
	 *
	 * ### Range Labels
	 * Labels can be placed on either side of the range by adding the
	 * `range-left` or `range-right` property to the element. The element
	 * doesn't have to be an `ion-label`, it can be added to any element
	 * to place it to the left or right of the range. See [usage](#usage)
	 * below for examples.
	 *
	 *
	 * ### Minimum and Maximum Values
	 * Minimum and maximum values can be passed to the range through the `min`
	 * and `max` properties, respectively. By default, the range sets the `min`
	 * to `0` and the `max` to `100`.
	 *
	 *
	 * ### Steps and Snaps
	 * The `step` property specifies the value granularity of the range's value.
	 * It can be useful to set the `step` when the value isn't in increments of `1`.
	 * Setting the `step` property will show tick marks on the range for each step.
	 * The `snaps` property can be set to automatically move the knob to the nearest
	 * tick mark based on the step property value.
	 *
	 *
	 * ### Dual Knobs
	 * Setting the `dualKnobs` property to `true` on the range component will
	 * enable two knobs on the range. If the range has two knobs, the value will
	 * be an object containing two properties: `lower` and `upper`.
	 *
	 *
	 * @usage
	 * ```html
	 * <ion-list>
	 *   <ion-item>
	 *     <ion-range [(ngModel)]="singleValue" danger pin="true"></ion-range>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-range min="-200" max="200" [(ngModel)]="saturation" secondary>
	 *       <ion-label range-left>-200</ion-label>
	 *       <ion-label range-right>200</ion-label>
	 *     </ion-range>
	 *   </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-range min="20" max="80" step="2" [(ngModel)]="brightness">
	 *      <ion-icon small range-left name="sunny"></ion-icon>
	 *      <ion-icon range-right name="sunny"></ion-icon>
	 *    </ion-range>
	 *  </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>step=100, snaps, {{singleValue4}}</ion-label>
	 *     <ion-range min="1000" max="2000" step="100" snaps="true" secondary [(ngModel)]="singleValue4"></ion-range>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>dual, step=3, snaps, {{dualValue2 | json}}</ion-label>
	 *     <ion-range dualKnobs="true" [(ngModel)]="dualValue2" min="21" max="72" step="3" snaps="true"></ion-range>
	 *   </ion-item>
	 * </ion-list>
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/range/
	 */
	var Range = (function () {
	    function Range(_form, _item, _renderer) {
	        this._form = _form;
	        this._item = _item;
	        this._renderer = _renderer;
	        this._dual = false;
	        this._disabled = false;
	        this._start = null;
	        this._min = 0;
	        this._max = 100;
	        this._step = 1;
	        this._snaps = false;
	        this._debouncer = new debouncer_1.Debouncer(0);
	        this._events = new ui_event_manager_1.UIEventManager();
	        /**
	         * @output {Range} Expression to evaluate when the range value changes.
	         */
	        this.ionChange = new core_1.EventEmitter();
	        _form.register(this);
	        if (_item) {
	            this.id = 'rng-' + _item.registerInput('range');
	            this._labelId = 'lbl-' + _item.id;
	            _item.setCssClass('item-range', true);
	        }
	    }
	    Object.defineProperty(Range.prototype, "min", {
	        /**
	         * @input {number} Minimum integer value of the range. Defaults to `0`.
	         */
	        get: function () {
	            return this._min;
	        },
	        set: function (val) {
	            val = Math.round(val);
	            if (!isNaN(val)) {
	                this._min = val;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "max", {
	        /**
	         * @input {number} Maximum integer value of the range. Defaults to `100`.
	         */
	        get: function () {
	            return this._max;
	        },
	        set: function (val) {
	            val = Math.round(val);
	            if (!isNaN(val)) {
	                this._max = val;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "step", {
	        /**
	         * @input {number} Specifies the value granularity. Defaults to `1`.
	         */
	        get: function () {
	            return this._step;
	        },
	        set: function (val) {
	            val = Math.round(val);
	            if (!isNaN(val) && val > 0) {
	                this._step = val;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "snaps", {
	        /**
	         * @input {number} If true, the knob snaps to tick marks evenly spaced based on the step property value. Defaults to `false`.
	         */
	        get: function () {
	            return this._snaps;
	        },
	        set: function (val) {
	            this._snaps = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "pin", {
	        /**
	         * @input {number} If true, a pin with integer value is shown when the knob is pressed. Defaults to `false`.
	         */
	        get: function () {
	            return this._pin;
	        },
	        set: function (val) {
	            this._pin = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "debounce", {
	        /**
	         * @input {number} If true, a pin with integer value is shown when the knob is pressed. Defaults to `false`.
	         */
	        get: function () {
	            return this._debouncer.wait;
	        },
	        set: function (val) {
	            this._debouncer.wait = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "dualKnobs", {
	        /**
	         * @input {boolean} Show two knobs. Defaults to `false`.
	         */
	        get: function () {
	            return this._dual;
	        },
	        set: function (val) {
	            this._dual = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Range.prototype.ngAfterViewInit = function () {
	        var barL = '';
	        var barR = '';
	        var firstRatio = this._knobs.first.ratio;
	        if (this._dual) {
	            var lastRatio = this._knobs.last.ratio;
	            barL = (Math.min(firstRatio, lastRatio) * 100) + "%";
	            barR = (100 - (Math.max(firstRatio, lastRatio) * 100)) + "%";
	        }
	        else {
	            barR = (100 - (firstRatio * 100)) + "%";
	        }
	        this._renderer.setElementStyle(this._bar.nativeElement, 'left', barL);
	        this._renderer.setElementStyle(this._bar.nativeElement, 'right', barR);
	        // add touchstart/mousedown listeners
	        this._events.pointerEventsRef(this._slider, this.pointerDown.bind(this), this.pointerMove.bind(this), this.pointerUp.bind(this));
	        this.createTicks();
	    };
	    /**
	     * @private
	     */
	    Range.prototype.pointerDown = function (ev) {
	        // TODO: we could stop listening for events instead of checking this._disabled.
	        // since there are a lot of events involved, this solution is
	        // enough for the moment
	        if (this._disabled) {
	            return false;
	        }
	        void 0;
	        // prevent default so scrolling does not happen
	        ev.preventDefault();
	        ev.stopPropagation();
	        // get the start coordinates
	        this._start = dom_1.pointerCoord(ev);
	        // get the full dimensions of the slider element
	        var rect = this._rect = this._slider.nativeElement.getBoundingClientRect();
	        // figure out the offset
	        // the start of the pointer could actually
	        // have been left or right of the slider bar
	        if (this._start.x < rect.left) {
	            rect.xOffset = (this._start.x - rect.left);
	        }
	        else if (this._start.x > rect.right) {
	            rect.xOffset = (this._start.x - rect.right);
	        }
	        else {
	            rect.xOffset = 0;
	        }
	        // figure out which knob we're interacting with
	        this.setActiveKnob(this._start, rect);
	        // update the ratio for the active knob
	        this.updateKnob(this._start, rect);
	        // update the active knob's position
	        this._active.position();
	        this._pressed = this._active.pressed = true;
	        return true;
	    };
	    /**
	     * @private
	     */
	    Range.prototype.pointerMove = function (ev) {
	        void 0;
	        // prevent default so scrolling does not happen
	        ev.preventDefault();
	        ev.stopPropagation();
	        if (this._start !== null && this._active !== null) {
	            // only use pointer move if it's a valid pointer
	            // and we already have start coordinates
	            // update the ratio for the active knob
	            this.updateKnob(dom_1.pointerCoord(ev), this._rect);
	            // update the active knob's position
	            this._active.position();
	            this._pressed = this._active.pressed = true;
	        }
	    };
	    /**
	     * @private
	     */
	    Range.prototype.pointerUp = function (ev) {
	        void 0;
	        // prevent default so scrolling does not happen
	        ev.preventDefault();
	        ev.stopPropagation();
	        // update the ratio for the active knob
	        this.updateKnob(dom_1.pointerCoord(ev), this._rect);
	        // update the active knob's position
	        this._active.position();
	        // clear the start coordinates and active knob
	        this._start = this._active = null;
	        this._pressed = this._knobs.first.pressed = this._knobs.last.pressed = false;
	    };
	    /**
	     * @private
	     */
	    Range.prototype.setActiveKnob = function (current, rect) {
	        // figure out which knob is the closest one to the pointer
	        var ratio = (current.x - rect.left) / (rect.width);
	        if (this._dual && Math.abs(ratio - this._knobs.first.ratio) > Math.abs(ratio - this._knobs.last.ratio)) {
	            this._active = this._knobs.last;
	        }
	        else {
	            this._active = this._knobs.first;
	        }
	    };
	    /**
	     * @private
	     */
	    Range.prototype.updateKnob = function (current, rect) {
	        var _this = this;
	        // figure out where the pointer is currently at
	        // update the knob being interacted with
	        if (this._active) {
	            var oldVal = this._active.value;
	            this._active.ratio = (current.x - rect.left) / (rect.width);
	            var newVal = this._active.value;
	            if (oldVal !== newVal) {
	                // value has been updated
	                if (this._dual) {
	                    this.value = {
	                        lower: Math.min(this._knobs.first.value, this._knobs.last.value),
	                        upper: Math.max(this._knobs.first.value, this._knobs.last.value),
	                    };
	                }
	                else {
	                    this.value = newVal;
	                }
	                this._debouncer.debounce(function () {
	                    _this.onChange(_this.value);
	                    _this.ionChange.emit(_this);
	                });
	            }
	            this.updateBar();
	        }
	    };
	    /**
	     * @private
	     */
	    Range.prototype.updateBar = function () {
	        var firstRatio = this._knobs.first.ratio;
	        if (this._dual) {
	            var lastRatio = this._knobs.last.ratio;
	            this._barL = (Math.min(firstRatio, lastRatio) * 100) + "%";
	            this._barR = (100 - (Math.max(firstRatio, lastRatio) * 100)) + "%";
	        }
	        else {
	            this._barL = '';
	            this._barR = (100 - (firstRatio * 100)) + "%";
	        }
	        this.updateTicks();
	    };
	    /**
	     * @private
	     */
	    Range.prototype.createTicks = function () {
	        var _this = this;
	        if (this._snaps) {
	            dom_1.raf(function () {
	                // TODO: Fix to not use RAF
	                _this._ticks = [];
	                for (var value = _this._min; value <= _this._max; value += _this._step) {
	                    var ratio = _this.valueToRatio(value);
	                    _this._ticks.push({
	                        ratio: ratio,
	                        left: ratio * 100 + "%",
	                    });
	                }
	                _this.updateTicks();
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    Range.prototype.updateTicks = function () {
	        if (this._snaps) {
	            var ratio_1 = this.ratio;
	            if (this._dual) {
	                var upperRatio_1 = this.ratioUpper;
	                this._ticks.forEach(function (t) {
	                    t.active = (t.ratio >= ratio_1 && t.ratio <= upperRatio_1);
	                });
	            }
	            else {
	                this._ticks.forEach(function (t) {
	                    t.active = (t.ratio <= ratio_1);
	                });
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Range.prototype.ratioToValue = function (ratio) {
	        ratio = Math.round(((this._max - this._min) * ratio) + this._min);
	        return Math.round(ratio / this._step) * this._step;
	    };
	    /**
	     * @private
	     */
	    Range.prototype.valueToRatio = function (value) {
	        value = Math.round(util_1.clamp(this._min, value, this._max) / this._step) * this._step;
	        return (value - this._min) / (this._max - this._min);
	    };
	    /**
	     * @private
	     */
	    Range.prototype.writeValue = function (val) {
	        if (util_1.isPresent(val)) {
	            var knobs = this._knobs;
	            this.value = val;
	            if (this._knobs) {
	                if (this._dual) {
	                    knobs.first.value = val.lower;
	                    knobs.last.value = val.upper;
	                    knobs.last.position();
	                }
	                else {
	                    knobs.first.value = val;
	                }
	                knobs.first.position();
	                this.updateBar();
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Range.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (val) {
	            fn(val);
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    Range.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    Object.defineProperty(Range.prototype, "disabled", {
	        /**
	         * @input {boolean} Whether or not the range is disabled. Defaults to `false`.
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-range-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "ratio", {
	        /**
	         * Returns the ratio of the knob's is current location, which is a number between `0` and `1`.
	         * If two knobs are used, this property represents the lower value.
	         */
	        get: function () {
	            if (this._dual) {
	                return Math.min(this._knobs.first.ratio, this._knobs.last.ratio);
	            }
	            return this._knobs.first.ratio;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Range.prototype, "ratioUpper", {
	        /**
	         * Returns the ratio of the upper value's is current location, which is a number between `0` and `1`.
	         * If there is only one knob, then this will return `null`.
	         */
	        get: function () {
	            if (this._dual) {
	                return Math.max(this._knobs.first.ratio, this._knobs.last.ratio);
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Range.prototype.onChange = function (val) {
	        // used when this input does not have an ngModel or ngControl
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    Range.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    Range.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	        this._events.unlistenAll();
	    };
	    __decorate([
	        core_1.ViewChild('bar'), 
	        __metadata('design:type', core_1.ElementRef)
	    ], Range.prototype, "_bar", void 0);
	    __decorate([
	        core_1.ViewChild('slider'), 
	        __metadata('design:type', core_1.ElementRef)
	    ], Range.prototype, "_slider", void 0);
	    __decorate([
	        core_1.ViewChildren(RangeKnob), 
	        __metadata('design:type', core_1.QueryList)
	    ], Range.prototype, "_knobs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Range.prototype, "min", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Range.prototype, "max", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Range.prototype, "step", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Range.prototype, "snaps", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Range.prototype, "pin", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Range.prototype, "debounce", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Range.prototype, "dualKnobs", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Range.prototype, "ionChange", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Range.prototype, "disabled", null);
	    Range = __decorate([
	        core_1.Component({
	            selector: 'ion-range',
	            template: '<ng-content select="[range-left]"></ng-content>' +
	                '<div class="range-slider" #slider>' +
	                '<div class="range-tick" *ngFor="let t of _ticks" [style.left]="t.left" [class.range-tick-active]="t.active"></div>' +
	                '<div class="range-bar"></div>' +
	                '<div class="range-bar range-bar-active" [style.left]="_barL" [style.right]="_barR" #bar></div>' +
	                '<div class="range-knob-handle"></div>' +
	                '<div class="range-knob-handle" [upper]="true" *ngIf="_dual"></div>' +
	                '</div>' +
	                '<ng-content select="[range-right]"></ng-content>',
	            host: {
	                '[class.range-disabled]': '_disabled',
	                '[class.range-pressed]': '_pressed',
	                '[class.range-has-pin]': '_pin'
	            },
	            directives: [RangeKnob],
	            providers: [RANGE_VALUE_ACCESSOR],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, item_1.Item, core_1.Renderer])
	    ], Range);
	    return Range;
	}());
	exports.Range = Range;


/***/ },
/* 202 */
/***/ function(module, exports) {

	"use strict";
	var Debouncer = (function () {
	    function Debouncer(wait) {
	        this.wait = wait;
	        this.timer = null;
	    }
	    Debouncer.prototype.debounce = function (callback) {
	        this.callback = callback;
	        this.schedule();
	    };
	    Debouncer.prototype.schedule = function () {
	        if (this.timer) {
	            clearTimeout(this.timer);
	            this.timer = null;
	        }
	        if (this.wait <= 0) {
	            this.callback();
	        }
	        else {
	            this.timer = setTimeout(this.callback, this.wait);
	        }
	    };
	    return Debouncer;
	}());
	exports.Debouncer = Debouncer;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var common_1 = __webpack_require__(4);
	var config_1 = __webpack_require__(125);
	var util_1 = __webpack_require__(127);
	var debouncer_1 = __webpack_require__(202);
	/**
	 * @name Searchbar
	 * @module ionic
	 * @description
	 * Manages the display of a Searchbar which can be used to search or filter items.
	 *
	 * @usage
	 * ```html
	 * <ion-searchbar
	 *   [(ngModel)]="myInput"
	 *   [showCancelButton]="shouldShowCancel"
	 *   (ionInput)="onInput($event)"
	 *   (ionCancel)="onCancel($event)">
	 * </ion-searchbar>
	 * ```
	 *
	 * @demo /docs/v2/demos/searchbar/
	 * @see {@link /docs/v2/components#searchbar Searchbar Component Docs}
	 */
	var Searchbar = (function () {
	    function Searchbar(_elementRef, _config, ngControl) {
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this._value = '';
	        this._shouldBlur = true;
	        this._isActive = false;
	        this._debouncer = new debouncer_1.Debouncer(250);
	        /**
	         * @input {string} Set the the cancel button text. Default: `"Cancel"`.
	         */
	        this.cancelButtonText = 'Cancel';
	        /**
	         * @input {boolean} Whether to show the cancel button or not. Default: `"false"`.
	         */
	        this.showCancelButton = false;
	        /**
	         * @input {string} Set the input's placeholder. Default `"Search"`.
	         */
	        this.placeholder = 'Search';
	        /**
	         * @input {string} Set the type of the input. Values: `"text"`, `"password"`, `"email"`, `"number"`, `"search"`, `"tel"`, `"url"`. Default `"search"`.
	         */
	        this.type = 'search';
	        /**
	         * @output {event} When the Searchbar input has changed including cleared.
	         */
	        this.ionInput = new core_1.EventEmitter();
	        /**
	         * @output {event} When the Searchbar input has blurred.
	         */
	        this.ionBlur = new core_1.EventEmitter();
	        /**
	         * @output {event} When the Searchbar input has focused.
	         */
	        this.ionFocus = new core_1.EventEmitter();
	        /**
	         * @output {event} When the cancel button is clicked.
	         */
	        this.ionCancel = new core_1.EventEmitter();
	        /**
	         * @output {event} When the clear input button is clicked.
	         */
	        this.ionClear = new core_1.EventEmitter();
	        /**
	         * @private
	         */
	        this.onChange = function (_) { };
	        /**
	         * @private
	         */
	        this.onTouched = function () { };
	        // If the user passed a ngControl we need to set the valueAccessor
	        if (ngControl) {
	            ngControl.valueAccessor = this;
	        }
	    }
	    Object.defineProperty(Searchbar.prototype, "debounce", {
	        /**
	         * @input {number} How long, in milliseconds, to wait to trigger the `input` event after each keystroke. Default `250`.
	         */
	        get: function () {
	            return this._debouncer.wait;
	        },
	        set: function (val) {
	            this._debouncer.wait = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Searchbar.prototype, "searchbarInput", {
	        /**
	         * @private
	         */
	        set: function (searchbarInput) {
	            this._searchbarInput = searchbarInput;
	            var inputEle = searchbarInput.nativeElement;
	            // By defalt set autocomplete="off" unless specified by the input
	            var autoComplete = (this.autocomplete === '' || this.autocomplete === 'on') ? 'on' : this._config.get('autocomplete', 'off');
	            inputEle.setAttribute('autocomplete', autoComplete);
	            // by default set autocorrect="off" unless specified by the input
	            var autoCorrect = (this.autocorrect === '' || this.autocorrect === 'on') ? 'on' : this._config.get('autocorrect', 'off');
	            inputEle.setAttribute('autocorrect', autoCorrect);
	            // by default set spellcheck="false" unless specified by the input
	            var spellCheck = (this.spellcheck === '' || this.spellcheck === 'true' || this.spellcheck === true) ? true : this._config.getBoolean('spellcheck', false);
	            inputEle.setAttribute('spellcheck', spellCheck);
	            // by default set type="search" unless specified by the input
	            inputEle.setAttribute('type', this.type);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Searchbar.prototype, "value", {
	        /**
	         * @input {string} Set the input value.
	         */
	        get: function () {
	            return this._value;
	        },
	        set: function (val) {
	            this._value = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * On Initialization check for attributes
	     */
	    Searchbar.prototype.ngOnInit = function () {
	        var showCancelButton = this.showCancelButton;
	        if (typeof showCancelButton === 'string') {
	            this.showCancelButton = (showCancelButton === '' || showCancelButton === 'true');
	        }
	    };
	    /**
	     * @private
	     * After View Initialization position the elements
	     */
	    Searchbar.prototype.ngAfterViewInit = function () {
	        this.positionElements();
	    };
	    /**
	     * @private
	     * Positions the input search icon, placeholder, and the cancel button
	     * based on the input value and if it is focused. (ios only)
	     */
	    Searchbar.prototype.positionElements = function () {
	        if (this._config.get('mode') !== 'ios')
	            return;
	        // Position the input placeholder & search icon
	        if (this._searchbarInput && this._searchbarIcon) {
	            this.positionInputPlaceholder(this._searchbarInput.nativeElement, this._searchbarIcon.nativeElement);
	        }
	        // Position the cancel button
	        if (this._cancelButton && this._cancelButton.nativeElement) {
	            this.positionCancelButton(this._cancelButton.nativeElement);
	        }
	    };
	    /**
	     * @private
	     * Calculates the amount of padding/margin left for the elements
	     * in order to center them based on the placeholder width
	     */
	    Searchbar.prototype.positionInputPlaceholder = function (inputEle, iconEle) {
	        if (this.shouldAlignLeft()) {
	            inputEle.removeAttribute('style');
	            iconEle.removeAttribute('style');
	        }
	        else {
	            // Create a dummy span to get the placeholder width
	            var tempSpan = document.createElement('span');
	            tempSpan.innerHTML = this.placeholder;
	            document.body.appendChild(tempSpan);
	            // Get the width of the span then remove it
	            var textWidth = tempSpan.offsetWidth;
	            tempSpan.remove();
	            // Set the input padding left
	            var inputLeft = 'calc(50% - ' + (textWidth / 2) + 'px)';
	            inputEle.style.paddingLeft = inputLeft;
	            // Set the icon margin left
	            var iconLeft = 'calc(50% - ' + ((textWidth / 2) + 30) + 'px)';
	            iconEle.style.marginLeft = iconLeft;
	        }
	    };
	    /**
	     * @private
	     * Show the iOS Cancel button on focus, hide it offscreen otherwise
	     */
	    Searchbar.prototype.positionCancelButton = function (cancelButtonEle) {
	        if (cancelButtonEle.offsetWidth > 0) {
	            if (this._sbHasFocus) {
	                cancelButtonEle.style.marginRight = '0';
	            }
	            else {
	                cancelButtonEle.style.marginRight = -cancelButtonEle.offsetWidth + 'px';
	            }
	        }
	    };
	    /**
	     * @private
	     * Align the input placeholder left on focus or if a value exists
	     */
	    Searchbar.prototype.shouldAlignLeft = function () {
	        return ((this._value && this._value.toString().trim() !== '') || this._sbHasFocus === true);
	    };
	    /**
	     * @private
	     * Update the Searchbar input value when the input changes
	     */
	    Searchbar.prototype.inputChanged = function (ev) {
	        var _this = this;
	        var value = ev.target.value;
	        this._debouncer.debounce(function () {
	            _this._value = value;
	            _this.onChange(_this._value);
	            _this.ionInput.emit(ev);
	        });
	    };
	    /**
	     * @private
	     * Sets the Searchbar to focused and active on input focus.
	     */
	    Searchbar.prototype.inputFocused = function (ev) {
	        this.ionFocus.emit(ev);
	        this._sbHasFocus = true;
	        this._isActive = true;
	        this.positionElements();
	    };
	    /**
	     * @private
	     * Sets the Searchbar to not focused and checks if it should align left
	     * based on whether there is a value in the searchbar or not.
	     */
	    Searchbar.prototype.inputBlurred = function (ev) {
	        // _shouldBlur determines if it should blur
	        // if we are clearing the input we still want to stay focused in the input
	        if (this._shouldBlur === false) {
	            this._searchbarInput.nativeElement.focus();
	            this._shouldBlur = true;
	            return;
	        }
	        this.ionBlur.emit(ev);
	        this._sbHasFocus = false;
	        this.positionElements();
	    };
	    /**
	     * @private
	     * Clears the input field and triggers the control change.
	     */
	    Searchbar.prototype.clearInput = function (ev) {
	        this.ionClear.emit(ev);
	        if (util_1.isPresent(this._value) && this._value !== '') {
	            this._value = '';
	            this.onChange(this._value);
	            this.ionInput.emit(ev);
	        }
	        this._shouldBlur = false;
	    };
	    /**
	     * @private
	     * Clears the input field and tells the input to blur since
	     * the clearInput function doesn't want the input to blur
	     * then calls the custom cancel function if the user passed one in.
	     */
	    Searchbar.prototype.cancelSearchbar = function (ev) {
	        this.ionCancel.emit(ev);
	        this.clearInput(ev);
	        this._shouldBlur = true;
	        this._isActive = false;
	    };
	    /**
	     * @private
	     * Write a new value to the element.
	     */
	    Searchbar.prototype.writeValue = function (val) {
	        this._value = val;
	        this.positionElements();
	    };
	    /**
	     * @private
	     * Set the function to be called when the control receives a change event.
	     */
	    Searchbar.prototype.registerOnChange = function (fn) {
	        this.onChange = fn;
	    };
	    /**
	     * @private
	     * Set the function to be called when the control receives a touch event.
	     */
	    Searchbar.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Searchbar.prototype, "cancelButtonText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "showCancelButton", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Searchbar.prototype, "debounce", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Searchbar.prototype, "placeholder", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Searchbar.prototype, "autocomplete", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Searchbar.prototype, "autocorrect", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "spellcheck", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Searchbar.prototype, "type", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "ionInput", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "ionBlur", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "ionFocus", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "ionCancel", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "ionClear", void 0);
	    __decorate([
	        core_1.HostBinding('class.searchbar-has-focus'), 
	        __metadata('design:type', Boolean)
	    ], Searchbar.prototype, "_sbHasFocus", void 0);
	    __decorate([
	        core_1.ViewChild('searchbarInput'), 
	        __metadata('design:type', core_1.ElementRef), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Searchbar.prototype, "searchbarInput", null);
	    __decorate([
	        core_1.ViewChild('searchbarIcon'), 
	        __metadata('design:type', core_1.ElementRef)
	    ], Searchbar.prototype, "_searchbarIcon", void 0);
	    __decorate([
	        core_1.ViewChild('cancelButton', { read: core_1.ElementRef }), 
	        __metadata('design:type', core_1.ElementRef)
	    ], Searchbar.prototype, "_cancelButton", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "value", null);
	    Searchbar = __decorate([
	        core_1.Component({
	            selector: 'ion-searchbar',
	            host: {
	                '[class.searchbar-has-value]': '_value',
	                '[class.searchbar-active]': '_isActive',
	                '[class.searchbar-show-cancel]': 'showCancelButton',
	                '[class.searchbar-left-aligned]': 'shouldAlignLeft()'
	            },
	            template: '<div class="searchbar-input-container">' +
	                '<button (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" clear dark class="searchbar-md-cancel">' +
	                '<ion-icon name="arrow-back"></ion-icon>' +
	                '</button>' +
	                '<div #searchbarIcon class="searchbar-search-icon"></div>' +
	                '<input #searchbarInput [(ngModel)]="_value" [attr.placeholder]="placeholder" (input)="inputChanged($event)" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" class="searchbar-input">' +
	                '<button clear class="searchbar-clear-icon" (click)="clearInput($event)" (mousedown)="clearInput($event)"></button>' +
	                '</div>' +
	                '<button #cancelButton [tabindex]="_isActive ? 1 : -1" clear (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" class="searchbar-ios-cancel">{{cancelButtonText}}</button>',
	            encapsulation: core_1.ViewEncapsulation.None
	        }),
	        __param(2, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, config_1.Config, common_1.NgControl])
	    ], Searchbar);
	    return Searchbar;
	}());
	exports.Searchbar = Searchbar;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var app_1 = __webpack_require__(122);
	var config_1 = __webpack_require__(125);
	var keyboard_1 = __webpack_require__(135);
	var util_1 = __webpack_require__(127);
	var nav_controller_1 = __webpack_require__(148);
	var nav_portal_1 = __webpack_require__(205);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name Nav
	 * @description
	 * _For a quick walkthrough of navigation in Ionic, check out the
	 * [Navigation section](../../../../components/#navigation) of the Component
	 * docs._
	 *
	 * Nav is a basic navigation controller component.  As a subclass of NavController
	 * you use it to navigate to pages in your app and manipulate the navigation stack.
	 * Nav automatically animates transitions between pages for you.
	 *
	 * For more information on using navigation controllers like Nav or [Tab](../../Tabs/Tab/),
	 * take a look at the [NavController API Docs](../NavController/).
	 *
	 * You must set a root page to be loaded initially by any Nav you create, using
	 * the 'root' property:
	 *
	 * @usage
	 * ```ts
	 * import {Component} from '@angular/core';
	 * import {ionicBootstrap} from 'ionic-angular';
	 * import {GettingStartedPage} from './getting-started';
	 *
	 * @Component({
	 *   template: `<ion-nav [root]="root"></ion-nav>`
	 * })
	 * class MyApp {
	 *   root = GettingStartedPage;
	 * }
	 *
	 * ionicBootstrap(MyApp);
	 * ```
	 *
	 * ### Back Navigation
	 *
	 * If a [page](../NavController/#creating_pages) you navigate to has a [NavBar](../NavBar/),
	 * Nav will automatically add a back button to it if there is a page
	 * before the one you are navigating to in the navigation stack.
	 *
	 * Additionally, specifying the `swipeBackEnabled` property will allow you to
	 * swipe to go back:
	 * ```html
	 * <ion-nav swipeBackEnabled="false" [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * Here is a diagram of how Nav animates smoothly between pages:
	 *
	 * <div class="highlight less-margin">
	 *   <pre>
	 *                           +-------+
	 *                           |  App  |
	 *                           +---+---+
	 *                           &lt;ion-app&gt;
	 *                               |
	 *                  +------------+-------------+
	 *                  |   Ionic Nav Controller   |
	 *                  +------------+-------------+
	 *                           &lt;ion-nav&gt;
	 *                               |
	 *                               |
	 *             Page 3  +--------------------+                     LoginPage
	 *           Page 2  +--------------------+ |
	 *         Page 1  +--------------------+ | |              +--------------------+
	 *                 | | Header           |&lt;-----------------|       Login        |
	 *                 +--------------------+ | |              +--------------------+
	 *                 | | |                | | |              | Username:          |
	 *                 | | |                | | |              | Password:          |
	 *                 | | |  Page 3 is     | | |              |                    |
	 *                 | | |  only content  | | |              |                    |
	 *                 | | |                |&lt;-----------------|                    |
	 *                 | | |                | | |              |                    |
	 *                 | | |                | | |              |                    |
	 *                 | +------------------|-+ |              |                    |
	 *                 | | Footer           |-|-+              |                    |
	 *                 | +------------------|-+                |                    |
	 *                 +--------------------+                  +--------------------+
	 *
	 *           +--------------------+    +--------------------+    +--------------------+
	 *           | Header             |    | Content            |    | Content            |
	 *           +--------------------+    |                    |    |                    |
	 *           | Content            |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    +--------------------+    |                    |
	 *           |                    |    | Footer             |    |                    |
	 *           +--------------------+    +--------------------+    +--------------------+
	 *
	 *   </pre>
	 * </div>
	 *
	 * @demo /docs/v2/demos/navigation/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 */
	var Nav = (function (_super) {
	    __extends(Nav, _super);
	    function Nav(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler) {
	        _super.call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler);
	        this._hasInit = false;
	        if (viewCtrl) {
	            // an ion-nav can also act as an ion-page within a parent ion-nav
	            // this would happen when an ion-nav nests a child ion-nav.
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(elementRef);
	        }
	        if (parent) {
	            // this Nav has a parent Nav
	            parent.registerChildNav(this);
	        }
	        else if (app) {
	            // this is the root navcontroller for the entire app
	            this._app.setRootNav(this);
	        }
	    }
	    Object.defineProperty(Nav.prototype, "_vp", {
	        /**
	         * @private
	         */
	        set: function (val) {
	            this.setViewport(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Nav.prototype.ngAfterViewInit = function () {
	        this._hasInit = true;
	        if (this._root) {
	            if (typeof this._root !== 'function') {
	                throw 'The [root] property in <ion-nav> must be given a reference to a component class from within the constructor.';
	            }
	            this.push(this._root);
	        }
	    };
	    Object.defineProperty(Nav.prototype, "root", {
	        /**
	         * @input {Page} The Page component to load as the root page within this nav.
	         */
	        get: function () {
	            return this._root;
	        },
	        set: function (page) {
	            this._root = page;
	            if (this._hasInit) {
	                this.setRoot(page);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Nav.prototype, "swipeBackEnabled", {
	        /**
	         * @input {boolean} Whether it's possible to swipe-to-go-back on this nav controller or not.
	         */
	        get: function () {
	            return this._sbEnabled;
	        },
	        set: function (val) {
	            this._sbEnabled = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Nav.prototype, "_np", {
	        set: function (val) {
	            this.setPortal(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.ViewChild('viewport', { read: core_1.ViewContainerRef }), 
	        __metadata('design:type', core_1.ViewContainerRef), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef])
	    ], Nav.prototype, "_vp", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Nav.prototype, "root", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Nav.prototype, "swipeBackEnabled", null);
	    __decorate([
	        core_1.ViewChild(nav_portal_1.NavPortal), 
	        __metadata('design:type', nav_portal_1.NavPortal), 
	        __metadata('design:paramtypes', [nav_portal_1.NavPortal])
	    ], Nav.prototype, "_np", null);
	    Nav = __decorate([
	        core_1.Component({
	            selector: 'ion-nav',
	            template: '<div #viewport nav-viewport></div><div class="nav-decor"></div><div nav-portal></div>',
	            directives: [nav_portal_1.NavPortal],
	            encapsulation: core_1.ViewEncapsulation.None,
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, nav_controller_1.NavController, app_1.App, config_1.Config, keyboard_1.Keyboard, core_1.ElementRef, core_1.NgZone, core_1.Renderer, core_1.ComponentResolver])
	    ], Nav);
	    return Nav;
	}(nav_controller_1.NavController));
	exports.Nav = Nav;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var app_1 = __webpack_require__(122);
	var config_1 = __webpack_require__(125);
	var keyboard_1 = __webpack_require__(135);
	var nav_controller_1 = __webpack_require__(148);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @private
	 */
	var NavPortal = (function (_super) {
	    __extends(NavPortal, _super);
	    function NavPortal(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler, viewPort) {
	        _super.call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler);
	        this.isPortal = true;
	        this.setViewport(viewPort);
	    }
	    NavPortal = __decorate([
	        core_1.Directive({
	            selector: '[nav-portal]'
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, nav_controller_1.NavController, app_1.App, config_1.Config, keyboard_1.Keyboard, core_1.ElementRef, core_1.NgZone, core_1.Renderer, core_1.ComponentResolver, core_1.ViewContainerRef])
	    ], NavPortal);
	    return NavPortal;
	}(nav_controller_1.NavController));
	exports.NavPortal = NavPortal;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var nav_controller_1 = __webpack_require__(148);
	/**
	 * @name NavPop
	 * @description
	 * Directive for declaratively pop the current page off from the navigation stack.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *  <div block button nav-pop>go back</div>
	 * </ion-content>
	 * ```
	 * This will go back one page in the navigation stack
	 *
	 * Similar to {@link /docs/v2/api/components/nav/NavPush/ `NavPush` }
	 * @demo /docs/v2/demos/navigation/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 * @see {@link ../NavPush NavPush API Docs}
	 */
	var NavPop = (function () {
	    function NavPop(_nav) {
	        this._nav = _nav;
	        if (!_nav) {
	            void 0;
	        }
	    }
	    /**
	     * @private
	     */
	    NavPop.prototype.onClick = function () {
	        this._nav && this._nav.pop();
	    };
	    NavPop = __decorate([
	        core_1.Directive({
	            selector: '[nav-pop]',
	            host: {
	                '(click)': 'onClick()',
	                'role': 'link'
	            }
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController])
	    ], NavPop);
	    return NavPop;
	}());
	exports.NavPop = NavPop;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var nav_controller_1 = __webpack_require__(148);
	/**
	 * @name NavPush
	 * @description
	 * Directive for declaratively linking to a new page instead of using
	 * {@link ../NavController/#push NavController.push}. Similar to ui-router's `ui-sref`.
	 *
	 * @usage
	 * ```html
	 * <button [navPush]="pushPage"></button>
	 * ```
	 * To specify parameters you can use array syntax or the `nav-params` property:
	 * ```html
	 * <button [navPush]="pushPage" [navParams]="params"></button>
	 * ```
	 * Where `pushPage` and `params` are specified in your component, and `pushPage`
	 * contains a reference to a [@Page component](../../../config/Page/):
	 *
	 * ```ts
	 * import {LoginPage} from 'login';
	 * @Component({
	 *   template: `<button [navPush]="pushPage" [navParams]="params"></button>`
	 * })
	 * class MyPage {
	 *   constructor(){
	 *     this.pushPage = LoginPage;
	 *     this.params = { id: 42 };
	 *   }
	 * }
	 * ```
	 *
	 * ### Alternate syntax
	 * You can also use syntax similar to Angular2's router, passing an array to
	 * NavPush:
	 * ```html
	 * <button [navPush]="[pushPage, params]"></button>
	 * ```
	 * @demo /docs/v2/demos/navigation/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 * @see {@link ../NavPop NavPop API Docs}
	 */
	var NavPush = (function () {
	    function NavPush(_nav) {
	        this._nav = _nav;
	        if (!_nav) {
	            void 0;
	        }
	    }
	    /**
	     * @private
	     */
	    NavPush.prototype.onClick = function () {
	        var destination, params;
	        if (this.navPush instanceof Array) {
	            if (this.navPush.length > 2) {
	                throw 'Too many [navPush] arguments, expects [View, { params }]';
	            }
	            destination = this.navPush[0];
	            params = this.navPush[1] || this.navParams;
	        }
	        else {
	            destination = this.navPush;
	            params = this.navParams;
	        }
	        this._nav && this._nav.push(destination, params);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NavPush.prototype, "navPush", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NavPush.prototype, "navParams", void 0);
	    NavPush = __decorate([
	        core_1.Directive({
	            selector: '[navPush]',
	            host: {
	                '(click)': 'onClick()',
	                'role': 'link'
	            }
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController])
	    ], NavPush);
	    return NavPush;
	}());
	exports.NavPush = NavPush;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	/**
	 * @private
	 */
	var NavRouter = (function () {
	    function NavRouter() {
	    }
	    NavRouter = __decorate([
	        core_1.Directive({
	            selector: 'ion-nav'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NavRouter);
	    return NavRouter;
	}());
	exports.NavRouter = NavRouter;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(8);
	var platform_1 = __webpack_require__(126);
	/**
	 * @private
	 */
	var DisplayWhen = (function () {
	    function DisplayWhen(conditions, platform, ngZone) {
	        var _this = this;
	        this.isMatch = false;
	        this.platform = platform;
	        if (!conditions)
	            return;
	        this.conditions = conditions.split(',');
	        // check if its one of the matching platforms first
	        // a platform does not change during the life of an app
	        for (var i = 0; i < this.conditions.length; i++) {
	            if (this.conditions[i] && platform.is(this.conditions[i])) {
	                this.isMatch = true;
	                return;
	            }
	        }
	        if (this.orientation()) {
	            // add window resize listener
	            platform.onResize(function () {
	                ngZone.run(function () {
	                    _this.orientation();
	                });
	            });
	            return;
	        }
	    }
	    DisplayWhen.prototype.orientation = function () {
	        for (var i = 0; i < this.conditions.length; i++) {
	            if (this.conditions[i] === 'portrait') {
	                this.isMatch = this.platform.isPortrait();
	                return true;
	            }
	            if (this.conditions[i] === 'landscape') {
	                this.isMatch = this.platform.isLandscape();
	                return true;
	            }
	        }
	    };
	    return DisplayWhen;
	}());
	exports.DisplayWhen = DisplayWhen;
	/**
	 *
	 * @name ShowWhen
	 * @description
	 * The `showWhen` attribute takes a string that represents a platform or screen orientation.
	 * The element the attribute is added to will only be shown when that platform or screen orientation is active.
	 *
	 * Complements the [hideWhen attribute](../HideWhen). If the `showWhen` attribute is used on an
	 * element that also has the `hideWhen` attribute, the element will not show if `hideWhen` evaluates
	 * to `true` or `showWhen` evaluates to `false`. If the `hidden` attribute is also added, the element
	 * will not show if `hidden` evaluates to `true`.
	 *
	 * View the [Platform API docs](../../../platform/Platform) for more information on the different
	 * platforms you can use.
	 *
	 * @usage
	 * ```html
	 * <div showWhen="android">
	 *  I am visible on Android!
	 * </div>
	 *
	 * <div showWhen="ios">
	 *  I am visible on iOS!
	 * </div>
	 *
	 * <div showWhen="android,ios">
	 *  I am visible on Android and iOS!
	 * </div>
	 *
	 * <div showWhen="portrait">
	 *  I am visible on Portrait!
	 * </div>
	 *
	 * <div showWhen="landscape">
	 *  I am visible on Landscape!
	 * </div>
	 * ```
	 * @demo /docs/v2/demos/show-when/
	 * @see {@link ../HideWhen HideWhen API Docs}
	 * @see {@link ../../../platform/Platform Platform API Docs}
	 */
	var ShowWhen = (function (_super) {
	    __extends(ShowWhen, _super);
	    function ShowWhen(showWhen, platform, ngZone) {
	        _super.call(this, showWhen, platform, ngZone);
	    }
	    ShowWhen = __decorate([
	        core_1.Directive({
	            selector: '[showWhen]',
	            host: {
	                '[class.hidden-show-when]': '!isMatch'
	            }
	        }),
	        __param(0, core_1.Attribute('showWhen')), 
	        __metadata('design:paramtypes', [String, platform_1.Platform, core_1.NgZone])
	    ], ShowWhen);
	    return ShowWhen;
	}(DisplayWhen));
	exports.ShowWhen = ShowWhen;
	/**
	 * @name HideWhen
	 * @description
	 * The `hideWhen` attribute takes a string that represents a plaform or screen orientation.
	 * The element the attribute is added to will only be hidden when that platform or screen orientation is active.
	 *
	 * Complements the [showWhen attribute](../ShowWhen). If the `hideWhen` attribute is used on an
	 * element that also has the `showWhen` attribute, the element will not show if `hideWhen` evaluates
	 * to `true` or `showWhen` evaluates to `false`. If the `hidden` attribute is also added, the element
	 * will not show if `hidden` evaluates to `true`.
	 *
	 * View the [Platform API docs](../../../platform/Platform) for more information on the different
	 * platforms you can use.
	 *
	 * @usage
	 * ```html
	 * <div hideWhen="android">
	 *  I am hidden on Android!
	 * </div>
	 *
	 * <div hideWhen="ios">
	 *  I am hidden on iOS!
	 * </div>
	 *
	 * <div hideWhen="android,ios">
	 *  I am hidden on Android and iOS!
	 * </div>
	 *
	 * <div hideWhen="portrait">
	 *  I am hidden on Portrait!
	 * </div>
	 *
	 * <div hideWhen="landscape">
	 *  I am hidden on Landscape!
	 * </div>
	 * ```
	 *
	 * @demo /docs/v2/demos/hide-when/
	 * @see {@link ../ShowWhen ShowWhen API Docs}
	 * @see {@link ../../../platform/Platform Platform API Docs}
	*/
	var HideWhen = (function (_super) {
	    __extends(HideWhen, _super);
	    function HideWhen(hideWhen, platform, ngZone) {
	        _super.call(this, hideWhen, platform, ngZone);
	    }
	    HideWhen = __decorate([
	        core_1.Directive({
	            selector: '[hideWhen]',
	            host: {
	                '[class.hidden-hide-when]': 'isMatch'
	            }
	        }),
	        __param(0, core_1.Attribute('hideWhen')), 
	        __metadata('design:paramtypes', [String, platform_1.Platform, core_1.NgZone])
	    ], HideWhen);
	    return HideWhen;
	}(DisplayWhen));
	exports.HideWhen = HideWhen;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var activator_1 = __webpack_require__(211);
	var app_1 = __webpack_require__(122);
	var config_1 = __webpack_require__(125);
	var dom_1 = __webpack_require__(124);
	var ripple_1 = __webpack_require__(212);
	/**
	 * @private
	 */
	var TapClick = (function () {
	    function TapClick(config, app, zone) {
	        this.app = app;
	        this.lastTouch = 0;
	        this.disableClick = 0;
	        this.lastActivated = 0;
	        var self = this;
	        if (config.get('activator') === 'ripple') {
	            self.activator = new ripple_1.RippleActivator(app, config);
	        }
	        else if (config.get('activator') === 'highlight') {
	            self.activator = new activator_1.Activator(app, config);
	        }
	        self.usePolyfill = (config.get('tapPolyfill') === true);
	        zone.runOutsideAngular(function () {
	            addListener('click', self.click.bind(self), true);
	            addListener('touchstart', self.touchStart.bind(self));
	            addListener('touchend', self.touchEnd.bind(self));
	            addListener('touchcancel', self.pointerCancel.bind(self));
	            addListener('mousedown', self.mouseDown.bind(self), true);
	            addListener('mouseup', self.mouseUp.bind(self), true);
	        });
	        self.pointerMove = function (ev) {
	            if (dom_1.hasPointerMoved(POINTER_MOVE_UNTIL_CANCEL, self.startCoord, dom_1.pointerCoord(ev))) {
	                self.pointerCancel(ev);
	            }
	        };
	    }
	    TapClick.prototype.touchStart = function (ev) {
	        this.lastTouch = Date.now();
	        this.pointerStart(ev);
	    };
	    TapClick.prototype.touchEnd = function (ev) {
	        this.lastTouch = Date.now();
	        if (this.usePolyfill && this.startCoord && this.app.isEnabled()) {
	            // only dispatch mouse click events from a touchend event
	            // when tapPolyfill config is true, and the startCoordand endCoord
	            // are not too far off from each other
	            var endCoord = dom_1.pointerCoord(ev);
	            if (!dom_1.hasPointerMoved(POINTER_TOLERANCE, this.startCoord, endCoord)) {
	                // prevent native mouse click events for XX amount of time
	                this.disableClick = this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT;
	                if (this.app.isScrolling()) {
	                    // do not fire off a click event while the app was scrolling
	                    void 0;
	                }
	                else {
	                    // dispatch a mouse click event
	                    void 0;
	                    var clickEvent = document.createEvent('MouseEvents');
	                    clickEvent.initMouseEvent('click', true, true, window, 1, 0, 0, endCoord.x, endCoord.y, false, false, false, false, 0, null);
	                    clickEvent.isIonicTap = true;
	                    ev.target.dispatchEvent(clickEvent);
	                }
	            }
	        }
	        this.pointerEnd(ev);
	    };
	    TapClick.prototype.mouseDown = function (ev) {
	        if (this.isDisabledNativeClick()) {
	            void 0;
	            // does not prevent default on purpose
	            // so native blur events from inputs can happen
	            ev.stopPropagation();
	        }
	        else if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
	            this.pointerStart(ev);
	        }
	    };
	    TapClick.prototype.mouseUp = function (ev) {
	        if (this.isDisabledNativeClick()) {
	            void 0;
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	        if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
	            this.pointerEnd(ev);
	        }
	    };
	    TapClick.prototype.pointerStart = function (ev) {
	        var activatableEle = getActivatableTarget(ev.target);
	        if (activatableEle) {
	            this.startCoord = dom_1.pointerCoord(ev);
	            var now = Date.now();
	            if (this.lastActivated + 150 < now) {
	                this.activator && this.activator.downAction(ev, activatableEle, this.startCoord);
	                this.lastActivated = now;
	            }
	            this.moveListeners(true);
	        }
	        else {
	            this.startCoord = null;
	        }
	    };
	    TapClick.prototype.pointerEnd = function (ev) {
	        if (this.startCoord && this.activator) {
	            var activatableEle = getActivatableTarget(ev.target);
	            if (activatableEle) {
	                this.activator.upAction(ev, activatableEle, this.startCoord);
	            }
	        }
	        this.moveListeners(false);
	    };
	    TapClick.prototype.pointerCancel = function (ev) {
	        void 0;
	        this.activator && this.activator.clearState();
	        this.moveListeners(false);
	    };
	    TapClick.prototype.moveListeners = function (shouldAdd) {
	        removeListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
	        if (shouldAdd) {
	            addListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
	        }
	    };
	    TapClick.prototype.click = function (ev) {
	        var preventReason = null;
	        if (!this.app.isEnabled()) {
	            preventReason = 'appDisabled';
	        }
	        else if (!ev.isIonicTap && this.isDisabledNativeClick()) {
	            preventReason = 'nativeClick';
	        }
	        if (preventReason !== null) {
	            void 0;
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	    };
	    TapClick.prototype.isDisabledNativeClick = function () {
	        return this.disableClick > Date.now();
	    };
	    TapClick = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [config_1.Config, app_1.App, core_1.NgZone])
	    ], TapClick);
	    return TapClick;
	}());
	exports.TapClick = TapClick;
	function getActivatableTarget(ele) {
	    var targetEle = ele;
	    for (var x = 0; x < 4; x++) {
	        if (!targetEle)
	            break;
	        if (exports.isActivatable(targetEle))
	            return targetEle;
	        targetEle = targetEle.parentElement;
	    }
	    return null;
	}
	/**
	 * @private
	 */
	exports.isActivatable = function (ele) {
	    if (ACTIVATABLE_ELEMENTS.test(ele.tagName)) {
	        return true;
	    }
	    var attributes = ele.attributes;
	    for (var i = 0, l = attributes.length; i < l; i++) {
	        if (ACTIVATABLE_ATTRIBUTES.test(attributes[i].name)) {
	            return true;
	        }
	    }
	    return false;
	};
	function addListener(type, listener, useCapture) {
	    document.addEventListener(type, listener, useCapture);
	}
	function removeListener(type, listener) {
	    document.removeEventListener(type, listener);
	}
	var ACTIVATABLE_ELEMENTS = /^(A|BUTTON)$/;
	var ACTIVATABLE_ATTRIBUTES = /tappable|button/i;
	var POINTER_TOLERANCE = 4;
	var POINTER_MOVE_UNTIL_CANCEL = 10;
	var DISABLE_NATIVE_CLICK_AMOUNT = 2500;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dom_1 = __webpack_require__(124);
	var Activator = (function () {
	    function Activator(app, config) {
	        this.app = app;
	        this._queue = [];
	        this._active = [];
	        this._css = config.get('activatedClass') || 'activated';
	    }
	    Activator.prototype.downAction = function (ev, activatableEle, startCoord) {
	        // the user just pressed down
	        var self = this;
	        if (self.disableActivated(ev)) {
	            return;
	        }
	        // queue to have this element activated
	        self._queue.push(activatableEle);
	        dom_1.rafFrames(2, function () {
	            var activatableEle;
	            for (var i = 0; i < self._queue.length; i++) {
	                activatableEle = self._queue[i];
	                if (activatableEle && activatableEle.parentNode) {
	                    self._active.push(activatableEle);
	                    activatableEle.classList.add(self._css);
	                }
	            }
	            self._queue = [];
	        });
	    };
	    Activator.prototype.upAction = function (ev, activatableEle, startCoord) {
	        var _this = this;
	        // the user was pressing down, then just let up
	        dom_1.rafFrames(CLEAR_STATE_DEFERS, function () {
	            _this.clearState();
	        });
	    };
	    Activator.prototype.clearState = function () {
	        var _this = this;
	        // all states should return to normal
	        if (!this.app.isEnabled()) {
	            // the app is actively disabled, so don't bother deactivating anything.
	            // this makes it easier on the GPU so it doesn't have to redraw any
	            // buttons during a transition. This will retry in XX milliseconds.
	            dom_1.nativeTimeout(function () {
	                _this.clearState();
	            }, 600);
	        }
	        else {
	            // not actively transitioning, good to deactivate any elements
	            this.deactivate();
	        }
	    };
	    Activator.prototype.deactivate = function () {
	        // remove the active class from all active elements
	        var self = this;
	        self._queue = [];
	        dom_1.rafFrames(2, function () {
	            for (var i = 0; i < self._active.length; i++) {
	                self._active[i].classList.remove(self._css);
	            }
	            self._active = [];
	        });
	    };
	    Activator.prototype.disableActivated = function (ev) {
	        if (ev.defaultPrevented)
	            return true;
	        var targetEle = ev.target;
	        for (var x = 0; x < 4; x++) {
	            if (!targetEle)
	                break;
	            if (targetEle.hasAttribute('disable-activated'))
	                return true;
	            targetEle = targetEle.parentElement;
	        }
	        return false;
	    };
	    return Activator;
	}());
	exports.Activator = Activator;
	var CLEAR_STATE_DEFERS = 5;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var activator_1 = __webpack_require__(211);
	var dom_1 = __webpack_require__(124);
	/**
	 * @private
	 */
	var RippleActivator = (function (_super) {
	    __extends(RippleActivator, _super);
	    function RippleActivator(app, config) {
	        _super.call(this, app, config);
	    }
	    RippleActivator.prototype.downAction = function (ev, activatableEle, startCoord) {
	        var self = this;
	        if (self.disableActivated(ev)) {
	            return;
	        }
	        // queue to have this element activated
	        self._queue.push(activatableEle);
	        dom_1.nativeRaf(function () {
	            for (var i = 0; i < self._queue.length; i++) {
	                var queuedEle = self._queue[i];
	                if (queuedEle && queuedEle.parentNode) {
	                    self._active.push(queuedEle);
	                    // DOM WRITE
	                    queuedEle.classList.add(self._css);
	                    var j = queuedEle.childElementCount;
	                    while (j--) {
	                        var rippleEle = queuedEle.children[j];
	                        if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
	                            // DOM WRITE
	                            rippleEle.style.left = '-9999px';
	                            rippleEle.style.opacity = '';
	                            rippleEle.style[dom_1.CSS.transform] = 'scale(0.001) translateZ(0px)';
	                            rippleEle.style[dom_1.CSS.transition] = '';
	                            // DOM READ
	                            var clientRect = activatableEle.getBoundingClientRect();
	                            rippleEle.$top = clientRect.top;
	                            rippleEle.$left = clientRect.left;
	                            rippleEle.$width = clientRect.width;
	                            rippleEle.$height = clientRect.height;
	                            break;
	                        }
	                    }
	                }
	            }
	            self._queue = [];
	        });
	    };
	    RippleActivator.prototype.upAction = function (ev, activatableEle, startCoord) {
	        var self = this;
	        if (!dom_1.hasPointerMoved(6, startCoord, dom_1.pointerCoord(ev))) {
	            var i = activatableEle.childElementCount;
	            while (i--) {
	                var rippleEle = activatableEle.children[i];
	                if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
	                    var clientPointerX = (startCoord.x - rippleEle.$left);
	                    var clientPointerY = (startCoord.y - rippleEle.$top);
	                    var x = Math.max(Math.abs(rippleEle.$width - clientPointerX), clientPointerX) * 2;
	                    var y = Math.max(Math.abs(rippleEle.$height - clientPointerY), clientPointerY) * 2;
	                    var diameter = Math.min(Math.max(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), 64), 240);
	                    if (activatableEle.hasAttribute('ion-item')) {
	                        diameter = Math.min(diameter, 140);
	                    }
	                    var radius = Math.sqrt(rippleEle.$width + rippleEle.$height);
	                    var scaleTransitionDuration = Math.max(1600 * Math.sqrt(radius / TOUCH_DOWN_ACCEL) + 0.5, 260);
	                    var opacityTransitionDuration = scaleTransitionDuration * 0.7;
	                    var opacityTransitionDelay = scaleTransitionDuration - opacityTransitionDuration;
	                    // DOM WRITE
	                    rippleEle.style.width = rippleEle.style.height = diameter + 'px';
	                    rippleEle.style.marginTop = rippleEle.style.marginLeft = -(diameter / 2) + 'px';
	                    rippleEle.style.left = clientPointerX + 'px';
	                    rippleEle.style.top = clientPointerY + 'px';
	                    rippleEle.style.opacity = '0';
	                    rippleEle.style[dom_1.CSS.transform] = 'scale(1) translateZ(0px)';
	                    rippleEle.style[dom_1.CSS.transition] = 'transform ' +
	                        scaleTransitionDuration +
	                        'ms,opacity ' +
	                        opacityTransitionDuration +
	                        'ms ' +
	                        opacityTransitionDelay + 'ms';
	                }
	            }
	        }
	        _super.prototype.upAction.call(this, ev, activatableEle, startCoord);
	    };
	    RippleActivator.prototype.deactivate = function () {
	        // remove the active class from all active elements
	        var self = this;
	        self._queue = [];
	        dom_1.rafFrames(2, function () {
	            for (var i = 0; i < self._active.length; i++) {
	                self._active[i].classList.remove(self._css);
	            }
	            self._active = [];
	        });
	    };
	    return RippleActivator;
	}(activator_1.Activator));
	exports.RippleActivator = RippleActivator;
	var TOUCH_DOWN_ACCEL = 300;


/***/ },
/* 213 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @private
	 * Provide multi-language and i18n support in your app. Translate works by
	 * mapping full strings to language translated ones. That means that you don't
	 * need to provide strings for your default language, just new languages.
	 *
	 * Note: The Angular team will be building an
	 * [Localization/Internationalization](https://docs.google.com/document/d/1mwyOFsAD-bPoXTk3Hthq0CAcGXCUw-BtTJMR4nGTY-0/view#heading=h.ixg45w3363q)
	 * provider, so this Translation provider may not be further developed.
	 *
	 * @usage
	 * ```js
	 * Translate.translations({
	 *   'de': {
	 *     'Welcome to MyApp': 'Willkommen auf'
	 *   }
	 * })
	 *
	 * Changing the default language:
	 *
	 * Translate.setLanguage('de');
	 * ```
	 *
	 * Usage in a template:
	 *
	 * ```js
	 * <span>{{ 'Welcome to MyApp' | translate }}
	 * ```
	 */
	var Translate = (function () {
	    function Translate() {
	        this._transMap = {};
	        this._language = {};
	    }
	    Translate.prototype.translations = function (lang, map) {
	        this._transMap[lang] = map;
	    };
	    Translate.prototype.setLanguage = function (lang) {
	        this._language = lang;
	    };
	    Translate.prototype.getTranslations = function (lang) {
	        return this._transMap[lang];
	    };
	    Translate.prototype.translate = function (key, lang) {
	        // If the language isn't specified and we have no overridden one, return the string passed.
	        if (!lang && !this._language) {
	            return key;
	        }
	        var setLanguage = lang || this._language;
	        var map = this.getTranslations(setLanguage);
	        if (!map) {
	            void 0;
	            return '';
	        }
	        return this._getTranslation(map, key);
	    };
	    Translate.prototype._getTranslation = function (map, key) {
	        return map && map[key] || '';
	    };
	    return Translate;
	}());
	exports.Translate = Translate;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(8);
	var _reflect = Reflect;
	/**
	 * @private
	 */
	function Page(config) {
	    return function (cls) {
	        // deprecated warning: added beta.8 2016-05-27
	        void 0;
	        config.selector = 'ion-page';
	        config.host = config.host || {};
	        config.host['[hidden]'] = '_hidden';
	        config.host['[class.tab-subpage]'] = '_tabSubPage';
	        var annotations = _reflect.getMetadata('annotations', cls) || [];
	        annotations.push(new core_1.Component(config));
	        _reflect.defineMetadata('annotations', annotations, cls);
	        return cls;
	    };
	}
	exports.Page = Page;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var action_sheet_1 = __webpack_require__(189);
	exports.ActionSheet = action_sheet_1.ActionSheet;
	var alert_1 = __webpack_require__(190);
	exports.Alert = alert_1.Alert;
	var app_1 = __webpack_require__(122);
	exports.App = app_1.App;
	var backdrop_1 = __webpack_require__(133);
	exports.Backdrop = backdrop_1.Backdrop;
	var badge_1 = __webpack_require__(156);
	exports.Badge = badge_1.Badge;
	var button_1 = __webpack_require__(157);
	exports.Button = button_1.Button;
	var checkbox_1 = __webpack_require__(187);
	exports.Checkbox = checkbox_1.Checkbox;
	var content_1 = __webpack_require__(158);
	exports.Content = content_1.Content;
	var datetime_1 = __webpack_require__(192);
	exports.DateTime = datetime_1.DateTime;
	var icon_1 = __webpack_require__(176);
	exports.Icon = icon_1.Icon;
	var img_1 = __webpack_require__(164);
	exports.Img = img_1.Img;
	var infinite_scroll_1 = __webpack_require__(166);
	exports.InfiniteScroll = infinite_scroll_1.InfiniteScroll;
	var infinite_scroll_content_1 = __webpack_require__(167);
	exports.InfiniteScrollContent = infinite_scroll_content_1.InfiniteScrollContent;
	var input_1 = __webpack_require__(195);
	exports.TextArea = input_1.TextArea;
	exports.TextInput = input_1.TextInput;
	var item_1 = __webpack_require__(175);
	exports.Item = item_1.Item;
	var item_reorder_1 = __webpack_require__(177);
	exports.ItemReorder = item_reorder_1.ItemReorder;
	var item_sliding_1 = __webpack_require__(180);
	exports.ItemSliding = item_sliding_1.ItemSliding;
	exports.ItemOptions = item_sliding_1.ItemOptions;
	var label_1 = __webpack_require__(179);
	exports.Label = label_1.Label;
	var list_1 = __webpack_require__(173);
	exports.List = list_1.List;
	exports.ListHeader = list_1.ListHeader;
	var loading_1 = __webpack_require__(216);
	exports.Loading = loading_1.Loading;
	var menu_1 = __webpack_require__(132);
	exports.Menu = menu_1.Menu;
	var menu_close_1 = __webpack_require__(155);
	exports.MenuClose = menu_close_1.MenuClose;
	var menu_controller_1 = __webpack_require__(145);
	exports.MenuController = menu_controller_1.MenuController;
	var menu_toggle_1 = __webpack_require__(146);
	exports.MenuToggle = menu_toggle_1.MenuToggle;
	var menu_types_1 = __webpack_require__(217);
	exports.MenuType = menu_types_1.MenuType;
	var modal_1 = __webpack_require__(218);
	exports.Modal = modal_1.Modal;
	var nav_1 = __webpack_require__(204);
	exports.Nav = nav_1.Nav;
	var nav_controller_1 = __webpack_require__(148);
	exports.NavController = nav_controller_1.NavController;
	var nav_params_1 = __webpack_require__(149);
	exports.NavParams = nav_params_1.NavParams;
	var nav_pop_1 = __webpack_require__(206);
	exports.NavPop = nav_pop_1.NavPop;
	var nav_push_1 = __webpack_require__(207);
	exports.NavPush = nav_push_1.NavPush;
	var view_controller_1 = __webpack_require__(153);
	exports.ViewController = view_controller_1.ViewController;
	var navbar_1 = __webpack_require__(147);
	exports.Navbar = navbar_1.Navbar;
	exports.NavbarTemplate = navbar_1.NavbarTemplate;
	var option_1 = __webpack_require__(191);
	exports.Option = option_1.Option;
	var picker_1 = __webpack_require__(193);
	exports.Picker = picker_1.Picker;
	var popover_1 = __webpack_require__(220);
	exports.Popover = popover_1.Popover;
	var radio_button_1 = __webpack_require__(199);
	exports.RadioButton = radio_button_1.RadioButton;
	var radio_group_1 = __webpack_require__(200);
	exports.RadioGroup = radio_group_1.RadioGroup;
	var range_1 = __webpack_require__(201);
	exports.Range = range_1.Range;
	exports.RangeKnob = range_1.RangeKnob;
	var refresher_1 = __webpack_require__(168);
	exports.Refresher = refresher_1.Refresher;
	var refresher_content_1 = __webpack_require__(170);
	exports.RefresherContent = refresher_content_1.RefresherContent;
	var scroll_1 = __webpack_require__(165);
	exports.Scroll = scroll_1.Scroll;
	var searchbar_1 = __webpack_require__(203);
	exports.Searchbar = searchbar_1.Searchbar;
	var segment_1 = __webpack_require__(198);
	exports.Segment = segment_1.Segment;
	exports.SegmentButton = segment_1.SegmentButton;
	var select_1 = __webpack_require__(188);
	exports.Select = select_1.Select;
	var show_hide_when_1 = __webpack_require__(209);
	exports.ShowWhen = show_hide_when_1.ShowWhen;
	exports.HideWhen = show_hide_when_1.HideWhen;
	exports.DisplayWhen = show_hide_when_1.DisplayWhen;
	var slides_1 = __webpack_require__(171);
	exports.Slides = slides_1.Slides;
	exports.Slide = slides_1.Slide;
	exports.SlideLazy = slides_1.SlideLazy;
	var spinner_1 = __webpack_require__(186);
	exports.Spinner = spinner_1.Spinner;
	var tab_1 = __webpack_require__(162);
	exports.Tab = tab_1.Tab;
	var tabs_1 = __webpack_require__(160);
	exports.Tabs = tabs_1.Tabs;
	var tap_click_1 = __webpack_require__(210);
	exports.TapClick = tap_click_1.TapClick;
	exports.isActivatable = tap_click_1.isActivatable;
	var toast_1 = __webpack_require__(221);
	exports.Toast = toast_1.Toast;
	var toggle_1 = __webpack_require__(194);
	exports.Toggle = toggle_1.Toggle;
	var toolbar_1 = __webpack_require__(154);
	exports.Toolbar = toolbar_1.Toolbar;
	exports.ToolbarBase = toolbar_1.ToolbarBase;
	exports.Header = toolbar_1.Header;
	exports.Footer = toolbar_1.Footer;
	var virtual_scroll_1 = __webpack_require__(181);
	exports.VirtualScroll = virtual_scroll_1.VirtualScroll;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var animation_1 = __webpack_require__(152);
	var config_1 = __webpack_require__(125);
	var util_1 = __webpack_require__(127);
	var nav_params_1 = __webpack_require__(149);
	var transition_1 = __webpack_require__(151);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name Loading
	 * @description
	 * An overlay that can be used to indicate activity while blocking user
	 * interaction. The loading indicator appears on top of the app's content,
	 * and can be dismissed by the app to resume user interaction with
	 * the app. It includes an optional backdrop, which can be disabled
	 * by setting `showBackdrop: false` upon creation.
	 *
	 * ### Creating
	 * You can pass all of the loading options in the first argument of
	 * the create method: `Loading.create(opts)`. The spinner name should be
	 * passed in the `spinner` property, and any optional HTML can be passed
	 * in the `content` property. If you do not pass a value to `spinner`
	 * the loading indicator will use the spinner specified by the mode. To
	 * set the spinner name across the app, set the value of `loadingSpinner`
	 * in your app's config. To hide the spinner, set `loadingSpinner: 'hide'`
	 * in the app's config or pass `spinner: 'hide'` in the loading
	 * options. See the [create](#create) method below for all available options.
	 *
	 * ### Dismissing
	 * The loading indicator can be dismissed automatically after a specific
	 * amount of time by passing the number of milliseconds to display it in
	 * the `duration` of the loading options. By default the loading indicator
	 * will show even during page changes, but this can be disabled by setting
	 * `dismissOnPageChange` to `true`. To dismiss the loading indicator after
	 * creation, call the `dismiss()` method on the Loading instance. The
	 * `onDismiss` function can be called to perform an action after the loading
	 * indicator is dismissed.
	 *
	 * >Note that after the component is dismissed, it will not be usable anymore
	 * and another one must be created. This can be avoided by wrapping the
	 * creation and presentation of the component in a reusable function as shown
	 * in the `usage` section below.
	 *
	 * ### Limitations
	 * The element is styled to appear on top of other content by setting its
	 * `z-index` property. You must ensure no element has a stacking context with
	 * a higher `z-index` than this element.
	 *
	 * @usage
	 * ```ts
	 * constructor(nav: NavController) {
	 *   this.nav = nav;
	 * }
	 *
	 * presentLoadingDefault() {
	 *   let loading = Loading.create({
	 *     content: 'Please wait...'
	 *   });
	 *
	 *   this.nav.present(loading);
	 *
	 *   setTimeout(() => {
	 *     loading.dismiss();
	 *   }, 5000);
	 * }
	 *
	 * presentLoadingCustom() {
	 *   let loading = Loading.create({
	 *     spinner: 'hide',
	 *     content: `
	 *       <div class="custom-spinner-container">
	 *         <div class="custom-spinner-box"></div>
	 *       </div>`,
	 *     duration: 5000
	 *   });
	 *
	 *   loading.onDismiss(() => {
	 *     console.log('Dismissed loading');
	 *   });
	 *
	 *   this.nav.present(loading);
	 * }
	 *
	 * presentLoadingText() {
	 *   let loading = Loading.create({
	 *     spinner: 'hide',
	 *     content: 'Loading Please Wait...'
	 *   });
	 *
	 *   this.nav.present(loading);
	 *
	 *   setTimeout(() => {
	 *     this.nav.push(Page2);
	 *   }, 1000);
	 *
	 *   setTimeout(() => {
	 *     loading.dismiss();
	 *   }, 5000);
	 * }
	 * ```
	 *
	 * @demo /docs/v2/demos/loading/
	 * @see {@link /docs/v2/api/components/spinner/Spinner Spinner API Docs}
	 */
	var Loading = (function (_super) {
	    __extends(Loading, _super);
	    function Loading(opts) {
	        if (opts === void 0) { opts = {}; }
	        opts.showBackdrop = util_1.isPresent(opts.showBackdrop) ? !!opts.showBackdrop : true;
	        opts.dismissOnPageChange = util_1.isPresent(opts.dismissOnPageChange) ? !!opts.dismissOnPageChange : false;
	        _super.call(this, LoadingCmp, opts);
	        this.isOverlay = true;
	        this.usePortal = true;
	        // by default, loading indicators should not fire lifecycle events of other views
	        // for example, when an loading indicators enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	    }
	    /**
	    * @private
	    */
	    Loading.prototype.getTransitionName = function (direction) {
	        var key = (direction === 'back' ? 'loadingLeave' : 'loadingEnter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * Create a loading indicator with the following options
	     *
	     * | Option                | Type       | Description                                                                                                      |
	     * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
	     * | spinner               |`string`    | The name of the SVG spinner for the loading indicator.                                                           |
	     * | content               |`string`    | The html content for the loading indicator.                                                                      |
	     * | cssClass              |`string`    | An additional class for custom styles.                                                                           |
	     * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
	     * | dismissOnPageChange   |`boolean`   | Whether to dismiss the indicator when navigating to a new page. Default false.                                   |
	     * | duration              |`number`    | How many milliseconds to wait before hiding the indicator. By default, it will show until `dismiss()` is called. |
	     *
	     *
	     * @param {object} opts Loading options
	     */
	    Loading.create = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        return new Loading(opts);
	    };
	    return Loading;
	}(view_controller_1.ViewController));
	exports.Loading = Loading;
	/**
	* @private
	*/
	var LoadingCmp = (function () {
	    function LoadingCmp(_viewCtrl, _config, _elementRef, params, renderer) {
	        this._viewCtrl = _viewCtrl;
	        this._config = _config;
	        this._elementRef = _elementRef;
	        this.d = params.data;
	        if (this.d.cssClass) {
	            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
	        }
	        this.id = (++loadingIds);
	    }
	    LoadingCmp.prototype.ngOnInit = function () {
	        // If no spinner was passed in loading options we need to fall back
	        // to the loadingSpinner in the app's config, then the mode spinner
	        if (util_1.isUndefined(this.d.spinner)) {
	            this.d.spinner = this._config.get('loadingSpinner', this._config.get('spinner', 'ios'));
	        }
	        // If the user passed hide to the spinner we don't want to show it
	        this.showSpinner = util_1.isDefined(this.d.spinner) && this.d.spinner !== 'hide';
	    };
	    LoadingCmp.prototype.ionViewDidEnter = function () {
	        var _this = this;
	        var activeElement = document.activeElement;
	        if (document.activeElement) {
	            activeElement.blur();
	        }
	        // If there is a duration, dismiss after that amount of time
	        this.d.duration ? setTimeout(function () { return _this.dismiss('backdrop'); }, this.d.duration) : null;
	    };
	    LoadingCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(null, role);
	    };
	    LoadingCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-loading',
	            template: '<ion-backdrop [class.hide-backdrop]="!d.showBackdrop"></ion-backdrop>' +
	                '<div class="loading-wrapper">' +
	                '<div *ngIf="showSpinner" class="loading-spinner">' +
	                '<ion-spinner [name]="d.spinner"></ion-spinner>' +
	                '</div>' +
	                '<div *ngIf="d.content" [innerHTML]="d.content" class="loading-content"></div>' +
	                '</div>',
	            host: {
	                'role': 'dialog'
	            },
	            encapsulation: core_1.ViewEncapsulation.None,
	        }), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, config_1.Config, core_1.ElementRef, nav_params_1.NavParams, core_1.Renderer])
	    ], LoadingCmp);
	    return LoadingCmp;
	}());
	/**
	 * Animations for loading
	 */
	var LoadingPopIn = (function (_super) {
	    __extends(LoadingPopIn, _super);
	    function LoadingPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.loading-wrapper'));
	        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
	        backdrop.fromTo('opacity', 0.01, 0.3);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return LoadingPopIn;
	}(transition_1.Transition));
	transition_1.Transition.register('loading-pop-in', LoadingPopIn);
	var LoadingPopOut = (function (_super) {
	    __extends(LoadingPopOut, _super);
	    function LoadingPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.loading-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
	        backdrop.fromTo('opacity', 0.3, 0);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return LoadingPopOut;
	}(transition_1.Transition));
	transition_1.Transition.register('loading-pop-out', LoadingPopOut);
	var LoadingMdPopIn = (function (_super) {
	    __extends(LoadingMdPopIn, _super);
	    function LoadingMdPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.loading-wrapper'));
	        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
	        backdrop.fromTo('opacity', 0.01, 0.5);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return LoadingMdPopIn;
	}(transition_1.Transition));
	transition_1.Transition.register('loading-md-pop-in', LoadingMdPopIn);
	var LoadingMdPopOut = (function (_super) {
	    __extends(LoadingMdPopOut, _super);
	    function LoadingMdPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.loading-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
	        backdrop.fromTo('opacity', 0.5, 0);
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return LoadingMdPopOut;
	}(transition_1.Transition));
	transition_1.Transition.register('loading-md-pop-out', LoadingMdPopOut);
	var LoadingWpPopIn = (function (_super) {
	    __extends(LoadingWpPopIn, _super);
	    function LoadingWpPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.loading-wrapper'));
	        wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.3, 1);
	        backdrop.fromTo('opacity', 0.01, 0.16);
	        this
	            .easing('cubic-bezier(0,0 0.05,1)')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return LoadingWpPopIn;
	}(transition_1.Transition));
	transition_1.Transition.register('loading-wp-pop-in', LoadingWpPopIn);
	var LoadingWpPopOut = (function (_super) {
	    __extends(LoadingWpPopOut, _super);
	    function LoadingWpPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.loading-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 1.3);
	        backdrop.fromTo('opacity', 0.16, 0);
	        this
	            .easing('ease-out')
	            .duration(150)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return LoadingWpPopOut;
	}(transition_1.Transition));
	transition_1.Transition.register('loading-wp-pop-out', LoadingWpPopOut);
	var loadingIds = -1;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(152);
	var menu_controller_1 = __webpack_require__(145);
	/**
	 * @private
	 * Menu Type
	 * Base class which is extended by the various types. Each
	 * type will provide their own animations for open and close
	 * and registers itself with Menu.
	 */
	var MenuType = (function () {
	    function MenuType() {
	        this.ani = new animation_1.Animation();
	    }
	    MenuType.prototype.setOpen = function (shouldOpen, done) {
	        this.ani
	            .onFinish(done, true)
	            .reverse(!shouldOpen)
	            .play();
	    };
	    MenuType.prototype.setProgressStart = function (isOpen) {
	        this.isOpening = !isOpen;
	        // the cloned animation should not use an easing curve during seek
	        this.ani
	            .reverse(isOpen)
	            .progressStart();
	    };
	    MenuType.prototype.setProgessStep = function (stepValue) {
	        // adjust progress value depending if it opening or closing
	        this.ani.progressStep(stepValue);
	    };
	    MenuType.prototype.setProgressEnd = function (shouldComplete, currentStepValue, done) {
	        var _this = this;
	        var isOpen = (this.isOpening && shouldComplete);
	        if (!this.isOpening && !shouldComplete) {
	            isOpen = true;
	        }
	        this.ani.onFinish(function () {
	            _this.isOpening = false;
	            done(isOpen);
	        }, true);
	        this.ani.progressEnd(shouldComplete, currentStepValue);
	    };
	    MenuType.prototype.destroy = function () {
	        this.ani && this.ani.destroy();
	    };
	    return MenuType;
	}());
	exports.MenuType = MenuType;
	/**
	 * @private
	 * Menu Reveal Type
	 * The content slides over to reveal the menu underneath.
	 * The menu itself, which is under the content, does not move.
	 */
	var MenuRevealType = (function (_super) {
	    __extends(MenuRevealType, _super);
	    function MenuRevealType(menu, platform) {
	        _super.call(this);
	        var openedX = (menu.width() * (menu.side === 'right' ? -1 : 1)) + 'px';
	        this.ani
	            .easing('ease')
	            .duration(250);
	        var contentOpen = new animation_1.Animation(menu.getContentElement());
	        contentOpen.fromTo('translateX', '0px', openedX);
	        this.ani.add(contentOpen);
	    }
	    return MenuRevealType;
	}(MenuType));
	menu_controller_1.MenuController.registerType('reveal', MenuRevealType);
	/**
	 * @private
	 * Menu Push Type
	 * The content slides over to reveal the menu underneath.
	 * The menu itself also slides over to reveal its bad self.
	 */
	var MenuPushType = (function (_super) {
	    __extends(MenuPushType, _super);
	    function MenuPushType(menu, platform) {
	        _super.call(this);
	        this.ani
	            .easing('ease')
	            .duration(250);
	        var contentOpenedX, menuClosedX, menuOpenedX;
	        if (menu.side === 'right') {
	            // right side
	            contentOpenedX = -menu.width() + 'px';
	            menuClosedX = menu.width() + 'px';
	            menuOpenedX = '0px';
	        }
	        else {
	            contentOpenedX = menu.width() + 'px';
	            menuOpenedX = '0px';
	            menuClosedX = -menu.width() + 'px';
	        }
	        var menuAni = new animation_1.Animation(menu.getMenuElement());
	        menuAni.fromTo('translateX', menuClosedX, menuOpenedX);
	        this.ani.add(menuAni);
	        var contentApi = new animation_1.Animation(menu.getContentElement());
	        contentApi.fromTo('translateX', '0px', contentOpenedX);
	        this.ani.add(contentApi);
	    }
	    return MenuPushType;
	}(MenuType));
	menu_controller_1.MenuController.registerType('push', MenuPushType);
	/**
	 * @private
	 * Menu Overlay Type
	 * The menu slides over the content. The content
	 * itself, which is under the menu, does not move.
	 */
	var MenuOverlayType = (function (_super) {
	    __extends(MenuOverlayType, _super);
	    function MenuOverlayType(menu, platform) {
	        _super.call(this);
	        this.ani
	            .easing('ease')
	            .duration(250);
	        var closedX, openedX;
	        if (menu.side === 'right') {
	            // right side
	            closedX = 8 + menu.width() + 'px';
	            openedX = '0px';
	        }
	        else {
	            // left side
	            closedX = -(8 + menu.width()) + 'px';
	            openedX = '0px';
	        }
	        var menuAni = new animation_1.Animation(menu.getMenuElement());
	        menuAni.fromTo('translateX', closedX, openedX);
	        this.ani.add(menuAni);
	        var backdropApi = new animation_1.Animation(menu.getBackdropElement());
	        backdropApi.fromTo('opacity', 0.01, 0.35);
	        this.ani.add(backdropApi);
	    }
	    return MenuOverlayType;
	}(MenuType));
	menu_controller_1.MenuController.registerType('overlay', MenuOverlayType);


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var bootstrap_1 = __webpack_require__(2);
	var animation_1 = __webpack_require__(152);
	var util_1 = __webpack_require__(127);
	var key_1 = __webpack_require__(136);
	var nav_params_1 = __webpack_require__(149);
	var page_transition_1 = __webpack_require__(219);
	var view_controller_1 = __webpack_require__(153);
	var dom_1 = __webpack_require__(124);
	/**
	 * @name Modal
	 * @description
	 * A Modal is a content pane that goes over the user's current page.
	 * Usually it is used for making a choice or editing an item. A modal uses the
	 * `NavController` to
	 * {@link /docs/v2/api/components/nav/NavController/#present present}
	 * itself in the root nav stack. It is added to the stack similar to how
	 * {@link /docs/v2/api/components/nav/NavController/#push NavController.push}
	 * works.
	 *
	 * When a modal (or any other overlay such as an alert or actionsheet) is
	 * "presented" to a nav controller, the overlay is added to the app's root nav.
	 * After the modal has been presented, from within the component instance The
	 * modal can later be closed or "dismissed" by using the ViewController's
	 * `dismiss` method. Additionally, you can dismiss any overlay by using `pop`
	 * on the root nav controller.
	 *
	 * Data can be passed to a new modal through `Modal.create()` as the second
	 * argument. The data can then be accessed from the opened page by injecting
	 * `NavParams`. Note that the page, which opened as a modal, has no special
	 * "modal" logic within it, but uses `NavParams` no differently than a
	 * standard page.
	 *
	 * @usage
	 * ```ts
	 * import { Modal, NavController, NavParams } from 'ionic-angular';
	 *
	 * @Component(...)
	 * class HomePage {
	 *
	 *  constructor(nav: NavController) {
	 *    this.nav = nav;
	 *  }
	 *
	 *  presentProfileModal() {
	 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
	 *    this.nav.present(profileModal);
	 *  }
	 *
	 * }
	 *
	 * @Component(...)
	 * class Profile {
	 *
	 *  constructor(params: NavParams) {
	 *    console.log('UserId', params.get('userId'));
	 *  }
	 *
	 * }
	 * ```
	 *
	 * A modal can also emit data, which is useful when it is used to add or edit
	 * data. For example, a profile page could slide up in a modal, and on submit,
	 * the submit button could pass the updated profile data, then dismiss the
	 * modal.
	 *
	 * ```ts
	 * import { Component } from '@angular/core';
	 * import { Modal, NavController, ViewController } from 'ionic-angular';
	 *
	 * @Component(...)
	 * class HomePage {
	 *
	 *  constructor(nav: NavController) {
	 *    this.nav = nav;
	 *  }
	 *
	 *  presentContactModal() {
	 *    let contactModal = Modal.create(ContactUs);
	 *    this.nav.present(contactModal);
	 *  }
	 *
	 *  presentProfileModal() {
	 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
	 *    profileModal.onDismiss(data => {
	 *      console.log(data);
	 *    });
	 *    this.nav.present(profileModal);
	 *  }
	 *
	 * }
	 *
	 * @Component(...)
	 * class Profile {
	 *
	 *  constructor(viewCtrl: ViewController) {
	 *    this.viewCtrl = viewCtrl;
	 *  }
	 *
	 *  dismiss() {
	 *    let data = { 'foo': 'bar' };
	 *    this.viewCtrl.dismiss(data);
	 *  }
	 *
	 * }
	 * ```
	 * @demo /docs/v2/demos/modal/
	 * @see {@link /docs/v2/components#modals Modal Component Docs}
	 */
	var Modal = (function (_super) {
	    __extends(Modal, _super);
	    function Modal(componentType, data, opts) {
	        if (data === void 0) { data = {}; }
	        if (opts === void 0) { opts = {}; }
	        data.componentType = componentType;
	        opts.showBackdrop = util_1.isPresent(opts.showBackdrop) ? !!opts.showBackdrop : true;
	        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
	        data.opts = opts;
	        _super.call(this, ModalCmp, data);
	        this.isOverlay = true;
	        this.usePortal = true;
	    }
	    /**
	     * @private
	     */
	    Modal.prototype.getTransitionName = function (direction) {
	        var key = (direction === 'back' ? 'modalLeave' : 'modalEnter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * Create a modal with the following options
	     *
	     * | Option                | Type       | Description                                                                                                      |
	     * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
	     * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
	     * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |
	     *
	     *
	     * @param {object} componentType The Modal view
	     * @param {object} data Any data to pass to the Modal view
	     * @param {object} opts Modal options
	     */
	    Modal.create = function (componentType, data, opts) {
	        if (data === void 0) { data = {}; }
	        if (opts === void 0) { opts = {}; }
	        return new Modal(componentType, data, opts);
	    };
	    // Override the load method and load our child component
	    Modal.prototype.loaded = function (done) {
	        var _this = this;
	        // grab the instance, and proxy the ngAfterViewInit method
	        var originalNgAfterViewInit = this.instance.ngAfterViewInit;
	        this.instance.ngAfterViewInit = function () {
	            if (originalNgAfterViewInit) {
	                originalNgAfterViewInit();
	            }
	            _this.instance.loadComponent(done);
	        };
	    };
	    return Modal;
	}(view_controller_1.ViewController));
	exports.Modal = Modal;
	var ModalCmp = (function () {
	    function ModalCmp(_compiler, _renderer, _navParams, _viewCtrl) {
	        this._compiler = _compiler;
	        this._renderer = _renderer;
	        this._navParams = _navParams;
	        this._viewCtrl = _viewCtrl;
	        this.d = _navParams.data.opts;
	    }
	    ModalCmp.prototype.loadComponent = function (done) {
	        var _this = this;
	        var componentType = this._navParams.data.componentType;
	        bootstrap_1.addSelector(componentType, 'ion-page');
	        this._compiler.resolveComponent(componentType).then(function (componentFactory) {
	            var componentRef = _this.viewport.createComponent(componentFactory, _this.viewport.length, _this.viewport.parentInjector);
	            _this._renderer.setElementClass(componentRef.location.nativeElement, 'show-page', true);
	            // auto-add page css className created from component JS class name
	            var cssClassName = util_1.pascalCaseToDashCase(componentType.name);
	            _this._renderer.setElementClass(componentRef.location.nativeElement, cssClassName, true);
	            _this._viewCtrl.setInstance(componentRef.instance);
	            _this.enabled = true;
	            done();
	        });
	    };
	    ModalCmp.prototype.ngAfterViewInit = function () {
	        // intentionally kept empty
	    };
	    ModalCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(null, role);
	    };
	    ModalCmp.prototype.bdClick = function () {
	        if (this.enabled && this.d.enableBackdropDismiss) {
	            this.dismiss('backdrop');
	        }
	    };
	    ModalCmp.prototype._keyUp = function (ev) {
	        if (this.enabled && this._viewCtrl.isLast() && ev.keyCode === key_1.Key.ESCAPE) {
	            this.bdClick();
	        }
	    };
	    __decorate([
	        core_1.ViewChild('viewport', { read: core_1.ViewContainerRef }), 
	        __metadata('design:type', core_1.ViewContainerRef)
	    ], ModalCmp.prototype, "viewport", void 0);
	    __decorate([
	        core_1.HostListener('body:keyup', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], ModalCmp.prototype, "_keyUp", null);
	    ModalCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-modal',
	            template: '<ion-backdrop disableScroll="false" (click)="bdClick($event)"></ion-backdrop>' +
	                '<div class="modal-wrapper">' +
	                '<div #viewport nav-viewport></div>' +
	                '</div>'
	        }), 
	        __metadata('design:paramtypes', [core_1.ComponentResolver, core_1.Renderer, nav_params_1.NavParams, view_controller_1.ViewController])
	    ], ModalCmp);
	    return ModalCmp;
	}());
	exports.ModalCmp = ModalCmp;
	/**
	 * Animations for modals
	 */
	var ModalSlideIn = (function (_super) {
	    __extends(ModalSlideIn, _super);
	    function ModalSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdropEle = ele.querySelector('ion-backdrop');
	        var backdrop = new animation_1.Animation(backdropEle);
	        var wrapper = new animation_1.Animation(ele.querySelector('.modal-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.4);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this
	            .element(enteringView.pageRef())
	            .easing('cubic-bezier(0.36,0.66,0.04,1)')
	            .duration(400)
	            .add(backdrop)
	            .add(wrapper);
	        if (enteringView.hasNavbar()) {
	            // entering page has a navbar
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	        }
	    }
	    return ModalSlideIn;
	}(page_transition_1.PageTransition));
	page_transition_1.PageTransition.register('modal-slide-in', ModalSlideIn);
	var ModalSlideOut = (function (_super) {
	    __extends(ModalSlideOut, _super);
	    function ModalSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapperEle = ele.querySelector('.modal-wrapper');
	        var wrapperEleRect = wrapperEle.getBoundingClientRect();
	        var wrapper = new animation_1.Animation(wrapperEle);
	        // height of the screen - top of the container tells us how much to scoot it down
	        // so it's off-screen
	        var screenDimensions = dom_1.windowDimensions();
	        wrapper.fromTo('translateY', '0px', (screenDimensions.height - wrapperEleRect.top) + "px");
	        backdrop.fromTo('opacity', 0.4, 0.0);
	        this
	            .element(leavingView.pageRef())
	            .easing('ease-out')
	            .duration(250)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return ModalSlideOut;
	}(page_transition_1.PageTransition));
	page_transition_1.PageTransition.register('modal-slide-out', ModalSlideOut);
	var ModalMDSlideIn = (function (_super) {
	    __extends(ModalMDSlideIn, _super);
	    function ModalMDSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.modal-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.4);
	        wrapper.fromTo('translateY', '40px', '0px');
	        wrapper.fromTo('opacity', 0.01, 1);
	        var DURATION = 280;
	        var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
	        this.element(enteringView.pageRef()).easing(EASING).duration(DURATION)
	            .add(backdrop)
	            .add(wrapper);
	        if (enteringView.hasNavbar()) {
	            // entering page has a navbar
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	        }
	    }
	    return ModalMDSlideIn;
	}(page_transition_1.PageTransition));
	page_transition_1.PageTransition.register('modal-md-slide-in', ModalMDSlideIn);
	var ModalMDSlideOut = (function (_super) {
	    __extends(ModalMDSlideOut, _super);
	    function ModalMDSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.modal-wrapper'));
	        backdrop.fromTo('opacity', 0.4, 0.0);
	        wrapper.fromTo('translateY', '0px', '40px');
	        wrapper.fromTo('opacity', 0.99, 0);
	        this
	            .element(leavingView.pageRef())
	            .duration(200)
	            .easing('cubic-bezier(0.47,0,0.745,0.715)')
	            .add(wrapper)
	            .add(backdrop);
	    }
	    return ModalMDSlideOut;
	}(page_transition_1.PageTransition));
	page_transition_1.PageTransition.register('modal-md-slide-out', ModalMDSlideOut);


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(152);
	var content_1 = __webpack_require__(158);
	var transition_1 = __webpack_require__(151);
	/**
	 * @private
	 */
	var PageTransition = (function (_super) {
	    __extends(PageTransition, _super);
	    function PageTransition(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        this.enteringPage = new animation_1.Animation(this.enteringView.pageRef());
	        this.enteringPage.before.addClass('show-page');
	        this.add(this.enteringPage);
	        this.before.addDomReadFn(this.readDimensions.bind(this));
	        this.before.addDomWriteFn(this.writeDimensions.bind(this));
	    }
	    /**
	     * DOM READ
	     */
	    PageTransition.prototype.readDimensions = function () {
	        var content = this.enteringView.getContent();
	        if (content && content instanceof content_1.Content) {
	            content.readDimensions();
	        }
	    };
	    /**
	     * DOM WRITE
	     */
	    PageTransition.prototype.writeDimensions = function () {
	        var content = this.enteringView.getContent();
	        if (content && content instanceof content_1.Content) {
	            content.writeDimensions();
	        }
	    };
	    PageTransition.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.enteringView = this.enteringPage = null;
	    };
	    return PageTransition;
	}(transition_1.Transition));
	exports.PageTransition = PageTransition;
	function parsePxUnit(val) {
	    return (val.indexOf('px') > 0) ? parseInt(val, 10) : 0;
	}


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var bootstrap_1 = __webpack_require__(2);
	var animation_1 = __webpack_require__(152);
	var config_1 = __webpack_require__(125);
	var dom_1 = __webpack_require__(124);
	var util_1 = __webpack_require__(127);
	var key_1 = __webpack_require__(136);
	var nav_params_1 = __webpack_require__(149);
	var page_transition_1 = __webpack_require__(219);
	var view_controller_1 = __webpack_require__(153);
	var POPOVER_IOS_BODY_PADDING = 2;
	var POPOVER_MD_BODY_PADDING = 12;
	/**
	 * @name Popover
	 * @description
	 * A Popover is a dialog that appears on top of the current page.
	 * It can be used for anything, but generally it is used for overflow
	 * actions that don't fit in the navigation bar.
	 *
	 * ### Creating
	 * A popover can be created by calling the `create` method. The view
	 * to display in the popover should be passed as the first argument.
	 * Any data to pass to the popover view can optionally be passed in
	 * the second argument. Options for the popover can optionally be
	 * passed in the third argument. See the [create](#create) method
	 * below for all available options.
	 *
	 * ### Presenting
	 * To present a popover, call the `present` method on the [NavController](../../nav/NavController).
	 * The first argument passed to the `present` should be the popover. In order
	 * to position the popover relative to the element clicked, the event needs to be
	 * passed as the second argument. If the event is not passed, the popover will be
	 * positioned in the center of the current view. See the [usage](#usage) section for
	 * an example of passing this event.
	 *
	 * ### Dismissing
	 * To dismiss the popover after creation, call the `dismiss()` method on the
	 * `Popover` instance. The popover can also be dismissed from within the popover's
	 * view by calling the `dismiss()` method on the [ViewController](../../nav/ViewController).
	 * The `onDismiss` function can be called to perform an action after the popover
	 * is dismissed. The popover will dismiss when the backdrop is clicked, but this
	 * can be disabled by setting `enableBackdropDismiss` to `false` in the popover
	 * options.
	 *
	 * > Note that after the component is dismissed, it will not be usable anymore and
	 * another one must be created. This can be avoided by wrapping the creation and
	 * presentation of the component in a reusable function as shown in the [usage](#usage)
	 * section below.
	 *
	 * @usage
	 *
	 * To open a popover on the click of a button, pass `$event` to the method
	 * which creates and presents the popover:
	 *
	 * ```html
	 * <button (click)="presentPopover($event)">
	 *   <ion-icon name="more"></ion-icon>
	 * </button>
	 * ```
	 *
	 * ```ts
	 * @Component({})
	 * class MyPage {
	 *   constructor(private nav: NavController) {}
	 *
	 *   presentPopover(myEvent) {
	 *     let popover = Popover.create(PopoverPage);
	 *     this.nav.present(popover, {
	 *       ev: myEvent
	 *     });
	 *   }
	 * }
	 * ```
	 *
	 * The `PopoverPage` will display inside of the popover, and
	 * can be anything. Below is an example of a page with items
	 * that close the popover on click.
	 *
	 * ```ts
	 * @Component({
	 *   template: `
	 *     <ion-list>
	 *       <ion-list-header>Ionic</ion-list-header>
	 *       <button ion-item (click)="close()">Learn Ionic</button>
	 *       <button ion-item (click)="close()">Documentation</button>
	 *       <button ion-item (click)="close()">Showcase</button>
	 *       <button ion-item (click)="close()">GitHub Repo</button>
	 *     </ion-list>
	 *   `
	 * })
	 * class PopoverPage {
	 *   constructor(private viewCtrl: ViewController) {}
	 *
	 *   close() {
	 *     this.viewCtrl.dismiss();
	 *   }
	 * }
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/popover/
	 */
	var Popover = (function (_super) {
	    __extends(Popover, _super);
	    function Popover(componentType, data, opts) {
	        if (data === void 0) { data = {}; }
	        if (opts === void 0) { opts = {}; }
	        opts.showBackdrop = util_1.isPresent(opts.showBackdrop) ? !!opts.showBackdrop : true;
	        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
	        data.componentType = componentType;
	        data.opts = opts;
	        _super.call(this, PopoverCmp, data);
	        this.isOverlay = true;
	        // by default, popovers should not fire lifecycle events of other views
	        // for example, when a popover enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	    }
	    /**
	     * @private
	     */
	    Popover.prototype.getTransitionName = function (direction) {
	        var key = (direction === 'back' ? 'popoverLeave' : 'popoverEnter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * Create a popover with the following options
	     *
	     * | Option                | Type       | Description                                                                                                      |
	     * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
	     * | cssClass              |`string`    | An additional class for custom styles.                                                                           |
	     * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
	     * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |
	     *
	     *
	     * @param {object} componentType The Popover
	     * @param {object} data Any data to pass to the Popover view
	     * @param {object} opts Popover options
	     */
	    Popover.create = function (componentType, data, opts) {
	        if (data === void 0) { data = {}; }
	        if (opts === void 0) { opts = {}; }
	        return new Popover(componentType, data, opts);
	    };
	    return Popover;
	}(view_controller_1.ViewController));
	exports.Popover = Popover;
	/**
	* @private
	*/
	var PopoverCmp = (function () {
	    function PopoverCmp(_compiler, _elementRef, _renderer, _config, _navParams, _viewCtrl) {
	        this._compiler = _compiler;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._config = _config;
	        this._navParams = _navParams;
	        this._viewCtrl = _viewCtrl;
	        this.d = _navParams.data.opts;
	        if (this.d.cssClass) {
	            _renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
	        }
	        this.id = (++popoverIds);
	    }
	    PopoverCmp.prototype.ionViewWillEnter = function () {
	        var _this = this;
	        bootstrap_1.addSelector(this._navParams.data.componentType, 'ion-popover-inner');
	        this._compiler.resolveComponent(this._navParams.data.componentType).then(function (componentFactory) {
	            var componentRef = _this.viewport.createComponent(componentFactory, _this.viewport.length, _this.viewport.parentInjector);
	            _this._viewCtrl.setInstance(componentRef.instance);
	            // manually fire ionViewWillEnter() since PopoverCmp's ionViewWillEnter already happened
	            _this._viewCtrl.fireWillEnter();
	        });
	    };
	    PopoverCmp.prototype.ngAfterViewInit = function () {
	        var activeElement = document.activeElement;
	        if (document.activeElement) {
	            activeElement.blur();
	        }
	        this.enabled = true;
	    };
	    PopoverCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(null, role);
	    };
	    PopoverCmp.prototype.bdTouch = function (ev) {
	        ev.preventDefault();
	        ev.stopPropagation();
	    };
	    PopoverCmp.prototype.bdClick = function () {
	        if (this.enabled && this.d.enableBackdropDismiss) {
	            this.dismiss('backdrop');
	        }
	    };
	    PopoverCmp.prototype._keyUp = function (ev) {
	        if (this.enabled && ev.keyCode === key_1.Key.ESCAPE && this._viewCtrl.isLast()) {
	            this.bdClick();
	        }
	    };
	    __decorate([
	        core_1.ViewChild('viewport', { read: core_1.ViewContainerRef }), 
	        __metadata('design:type', core_1.ViewContainerRef)
	    ], PopoverCmp.prototype, "viewport", void 0);
	    __decorate([
	        core_1.HostListener('body:keyup', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], PopoverCmp.prototype, "_keyUp", null);
	    PopoverCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-popover',
	            template: '<ion-backdrop (click)="bdClick($event)" [class.hide-backdrop]="!d.showBackdrop"></ion-backdrop>' +
	                '<div class="popover-wrapper">' +
	                '<div class="popover-arrow"></div>' +
	                '<div class="popover-content">' +
	                '<div class="popover-viewport">' +
	                '<div #viewport nav-viewport></div>' +
	                '</div>' +
	                '</div>' +
	                '</div>'
	        }), 
	        __metadata('design:paramtypes', [core_1.ComponentResolver, core_1.ElementRef, core_1.Renderer, config_1.Config, nav_params_1.NavParams, view_controller_1.ViewController])
	    ], PopoverCmp);
	    return PopoverCmp;
	}());
	/**
	 * Animations for popover
	 */
	var PopoverTransition = (function (_super) {
	    __extends(PopoverTransition, _super);
	    function PopoverTransition(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	    }
	    PopoverTransition.prototype.mdPositionView = function (nativeEle, ev) {
	        var originY = 'top';
	        var originX = 'left';
	        var popoverWrapperEle = nativeEle.querySelector('.popover-wrapper');
	        // Popover content width and height
	        var popoverEle = nativeEle.querySelector('.popover-content');
	        var popoverDim = popoverEle.getBoundingClientRect();
	        var popoverWidth = popoverDim.width;
	        var popoverHeight = popoverDim.height;
	        // Window body width and height
	        var bodyWidth = window.innerWidth;
	        var bodyHeight = window.innerHeight;
	        // If ev was passed, use that for target element
	        var targetDim = ev && ev.target && ev.target.getBoundingClientRect();
	        var targetTop = (targetDim && 'top' in targetDim) ? targetDim.top : (bodyHeight / 2) - (popoverHeight / 2);
	        var targetLeft = (targetDim && 'left' in targetDim) ? targetDim.left : (bodyWidth / 2) - (popoverWidth / 2);
	        var targetWidth = targetDim && targetDim.width || 0;
	        var targetHeight = targetDim && targetDim.height || 0;
	        var popoverCSS = {
	            top: targetTop,
	            left: targetLeft
	        };
	        // If the popover left is less than the padding it is off screen
	        // to the left so adjust it, else if the width of the popover
	        // exceeds the body width it is off screen to the right so adjust
	        if (popoverCSS.left < POPOVER_MD_BODY_PADDING) {
	            popoverCSS.left = POPOVER_MD_BODY_PADDING;
	        }
	        else if (popoverWidth + POPOVER_MD_BODY_PADDING + popoverCSS.left > bodyWidth) {
	            popoverCSS.left = bodyWidth - popoverWidth - POPOVER_MD_BODY_PADDING;
	            originX = 'right';
	        }
	        // If the popover when popped down stretches past bottom of screen,
	        // make it pop up if there's room above
	        if (targetTop + targetHeight + popoverHeight > bodyHeight && targetTop - popoverHeight > 0) {
	            popoverCSS.top = targetTop - popoverHeight;
	            nativeEle.className = nativeEle.className + ' popover-bottom';
	            originY = 'bottom';
	        }
	        else if (targetTop + targetHeight + popoverHeight > bodyHeight) {
	            popoverEle.style.bottom = POPOVER_MD_BODY_PADDING + 'px';
	        }
	        popoverEle.style.top = popoverCSS.top + 'px';
	        popoverEle.style.left = popoverCSS.left + 'px';
	        popoverEle.style[dom_1.CSS.transformOrigin] = originY + ' ' + originX;
	        // Since the transition starts before styling is done we
	        // want to wait for the styles to apply before showing the wrapper
	        popoverWrapperEle.style.opacity = '1';
	    };
	    PopoverTransition.prototype.iosPositionView = function (nativeEle, ev) {
	        var originY = 'top';
	        var originX = 'left';
	        var popoverWrapperEle = nativeEle.querySelector('.popover-wrapper');
	        // Popover content width and height
	        var popoverEle = nativeEle.querySelector('.popover-content');
	        var popoverDim = popoverEle.getBoundingClientRect();
	        var popoverWidth = popoverDim.width;
	        var popoverHeight = popoverDim.height;
	        // Window body width and height
	        var bodyWidth = window.innerWidth;
	        var bodyHeight = window.innerHeight;
	        // If ev was passed, use that for target element
	        var targetDim = ev && ev.target && ev.target.getBoundingClientRect();
	        var targetTop = (targetDim && 'top' in targetDim) ? targetDim.top : (bodyHeight / 2) - (popoverHeight / 2);
	        var targetLeft = (targetDim && 'left' in targetDim) ? targetDim.left : (bodyWidth / 2);
	        var targetWidth = targetDim && targetDim.width || 0;
	        var targetHeight = targetDim && targetDim.height || 0;
	        // The arrow that shows above the popover on iOS
	        var arrowEle = nativeEle.querySelector('.popover-arrow');
	        var arrowDim = arrowEle.getBoundingClientRect();
	        var arrowWidth = arrowDim.width;
	        var arrowHeight = arrowDim.height;
	        // If no ev was passed, hide the arrow
	        if (!targetDim) {
	            arrowEle.style.display = 'none';
	        }
	        var arrowCSS = {
	            top: targetTop + targetHeight,
	            left: targetLeft + (targetWidth / 2) - (arrowWidth / 2)
	        };
	        var popoverCSS = {
	            top: targetTop + targetHeight + (arrowHeight - 1),
	            left: targetLeft + (targetWidth / 2) - (popoverWidth / 2)
	        };
	        // If the popover left is less than the padding it is off screen
	        // to the left so adjust it, else if the width of the popover
	        // exceeds the body width it is off screen to the right so adjust
	        if (popoverCSS.left < POPOVER_IOS_BODY_PADDING) {
	            popoverCSS.left = POPOVER_IOS_BODY_PADDING;
	        }
	        else if (popoverWidth + POPOVER_IOS_BODY_PADDING + popoverCSS.left > bodyWidth) {
	            popoverCSS.left = bodyWidth - popoverWidth - POPOVER_IOS_BODY_PADDING;
	            originX = 'right';
	        }
	        // If the popover when popped down stretches past bottom of screen,
	        // make it pop up if there's room above
	        if (targetTop + targetHeight + popoverHeight > bodyHeight && targetTop - popoverHeight > 0) {
	            arrowCSS.top = targetTop - (arrowHeight + 1);
	            popoverCSS.top = targetTop - popoverHeight - (arrowHeight - 1);
	            nativeEle.className = nativeEle.className + ' popover-bottom';
	            originY = 'bottom';
	        }
	        else if (targetTop + targetHeight + popoverHeight > bodyHeight) {
	            popoverEle.style.bottom = POPOVER_IOS_BODY_PADDING + '%';
	        }
	        arrowEle.style.top = arrowCSS.top + 'px';
	        arrowEle.style.left = arrowCSS.left + 'px';
	        popoverEle.style.top = popoverCSS.top + 'px';
	        popoverEle.style.left = popoverCSS.left + 'px';
	        popoverEle.style[dom_1.CSS.transformOrigin] = originY + ' ' + originX;
	        // Since the transition starts before styling is done we
	        // want to wait for the styles to apply before showing the wrapper
	        popoverWrapperEle.style.opacity = '1';
	    };
	    return PopoverTransition;
	}(page_transition_1.PageTransition));
	var PopoverPopIn = (function (_super) {
	    __extends(PopoverPopIn, _super);
	    function PopoverPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        this.opts = opts;
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.popover-wrapper'));
	        wrapper.fromTo('opacity', 0.01, 1);
	        backdrop.fromTo('opacity', 0.01, 0.08);
	        this
	            .easing('ease')
	            .duration(100)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    PopoverPopIn.prototype.play = function () {
	        var _this = this;
	        dom_1.nativeRaf(function () {
	            _this.iosPositionView(_this.enteringView.pageRef().nativeElement, _this.opts.ev);
	            _super.prototype.play.call(_this);
	        });
	    };
	    return PopoverPopIn;
	}(PopoverTransition));
	page_transition_1.PageTransition.register('popover-pop-in', PopoverPopIn);
	var PopoverPopOut = (function (_super) {
	    __extends(PopoverPopOut, _super);
	    function PopoverPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        this.opts = opts;
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('ion-backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.popover-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0);
	        backdrop.fromTo('opacity', 0.08, 0);
	        this
	            .easing('ease')
	            .duration(500)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return PopoverPopOut;
	}(PopoverTransition));
	page_transition_1.PageTransition.register('popover-pop-out', PopoverPopOut);
	var PopoverMdPopIn = (function (_super) {
	    __extends(PopoverMdPopIn, _super);
	    function PopoverMdPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        this.opts = opts;
	        var ele = enteringView.pageRef().nativeElement;
	        var content = new animation_1.Animation(ele.querySelector('.popover-content'));
	        var viewport = new animation_1.Animation(ele.querySelector('.popover-viewport'));
	        content.fromTo('scale', 0.001, 1);
	        viewport.fromTo('opacity', 0.01, 1);
	        this
	            .easing('cubic-bezier(0.36,0.66,0.04,1)')
	            .duration(300)
	            .add(content)
	            .add(viewport);
	    }
	    PopoverMdPopIn.prototype.play = function () {
	        var _this = this;
	        dom_1.nativeRaf(function () {
	            _this.mdPositionView(_this.enteringView.pageRef().nativeElement, _this.opts.ev);
	            _super.prototype.play.call(_this);
	        });
	    };
	    return PopoverMdPopIn;
	}(PopoverTransition));
	page_transition_1.PageTransition.register('popover-md-pop-in', PopoverMdPopIn);
	var PopoverMdPopOut = (function (_super) {
	    __extends(PopoverMdPopOut, _super);
	    function PopoverMdPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        this.opts = opts;
	        var ele = leavingView.pageRef().nativeElement;
	        var wrapper = new animation_1.Animation(ele.querySelector('.popover-wrapper'));
	        wrapper.fromTo('opacity', 0.99, 0);
	        this
	            .easing('ease')
	            .duration(500)
	            .fromTo('opacity', 0.01, 1)
	            .add(wrapper);
	    }
	    return PopoverMdPopOut;
	}(PopoverTransition));
	page_transition_1.PageTransition.register('popover-md-pop-out', PopoverMdPopOut);
	var popoverIds = -1;


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var animation_1 = __webpack_require__(152);
	var config_1 = __webpack_require__(125);
	var util_1 = __webpack_require__(127);
	var nav_controller_1 = __webpack_require__(148);
	var nav_params_1 = __webpack_require__(149);
	var transition_1 = __webpack_require__(151);
	var view_controller_1 = __webpack_require__(153);
	/**
	 * @name Toast
	 * @description
	 * A Toast is a subtle notification commonly used in modern applications.
	 * It can be used to provide feedback about an operation or to
	 * display a system message. The toast appears on top of the app's content,
	 * and can be dismissed by the app to resume user interaction with
	 * the app.
	 *
	 * ### Creating
	 * All of the toast options should be passed in the first argument of
	 * the create method: `Toast.create(opts)`. The message to display should be
	 * passed in the `message` property. The `showCloseButton` option can be set to
	 * true in order to display a close button on the toast. See the [create](#create)
	 * method below for all available options.
	 *
	 * ### Positioning
	 * Toasts can be positioned at the top, bottom or middle of the
	 * view port. The position can be passed to the `Toast.create(opts)` method.
	 * The position option is a string, and the values accepted are `top`, `bottom` and `middle`.
	 * If the position is not specified, the toast will be displayed at the bottom of the view port.
	 *
	 * ### Dismissing
	 * The toast can be dismissed automatically after a specific amount of time
	 * by passing the number of milliseconds to display it in the `duration` of
	 * the toast options. If `showCloseButton` is set to true, then the close button
	 * will dismiss the toast. To dismiss the toast after creation, call the `dismiss()`
	 * method on the Toast instance. The `onDismiss` function can be called to perform an action after the toast
	 * is dismissed.
	 *
	 * @usage
	 * ```ts
	 * constructor(nav: NavController) {
	 *   this.nav = nav;
	 * }
	 *
	 * presentToast() {
	 *   let toast = Toast.create({
	 *     message: 'User was added successfully',
	 *     duration: 3000,
	 *     position: 'top'
	 *   });
	 *
	 *   toast.onDismiss(() => {
	 *     console.log('Dismissed toast');
	 *   });
	 *
	 *   this.nav.present(toast);
	 * }
	 * ```
	 *
	 * @demo /docs/v2/demos/toast/
	 */
	var Toast = (function (_super) {
	    __extends(Toast, _super);
	    function Toast(opts) {
	        if (opts === void 0) { opts = {}; }
	        opts.dismissOnPageChange = util_1.isPresent(opts.dismissOnPageChange) ? !!opts.dismissOnPageChange : false;
	        _super.call(this, ToastCmp, opts);
	        // set the position to the bottom if not provided
	        if (!opts.position || !this.isValidPosition(opts.position)) {
	            opts.position = TOAST_POSITION_BOTTOM;
	        }
	        this.isOverlay = true;
	        this.usePortal = true;
	        // by default, toasts should not fire lifecycle events of other views
	        // for example, when an toast enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	    }
	    /**
	    * @private
	    */
	    Toast.prototype.getTransitionName = function (direction) {
	        var key = 'toast' + (direction === 'back' ? 'Leave' : 'Enter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	    * @private
	    */
	    Toast.prototype.isValidPosition = function (position) {
	        return position === TOAST_POSITION_TOP || position === TOAST_POSITION_MIDDLE || position === TOAST_POSITION_BOTTOM;
	    };
	    /**
	     * @param {string} message  Toast message content
	     */
	    Toast.prototype.setMessage = function (message) {
	        this.data.message = message;
	    };
	    /**
	     *
	     *  Toast options
	     *
	     *  | Property              | Type      | Default         | Description                                                                                                   |
	     *  |-----------------------|-----------|-----------------|---------------------------------------------------------------------------------------------------------------|
	     *  | message               | `string`  | -               | The message for the toast. Long strings will wrap and the toast container will expand.                        |
	     *  | duration              | `number`  | -               | How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.  |
	     *  | position              | `string`  | "bottom"        | The position of the toast on the screen. Accepted values: "top", "middle", "bottom".                          |
	     *  | cssClass              | `string`  | -               | Any additional class for custom styles.                                                                       |
	     *  | showCloseButton       | `boolean` | false           | Whether or not to show a button to close the toast.                                                           |
	     *  | closeButtonText       | `string`  | "Close"         | Text to display in the close button.                                                                          |
	     *  | dismissOnPageChange   | `boolean` | false           | Whether to dismiss the toast when navigating to a new page.                                                   |
	     *
	     * @param {object} opts Toast options. See the above table for available options.
	     */
	    Toast.create = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        return new Toast(opts);
	    };
	    return Toast;
	}(view_controller_1.ViewController));
	exports.Toast = Toast;
	/* Don't expose these for now - let's move to an enum or something long term */
	var TOAST_POSITION_TOP = 'top';
	var TOAST_POSITION_MIDDLE = 'middle';
	var TOAST_POSITION_BOTTOM = 'bottom';
	/**
	* @private
	*/
	var ToastCmp = (function () {
	    function ToastCmp(_nav, _viewCtrl, _config, _elementRef, params, renderer) {
	        this._nav = _nav;
	        this._viewCtrl = _viewCtrl;
	        this._config = _config;
	        this._elementRef = _elementRef;
	        this.dismissTimeout = undefined;
	        this.d = params.data;
	        if (this.d.cssClass) {
	            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
	        }
	        this.id = (++toastIds);
	        if (this.d.message) {
	            this.hdrId = 'toast-hdr-' + this.id;
	        }
	    }
	    ToastCmp.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        // if there's a `duration` set, automatically dismiss.
	        if (this.d.duration) {
	            this.dismissTimeout =
	                setTimeout(function () {
	                    _this.dismiss('backdrop');
	                }, this.d.duration);
	        }
	        this.enabled = true;
	    };
	    ToastCmp.prototype.ionViewDidEnter = function () {
	        var activeElement = document.activeElement;
	        if (activeElement) {
	            activeElement.blur();
	        }
	        var focusableEle = this._elementRef.nativeElement.querySelector('button');
	        if (focusableEle) {
	            focusableEle.focus();
	        }
	    };
	    ToastCmp.prototype.cbClick = function () {
	        if (this.enabled) {
	            this.dismiss('close');
	        }
	    };
	    ToastCmp.prototype.dismiss = function (role) {
	        clearTimeout(this.dismissTimeout);
	        this.dismissTimeout = undefined;
	        return this._viewCtrl.dismiss(null, role);
	    };
	    ToastCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-toast',
	            template: "\n    <div class=\"toast-wrapper\"\n      [class.toast-bottom]=\"d.position === 'bottom'\"\n      [class.toast-middle]=\"d.position === 'middle'\"\n      [class.toast-top]=\"d.position === 'top'\"\n      >\n      <div class=\"toast-container\">\n        <div class=\"toast-message\" id=\"{{hdrId}}\" *ngIf=\"d.message\">{{d.message}}</div>\n        <button clear class=\"toast-button\" *ngIf=\"d.showCloseButton\" (click)=\"cbClick()\">\n          {{ d.closeButtonText || 'Close' }}\n         </button>\n      </div>\n    </div>\n  ",
	            host: {
	                'role': 'dialog',
	                '[attr.aria-labelledby]': 'hdrId',
	                '[attr.aria-describedby]': 'descId',
	            },
	        }), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController, view_controller_1.ViewController, config_1.Config, core_1.ElementRef, nav_params_1.NavParams, core_1.Renderer])
	    ], ToastCmp);
	    return ToastCmp;
	}());
	var ToastSlideIn = (function (_super) {
	    __extends(ToastSlideIn, _super);
	    function ToastSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        // DOM READS
	        var ele = enteringView.pageRef().nativeElement;
	        var wrapperEle = ele.querySelector('.toast-wrapper');
	        var wrapper = new animation_1.Animation(wrapperEle);
	        if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
	            // top
	            // by default, it is -100% hidden (above the screen)
	            // so move from that to 10px below top: 0px;
	            wrapper.fromTo('translateY', '-100%', 10 + "px");
	        }
	        else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
	            // Middle
	            // just center it and fade it in
	            var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
	            // DOM WRITE
	            wrapperEle.style.top = topPosition + "px";
	            wrapper.fromTo('opacity', 0.01, 1);
	        }
	        else {
	            // bottom
	            // by default, it is 100% hidden (below the screen),
	            // so move from that to 10 px above bottom: 0px
	            wrapper.fromTo('translateY', '100%', (0 - 10) + "px");
	        }
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(wrapper);
	    }
	    return ToastSlideIn;
	}(transition_1.Transition));
	var ToastSlideOut = (function (_super) {
	    __extends(ToastSlideOut, _super);
	    function ToastSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var wrapperEle = ele.querySelector('.toast-wrapper');
	        var wrapper = new animation_1.Animation(wrapperEle);
	        if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
	            // top
	            // reverse arguments from enter transition
	            wrapper.fromTo('translateY', 10 + "px", '-100%');
	        }
	        else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
	            // Middle
	            // just fade it out
	            wrapper.fromTo('opacity', 0.99, 0);
	        }
	        else {
	            // bottom
	            // reverse arguments from enter transition
	            wrapper.fromTo('translateY', (0 - 10) + "px", '100%');
	        }
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(wrapper);
	    }
	    return ToastSlideOut;
	}(transition_1.Transition));
	var ToastMdSlideIn = (function (_super) {
	    __extends(ToastMdSlideIn, _super);
	    function ToastMdSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        // DOM reads
	        var ele = enteringView.pageRef().nativeElement;
	        var wrapperEle = ele.querySelector('.toast-wrapper');
	        var wrapper = new animation_1.Animation(wrapperEle);
	        if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
	            // top
	            // by default, it is -100% hidden (above the screen)
	            // so move from that to top: 0px;
	            wrapper.fromTo('translateY', '-100%', "0%");
	        }
	        else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
	            // Middle
	            // just center it and fade it in
	            var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
	            // DOM WRITE
	            wrapperEle.style.top = topPosition + "px";
	            wrapper.fromTo('opacity', 0.01, 1);
	        }
	        else {
	            // bottom
	            // by default, it is 100% hidden (below the screen),
	            // so move from that to bottom: 0px
	            wrapper.fromTo('translateY', '100%', "0%");
	        }
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(wrapper);
	    }
	    return ToastMdSlideIn;
	}(transition_1.Transition));
	var ToastMdSlideOut = (function (_super) {
	    __extends(ToastMdSlideOut, _super);
	    function ToastMdSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var wrapperEle = ele.querySelector('.toast-wrapper');
	        var wrapper = new animation_1.Animation(wrapperEle);
	        if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
	            // top
	            // reverse arguments from enter transition
	            wrapper.fromTo('translateY', 0 + "%", '-100%');
	        }
	        else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
	            // Middle
	            // just fade it out
	            wrapper.fromTo('opacity', 0.99, 0);
	        }
	        else {
	            // bottom
	            // reverse arguments from enter transition
	            wrapper.fromTo('translateY', 0 + "%", '100%');
	        }
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(wrapper);
	    }
	    return ToastMdSlideOut;
	}(transition_1.Transition));
	var ToastWpPopIn = (function (_super) {
	    __extends(ToastWpPopIn, _super);
	    function ToastWpPopIn(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var wrapperEle = ele.querySelector('.toast-wrapper');
	        var wrapper = new animation_1.Animation(wrapperEle);
	        if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
	            // top
	            wrapper.fromTo('opacity', 0.01, 1);
	            wrapper.fromTo('scale', 1.3, 1);
	        }
	        else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
	            // Middle
	            // just center it and fade it in
	            var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
	            // DOM WRITE
	            wrapperEle.style.top = topPosition + "px";
	            wrapper.fromTo('opacity', 0.01, 1);
	            wrapper.fromTo('scale', 1.3, 1);
	        }
	        else {
	            // bottom
	            wrapper.fromTo('opacity', 0.01, 1);
	            wrapper.fromTo('scale', 1.3, 1);
	        }
	        this.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(wrapper);
	    }
	    return ToastWpPopIn;
	}(transition_1.Transition));
	var ToastWpPopOut = (function (_super) {
	    __extends(ToastWpPopOut, _super);
	    function ToastWpPopOut(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        // DOM reads
	        var ele = leavingView.pageRef().nativeElement;
	        var wrapperEle = ele.querySelector('.toast-wrapper');
	        var wrapper = new animation_1.Animation(wrapperEle);
	        if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
	            // top
	            // reverse arguments from enter transition
	            wrapper.fromTo('opacity', 0.99, 0);
	            wrapper.fromTo('scale', 1, 1.3);
	        }
	        else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
	            // Middle
	            // just fade it out
	            wrapper.fromTo('opacity', 0.99, 0);
	            wrapper.fromTo('scale', 1, 1.3);
	        }
	        else {
	            // bottom
	            // reverse arguments from enter transition
	            wrapper.fromTo('opacity', 0.99, 0);
	            wrapper.fromTo('scale', 1, 1.3);
	        }
	        // DOM writes
	        var EASE = 'ease-out';
	        var DURATION = 150;
	        this.easing(EASE).duration(DURATION).add(wrapper);
	    }
	    return ToastWpPopOut;
	}(transition_1.Transition));
	transition_1.Transition.register('toast-slide-in', ToastSlideIn);
	transition_1.Transition.register('toast-slide-out', ToastSlideOut);
	transition_1.Transition.register('toast-md-slide-in', ToastMdSlideIn);
	transition_1.Transition.register('toast-md-slide-out', ToastMdSlideOut);
	transition_1.Transition.register('toast-wp-slide-out', ToastWpPopOut);
	transition_1.Transition.register('toast-wp-slide-in', ToastWpPopIn);
	var toastIds = -1;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(223));
	__export(__webpack_require__(224));
	__export(__webpack_require__(225));


/***/ },
/* 223 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Storage is an easy way to store key/value pairs and other complicated
	 * data in a way that uses a variety of storage engines underneath.
	 *
	 * For most cases, we recommend the SqlStorage system as it will store
	 * data in a file in the app's sandbox. LocalStorage should ONLY be used
	 * for temporary data as it may be 'cleaned up' by the operation system
	 * during low disk space situations.
	 */
	/**
	 * @private
	*/
	var Storage = (function () {
	    function Storage(strategyCls, options) {
	        this._strategy = new strategyCls(options);
	    }
	    Storage.prototype.get = function (key) {
	        return this._strategy.get(key);
	    };
	    Storage.prototype.getJson = function (key) {
	        return this.get(key).then(function (value) {
	            try {
	                return JSON.parse(value);
	            }
	            catch (e) {
	                void 0;
	                throw e; // rethrowing exception so it can be handled with .catch()
	            }
	        });
	    };
	    Storage.prototype.setJson = function (key, value) {
	        try {
	            return this.set(key, JSON.stringify(value));
	        }
	        catch (e) {
	            return Promise.reject(e);
	        }
	    };
	    Storage.prototype.set = function (key, value) {
	        return this._strategy.set(key, value);
	    };
	    Storage.prototype.remove = function (key) {
	        return this._strategy.remove(key);
	    };
	    Storage.prototype.query = function (query, params) {
	        return this._strategy.query(query, params);
	    };
	    Storage.prototype.clear = function () {
	        return this._strategy.clear();
	    };
	    return Storage;
	}());
	exports.Storage = Storage;
	/**
	 * @private
	*/
	var StorageEngine = (function () {
	    function StorageEngine(options) {
	        if (options === void 0) { options = {}; }
	    }
	    StorageEngine.prototype.get = function (key) {
	        throw Error('get() not implemented for this storage engine');
	    };
	    StorageEngine.prototype.set = function (key, value) {
	        throw Error('set() not implemented for this storage engine');
	    };
	    StorageEngine.prototype.remove = function (key) {
	        throw Error('remove() not implemented for this storage engine');
	    };
	    StorageEngine.prototype.query = function (query, params) {
	        throw Error('query() not implemented for this storage engine');
	    };
	    StorageEngine.prototype.clear = function () {
	        throw Error('clear() not implemented for this storage engine');
	    };
	    return StorageEngine;
	}());
	exports.StorageEngine = StorageEngine;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var storage_1 = __webpack_require__(223);
	/**
	 * @name LocalStorage
	 * @description
	 * The LocalStorage storage engine uses the browser's local storage system for
	 * storing key/value pairs.
	 *
	 * Note: LocalStorage should ONLY be used for temporary data that you can afford to lose.
	 * Given disk space constraints on a mobile device, local storage might be "cleaned up"
	 * by the operating system (iOS).
	 *
	 * For guaranteed, long-term storage, use the SqlStorage engine which stores data in a file.
	 *
	 * @usage
	 * ```ts
	 * import {Component} from '@angular/core';
	 * import {Storage, LocalStorage} from 'ionic-angular';
	 * @Component({
	 *   template: `<ion-content></ion-content>`
	 * });
	 * export class MyClass{
	 *  constructor(){
	 *    this.local = new Storage(LocalStorage);
	 *    this.local.set('didTutorial', 'true');
	 *  }
	 *}
	 *```
	 * @demo /docs/v2/demos/local-storage/
	 * @see {@link /docs/v2/platform/storage/ Storage Platform Docs}
	 */
	var LocalStorage = (function (_super) {
	    __extends(LocalStorage, _super);
	    function LocalStorage(options) {
	        if (options === void 0) { options = {}; }
	        _super.call(this);
	    }
	    /**
	     * Get the value of a key in LocalStorage
	     * @param {string} key the key you want to lookup in LocalStorage
	     * @returns {Promise} Returns a promise which is resolved when the value has been retrieved
	     */
	    LocalStorage.prototype.get = function (key) {
	        return new Promise(function (resolve, reject) {
	            try {
	                var value = window.localStorage.getItem(key);
	                resolve(value);
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	     * Set a key value pair and save it to LocalStorage
	     * @param {string} key the key you want to save to LocalStorage
	     * @param {string} value the value of the key you're saving
	     * @returns {Promise} Returns a promise which is resolved when the key value pair have been set
	     */
	    LocalStorage.prototype.set = function (key, value) {
	        return new Promise(function (resolve, reject) {
	            try {
	                window.localStorage.setItem(key, value);
	                resolve();
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	     * Remove a key from LocalStorage
	     * @param {string} key the key you want to remove from LocalStorage
	     * @returns {Promise} Returns a promise which is resolved when the key has been removed
	     */
	    LocalStorage.prototype.remove = function (key) {
	        return new Promise(function (resolve, reject) {
	            try {
	                window.localStorage.removeItem(key);
	                resolve();
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	     * Clear data stored in LocalStorage
	     * @returns {Promise} Returns a promise which is resolved when the data have been cleared
	     */
	    LocalStorage.prototype.clear = function () {
	        return new Promise(function (resolve, reject) {
	            try {
	                window.localStorage.clear();
	                resolve();
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    return LocalStorage;
	}(storage_1.StorageEngine));
	exports.LocalStorage = LocalStorage;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var storage_1 = __webpack_require__(223);
	var util_1 = __webpack_require__(127);
	var DB_NAME = '__ionicstorage';
	var win = window;
	/**
	 * SqlStorage uses SQLite or WebSQL (development only!) to store data in a
	 * persistent SQL store on the filesystem.
	 *
	 * This is the preferred storage engine, as data will be stored in appropriate
	 * app storage, unlike Local Storage which is treated differently by the OS.
	 *
	 * For convenience, the engine supports key/value storage for simple get/set and blob
	 * storage. The full SQL engine is exposed underneath through the `query` method.
	 *
	 * @usage
	 ```js
	 * let storage = new Storage(SqlStorage, options);
	 * storage.set('name', 'Max');
	 * storage.get('name').then((name) => {
	 * });
	 *
	 * // Sql storage also exposes the full engine underneath
	 * storage.query('insert into projects(name, data) values("Cool Project", "blah")');
	 * storage.query('select * from projects').then((resp) => {})
	 * ```
	 *
	 * The `SqlStorage` service supports these options:
	 * {
	 *   name: the name of the database (__ionicstorage by default)
	 *   backupFlag: // where to store the file, default is BACKUP_LOCAL which DOES NOT store to iCloud. Other options: BACKUP_LIBRARY, BACKUP_DOCUMENTS
	 *   existingDatabase: whether to load this as an existing database (default is false)
	 * }
	 *
	 */
	var SqlStorage = (function (_super) {
	    __extends(SqlStorage, _super);
	    function SqlStorage(options) {
	        if (options === void 0) { options = {}; }
	        _super.call(this);
	        var dbOptions = util_1.defaults(options, {
	            name: DB_NAME,
	            backupFlag: SqlStorage.BACKUP_LOCAL,
	            existingDatabase: false
	        });
	        if (win.sqlitePlugin) {
	            var location_1 = this._getBackupLocation(dbOptions.backupFlag);
	            this._db = win.sqlitePlugin.openDatabase(util_1.assign({
	                name: dbOptions.name,
	                location: location_1,
	                createFromLocation: dbOptions.existingDatabase ? 1 : 0
	            }, dbOptions));
	        }
	        else {
	            void 0;
	            this._db = win.openDatabase(dbOptions.name, '1.0', 'database', 5 * 1024 * 1024);
	        }
	        this._tryInit();
	    }
	    SqlStorage.prototype._getBackupLocation = function (dbFlag) {
	        switch (dbFlag) {
	            case SqlStorage.BACKUP_LOCAL:
	                return 2;
	            case SqlStorage.BACKUP_LIBRARY:
	                return 1;
	            case SqlStorage.BACKUP_DOCUMENTS:
	                return 0;
	            default:
	                throw Error('Invalid backup flag: ' + dbFlag);
	        }
	    };
	    // Initialize the DB with our required tables
	    SqlStorage.prototype._tryInit = function () {
	        this.query('CREATE TABLE IF NOT EXISTS kv (key text primary key, value text)').catch(function (err) {
	            void 0;
	        });
	    };
	    /**
	     * Perform an arbitrary SQL operation on the database. Use this method
	     * to have full control over the underlying database through SQL operations
	     * like SELECT, INSERT, and UPDATE.
	     *
	     * @param {string} query the query to run
	     * @param {array} params the additional params to use for query placeholders
	     * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	     */
	    SqlStorage.prototype.query = function (query, params) {
	        var _this = this;
	        if (params === void 0) { params = []; }
	        return new Promise(function (resolve, reject) {
	            try {
	                _this._db.transaction(function (tx) {
	                    tx.executeSql(query, params, function (tx, res) { return resolve({ tx: tx, res: res }); }, function (tx, err) { return reject({ tx: tx, err: err }); });
	                }, function (err) { return reject({ err: err }); });
	            }
	            catch (err) {
	                reject({ err: err });
	            }
	        });
	    };
	    /**
	     * Get the value in the database identified by the given key.
	     * @param {string} key the key
	     * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	     */
	    SqlStorage.prototype.get = function (key) {
	        return this.query('select key, value from kv where key = ? limit 1', [key]).then(function (data) {
	            if (data.res.rows.length > 0) {
	                return data.res.rows.item(0).value;
	            }
	        });
	    };
	    /**
	    * Set the value in the database for the given key. Existing values will be overwritten.
	    * @param {string} key the key
	    * @param {string} value The value (as a string)
	    * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	    */
	    SqlStorage.prototype.set = function (key, value) {
	        return this.query('insert or replace into kv(key, value) values (?, ?)', [key, value]);
	    };
	    /**
	    * Remove the value in the database for the given key.
	    * @param {string} key the key
	    * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	    */
	    SqlStorage.prototype.remove = function (key) {
	        return this.query('delete from kv where key = ?', [key]);
	    };
	    /**
	    * Clear all keys/values of your database.
	    * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	    */
	    SqlStorage.prototype.clear = function () {
	        return this.query('delete from kv');
	    };
	    SqlStorage.BACKUP_LOCAL = 2;
	    SqlStorage.BACKUP_LIBRARY = 1;
	    SqlStorage.BACKUP_DOCUMENTS = 0;
	    return SqlStorage;
	}(storage_1.StorageEngine));
	exports.SqlStorage = SqlStorage;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var translate_1 = __webpack_require__(213);
	/**
	 * @private
	 * The Translate pipe makes it easy to translate strings.
	 *
	 * @usage
	 * Translate using the current language or language set through Translate.setLanguage
	 * {{ 'Please enter your location' | translate }}
	 *
	 * Translate using a specific language
	 * {{ 'Please enter your location' | translate:"de" }}
	 */
	var TranslatePipe = (function () {
	    function TranslatePipe(translate) {
	        this.translate = {};
	        this.translate = translate;
	    }
	    TranslatePipe.prototype.transform = function (value, args) {
	        var lang;
	        if (args.length > 0) {
	            lang = args[0];
	        }
	        return this.translate.translate(value, lang);
	    };
	    TranslatePipe.prototype.supports = function (obj) { return true; };
	    TranslatePipe = __decorate([
	        core_1.Pipe({ name: 'translate' }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [translate_1.Translate])
	    ], TranslatePipe);
	    return TranslatePipe;
	}());
	exports.TranslatePipe = TranslatePipe;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var config_1 = __webpack_require__(125);
	// iOS Mode Settings
	config_1.Config.setModeConfig('ios', {
	    activator: 'highlight',
	    actionSheetEnter: 'action-sheet-slide-in',
	    actionSheetLeave: 'action-sheet-slide-out',
	    alertEnter: 'alert-pop-in',
	    alertLeave: 'alert-pop-out',
	    backButtonText: 'Back',
	    backButtonIcon: 'ios-arrow-back',
	    iconMode: 'ios',
	    loadingEnter: 'loading-pop-in',
	    loadingLeave: 'loading-pop-out',
	    menuType: 'reveal',
	    modalEnter: 'modal-slide-in',
	    modalLeave: 'modal-slide-out',
	    pageTransition: 'ios-transition',
	    pageTransitionDelay: 16,
	    pickerEnter: 'picker-slide-in',
	    pickerLeave: 'picker-slide-out',
	    pickerRotateFactor: -0.46,
	    popoverEnter: 'popover-pop-in',
	    popoverLeave: 'popover-pop-out',
	    spinner: 'ios',
	    tabbarHighlight: false,
	    tabbarPlacement: 'bottom',
	    tabSubPages: false,
	    toastEnter: 'toast-slide-in',
	    toastLeave: 'toast-slide-out',
	});
	// Material Design Mode Settings
	config_1.Config.setModeConfig('md', {
	    activator: 'ripple',
	    actionSheetEnter: 'action-sheet-md-slide-in',
	    actionSheetLeave: 'action-sheet-md-slide-out',
	    alertEnter: 'alert-md-pop-in',
	    alertLeave: 'alert-md-pop-out',
	    backButtonText: '',
	    backButtonIcon: 'md-arrow-back',
	    iconMode: 'md',
	    loadingEnter: 'loading-md-pop-in',
	    loadingLeave: 'loading-md-pop-out',
	    menuType: 'overlay',
	    modalEnter: 'modal-md-slide-in',
	    modalLeave: 'modal-md-slide-out',
	    pageTransition: 'md-transition',
	    pageTransitionDelay: 64,
	    pickerEnter: 'picker-slide-in',
	    pickerLeave: 'picker-slide-out',
	    pickerRotateFactor: 0,
	    popoverEnter: 'popover-md-pop-in',
	    popoverLeave: 'popover-md-pop-out',
	    spinner: 'crescent',
	    tabbarHighlight: true,
	    tabbarPlacement: 'top',
	    tabSubPages: true,
	    toastEnter: 'toast-md-slide-in',
	    toastLeave: 'toast-md-slide-out',
	});
	// Windows Mode Settings
	config_1.Config.setModeConfig('wp', {
	    activator: 'highlight',
	    actionSheetEnter: 'action-sheet-wp-slide-in',
	    actionSheetLeave: 'action-sheet-wp-slide-out',
	    alertEnter: 'alert-wp-pop-in',
	    alertLeave: 'alert-wp-pop-out',
	    backButtonText: '',
	    backButtonIcon: 'ios-arrow-back',
	    iconMode: 'ios',
	    loadingEnter: 'loading-wp-pop-in',
	    loadingLeave: 'loading-wp-pop-out',
	    menuType: 'overlay',
	    modalEnter: 'modal-md-slide-in',
	    modalLeave: 'modal-md-slide-out',
	    pageTransition: 'wp-transition',
	    pageTransitionDelay: 96,
	    pickerEnter: 'picker-slide-in',
	    pickerLeave: 'picker-slide-out',
	    pickerRotateFactor: 0,
	    popoverEnter: 'popover-md-pop-in',
	    popoverLeave: 'popover-md-pop-out',
	    spinner: 'circles',
	    tabbarPlacement: 'top',
	    tabSubPages: true,
	    toastEnter: 'toast-wp-slide-in',
	    toastLeave: 'toast-wp-slide-out',
	});


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var platform_1 = __webpack_require__(126);
	var dom_1 = __webpack_require__(124);
	var win = window;
	var doc = document;
	platform_1.Platform.register({
	    name: 'core',
	    settings: {
	        mode: 'md',
	        keyboardHeight: 290
	    }
	});
	platform_1.Platform.setDefault('core');
	platform_1.Platform.register({
	    name: 'mobile'
	});
	platform_1.Platform.register({
	    name: 'phablet',
	    isMatch: function (p) {
	        var smallest = Math.min(p.width(), p.height());
	        var largest = Math.max(p.width(), p.height());
	        return (smallest > 390 && smallest < 520) &&
	            (largest > 620 && largest < 800);
	    }
	});
	platform_1.Platform.register({
	    name: 'tablet',
	    isMatch: function (p) {
	        var smallest = Math.min(p.width(), p.height());
	        var largest = Math.max(p.width(), p.height());
	        return (smallest > 460 && smallest < 820) &&
	            (largest > 780 && largest < 1400);
	    }
	});
	platform_1.Platform.register({
	    name: 'android',
	    superset: 'mobile',
	    subsets: [
	        'phablet',
	        'tablet'
	    ],
	    settings: {
	        activator: function (p) {
	            // md mode defaults to use ripple activator
	            // however, under-powered devices shouldn't use ripple
	            // if this a linux device, and is using Android Chrome v36 (Android 5.0)
	            // or above then use ripple, otherwise do not use a ripple effect
	            if (p.testNavigatorPlatform('linux')) {
	                var chromeVersion = p.matchUserAgentVersion(/Chrome\/(\d+).(\d+)?/);
	                if (chromeVersion) {
	                    // linux android device using modern android chrome browser gets ripple
	                    return (parseInt(chromeVersion.major, 10) < 36 ? 'none' : 'ripple');
	                }
	                // linux android device not using chrome browser checks just android's version
	                if (p.version().major < 5) {
	                    return 'none';
	                }
	            }
	            // fallback to always use ripple
	            return 'ripple';
	        },
	        autoFocusAssist: 'immediate',
	        hoverCSS: false,
	        keyboardHeight: 300,
	        mode: 'md',
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('android', ['android', 'silk'], ['windows phone']);
	    },
	    versionParser: function (p) {
	        return p.matchUserAgentVersion(/Android (\d+).(\d+)?/);
	    }
	});
	platform_1.Platform.register({
	    name: 'ios',
	    superset: 'mobile',
	    subsets: [
	        'ipad',
	        'iphone'
	    ],
	    settings: {
	        autoFocusAssist: 'delay',
	        hoverCSS: false,
	        inputBlurring: isIOSDevice,
	        inputCloning: isIOSDevice,
	        keyboardHeight: 300,
	        mode: 'ios',
	        scrollAssist: isIOSDevice,
	        statusbarPadding: !!(win.cordova),
	        swipeBackEnabled: isIOSDevice,
	        swipeBackThreshold: 40,
	        tapPolyfill: isIOSDevice,
	        virtualScrollEventAssist: !(win.indexedDB)
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('ios', ['iphone', 'ipad', 'ipod'], ['windows phone']);
	    },
	    versionParser: function (p) {
	        return p.matchUserAgentVersion(/OS (\d+)_(\d+)?/);
	    }
	});
	platform_1.Platform.register({
	    name: 'ipad',
	    superset: 'tablet',
	    settings: {
	        keyboardHeight: 500,
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('ipad');
	    }
	});
	platform_1.Platform.register({
	    name: 'iphone',
	    subsets: [
	        'phablet'
	    ],
	    isMatch: function (p) {
	        return p.isPlatformMatch('iphone');
	    }
	});
	platform_1.Platform.register({
	    name: 'windows',
	    superset: 'mobile',
	    subsets: [
	        'phablet',
	        'tablet'
	    ],
	    settings: {
	        mode: 'wp',
	        autoFocusAssist: 'immediate',
	        hoverCSS: false
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('windows', ['windows phone']);
	    },
	    versionParser: function (p) {
	        return p.matchUserAgentVersion(/Windows Phone (\d+).(\d+)?/);
	    }
	});
	platform_1.Platform.register({
	    name: 'cordova',
	    isEngine: true,
	    initialize: function (p, config) {
	        // prepare a custom "ready" for cordova "deviceready"
	        p.prepareReady = function () {
	            // 1) ionic bootstrapped
	            dom_1.windowLoad(function () {
	                // 2) window onload triggered or completed
	                doc.addEventListener('deviceready', function () {
	                    // 3) cordova deviceready event triggered
	                    // add cordova listeners to emit platform events
	                    doc.addEventListener('backbutton', function (ev) {
	                        p.zone.run(function () {
	                            p.backButton.emit(ev);
	                        });
	                    });
	                    doc.addEventListener('pause', function (ev) {
	                        p.zone.run(function () {
	                            p.pause.emit(ev);
	                        });
	                    });
	                    doc.addEventListener('resume', function (ev) {
	                        p.zone.run(function () {
	                            p.resume.emit(ev);
	                        });
	                    });
	                    // cordova has its own exitApp method
	                    p.exitApp = function () {
	                        win.navigator.app.exitApp();
	                    };
	                    // cordova has fully loaded and we've added listeners
	                    p.triggerReady('cordova');
	                });
	            });
	        };
	    },
	    isMatch: function () {
	        return !!(win.cordova || win.PhoneGap || win.phonegap);
	    }
	});
	function isIOSDevice(p) {
	    // shortcut function to be reused internally
	    // checks navigator.platform to see if it's an actual iOS device
	    // this does not use the user-agent string because it is often spoofed
	    // an actual iPad will return true, a chrome dev tools iPad will return false
	    return p.testNavigatorPlatform('iphone|ipad|ipod');
	}


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(152);
	var SlideIn = (function (_super) {
	    __extends(SlideIn, _super);
	    function SlideIn(element) {
	        _super.call(this, element);
	        this
	            .easing('cubic-bezier(0.1,0.7,0.1,1)')
	            .duration(400)
	            .fromTo('translateY', '100%', '0%');
	    }
	    return SlideIn;
	}(animation_1.Animation));
	animation_1.Animation.register('slide-in', SlideIn);
	var SlideOut = (function (_super) {
	    __extends(SlideOut, _super);
	    function SlideOut(element) {
	        _super.call(this, element);
	        this
	            .easing('ease-out')
	            .duration(250)
	            .fromTo('translateY', '0%', '100%');
	    }
	    return SlideOut;
	}(animation_1.Animation));
	animation_1.Animation.register('slide-out', SlideOut);
	var FadeIn = (function (_super) {
	    __extends(FadeIn, _super);
	    function FadeIn(element) {
	        _super.call(this, element);
	        this
	            .easing('ease-in')
	            .duration(400)
	            .fromTo('opacity', 0.001, 1, true);
	    }
	    return FadeIn;
	}(animation_1.Animation));
	animation_1.Animation.register('fade-in', FadeIn);
	var FadeOut = (function (_super) {
	    __extends(FadeOut, _super);
	    function FadeOut(element) {
	        _super.call(this, element);
	        this
	            .easing('ease-out')
	            .duration(250)
	            .fromTo('opacity', 0.999, 0);
	    }
	    return FadeOut;
	}(animation_1.Animation));
	animation_1.Animation.register('fade-out', FadeOut);


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(152);
	var page_transition_1 = __webpack_require__(219);
	var DURATION = 500;
	var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
	var OPACITY = 'opacity';
	var TRANSLATEX = 'translateX';
	var OFF_RIGHT = '99.5%';
	var OFF_LEFT = '-33%';
	var CENTER = '0%';
	var OFF_OPACITY = 0.8;
	var SHOW_BACK_BTN_CSS = 'show-back-button';
	var IOSTransition = (function (_super) {
	    __extends(IOSTransition, _super);
	    function IOSTransition(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        this.duration(opts.duration || DURATION);
	        this.easing(opts.easing || EASING);
	        // what direction is the transition going
	        var backDirection = (opts.direction === 'back');
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        // entering content
	        var enteringContent = new animation_1.Animation(enteringView.contentRef());
	        enteringContent.element(enteringView.toolbarRefs());
	        this.add(enteringContent);
	        if (backDirection) {
	            // entering content, back direction
	            enteringContent
	                .fromTo(TRANSLATEX, OFF_LEFT, CENTER, true)
	                .fromTo(OPACITY, OFF_OPACITY, 1, true);
	        }
	        else {
	            // entering content, forward direction
	            enteringContent
	                .before.clearStyles([OPACITY])
	                .fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
	        }
	        if (enteringHasNavbar) {
	            // entering page has a navbar
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	            var enteringTitle = new animation_1.Animation(enteringView.titleRef());
	            var enteringNavbarItems = new animation_1.Animation(enteringView.navbarItemRefs());
	            var enteringNavbarBg = new animation_1.Animation(enteringView.navbarBgRef());
	            var enteringBackButton = new animation_1.Animation(enteringView.backBtnRef());
	            enteringNavBar
	                .add(enteringTitle)
	                .add(enteringNavbarItems)
	                .add(enteringNavbarBg)
	                .add(enteringBackButton);
	            enteringTitle.fromTo(OPACITY, 0.01, 1, true);
	            enteringNavbarItems.fromTo(OPACITY, 0.01, 1, true);
	            // set properties depending on direction
	            if (backDirection) {
	                // entering navbar, back direction
	                enteringTitle.fromTo(TRANSLATEX, OFF_LEFT, CENTER, true);
	                if (enteringView.enableBack()) {
	                    // back direction, entering page has a back button
	                    enteringBackButton
	                        .before.addClass(SHOW_BACK_BTN_CSS)
	                        .fromTo(OPACITY, 0.01, 1, true);
	                }
	            }
	            else {
	                // entering navbar, forward direction
	                enteringTitle.fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
	                if (leavingHasNavbar) {
	                    // entering navbar, forward direction, and there's a leaving navbar
	                    // should just fade in, no sliding
	                    enteringNavbarBg
	                        .before.clearStyles([TRANSLATEX])
	                        .fromTo(OPACITY, 0.01, 1, true);
	                }
	                else {
	                    // entering navbar, forward direction, and there's no leaving navbar
	                    // should just slide in, no fading in
	                    enteringNavbarBg
	                        .before.clearStyles([OPACITY])
	                        .fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
	                }
	                if (enteringView.enableBack()) {
	                    // forward direction, entering page has a back button
	                    enteringBackButton
	                        .before.addClass(SHOW_BACK_BTN_CSS)
	                        .fromTo(OPACITY, 0.01, 1, true);
	                    var enteringBackBtnText = new animation_1.Animation(enteringView.backBtnTextRef());
	                    enteringBackBtnText.fromTo(TRANSLATEX, '100px', '0px');
	                    enteringNavBar.add(enteringBackBtnText);
	                }
	                else {
	                    enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	                }
	            }
	        }
	        // setup leaving view
	        if (leavingView) {
	            // leaving content
	            var leavingContent = new animation_1.Animation(leavingView.contentRef());
	            leavingContent.element(leavingView.toolbarRefs());
	            this.add(leavingContent);
	            if (backDirection) {
	                // leaving content, back direction
	                leavingContent
	                    .before.clearStyles([OPACITY])
	                    .fromTo(TRANSLATEX, CENTER, '100%');
	            }
	            else {
	                // leaving content, forward direction
	                leavingContent
	                    .fromTo(TRANSLATEX, CENTER, OFF_LEFT)
	                    .fromTo(OPACITY, 1, OFF_OPACITY);
	            }
	            if (leavingHasNavbar) {
	                // leaving page has a navbar
	                var leavingNavBar = new animation_1.Animation(leavingView.navbarRef());
	                var leavingBackButton = new animation_1.Animation(leavingView.backBtnRef());
	                var leavingTitle = new animation_1.Animation(leavingView.titleRef());
	                var leavingNavbarItems = new animation_1.Animation(leavingView.navbarItemRefs());
	                var leavingNavbarBg = new animation_1.Animation(leavingView.navbarBgRef());
	                leavingNavBar
	                    .add(leavingBackButton)
	                    .add(leavingTitle)
	                    .add(leavingNavbarItems)
	                    .add(leavingNavbarBg);
	                this.add(leavingNavBar);
	                // fade out leaving navbar items
	                leavingBackButton.fromTo(OPACITY, 0.99, 0);
	                leavingTitle.fromTo(OPACITY, 0.99, 0);
	                leavingNavbarItems.fromTo(OPACITY, 0.99, 0);
	                if (backDirection) {
	                    // leaving navbar, back direction
	                    leavingTitle.fromTo(TRANSLATEX, CENTER, '100%');
	                    if (enteringHasNavbar) {
	                        // leaving navbar, back direction, and there's an entering navbar
	                        // should just fade out, no sliding
	                        leavingNavbarBg
	                            .before.clearStyles([TRANSLATEX])
	                            .fromTo('opacity', 0.99, 0);
	                    }
	                    else {
	                        // leaving navbar, back direction, and there's no entering navbar
	                        // should just slide out, no fading out
	                        leavingNavbarBg
	                            .before.clearStyles([OPACITY])
	                            .fromTo(TRANSLATEX, CENTER, '100%');
	                    }
	                    var leavingBackBtnText = new animation_1.Animation(leavingView.backBtnTextRef());
	                    leavingBackBtnText.fromTo(TRANSLATEX, CENTER, (300) + 'px');
	                    leavingNavBar.add(leavingBackBtnText);
	                }
	                else {
	                    // leaving navbar, forward direction
	                    leavingTitle.fromTo(TRANSLATEX, CENTER, OFF_LEFT);
	                }
	            }
	        }
	    }
	    return IOSTransition;
	}(page_transition_1.PageTransition));
	page_transition_1.PageTransition.register('ios-transition', IOSTransition);


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(152);
	var page_transition_1 = __webpack_require__(219);
	var TRANSLATEY = 'translateY';
	var OFF_BOTTOM = '40px';
	var CENTER = '0px';
	var SHOW_BACK_BTN_CSS = 'show-back-button';
	var MDTransition = (function (_super) {
	    __extends(MDTransition, _super);
	    function MDTransition(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        // what direction is the transition going
	        var backDirection = (opts.direction === 'back');
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        if (backDirection) {
	            this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            this.enteringPage.before.clearStyles([TRANSLATEY]);
	        }
	        else {
	            this.duration(opts.duration || 280).easing('cubic-bezier(0.36,0.66,0.04,1)');
	            this.enteringPage
	                .fromTo(TRANSLATEY, OFF_BOTTOM, CENTER, true)
	                .fromTo('opacity', 0.01, 1, true);
	        }
	        if (enteringHasNavbar) {
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	            var enteringBackButton = new animation_1.Animation(enteringView.backBtnRef());
	            this.add(enteringBackButton);
	            if (enteringView.enableBack()) {
	                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
	            }
	            else {
	                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	            }
	        }
	        // setup leaving view
	        if (leavingView && backDirection) {
	            // leaving content
	            this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            var leavingPage = new animation_1.Animation(leavingView.pageRef());
	            this.add(leavingPage.fromTo(TRANSLATEY, CENTER, OFF_BOTTOM).fromTo('opacity', 0.99, 0));
	        }
	    }
	    return MDTransition;
	}(page_transition_1.PageTransition));
	page_transition_1.PageTransition.register('md-transition', MDTransition);


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(152);
	var page_transition_1 = __webpack_require__(219);
	var SHOW_BACK_BTN_CSS = 'show-back-button';
	var SCALE_SMALL = .95;
	var WPTransition = (function (_super) {
	    __extends(WPTransition, _super);
	    function WPTransition(enteringView, leavingView, opts) {
	        _super.call(this, enteringView, leavingView, opts);
	        // what direction is the transition going
	        var backDirection = (opts.direction === 'back');
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        if (backDirection) {
	            this.duration(opts.duration || 120).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            this.enteringPage.before.clearStyles(['scale']);
	        }
	        else {
	            this.duration(opts.duration || 280).easing('cubic-bezier(0,0 0.05,1)');
	            this.enteringPage
	                .fromTo('scale', SCALE_SMALL, 1, true)
	                .fromTo('opacity', 0.01, 1, true);
	        }
	        if (enteringHasNavbar) {
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	            var enteringBackButton = new animation_1.Animation(enteringView.backBtnRef());
	            this.add(enteringBackButton);
	            if (enteringView.enableBack()) {
	                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
	            }
	            else {
	                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	            }
	        }
	        // setup leaving view
	        if (leavingView && backDirection) {
	            // leaving content
	            this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            var leavingPage = new animation_1.Animation(leavingView.pageRef());
	            this.add(leavingPage.fromTo('scale', 1, SCALE_SMALL).fromTo('opacity', 0.99, 0));
	        }
	    }
	    return WPTransition;
	}(page_transition_1.PageTransition));
	page_transition_1.PageTransition.register('wp-transition', WPTransition);


/***/ }
/******/ ]);
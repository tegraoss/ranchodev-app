System.register('ionic-angular/components/slides/swiper-widget',[],function(_export){ /**
 * Swiper 3.1.2
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 *
 * http://www.idangero.us/swiper/
 *
 * Copyright 2015, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: August 22, 2015
 */'use strict';var $,Dom7,swiperDomPlugins,i,domLib;_export('Swiper',Swiper); /*===========================
Swiper
===========================*/function Swiper(container,params){if(!(this instanceof Swiper))return new Swiper(container,params);var defaults={direction:'horizontal',touchEventsTarget:'container',initialSlide:0,speed:300, // autoplay
autoplay:false,autoplayDisableOnInteraction:true, // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
iOSEdgeSwipeDetection:false,iOSEdgeSwipeThreshold:20, // Free mode
freeMode:false,freeModeMomentum:true,freeModeMomentumRatio:1,freeModeMomentumBounce:true,freeModeMomentumBounceRatio:1,freeModeSticky:false, // Set wrapper width
setWrapperSize:false, // Virtual Translate
virtualTranslate:false, // Effects
effect:'slide',coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:true},cube:{slideShadows:true,shadow:true,shadowOffset:20,shadowScale:0.94},fade:{crossFade:false}, // Parallax
parallax:false, // Scrollbar
scrollbar:null,scrollbarHide:true, // Keyboard Mousewheel
keyboardControl:false,mousewheelControl:false,mousewheelReleaseOnEdges:false,mousewheelInvert:false,mousewheelForceToAxis:false,mousewheelSensitivity:1, // Hash Navigation
hashnav:false, // Slides grid
spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:'column',slidesPerGroup:1,centeredSlides:false,slidesOffsetBefore:0,slidesOffsetAfter:0, // Round length
roundLengths:false, // Touches
touchRatio:1,touchAngle:45,simulateTouch:true,shortSwipes:true,longSwipes:true,longSwipesRatio:0.5,longSwipesMs:300,followFinger:true,onlyExternal:false,threshold:0,touchMoveStopPropagation:true, // Pagination
pagination:null,paginationElement:'span',paginationClickable:false,paginationHide:false,paginationBulletRender:null, // Resistance
resistance:true,resistanceRatio:0.85, // Next/prev buttons
nextButton:null,prevButton:null, // Progress
watchSlidesProgress:false,watchSlidesVisibility:false, // Cursor
grabCursor:false, // Clicks
preventClicks:true,preventClicksPropagation:true,slideToClickedSlide:false, // Lazy Loading
lazyLoading:false,lazyLoadingInPrevNext:false,lazyLoadingOnTransitionStart:false, // Images
preloadImages:true,updateOnImagesReady:true, // loop
loop:false,loopAdditionalSlides:0,loopedSlides:null, // Control
control:undefined,controlInverse:false,controlBy:'slide', // Swiping/no swiping
allowSwipeToPrev:true,allowSwipeToNext:true,swipeHandler:null,noSwiping:true,noSwipingClass:'swiper-no-swiping', // NS
slideClass:'swiper-slide',slideActiveClass:'swiper-slide-active',slideVisibleClass:'swiper-slide-visible',slideDuplicateClass:'swiper-slide-duplicate',slideNextClass:'swiper-slide-next',slidePrevClass:'swiper-slide-prev',wrapperClass:'swiper-wrapper',bulletClass:'swiper-pagination-bullet',bulletActiveClass:'swiper-pagination-bullet-active',buttonDisabledClass:'swiper-button-disabled',paginationHiddenClass:'swiper-pagination-hidden', // Observer
observer:false,observeParents:false, // Accessibility
a11y:false,prevSlideMessage:'Previous slide',nextSlideMessage:'Next slide',firstSlideMessage:'This is the first slide',lastSlideMessage:'This is the last slide',paginationBulletMessage:'Go to slide {{index}}', // Callbacks
runCallbacksOnInit:true};var initialVirtualTranslate=params && params.virtualTranslate;params = params || {};for(var def in defaults) {if(typeof params[def] === 'undefined'){params[def] = defaults[def];}else if(typeof params[def] === 'object'){for(var deepDef in defaults[def]) {if(typeof params[def][deepDef] === 'undefined'){params[def][deepDef] = defaults[def][deepDef];}}}} // Swiper
var s=this; // Version
s.version = '3.1.0'; // Params
s.params = params; // Classname
s.classNames = []; /*=========================
      Dom Library and plugins
      ===========================*/if(typeof $ !== 'undefined' && typeof Dom7 !== 'undefined'){$ = Dom7;}if(typeof $ === 'undefined'){if(typeof Dom7 === 'undefined'){$ = window.Dom7 || window.Zepto || window.jQuery;}else {$ = Dom7;}if(!$)return;} // Export it to Swiper instance
s.$ = $; /*=========================
      Preparation - Define Container, Wrapper and Pagination
      ===========================*/s.container = $(container);if(s.container.length === 0)return;if(s.container.length > 1){s.container.each(function(){new Swiper(this,params);});return;} // Save instance in container HTML Element and in data
s.container[0].swiper = s;s.container.data('swiper',s);s.classNames.push('swiper-container-' + s.params.direction);if(s.params.freeMode){s.classNames.push('swiper-container-free-mode');}if(!s.support.flexbox){s.classNames.push('swiper-container-no-flexbox');s.params.slidesPerColumn = 1;} // Enable slides progress when required
if(s.params.parallax || s.params.watchSlidesVisibility){s.params.watchSlidesProgress = true;} // Coverflow / 3D
if(['cube','coverflow'].indexOf(s.params.effect) >= 0){if(s.support.transforms3d){s.params.watchSlidesProgress = true;s.classNames.push('swiper-container-3d');}else {s.params.effect = 'slide';}}if(s.params.effect !== 'slide'){s.classNames.push('swiper-container-' + s.params.effect);}if(s.params.effect === 'cube'){s.params.resistanceRatio = 0;s.params.slidesPerView = 1;s.params.slidesPerColumn = 1;s.params.slidesPerGroup = 1;s.params.centeredSlides = false;s.params.spaceBetween = 0;s.params.virtualTranslate = true;s.params.setWrapperSize = false;}if(s.params.effect === 'fade'){s.params.slidesPerView = 1;s.params.slidesPerColumn = 1;s.params.slidesPerGroup = 1;s.params.watchSlidesProgress = true;s.params.spaceBetween = 0;if(typeof initialVirtualTranslate === 'undefined'){s.params.virtualTranslate = true;}} // Grab Cursor
if(s.params.grabCursor && s.support.touch){s.params.grabCursor = false;} // Wrapper
s.wrapper = s.container.children('.' + s.params.wrapperClass); // Pagination
if(s.params.pagination){s.paginationContainer = $(s.params.pagination);if(s.params.paginationClickable){s.paginationContainer.addClass('swiper-pagination-clickable');}} // Is Horizontal
function isH(){return s.params.direction === 'horizontal';} // RTL
s.rtl = isH() && (s.container[0].dir.toLowerCase() === 'rtl' || s.container.css('direction') === 'rtl');if(s.rtl){s.classNames.push('swiper-container-rtl');} // Wrong RTL support
if(s.rtl){s.wrongRTL = s.wrapper.css('display') === '-webkit-box';} // Columns
if(s.params.slidesPerColumn > 1){s.classNames.push('swiper-container-multirow');} // Check for Android
if(s.device.android){s.classNames.push('swiper-container-android');} // Add classes
s.container.addClass(s.classNames.join(' ')); // Translate
s.translate = 0; // Progress
s.progress = 0; // Velocity
s.velocity = 0; /*=========================
      Locks, unlocks
      ===========================*/s.lockSwipeToNext = function(){s.params.allowSwipeToNext = false;};s.lockSwipeToPrev = function(){s.params.allowSwipeToPrev = false;};s.lockSwipes = function(){s.params.allowSwipeToNext = s.params.allowSwipeToPrev = false;};s.unlockSwipeToNext = function(){s.params.allowSwipeToNext = true;};s.unlockSwipeToPrev = function(){s.params.allowSwipeToPrev = true;};s.unlockSwipes = function(){s.params.allowSwipeToNext = s.params.allowSwipeToPrev = true;}; /*=========================
      Round helper
      ===========================*/function round(a){return Math.floor(a);} /*=========================
      Set grab cursor
      ===========================*/if(s.params.grabCursor){s.container[0].style.cursor = 'move';s.container[0].style.cursor = '-webkit-grab';s.container[0].style.cursor = '-moz-grab';s.container[0].style.cursor = 'grab';} /*=========================
      Update on Images Ready
      ===========================*/s.imagesToLoad = [];s.imagesLoaded = 0;s.loadImage = function(imgElement,src,checkForComplete,callback){var image;function onReady(){if(callback)callback();}if(!imgElement.complete || !checkForComplete){if(src){image = new window.Image();image.onload = onReady;image.onerror = onReady;image.src = src;}else {onReady();}}else {onReady();}};s.preloadImages = function(){s.imagesToLoad = s.container.find('img');function _onReady(){if(typeof s === 'undefined' || s === null)return;if(s.imagesLoaded !== undefined)s.imagesLoaded++;if(s.imagesLoaded === s.imagesToLoad.length){if(s.params.updateOnImagesReady)s.update();s.emit('onImagesReady',s);}}for(var i=0;i < s.imagesToLoad.length;i++) {s.loadImage(s.imagesToLoad[i],s.imagesToLoad[i].currentSrc || s.imagesToLoad[i].getAttribute('src'),true,_onReady);}}; /*=========================
      Autoplay
      ===========================*/s.autoplayTimeoutId = undefined;s.autoplaying = false;s.autoplayPaused = false;function autoplay(){s.autoplayTimeoutId = setTimeout(function(){if(s.params.loop){s.fixLoop();s._slideNext();}else {if(!s.isEnd){s._slideNext();}else {if(!params.autoplayStopOnLast){s._slideTo(0);}else {s.stopAutoplay();}}}},s.params.autoplay);}s.startAutoplay = function(){if(typeof s.autoplayTimeoutId !== 'undefined')return false;if(!s.params.autoplay)return false;if(s.autoplaying)return false;s.autoplaying = true;s.emit('onAutoplayStart',s);autoplay();};s.stopAutoplay = function(internal){if(!s.autoplayTimeoutId)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplaying = false;s.autoplayTimeoutId = undefined;s.emit('onAutoplayStop',s);};s.pauseAutoplay = function(speed){if(s.autoplayPaused)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplayPaused = true;if(speed === 0){s.autoplayPaused = false;autoplay();}else {s.wrapper.transitionEnd(function(){if(!s)return;s.autoplayPaused = false;if(!s.autoplaying){s.stopAutoplay();}else {autoplay();}});}}; /*=========================
      Min/Max Translate
      ===========================*/s.minTranslate = function(){return -s.snapGrid[0];};s.maxTranslate = function(){return -s.snapGrid[s.snapGrid.length - 1];}; /*=========================
      Slider/slides sizes
      ===========================*/s.updateContainerSize = function(){var width,height;if(typeof s.params.width !== 'undefined'){width = s.params.width;}else {width = s.container[0].clientWidth;}if(typeof s.params.height !== 'undefined'){height = s.params.height;}else {height = s.container[0].clientHeight;}if(width === 0 && isH() || height === 0 && !isH()){return;} //Subtract paddings
width = width - parseInt(s.container.css('padding-left'),10) - parseInt(s.container.css('padding-right'),10);height = height - parseInt(s.container.css('padding-top'),10) - parseInt(s.container.css('padding-bottom'),10); // Store values
s.width = width;s.height = height;s.size = isH()?s.width:s.height;};s.updateSlidesSize = function(){s.slides = s.wrapper.children('.' + s.params.slideClass);s.snapGrid = [];s.slidesGrid = [];s.slidesSizesGrid = [];var spaceBetween=s.params.spaceBetween,slidePosition=-s.params.slidesOffsetBefore,i,prevSlideSize=0,index=0;if(typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0){spaceBetween = parseFloat(spaceBetween.replace('%','')) / 100 * s.size;}s.virtualSize = -spaceBetween; // reset margins
if(s.rtl)s.slides.css({marginLeft:'',marginTop:''});else s.slides.css({marginRight:'',marginBottom:''});var slidesNumberEvenToRows;if(s.params.slidesPerColumn > 1){if(Math.floor(s.slides.length / s.params.slidesPerColumn) === s.slides.length / s.params.slidesPerColumn){slidesNumberEvenToRows = s.slides.length;}else {slidesNumberEvenToRows = Math.ceil(s.slides.length / s.params.slidesPerColumn) * s.params.slidesPerColumn;}} // Calc slides
var slideSize;var slidesPerColumn=s.params.slidesPerColumn;var slidesPerRow=slidesNumberEvenToRows / slidesPerColumn;var numFullColumns=slidesPerRow - (s.params.slidesPerColumn * slidesPerRow - s.slides.length);for(i = 0;i < s.slides.length;i++) {slideSize = 0;var slide=s.slides.eq(i);if(s.params.slidesPerColumn > 1){ // Set slides order
var newSlideOrderIndex;var column,row;if(s.params.slidesPerColumnFill === 'column'){column = Math.floor(i / slidesPerColumn);row = i - column * slidesPerColumn;if(column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1){if(++row >= slidesPerColumn){row = 0;column++;}}newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;slide.css({'-webkit-box-ordinal-group':newSlideOrderIndex,'-moz-box-ordinal-group':newSlideOrderIndex,'-ms-flex-order':newSlideOrderIndex,'-webkit-order':newSlideOrderIndex,'order':newSlideOrderIndex});}else {row = Math.floor(i / slidesPerRow);column = i - row * slidesPerRow;}slide.css({'margin-top':row !== 0 && s.params.spaceBetween && s.params.spaceBetween + 'px'}).attr('data-swiper-column',column).attr('data-swiper-row',row);}if(slide.css('display') === 'none')continue;if(s.params.slidesPerView === 'auto'){slideSize = isH()?slide.outerWidth(true):slide.outerHeight(true);if(s.params.roundLengths)slideSize = round(slideSize);}else {slideSize = (s.size - (s.params.slidesPerView - 1) * spaceBetween) / s.params.slidesPerView;if(s.params.roundLengths)slideSize = round(slideSize);if(isH()){s.slides[i].style.width = slideSize + 'px';}else {s.slides[i].style.height = slideSize + 'px';}}s.slides[i].swiperSlideSize = slideSize;s.slidesSizesGrid.push(slideSize);if(s.params.centeredSlides){slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;if(i === 0)slidePosition = slidePosition - s.size / 2 - spaceBetween;if(Math.abs(slidePosition) < 1 / 1000)slidePosition = 0;if(index % s.params.slidesPerGroup === 0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);}else {if(index % s.params.slidesPerGroup === 0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);slidePosition = slidePosition + slideSize + spaceBetween;}s.virtualSize += slideSize + spaceBetween;prevSlideSize = slideSize;index++;}s.virtualSize = Math.max(s.virtualSize,s.size) + s.params.slidesOffsetAfter;var newSlidesGrid;if(s.rtl && s.wrongRTL && (s.params.effect === 'slide' || s.params.effect === 'coverflow')){s.wrapper.css({width:s.virtualSize + s.params.spaceBetween + 'px'});}if(!s.support.flexbox || s.params.setWrapperSize){if(isH())s.wrapper.css({width:s.virtualSize + s.params.spaceBetween + 'px'});else s.wrapper.css({height:s.virtualSize + s.params.spaceBetween + 'px'});}if(s.params.slidesPerColumn > 1){s.virtualSize = (slideSize + s.params.spaceBetween) * slidesNumberEvenToRows;s.virtualSize = Math.ceil(s.virtualSize / s.params.slidesPerColumn) - s.params.spaceBetween;s.wrapper.css({width:s.virtualSize + s.params.spaceBetween + 'px'});if(s.params.centeredSlides){newSlidesGrid = [];for(i = 0;i < s.snapGrid.length;i++) {if(s.snapGrid[i] < s.virtualSize + s.snapGrid[0])newSlidesGrid.push(s.snapGrid[i]);}s.snapGrid = newSlidesGrid;}} // Remove last grid elements depending on width
if(!s.params.centeredSlides){newSlidesGrid = [];for(i = 0;i < s.snapGrid.length;i++) {if(s.snapGrid[i] <= s.virtualSize - s.size){newSlidesGrid.push(s.snapGrid[i]);}}s.snapGrid = newSlidesGrid;if(Math.floor(s.virtualSize - s.size) > Math.floor(s.snapGrid[s.snapGrid.length - 1])){s.snapGrid.push(s.virtualSize - s.size);}}if(s.snapGrid.length === 0)s.snapGrid = [0];if(s.params.spaceBetween !== 0){if(isH()){if(s.rtl)s.slides.css({marginLeft:spaceBetween + 'px'});else s.slides.css({marginRight:spaceBetween + 'px'});}else s.slides.css({marginBottom:spaceBetween + 'px'});}if(s.params.watchSlidesProgress){s.updateSlidesOffset();}};s.updateSlidesOffset = function(){for(var i=0;i < s.slides.length;i++) {s.slides[i].swiperSlideOffset = isH()?s.slides[i].offsetLeft:s.slides[i].offsetTop;}}; /*=========================
      Slider/slides progress
      ===========================*/s.updateSlidesProgress = function(translate){if(typeof translate === 'undefined'){translate = s.translate || 0;}if(s.slides.length === 0)return;if(typeof s.slides[0].swiperSlideOffset === 'undefined')s.updateSlidesOffset();var offsetCenter=-translate;if(s.rtl)offsetCenter = translate; // Visible Slides
var containerBox=s.container[0].getBoundingClientRect();var sideBefore=isH()?'left':'top';var sideAfter=isH()?'right':'bottom';s.slides.removeClass(s.params.slideVisibleClass);for(var i=0;i < s.slides.length;i++) {var slide=s.slides[i];var slideProgress=(offsetCenter - slide.swiperSlideOffset) / (slide.swiperSlideSize + s.params.spaceBetween);if(s.params.watchSlidesVisibility){var slideBefore=-(offsetCenter - slide.swiperSlideOffset);var slideAfter=slideBefore + s.slidesSizesGrid[i];var isVisible=slideBefore >= 0 && slideBefore < s.size || slideAfter > 0 && slideAfter <= s.size || slideBefore <= 0 && slideAfter >= s.size;if(isVisible){s.slides.eq(i).addClass(s.params.slideVisibleClass);}}slide.progress = s.rtl?-slideProgress:slideProgress;}};s.updateProgress = function(translate){if(typeof translate === 'undefined'){translate = s.translate || 0;}var translatesDiff=s.maxTranslate() - s.minTranslate();if(translatesDiff === 0){s.progress = 0;s.isBeginning = s.isEnd = true;}else {s.progress = (translate - s.minTranslate()) / translatesDiff;s.isBeginning = s.progress <= 0;s.isEnd = s.progress >= 1;}if(s.isBeginning)s.emit('onReachBeginning',s);if(s.isEnd)s.emit('onReachEnd',s);if(s.params.watchSlidesProgress)s.updateSlidesProgress(translate);s.emit('onProgress',s,s.progress);};s.updateActiveIndex = function(){var translate=s.rtl?s.translate:-s.translate;var newActiveIndex,i,snapIndex;for(i = 0;i < s.slidesGrid.length;i++) {if(typeof s.slidesGrid[i + 1] !== 'undefined'){if(translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1] - (s.slidesGrid[i + 1] - s.slidesGrid[i]) / 2){newActiveIndex = i;}else if(translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1]){newActiveIndex = i + 1;}}else {if(translate >= s.slidesGrid[i]){newActiveIndex = i;}}} // Normalize slideIndex
if(newActiveIndex < 0 || typeof newActiveIndex === 'undefined')newActiveIndex = 0; // for (i = 0; i < s.slidesGrid.length; i++) {
// if (- translate >= s.slidesGrid[i]) {
// newActiveIndex = i;
// }
// }
snapIndex = Math.floor(newActiveIndex / s.params.slidesPerGroup);if(snapIndex >= s.snapGrid.length)snapIndex = s.snapGrid.length - 1;if(newActiveIndex === s.activeIndex){return;}s.snapIndex = snapIndex;s.previousIndex = s.activeIndex;s.activeIndex = newActiveIndex;s.updateClasses();}; /*=========================
      Classes
      ===========================*/s.updateClasses = function(){s.slides.removeClass(s.params.slideActiveClass + ' ' + s.params.slideNextClass + ' ' + s.params.slidePrevClass);var activeSlide=s.slides.eq(s.activeIndex); // Active classes
activeSlide.addClass(s.params.slideActiveClass);activeSlide.next('.' + s.params.slideClass).addClass(s.params.slideNextClass);activeSlide.prev('.' + s.params.slideClass).addClass(s.params.slidePrevClass); // Pagination
if(s.bullets && s.bullets.length > 0){s.bullets.removeClass(s.params.bulletActiveClass);var bulletIndex;if(s.params.loop){bulletIndex = Math.ceil(s.activeIndex - s.loopedSlides) / s.params.slidesPerGroup;if(bulletIndex > s.slides.length - 1 - s.loopedSlides * 2){bulletIndex = bulletIndex - (s.slides.length - s.loopedSlides * 2);}if(bulletIndex > s.bullets.length - 1)bulletIndex = bulletIndex - s.bullets.length;}else {if(typeof s.snapIndex !== 'undefined'){bulletIndex = s.snapIndex;}else {bulletIndex = s.activeIndex || 0;}}if(s.paginationContainer.length > 1){s.bullets.each(function(){if($(this).index() === bulletIndex)$(this).addClass(s.params.bulletActiveClass);});}else {s.bullets.eq(bulletIndex).addClass(s.params.bulletActiveClass);}} // Next/active buttons
if(!s.params.loop){if(s.params.prevButton){if(s.isBeginning){$(s.params.prevButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.disable($(s.params.prevButton));}else {$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.enable($(s.params.prevButton));}}if(s.params.nextButton){if(s.isEnd){$(s.params.nextButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.disable($(s.params.nextButton));}else {$(s.params.nextButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.enable($(s.params.nextButton));}}}}; /*=========================
      Pagination
      ===========================*/s.updatePagination = function(){if(!s.params.pagination)return;if(s.paginationContainer && s.paginationContainer.length > 0){var bulletsHTML='';var numberOfBullets=s.params.loop?Math.ceil((s.slides.length - s.loopedSlides * 2) / s.params.slidesPerGroup):s.snapGrid.length;for(var i=0;i < numberOfBullets;i++) {if(s.params.paginationBulletRender){bulletsHTML += s.params.paginationBulletRender(i,s.params.bulletClass);}else {bulletsHTML += '<' + s.params.paginationElement + ' class="' + s.params.bulletClass + '"></' + s.params.paginationElement + '>';}}s.paginationContainer.html(bulletsHTML);s.bullets = s.paginationContainer.find('.' + s.params.bulletClass);if(s.params.paginationClickable && s.params.a11y && s.a11y){s.a11y.initPagination();}}}; /*=========================
      Common update method
      ===========================*/s.update = function(updateTranslate){s.updateContainerSize();s.updateSlidesSize();s.updateProgress();s.updatePagination();s.updateClasses();if(s.params.scrollbar && s.scrollbar){s.scrollbar.set();}function forceSetTranslate(){newTranslate = Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}if(updateTranslate){var translated,newTranslate;if(s.controller && s.controller.spline){s.controller.spline = undefined;}if(s.params.freeMode){forceSetTranslate();}else {if((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides){translated = s.slideTo(s.slides.length - 1,0,false,true);}else {translated = s.slideTo(s.activeIndex,0,false,true);}if(!translated){forceSetTranslate();}}}}; /*=========================
      Resize Handler
      ===========================*/s.onResize = function(forceUpdatePagination){ // Disable locks on resize
var allowSwipeToPrev=s.params.allowSwipeToPrev;var allowSwipeToNext=s.params.allowSwipeToNext;s.params.allowSwipeToPrev = s.params.allowSwipeToNext = true;s.updateContainerSize();s.updateSlidesSize();if(s.params.slidesPerView === 'auto' || s.params.freeMode || forceUpdatePagination)s.updatePagination();if(s.params.scrollbar && s.scrollbar){s.scrollbar.set();}if(s.controller && s.controller.spline){s.controller.spline = undefined;}if(s.params.freeMode){var newTranslate=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}else {s.updateClasses();if((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides){s.slideTo(s.slides.length - 1,0,false,true);}else {s.slideTo(s.activeIndex,0,false,true);}} // Return locks after resize
s.params.allowSwipeToPrev = allowSwipeToPrev;s.params.allowSwipeToNext = allowSwipeToNext;}; /*=========================
      Events
      ===========================*/ //Define Touch Events
var desktopEvents=['mousedown','mousemove','mouseup'];if(window.navigator.pointerEnabled)desktopEvents = ['pointerdown','pointermove','pointerup'];else if(window.navigator.msPointerEnabled)desktopEvents = ['MSPointerDown','MSPointerMove','MSPointerUp'];s.touchEvents = {start:s.support.touch || !s.params.simulateTouch?'touchstart':desktopEvents[0],move:s.support.touch || !s.params.simulateTouch?'touchmove':desktopEvents[1],end:s.support.touch || !s.params.simulateTouch?'touchend':desktopEvents[2]}; // WP8 Touch Events Fix
if(window.navigator.pointerEnabled || window.navigator.msPointerEnabled){(s.params.touchEventsTarget === 'container'?s.container:s.wrapper).addClass('swiper-wp8-' + s.params.direction);} // Attach/detach events
s.initEvents = function(detach){console.debug('swiper initEvents',detach?'detach':'attach');var actionDom=detach?'off':'on';var action=detach?'removeEventListener':'addEventListener';var touchEventsTarget=s.params.touchEventsTarget === 'container'?s.container[0]:s.wrapper[0];var target=s.support.touch?touchEventsTarget:document;var moveCapture=s.params.nested?true:false; //Touch Events
if(s.browser.ie){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);target[action](s.touchEvents.move,s.onTouchMove,moveCapture);target[action](s.touchEvents.end,s.onTouchEnd,false);}else {if(s.support.touch){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);touchEventsTarget[action](s.touchEvents.move,s.onTouchMove,moveCapture);touchEventsTarget[action](s.touchEvents.end,s.onTouchEnd,false);}if(params.simulateTouch && !s.device.ios && !s.device.android){touchEventsTarget[action]('mousedown',s.onTouchStart,false);document[action]('mousemove',s.onTouchMove,moveCapture);document[action]('mouseup',s.onTouchEnd,false);}}window[action]('resize',s.onResize); // Next, Prev, Index
if(s.params.nextButton){$(s.params.nextButton)[actionDom]('click',s.onClickNext);if(s.params.a11y && s.a11y)$(s.params.nextButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.prevButton){$(s.params.prevButton)[actionDom]('click',s.onClickPrev);if(s.params.a11y && s.a11y)$(s.params.prevButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.pagination && s.params.paginationClickable){$(s.paginationContainer)[actionDom]('click','.' + s.params.bulletClass,s.onClickIndex);if(s.params.a11y && s.a11y)$(s.paginationContainer)[actionDom]('keydown','.' + s.params.bulletClass,s.a11y.onEnterKey);} // Prevent Links Clicks
if(s.params.preventClicks || s.params.preventClicksPropagation)touchEventsTarget[action]('click',s.preventClicks,true);};s.attachEvents = function(detach){s.initEvents();};s.detachEvents = function(){s.initEvents(true);}; /*=========================
      Handle Clicks
      ===========================*/ // Prevent Clicks
s.allowClick = true;s.preventClicks = function(e){if(!s.allowClick){if(s.params.preventClicks)e.preventDefault();if(s.params.preventClicksPropagation && s.animating){e.stopPropagation();e.stopImmediatePropagation();}}}; // Clicks
s.onClickNext = function(e){e.preventDefault();if(s.isEnd && !s.params.loop)return;s.slideNext();};s.onClickPrev = function(e){e.preventDefault();if(s.isBeginning && !s.params.loop)return;s.slidePrev();};s.onClickIndex = function(e){e.preventDefault();var index=$(this).index() * s.params.slidesPerGroup;if(s.params.loop)index = index + s.loopedSlides;s.slideTo(index);}; /*=========================
      Handle Touches
      ===========================*/function findElementInEvent(e,selector){var el=$(e.target);if(!el.is(selector)){if(typeof selector === 'string'){el = el.parents(selector);}else if(selector.nodeType){var found;el.parents().each(function(index,_el){if(_el === selector)found = selector;});if(!found)return undefined;else return selector;}}if(el.length === 0){return undefined;}return el[0];}s.updateClickedSlide = function(e){var slide=findElementInEvent(e,'.' + s.params.slideClass);var slideFound=false;if(slide){for(var i=0;i < s.slides.length;i++) {if(s.slides[i] === slide)slideFound = true;}}if(slide && slideFound){s.clickedSlide = slide;s.clickedIndex = $(slide).index();}else {s.clickedSlide = undefined;s.clickedIndex = undefined;return;}if(s.params.slideToClickedSlide && s.clickedIndex !== undefined && s.clickedIndex !== s.activeIndex){var slideToIndex=s.clickedIndex,realIndex;if(s.params.loop){realIndex = $(s.clickedSlide).attr('data-swiper-slide-index');if(slideToIndex > s.slides.length - s.params.slidesPerView){s.fixLoop();slideToIndex = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]').eq(0).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else if(slideToIndex < s.params.slidesPerView - 1){s.fixLoop();var duplicatedSlides=s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]');slideToIndex = duplicatedSlides.eq(duplicatedSlides.length - 1).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else {s.slideTo(slideToIndex);}}else {s.slideTo(slideToIndex);}}};var isTouched,isMoved,touchStartTime,isScrolling,currentTranslate,startTranslate,allowThresholdMove, // Form elements to match
formElements='input, select, textarea, button', // Last click time
lastClickTime=Date.now(),clickTimeout, //Velocities
velocities=[],allowMomentumBounce; // Animating Flag
s.animating = false; // Touches information
s.touches = {startX:0,startY:0,currentX:0,currentY:0,diff:0}; // Touch handlers
var isTouchEvent,startMoving;s.onTouchStart = function(e){if(e.originalEvent)e = e.originalEvent;isTouchEvent = e.type === 'touchstart';if(!isTouchEvent && 'which' in e && e.which === 3)return;if(s.params.noSwiping && findElementInEvent(e,'.' + s.params.noSwipingClass)){s.allowClick = true;return;}if(s.params.swipeHandler){if(!findElementInEvent(e,s.params.swipeHandler))return;}var startX=s.touches.currentX = e.type === 'touchstart'?e.targetTouches[0].pageX:e.pageX;var startY=s.touches.currentY = e.type === 'touchstart'?e.targetTouches[0].pageY:e.pageY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
if(s.device.ios && s.params.iOSEdgeSwipeDetection && startX <= s.params.iOSEdgeSwipeThreshold){return;}isTouched = true;isMoved = false;isScrolling = undefined;startMoving = undefined;s.touches.startX = startX;s.touches.startY = startY;touchStartTime = Date.now();s.allowClick = true;s.updateContainerSize();s.swipeDirection = undefined;if(s.params.threshold > 0)allowThresholdMove = false;if(e.type !== 'touchstart'){var preventDefault=true;if($(e.target).is(formElements))preventDefault = false;if(document.activeElement && $(document.activeElement).is(formElements)){document.activeElement.blur();}if(preventDefault){e.preventDefault();}}s.emit('onTouchStart',s,e);};s.onTouchMove = function(e){if(e.originalEvent)e = e.originalEvent;if(isTouchEvent && e.type === 'mousemove')return;if(e.preventedByNestedSwiper)return;if(s.params.onlyExternal){ // isMoved = true;
s.allowClick = false;if(isTouched){s.touches.startX = s.touches.currentX = e.type === 'touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.startY = s.touches.currentY = e.type === 'touchmove'?e.targetTouches[0].pageY:e.pageY;touchStartTime = Date.now();}return;}if(isTouchEvent && document.activeElement){if(e.target === document.activeElement && $(e.target).is(formElements)){isMoved = true;s.allowClick = false;return;}}s.emit('onTouchMove',s,e);if(e.targetTouches && e.targetTouches.length > 1)return;s.touches.currentX = e.type === 'touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.currentY = e.type === 'touchmove'?e.targetTouches[0].pageY:e.pageY;if(typeof isScrolling === 'undefined'){var touchAngle=Math.atan2(Math.abs(s.touches.currentY - s.touches.startY),Math.abs(s.touches.currentX - s.touches.startX)) * 180 / Math.PI;isScrolling = isH()?touchAngle > s.params.touchAngle:90 - touchAngle > s.params.touchAngle;}if(isScrolling){s.emit('onTouchMoveOpposite',s,e);}if(typeof startMoving === 'undefined' && s.browser.ieTouch){if(s.touches.currentX !== s.touches.startX || s.touches.currentY !== s.touches.startY){startMoving = true;}}if(!isTouched)return;if(isScrolling){isTouched = false;return;}if(!startMoving && s.browser.ieTouch){return;}s.allowClick = false;s.emit('onSliderMove',s,e);e.preventDefault();if(s.params.touchMoveStopPropagation && !s.params.nested){e.stopPropagation();}if(!isMoved){if(params.loop){s.fixLoop();}startTranslate = s.getWrapperTranslate();s.setWrapperTransition(0);if(s.animating){s.wrapper.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');}if(s.params.autoplay && s.autoplaying){if(s.params.autoplayDisableOnInteraction){s.stopAutoplay();}else {s.pauseAutoplay();}}allowMomentumBounce = false; //Grab Cursor
if(s.params.grabCursor){s.container[0].style.cursor = 'move';s.container[0].style.cursor = '-webkit-grabbing';s.container[0].style.cursor = '-moz-grabbin';s.container[0].style.cursor = 'grabbing';}}isMoved = true;var diff=s.touches.diff = isH()?s.touches.currentX - s.touches.startX:s.touches.currentY - s.touches.startY;diff = diff * s.params.touchRatio;if(s.rtl)diff = -diff;s.swipeDirection = diff > 0?'prev':'next';currentTranslate = diff + startTranslate;var disableParentSwiper=true;if(diff > 0 && currentTranslate > s.minTranslate()){disableParentSwiper = false;if(s.params.resistance)currentTranslate = s.minTranslate() - 1 + Math.pow(-s.minTranslate() + startTranslate + diff,s.params.resistanceRatio);}else if(diff < 0 && currentTranslate < s.maxTranslate()){disableParentSwiper = false;if(s.params.resistance)currentTranslate = s.maxTranslate() + 1 - Math.pow(s.maxTranslate() - startTranslate - diff,s.params.resistanceRatio);}if(disableParentSwiper){e.preventedByNestedSwiper = true;} // Directions locks
if(!s.params.allowSwipeToNext && s.swipeDirection === 'next' && currentTranslate < startTranslate){currentTranslate = startTranslate;}if(!s.params.allowSwipeToPrev && s.swipeDirection === 'prev' && currentTranslate > startTranslate){currentTranslate = startTranslate;}if(!s.params.followFinger)return; // Threshold
if(s.params.threshold > 0){if(Math.abs(diff) > s.params.threshold || allowThresholdMove){if(!allowThresholdMove){allowThresholdMove = true;s.touches.startX = s.touches.currentX;s.touches.startY = s.touches.currentY;currentTranslate = startTranslate;s.touches.diff = isH()?s.touches.currentX - s.touches.startX:s.touches.currentY - s.touches.startY;return;}}else {currentTranslate = startTranslate;return;}} // Update active index in free mode
if(s.params.freeMode || s.params.watchSlidesProgress){s.updateActiveIndex();}if(s.params.freeMode){ //Velocity
if(velocities.length === 0){velocities.push({position:s.touches[isH()?'startX':'startY'],time:touchStartTime});}velocities.push({position:s.touches[isH()?'currentX':'currentY'],time:new window.Date().getTime()});} // Update progress
s.updateProgress(currentTranslate); // Update translate
s.setWrapperTranslate(currentTranslate);};s.onTouchEnd = function(e){if(e.originalEvent)e = e.originalEvent;s.emit('onTouchEnd',s,e);if(!isTouched)return; //Return Grab Cursor
if(s.params.grabCursor && isMoved && isTouched){s.container[0].style.cursor = 'move';s.container[0].style.cursor = '-webkit-grab';s.container[0].style.cursor = '-moz-grab';s.container[0].style.cursor = 'grab';} // Time diff
var touchEndTime=Date.now();var timeDiff=touchEndTime - touchStartTime; // Tap, doubleTap, Click
if(s.allowClick){s.updateClickedSlide(e);s.emit('onTap',s,e);if(timeDiff < 300 && touchEndTime - lastClickTime > 300){if(clickTimeout)clearTimeout(clickTimeout);clickTimeout = setTimeout(function(){if(!s)return;if(s.params.paginationHide && s.paginationContainer.length > 0 && !$(e.target).hasClass(s.params.bulletClass)){s.paginationContainer.toggleClass(s.params.paginationHiddenClass);}s.emit('onClick',s,e);},300);}if(timeDiff < 300 && touchEndTime - lastClickTime < 300){if(clickTimeout)clearTimeout(clickTimeout);s.emit('onDoubleTap',s,e);}}lastClickTime = Date.now();setTimeout(function(){if(s)s.allowClick = true;},0);if(!isTouched || !isMoved || !s.swipeDirection || s.touches.diff === 0 || currentTranslate === startTranslate){isTouched = isMoved = false;return;}isTouched = isMoved = false;var currentPos;if(s.params.followFinger){currentPos = s.rtl?s.translate:-s.translate;}else {currentPos = -currentTranslate;}if(s.params.freeMode){if(currentPos < -s.minTranslate()){s.slideTo(s.activeIndex);return;}else if(currentPos > -s.maxTranslate()){if(s.slides.length < s.snapGrid.length){s.slideTo(s.snapGrid.length - 1);}else {s.slideTo(s.slides.length - 1);}return;}if(s.params.freeModeMomentum){if(velocities.length > 1){var lastMoveEvent=velocities.pop(),velocityEvent=velocities.pop();var distance=lastMoveEvent.position - velocityEvent.position;var time=lastMoveEvent.time - velocityEvent.time;s.velocity = distance / time;s.velocity = s.velocity / 2;if(Math.abs(s.velocity) < 0.02){s.velocity = 0;} // this implies that the user stopped moving a finger then released.
// There would be no events with distance zero, so the last event is stale.
if(time > 150 || new window.Date().getTime() - lastMoveEvent.time > 300){s.velocity = 0;}}else {s.velocity = 0;}velocities.length = 0;var momentumDuration=1000 * s.params.freeModeMomentumRatio;var momentumDistance=s.velocity * momentumDuration;var newPosition=s.translate + momentumDistance;if(s.rtl)newPosition = -newPosition;var doBounce=false;var afterBouncePosition;var bounceAmount=Math.abs(s.velocity) * 20 * s.params.freeModeMomentumBounceRatio;if(newPosition < s.maxTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition + s.maxTranslate() < -bounceAmount){newPosition = s.maxTranslate() - bounceAmount;}afterBouncePosition = s.maxTranslate();doBounce = true;allowMomentumBounce = true;}else {newPosition = s.maxTranslate();}}else if(newPosition > s.minTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition - s.minTranslate() > bounceAmount){newPosition = s.minTranslate() + bounceAmount;}afterBouncePosition = s.minTranslate();doBounce = true;allowMomentumBounce = true;}else {newPosition = s.minTranslate();}}else if(s.params.freeModeSticky){var j=0,nextSlide;for(j = 0;j < s.snapGrid.length;j += 1) {if(s.snapGrid[j] > -newPosition){nextSlide = j;break;}}if(Math.abs(s.snapGrid[nextSlide] - newPosition) < Math.abs(s.snapGrid[nextSlide - 1] - newPosition) || s.swipeDirection === 'next'){newPosition = s.snapGrid[nextSlide];}else {newPosition = s.snapGrid[nextSlide - 1];}if(!s.rtl)newPosition = -newPosition;} //Fix duration
if(s.velocity !== 0){if(s.rtl){momentumDuration = Math.abs((-newPosition - s.translate) / s.velocity);}else {momentumDuration = Math.abs((newPosition - s.translate) / s.velocity);}}else if(s.params.freeModeSticky){s.slideReset();return;}if(s.params.freeModeMomentumBounce && doBounce){s.updateProgress(afterBouncePosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();s.animating = true;s.wrapper.transitionEnd(function(){if(!s || !allowMomentumBounce)return;s.emit('onMomentumBounce',s);s.setWrapperTransition(s.params.speed);s.setWrapperTranslate(afterBouncePosition);s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});});}else if(s.velocity){s.updateProgress(newPosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();if(!s.animating){s.animating = true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});}}else {s.updateProgress(newPosition);}s.updateActiveIndex();}if(!s.params.freeModeMomentum || timeDiff >= s.params.longSwipesMs){s.updateProgress();s.updateActiveIndex();}return;} // Find current slide
var i,stopIndex=0,groupSize=s.slidesSizesGrid[0];for(i = 0;i < s.slidesGrid.length;i += s.params.slidesPerGroup) {if(typeof s.slidesGrid[i + s.params.slidesPerGroup] !== 'undefined'){if(currentPos >= s.slidesGrid[i] && currentPos < s.slidesGrid[i + s.params.slidesPerGroup]){stopIndex = i;groupSize = s.slidesGrid[i + s.params.slidesPerGroup] - s.slidesGrid[i];}}else {if(currentPos >= s.slidesGrid[i]){stopIndex = i;groupSize = s.slidesGrid[s.slidesGrid.length - 1] - s.slidesGrid[s.slidesGrid.length - 2];}}} // Find current slide size
var ratio=(currentPos - s.slidesGrid[stopIndex]) / groupSize;if(timeDiff > s.params.longSwipesMs){ // Long touches
if(!s.params.longSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection === 'next'){if(ratio >= s.params.longSwipesRatio)s.slideTo(stopIndex + s.params.slidesPerGroup);else s.slideTo(stopIndex);}if(s.swipeDirection === 'prev'){if(ratio > 1 - s.params.longSwipesRatio)s.slideTo(stopIndex + s.params.slidesPerGroup);else s.slideTo(stopIndex);}}else { // Short swipes
if(!s.params.shortSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection === 'next'){s.slideTo(stopIndex + s.params.slidesPerGroup);}if(s.swipeDirection === 'prev'){s.slideTo(stopIndex);}}}; /*=========================
      Transitions
      ===========================*/s._slideTo = function(slideIndex,speed){return s.slideTo(slideIndex,speed,true,true);};s.slideTo = function(slideIndex,speed,runCallbacks,internal){if(typeof runCallbacks === 'undefined')runCallbacks = true;if(typeof slideIndex === 'undefined')slideIndex = 0;if(slideIndex < 0)slideIndex = 0;s.snapIndex = Math.floor(slideIndex / s.params.slidesPerGroup);if(s.snapIndex >= s.snapGrid.length)s.snapIndex = s.snapGrid.length - 1;var translate=-s.snapGrid[s.snapIndex]; // Stop autoplay
if(s.params.autoplay && s.autoplaying){if(internal || !s.params.autoplayDisableOnInteraction){s.pauseAutoplay(speed);}else {s.stopAutoplay();}} // Update progress
s.updateProgress(translate); // Normalize slideIndex
for(var i=0;i < s.slidesGrid.length;i++) {if(-Math.floor(translate * 100) >= Math.floor(s.slidesGrid[i] * 100)){slideIndex = i;}} // Directions locks
if(!s.params.allowSwipeToNext && translate < s.translate && translate < s.minTranslate()){return false;}if(!s.params.allowSwipeToPrev && translate > s.translate && translate > s.maxTranslate()){if((s.activeIndex || 0) !== slideIndex)return false;} // Update Index
if(typeof speed === 'undefined')speed = s.params.speed;s.previousIndex = s.activeIndex || 0;s.activeIndex = slideIndex;if(translate === s.translate){s.updateClasses();return false;}s.updateClasses();s.onTransitionStart(runCallbacks);var translateX=isH()?translate:0,translateY=isH()?0:translate;if(speed === 0){s.setWrapperTransition(0);s.setWrapperTranslate(translate);s.onTransitionEnd(runCallbacks);}else {s.setWrapperTransition(speed);s.setWrapperTranslate(translate);if(!s.animating){s.animating = true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd(runCallbacks);});}}return true;};s.onTransitionStart = function(runCallbacks){if(typeof runCallbacks === 'undefined')runCallbacks = true;if(s.lazy)s.lazy.onTransitionStart();if(runCallbacks){s.emit('onTransitionStart',s);if(s.activeIndex !== s.previousIndex){s.emit('onSlideChangeStart',s);}}};s.onTransitionEnd = function(runCallbacks){s.animating = false;s.setWrapperTransition(0);if(typeof runCallbacks === 'undefined')runCallbacks = true;if(s.lazy)s.lazy.onTransitionEnd();if(runCallbacks){s.emit('onTransitionEnd',s);if(s.activeIndex !== s.previousIndex){s.emit('onSlideChangeEnd',s);}}if(s.params.hashnav && s.hashnav){s.hashnav.setHash();}};s.slideNext = function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex + s.params.slidesPerGroup,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex + s.params.slidesPerGroup,speed,runCallbacks,internal);};s._slideNext = function(speed){return s.slideNext(true,speed,true);};s.slidePrev = function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex - 1,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex - 1,speed,runCallbacks,internal);};s._slidePrev = function(speed){return s.slidePrev(true,speed,true);};s.slideReset = function(runCallbacks,speed,internal){return s.slideTo(s.activeIndex,speed,runCallbacks);}; /*=========================
      Translate/transition helpers
      ===========================*/s.setWrapperTransition = function(duration,byController){s.wrapper.transition(duration);if(s.params.effect !== 'slide' && s.effects[s.params.effect]){s.effects[s.params.effect].setTransition(duration);}if(s.params.parallax && s.parallax){s.parallax.setTransition(duration);}if(s.params.scrollbar && s.scrollbar){s.scrollbar.setTransition(duration);}if(s.params.control && s.controller){s.controller.setTransition(duration,byController);}s.emit('onSetTransition',s,duration);};s.setWrapperTranslate = function(translate,updateActiveIndex,byController){var x=0,y=0,z=0;if(isH()){x = s.rtl?-translate:translate;}else {y = translate;}if(!s.params.virtualTranslate){if(s.support.transforms3d)s.wrapper.transform('translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)');else s.wrapper.transform('translate(' + x + 'px, ' + y + 'px)');}s.translate = isH()?x:y;if(updateActiveIndex)s.updateActiveIndex();if(s.params.effect !== 'slide' && s.effects[s.params.effect]){s.effects[s.params.effect].setTranslate(s.translate);}if(s.params.parallax && s.parallax){s.parallax.setTranslate(s.translate);}if(s.params.scrollbar && s.scrollbar){s.scrollbar.setTranslate(s.translate);}if(s.params.control && s.controller){s.controller.setTranslate(s.translate,byController);}s.emit('onSetTranslate',s,s.translate);};s.getTranslate = function(el,axis){var matrix,curTransform,curStyle,transformMatrix; // automatic axis detection
if(typeof axis === 'undefined'){axis = 'x';}if(s.params.virtualTranslate){return s.rtl?-s.translate:s.translate;}curStyle = window.getComputedStyle(el,null);if(window.WebKitCSSMatrix){ // Some old versions of Webkit choke when 'none' is passed; pass
// empty string instead in this case
transformMatrix = new window.WebKitCSSMatrix(curStyle.webkitTransform === 'none'?'':curStyle.webkitTransform);}else {transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(','matrix(1, 0, 0, 1,');matrix = transformMatrix.toString().split(',');}if(axis === 'x'){ //Latest Chrome and webkits Fix
if(window.WebKitCSSMatrix)curTransform = transformMatrix.m41;else if(matrix.length === 16)curTransform = parseFloat(matrix[12]);else curTransform = parseFloat(matrix[4]);}if(axis === 'y'){ //Latest Chrome and webkits Fix
if(window.WebKitCSSMatrix)curTransform = transformMatrix.m42;else if(matrix.length === 16)curTransform = parseFloat(matrix[13]);else curTransform = parseFloat(matrix[5]);}if(s.rtl && curTransform)curTransform = -curTransform;return curTransform || 0;};s.getWrapperTranslate = function(axis){if(typeof axis === 'undefined'){axis = isH()?'x':'y';}return s.getTranslate(s.wrapper[0],axis);}; /*=========================
      Observer
      ===========================*/s.observers = [];function initObserver(target,options){options = options || {}; // create an observer instance
var ObserverFunc=window.MutationObserver || window.WebkitMutationObserver;var observer=new ObserverFunc(function(mutations){mutations.forEach(function(mutation){s.onResize(true);s.emit('onObserverUpdate',s,mutation);});});observer.observe(target,{attributes:typeof options.attributes === 'undefined'?true:options.attributes,childList:typeof options.childList === 'undefined'?true:options.childList,characterData:typeof options.characterData === 'undefined'?true:options.characterData});s.observers.push(observer);}s.initObservers = function(){if(s.params.observeParents){var containerParents=s.container.parents();for(var i=0;i < containerParents.length;i++) {initObserver(containerParents[i]);}} // Observe container
initObserver(s.container[0],{childList:false}); // Observe wrapper
initObserver(s.wrapper[0],{attributes:false});};s.disconnectObservers = function(){for(var i=0;i < s.observers.length;i++) {s.observers[i].disconnect();}s.observers = [];}; /*=========================
      Loop
      ===========================*/ // Create looped slides
s.createLoop = function(){ // Remove duplicated slides
s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();var slides=s.wrapper.children('.' + s.params.slideClass);if(s.params.slidesPerView === 'auto' && !s.params.loopedSlides)s.params.loopedSlides = slides.length;s.loopedSlides = parseInt(s.params.loopedSlides || s.params.slidesPerView,10);s.loopedSlides = s.loopedSlides + s.params.loopAdditionalSlides;if(s.loopedSlides > slides.length){s.loopedSlides = slides.length;}var prependSlides=[],appendSlides=[],i;slides.each(function(index,el){var slide=$(this);if(index < s.loopedSlides)appendSlides.push(el);if(index < slides.length && index >= slides.length - s.loopedSlides)prependSlides.push(el);slide.attr('data-swiper-slide-index',index);});for(i = 0;i < appendSlides.length;i++) {s.wrapper.append($(appendSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}for(i = prependSlides.length - 1;i >= 0;i--) {s.wrapper.prepend($(prependSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}};s.destroyLoop = function(){s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();s.slides.removeAttr('data-swiper-slide-index');};s.fixLoop = function(){var newIndex; //Fix For Negative Oversliding
if(s.activeIndex < s.loopedSlides){newIndex = s.slides.length - s.loopedSlides * 3 + s.activeIndex;newIndex = newIndex + s.loopedSlides;s.slideTo(newIndex,0,false,true);}else if(s.params.slidesPerView === 'auto' && s.activeIndex >= s.loopedSlides * 2 || s.activeIndex > s.slides.length - s.params.slidesPerView * 2){newIndex = -s.slides.length + s.activeIndex + s.loopedSlides;newIndex = newIndex + s.loopedSlides;s.slideTo(newIndex,0,false,true);}}; /*=========================
      Append/Prepend/Remove Slides
      ===========================*/s.appendSlide = function(slides){if(s.params.loop){s.destroyLoop();}if(typeof slides === 'object' && slides.length){for(var i=0;i < slides.length;i++) {if(slides[i])s.wrapper.append(slides[i]);}}else {s.wrapper.append(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer && s.support.observer)){s.update(true);}};s.prependSlide = function(slides){if(s.params.loop){s.destroyLoop();}var newActiveIndex=s.activeIndex + 1;if(typeof slides === 'object' && slides.length){for(var i=0;i < slides.length;i++) {if(slides[i])s.wrapper.prepend(slides[i]);}newActiveIndex = s.activeIndex + slides.length;}else {s.wrapper.prepend(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer && s.support.observer)){s.update(true);}s.slideTo(newActiveIndex,0,false);};s.removeSlide = function(slidesIndexes){if(s.params.loop){s.destroyLoop();s.slides = s.wrapper.children('.' + s.params.slideClass);}var newActiveIndex=s.activeIndex,indexToRemove;if(typeof slidesIndexes === 'object' && slidesIndexes.length){for(var i=0;i < slidesIndexes.length;i++) {indexToRemove = slidesIndexes[i];if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove < newActiveIndex)newActiveIndex--;}newActiveIndex = Math.max(newActiveIndex,0);}else {indexToRemove = slidesIndexes;if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove < newActiveIndex)newActiveIndex--;newActiveIndex = Math.max(newActiveIndex,0);}if(s.params.loop){s.createLoop();}if(!(s.params.observer && s.support.observer)){s.update(true);}if(s.params.loop){s.slideTo(newActiveIndex + s.loopedSlides,0,false);}else {s.slideTo(newActiveIndex,0,false);}};s.removeAllSlides = function(){var slidesIndexes=[];for(var i=0;i < s.slides.length;i++) {slidesIndexes.push(i);}s.removeSlide(slidesIndexes);}; /*=========================
      Effects
      ===========================*/s.effects = {fade:{setTranslate:function setTranslate(){for(var i=0;i < s.slides.length;i++) {var slide=s.slides.eq(i);var offset=slide[0].swiperSlideOffset;var tx=-offset;if(!s.params.virtualTranslate)tx = tx - s.translate;var ty=0;if(!isH()){ty = tx;tx = 0;}var slideOpacity=s.params.fade.crossFade?Math.max(1 - Math.abs(slide[0].progress),0):1 + Math.min(Math.max(slide[0].progress,-1),0);slide.css({opacity:slideOpacity}).transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px)');}},setTransition:function setTransition(duration){s.slides.transition(duration);if(s.params.virtualTranslate && duration !== 0){var eventTriggered=false;s.slides.transitionEnd(function(){if(eventTriggered)return;if(!s)return;eventTriggered = true;s.animating = false;var triggerEvents=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'];for(var i=0;i < triggerEvents.length;i++) {s.wrapper.trigger(triggerEvents[i]);}});}}},cube:{setTranslate:function setTranslate(){var wrapperRotate=0,cubeShadow;if(s.params.cube.shadow){if(isH()){cubeShadow = s.wrapper.find('.swiper-cube-shadow');if(cubeShadow.length === 0){cubeShadow = $('<div class="swiper-cube-shadow"></div>');s.wrapper.append(cubeShadow);}cubeShadow.css({height:s.width + 'px'});}else {cubeShadow = s.container.find('.swiper-cube-shadow');if(cubeShadow.length === 0){cubeShadow = $('<div class="swiper-cube-shadow"></div>');s.container.append(cubeShadow);}}}for(var i=0;i < s.slides.length;i++) {var slide=s.slides.eq(i);var slideAngle=i * 90;var round=Math.floor(slideAngle / 360);if(s.rtl){slideAngle = -slideAngle;round = Math.floor(-slideAngle / 360);}var progress=Math.max(Math.min(slide[0].progress,1),-1);var tx=0,ty=0,tz=0;if(i % 4 === 0){tx = -round * 4 * s.size;tz = 0;}else if((i - 1) % 4 === 0){tx = 0;tz = -round * 4 * s.size;}else if((i - 2) % 4 === 0){tx = s.size + round * 4 * s.size;tz = s.size;}else if((i - 3) % 4 === 0){tx = -s.size;tz = 3 * s.size + s.size * 4 * round;}if(s.rtl){tx = -tx;}if(!isH()){ty = tx;tx = 0;}var transform='rotateX(' + (isH()?0:-slideAngle) + 'deg) rotateY(' + (isH()?slideAngle:0) + 'deg) translate3d(' + tx + 'px, ' + ty + 'px, ' + tz + 'px)';if(progress <= 1 && progress > -1){wrapperRotate = i * 90 + progress * 90;if(s.rtl)wrapperRotate = -i * 90 - progress * 90;}slide.transform(transform);if(s.params.cube.slideShadows){ //Set shadows
var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length === 0){shadowBefore = $('<div class="swiper-slide-shadow-' + (isH()?'left':'top') + '"></div>');slide.append(shadowBefore);}if(shadowAfter.length === 0){shadowAfter = $('<div class="swiper-slide-shadow-' + (isH()?'right':'bottom') + '"></div>');slide.append(shadowAfter);}var shadowOpacity=slide[0].progress;if(shadowBefore.length)shadowBefore[0].style.opacity = -slide[0].progress;if(shadowAfter.length)shadowAfter[0].style.opacity = slide[0].progress;}}s.wrapper.css({'-webkit-transform-origin':'50% 50% -' + s.size / 2 + 'px','-moz-transform-origin':'50% 50% -' + s.size / 2 + 'px','-ms-transform-origin':'50% 50% -' + s.size / 2 + 'px','transform-origin':'50% 50% -' + s.size / 2 + 'px'});if(s.params.cube.shadow){if(isH()){cubeShadow.transform('translate3d(0px, ' + (s.width / 2 + s.params.cube.shadowOffset) + 'px, ' + -s.width / 2 + 'px) rotateX(90deg) rotateZ(0deg) scale(' + s.params.cube.shadowScale + ')');}else {var shadowAngle=Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;var multiplier=1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);var scale1=s.params.cube.shadowScale,scale2=s.params.cube.shadowScale / multiplier,offset=s.params.cube.shadowOffset;cubeShadow.transform('scale3d(' + scale1 + ', 1, ' + scale2 + ') translate3d(0px, ' + (s.height / 2 + offset) + 'px, ' + -s.height / 2 / scale2 + 'px) rotateX(-90deg)');}}var zFactor=s.isSafari || s.isUiWebView?-s.size / 2:0;s.wrapper.transform('translate3d(0px,0,' + zFactor + 'px) rotateX(' + (isH()?0:wrapperRotate) + 'deg) rotateY(' + (isH()?-wrapperRotate:0) + 'deg)');},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);if(s.params.cube.shadow && !isH()){s.container.find('.swiper-cube-shadow').transition(duration);}}},coverflow:{setTranslate:function setTranslate(){var transform=s.translate;var center=isH()?-transform + s.width / 2:-transform + s.height / 2;var rotate=isH()?s.params.coverflow.rotate:-s.params.coverflow.rotate;var translate=s.params.coverflow.depth; //Each slide offset from center
for(var i=0,length=s.slides.length;i < length;i++) {var slide=s.slides.eq(i);var slideSize=s.slidesSizesGrid[i];var slideOffset=slide[0].swiperSlideOffset;var offsetMultiplier=(center - slideOffset - slideSize / 2) / slideSize * s.params.coverflow.modifier;var rotateY=isH()?rotate * offsetMultiplier:0;var rotateX=isH()?0:rotate * offsetMultiplier; // var rotateZ = 0
var translateZ=-translate * Math.abs(offsetMultiplier);var translateY=isH()?0:s.params.coverflow.stretch * offsetMultiplier;var translateX=isH()?s.params.coverflow.stretch * offsetMultiplier:0; //Fix for ultra small values
if(Math.abs(translateX) < 0.001)translateX = 0;if(Math.abs(translateY) < 0.001)translateY = 0;if(Math.abs(translateZ) < 0.001)translateZ = 0;if(Math.abs(rotateY) < 0.001)rotateY = 0;if(Math.abs(rotateX) < 0.001)rotateX = 0;var slideTransform='translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px)  rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg)';slide.transform(slideTransform);slide[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;if(s.params.coverflow.slideShadows){ //Set shadows
var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length === 0){shadowBefore = $('<div class="swiper-slide-shadow-' + (isH()?'left':'top') + '"></div>');slide.append(shadowBefore);}if(shadowAfter.length === 0){shadowAfter = $('<div class="swiper-slide-shadow-' + (isH()?'right':'bottom') + '"></div>');slide.append(shadowAfter);}if(shadowBefore.length)shadowBefore[0].style.opacity = offsetMultiplier > 0?offsetMultiplier:0;if(shadowAfter.length)shadowAfter[0].style.opacity = -offsetMultiplier > 0?-offsetMultiplier:0;}} //Set correct perspective for IE10
if(s.browser.ie){var ws=s.wrapper[0].style;ws.perspectiveOrigin = center + 'px 50%';}},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);}}}; /*=========================
      Images Lazy Loading
      ===========================*/s.lazy = {initialImageLoaded:false,loadImageInSlide:function loadImageInSlide(index,loadInDuplicate){if(typeof index === 'undefined')return;if(typeof loadInDuplicate === 'undefined')loadInDuplicate = true;if(s.slides.length === 0)return;var slide=s.slides.eq(index);var img=slide.find('.swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)');if(slide.hasClass('swiper-lazy') && !slide.hasClass('swiper-lazy-loaded') && !slide.hasClass('swiper-lazy-loading')){img.add(slide[0]);}if(img.length === 0)return;img.each(function(){var _img=$(this);_img.addClass('swiper-lazy-loading');var background=_img.attr('data-background');var src=_img.attr('data-src');s.loadImage(_img[0],src || background,false,function(){if(background){_img.css('background-image','url(' + background + ')');_img.removeAttr('data-background');}else {_img.attr('src',src);_img.removeAttr('data-src');}_img.addClass('swiper-lazy-loaded').removeClass('swiper-lazy-loading');slide.find('.swiper-lazy-preloader, .preloader').remove();if(s.params.loop && loadInDuplicate){var slideOriginalIndex=slide.attr('data-swiper-slide-index');if(slide.hasClass(s.params.slideDuplicateClass)){var originalSlide=s.wrapper.children('[data-swiper-slide-index="' + slideOriginalIndex + '"]:not(.' + s.params.slideDuplicateClass + ')');s.lazy.loadImageInSlide(originalSlide.index(),false);}else {var duplicatedSlide=s.wrapper.children('.' + s.params.slideDuplicateClass + '[data-swiper-slide-index="' + slideOriginalIndex + '"]');s.lazy.loadImageInSlide(duplicatedSlide.index(),false);}}s.emit('onLazyImageReady',s,slide[0],_img[0]);});s.emit('onLazyImageLoad',s,slide[0],_img[0]);});},load:function load(){var i;if(s.params.watchSlidesVisibility){s.wrapper.children('.' + s.params.slideVisibleClass).each(function(){s.lazy.loadImageInSlide($(this).index());});}else {if(s.params.slidesPerView > 1){for(i = s.activeIndex;i < s.activeIndex + s.params.slidesPerView;i++) {if(s.slides[i])s.lazy.loadImageInSlide(i);}}else {s.lazy.loadImageInSlide(s.activeIndex);}}if(s.params.lazyLoadingInPrevNext){if(s.params.slidesPerView > 1){ // Next Slides
for(i = s.activeIndex + s.params.slidesPerView;i < s.activeIndex + s.params.slidesPerView + s.params.slidesPerView;i++) {if(s.slides[i])s.lazy.loadImageInSlide(i);} // Prev Slides
for(i = s.activeIndex - s.params.slidesPerView;i < s.activeIndex;i++) {if(s.slides[i])s.lazy.loadImageInSlide(i);}}else {var nextSlide=s.wrapper.children('.' + s.params.slideNextClass);if(nextSlide.length > 0)s.lazy.loadImageInSlide(nextSlide.index());var prevSlide=s.wrapper.children('.' + s.params.slidePrevClass);if(prevSlide.length > 0)s.lazy.loadImageInSlide(prevSlide.index());}}},onTransitionStart:function onTransitionStart(){if(s.params.lazyLoading){if(s.params.lazyLoadingOnTransitionStart || !s.params.lazyLoadingOnTransitionStart && !s.lazy.initialImageLoaded){s.lazy.load();}}},onTransitionEnd:function onTransitionEnd(){if(s.params.lazyLoading && !s.params.lazyLoadingOnTransitionStart){s.lazy.load();}}}; /*=========================
      Scrollbar
      ===========================*/s.scrollbar = {set:function set(){if(!s.params.scrollbar)return;var sb=s.scrollbar;sb.track = $(s.params.scrollbar);sb.drag = sb.track.find('.swiper-scrollbar-drag');if(sb.drag.length === 0){sb.drag = $('<div class="swiper-scrollbar-drag"></div>');sb.track.append(sb.drag);}sb.drag[0].style.width = '';sb.drag[0].style.height = '';sb.trackSize = isH()?sb.track[0].offsetWidth:sb.track[0].offsetHeight;sb.divider = s.size / s.virtualSize;sb.moveDivider = sb.divider * (sb.trackSize / s.size);sb.dragSize = sb.trackSize * sb.divider;if(isH()){sb.drag[0].style.width = sb.dragSize + 'px';}else {sb.drag[0].style.height = sb.dragSize + 'px';}if(sb.divider >= 1){sb.track[0].style.display = 'none';}else {sb.track[0].style.display = '';}if(s.params.scrollbarHide){sb.track[0].style.opacity = 0;}},setTranslate:function setTranslate(){if(!s.params.scrollbar)return;var diff;var sb=s.scrollbar;var translate=s.translate || 0;var newPos;var newSize=sb.dragSize;newPos = (sb.trackSize - sb.dragSize) * s.progress;if(s.rtl && isH()){newPos = -newPos;if(newPos > 0){newSize = sb.dragSize - newPos;newPos = 0;}else if(-newPos + sb.dragSize > sb.trackSize){newSize = sb.trackSize + newPos;}}else {if(newPos < 0){newSize = sb.dragSize + newPos;newPos = 0;}else if(newPos + sb.dragSize > sb.trackSize){newSize = sb.trackSize - newPos;}}if(isH()){if(s.support.transforms3d){sb.drag.transform('translate3d(' + newPos + 'px, 0, 0)');}else {sb.drag.transform('translateX(' + newPos + 'px)');}sb.drag[0].style.width = newSize + 'px';}else {if(s.support.transforms3d){sb.drag.transform('translate3d(0px, ' + newPos + 'px, 0)');}else {sb.drag.transform('translateY(' + newPos + 'px)');}sb.drag[0].style.height = newSize + 'px';}if(s.params.scrollbarHide){clearTimeout(sb.timeout);sb.track[0].style.opacity = 1;sb.timeout = setTimeout(function(){sb.track[0].style.opacity = 0;sb.track.transition(400);},1000);}},setTransition:function setTransition(duration){if(!s.params.scrollbar)return;s.scrollbar.drag.transition(duration);}}; /*=========================
      Controller
      ===========================*/s.controller = {LinearSpline:function LinearSpline(x,y){this.x = x;this.y = y;this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
// (x1,y1) is the known point before given value,
// (x3,y3) is the known point after given value.
var i1,i3;var l=this.x.length;this.interpolate = function(x2){if(!x2)return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):
i3 = binarySearch(this.x,x2);i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
// y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];};var binarySearch=(function(){var maxIndex,minIndex,guess;return function(array,val){minIndex = -1;maxIndex = array.length;while(maxIndex - minIndex > 1) if(array[guess = maxIndex + minIndex >> 1] <= val){minIndex = guess;}else {maxIndex = guess;}return maxIndex;};})();}, //xxx: for now i will just save one spline function to to
getInterpolateFunction:function getInterpolateFunction(c){if(!s.controller.spline)s.controller.spline = s.params.loop?new s.controller.LinearSpline(s.slidesGrid,c.slidesGrid):new s.controller.LinearSpline(s.snapGrid,c.snapGrid);},setTranslate:function setTranslate(translate,byController){var controlled=s.params.control;var multiplier,controlledTranslate;function setControlledTranslate(c){ // this will create an Interpolate function based on the snapGrids
// x is the Grid of the scrolled scroller and y will be the controlled scroller
// it makes sense to create this only once and recall it for the interpolation
// the function does a lot of value caching for performance
translate = c.rtl && c.params.direction === 'horizontal'?-s.translate:s.translate;if(s.params.controlBy === 'slide'){s.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
// but it did not work out
controlledTranslate = -s.controller.spline.interpolate(-translate);}if(!controlledTranslate || s.params.controlBy === 'container'){multiplier = (c.maxTranslate() - c.minTranslate()) / (s.maxTranslate() - s.minTranslate());controlledTranslate = (translate - s.minTranslate()) * multiplier + c.minTranslate();}if(s.params.controlInverse){controlledTranslate = c.maxTranslate() - controlledTranslate;}c.updateProgress(controlledTranslate);c.setWrapperTranslate(controlledTranslate,false,s);c.updateActiveIndex();}if(s.isArray(controlled)){for(var i=0;i < controlled.length;i++) {if(controlled[i] !== byController && controlled[i] instanceof Swiper){setControlledTranslate(controlled[i]);}}}else if(controlled instanceof Swiper && byController !== controlled){setControlledTranslate(controlled);}},setTransition:function setTransition(duration,byController){var controlled=s.params.control;var i;function setControlledTransition(c){c.setWrapperTransition(duration,s);if(duration !== 0){c.onTransitionStart();c.wrapper.transitionEnd(function(){if(!controlled)return;if(c.params.loop && s.params.controlBy === 'slide'){c.fixLoop();}c.onTransitionEnd();});}}if(s.isArray(controlled)){for(i = 0;i < controlled.length;i++) {if(controlled[i] !== byController && controlled[i] instanceof Swiper){setControlledTransition(controlled[i]);}}}else if(controlled instanceof Swiper && byController !== controlled){setControlledTransition(controlled);}}}; /*=========================
      Hash Navigation
      ===========================*/s.hashnav = {init:function init(){if(!s.params.hashnav)return;s.hashnav.initialized = true;var hash=document.location.hash.replace('#','');if(!hash)return;var speed=0;for(var i=0,length=s.slides.length;i < length;i++) {var slide=s.slides.eq(i);var slideHash=slide.attr('data-hash');if(slideHash === hash && !slide.hasClass(s.params.slideDuplicateClass)){var index=slide.index();s.slideTo(index,speed,s.params.runCallbacksOnInit,true);}}},setHash:function setHash(){if(!s.hashnav.initialized || !s.params.hashnav)return;document.location.hash = s.slides.eq(s.activeIndex).attr('data-hash') || '';}}; /*=========================
      Keyboard Control
      ===========================*/function handleKeyboard(e){if(e.originalEvent)e = e.originalEvent; //jquery fix
var kc=e.keyCode || e.charCode; // Directions locks
if(!s.params.allowSwipeToNext && (isH() && kc === 39 || !isH() && kc === 40)){return false;}if(!s.params.allowSwipeToPrev && (isH() && kc === 37 || !isH() && kc === 38)){return false;}if(e.shiftKey || e.altKey || e.ctrlKey || e.metaKey){return;}if(document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')){return;}if(kc === 37 || kc === 39 || kc === 38 || kc === 40){var inView=false; //Check that swiper should be inside of visible area of window
if(s.container.parents('.swiper-slide').length > 0 && s.container.parents('.swiper-slide-active').length === 0){return;}var windowScroll={left:window.pageXOffset,top:window.pageYOffset};var windowWidth=window.innerWidth;var windowHeight=window.innerHeight;var swiperOffset=s.container.offset();if(s.rtl)swiperOffset.left = swiperOffset.left - s.container[0].scrollLeft;var swiperCoord=[[swiperOffset.left,swiperOffset.top],[swiperOffset.left + s.width,swiperOffset.top],[swiperOffset.left,swiperOffset.top + s.height],[swiperOffset.left + s.width,swiperOffset.top + s.height]];for(var i=0;i < swiperCoord.length;i++) {var point=swiperCoord[i];if(point[0] >= windowScroll.left && point[0] <= windowScroll.left + windowWidth && point[1] >= windowScroll.top && point[1] <= windowScroll.top + windowHeight){inView = true;}}if(!inView)return;}if(isH()){if(kc === 37 || kc === 39){if(e.preventDefault)e.preventDefault();else e.returnValue = false;}if(kc === 39 && !s.rtl || kc === 37 && s.rtl)s.slideNext();if(kc === 37 && !s.rtl || kc === 39 && s.rtl)s.slidePrev();}else {if(kc === 38 || kc === 40){if(e.preventDefault)e.preventDefault();else e.returnValue = false;}if(kc === 40)s.slideNext();if(kc === 38)s.slidePrev();}}s.disableKeyboardControl = function(){$(document).off('keydown',handleKeyboard);};s.enableKeyboardControl = function(){$(document).on('keydown',handleKeyboard);}; /*=========================
      Mousewheel Control
      ===========================*/s.mousewheel = {event:false,lastScrollTime:new window.Date().getTime()};if(s.params.mousewheelControl){try{new window.WheelEvent('wheel');s.mousewheel.event = 'wheel';}catch(e) {}if(!s.mousewheel.event && document.onmousewheel !== undefined){s.mousewheel.event = 'mousewheel';}if(!s.mousewheel.event){s.mousewheel.event = 'DOMMouseScroll';}}function handleMousewheel(e){if(e.originalEvent)e = e.originalEvent; //jquery fix
var we=s.mousewheel.event;var delta=0; //Opera & IE
if(e.detail)delta = -e.detail;else if(we === 'mousewheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY))delta = e.wheelDeltaX;else return;}else {if(Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX))delta = e.wheelDeltaY;else return;}}else {delta = e.wheelDelta;}}else if(we === 'DOMMouseScroll')delta = -e.detail;else if(we === 'wheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.deltaX) > Math.abs(e.deltaY))delta = -e.deltaX;else return;}else {if(Math.abs(e.deltaY) > Math.abs(e.deltaX))delta = -e.deltaY;else return;}}else {delta = Math.abs(e.deltaX) > Math.abs(e.deltaY)?-e.deltaX:-e.deltaY;}}if(s.params.mousewheelInvert)delta = -delta;if(!s.params.freeMode){if(new window.Date().getTime() - s.mousewheel.lastScrollTime > 60){if(delta < 0){if((!s.isEnd || s.params.loop) && !s.animating)s.slideNext();else if(s.params.mousewheelReleaseOnEdges)return true;}else {if((!s.isBeginning || s.params.loop) && !s.animating)s.slidePrev();else if(s.params.mousewheelReleaseOnEdges)return true;}}s.mousewheel.lastScrollTime = new window.Date().getTime();}else { //Freemode or scrollContainer:
var position=s.getWrapperTranslate() + delta * s.params.mousewheelSensitivity;if(position > 0)position = 0;if(position < s.maxTranslate())position = s.maxTranslate();s.setWrapperTransition(0);s.setWrapperTranslate(position);s.updateProgress();s.updateActiveIndex();if(s.params.freeModeSticky){clearTimeout(s.mousewheel.timeout);s.mousewheel.timeout = setTimeout(function(){s.slideReset();},300);} // Return page scroll on edge positions
if(position === 0 || position === s.maxTranslate())return;}if(s.params.autoplay)s.stopAutoplay();if(e.preventDefault)e.preventDefault();else e.returnValue = false;return false;}s.disableMousewheelControl = function(){if(!s.mousewheel.event)return false;s.container.off(s.mousewheel.event,handleMousewheel);return true;};s.enableMousewheelControl = function(){if(!s.mousewheel.event)return false;s.container.on(s.mousewheel.event,handleMousewheel);return true;}; /*=========================
      Parallax
      ===========================*/function setParallaxTransform(el,progress){el = $(el);var p,pX,pY;p = el.attr('data-swiper-parallax') || '0';pX = el.attr('data-swiper-parallax-x');pY = el.attr('data-swiper-parallax-y');if(pX || pY){pX = pX || '0';pY = pY || '0';}else {if(isH()){pX = p;pY = '0';}else {pY = p;pX = '0';}}if(pX.indexOf('%') >= 0){pX = parseInt(pX,10) * progress + '%';}else {pX = pX * progress + 'px';}if(pY.indexOf('%') >= 0){pY = parseInt(pY,10) * progress + '%';}else {pY = pY * progress + 'px';}el.transform('translate3d(' + pX + ', ' + pY + ',0px)');}s.parallax = {setTranslate:function setTranslate(){s.container.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){setParallaxTransform(this,s.progress);});s.slides.each(function(){var slide=$(this);slide.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var progress=Math.min(Math.max(slide[0].progress,-1),1);setParallaxTransform(this,progress);});});},setTransition:function setTransition(duration){if(typeof duration === 'undefined')duration = s.params.speed;s.container.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var el=$(this);var parallaxDuration=parseInt(el.attr('data-swiper-parallax-duration'),10) || duration;if(duration === 0)parallaxDuration = 0;el.transition(parallaxDuration);});}}; /*=========================
      Plugins API. Collect all and init all plugins
      ===========================*/s._plugins = [];for(var plugin in s.plugins) {var p=s.plugins[plugin](s,s.params[plugin]);if(p)s._plugins.push(p);} // Method to call all plugins event/method
s.callPlugins = function(eventName){for(var i=0;i < s._plugins.length;i++) {if(eventName in s._plugins[i]){s._plugins[i][eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}}}; /*=========================
      Events/Callbacks/Plugins Emitter
      ===========================*/function normalizeEventName(eventName){if(eventName.indexOf('on') !== 0){if(eventName[0] !== eventName[0].toUpperCase()){eventName = 'on' + eventName[0].toUpperCase() + eventName.substring(1);}else {eventName = 'on' + eventName;}}return eventName;}s.emitterEventListeners = {};s.emit = function(eventName){ // Trigger callbacks
if(s.params[eventName]){s.params[eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}var i; // Trigger events
if(s.emitterEventListeners[eventName]){for(i = 0;i < s.emitterEventListeners[eventName].length;i++) {s.emitterEventListeners[eventName][i](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}} // Trigger plugins
if(s.callPlugins)s.callPlugins(eventName,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);};s.on = function(eventName,handler){eventName = normalizeEventName(eventName);if(!s.emitterEventListeners[eventName])s.emitterEventListeners[eventName] = [];s.emitterEventListeners[eventName].push(handler);return s;};s.off = function(eventName,handler){var i;eventName = normalizeEventName(eventName);if(typeof handler === 'undefined'){ // Remove all handlers for such event
s.emitterEventListeners[eventName] = [];return s;}if(!s.emitterEventListeners[eventName] || s.emitterEventListeners[eventName].length === 0)return;for(i = 0;i < s.emitterEventListeners[eventName].length;i++) {if(s.emitterEventListeners[eventName][i] === handler)s.emitterEventListeners[eventName].splice(i,1);}return s;};s.once = function(eventName,handler){eventName = normalizeEventName(eventName);var _handler=function _handler(){handler(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);s.off(eventName,_handler);};s.on(eventName,_handler);return s;}; // Accessibility tools
s.a11y = {makeFocusable:function makeFocusable($el){$el.attr('tabIndex','0');return $el;},addRole:function addRole($el,role){$el.attr('role',role);return $el;},addLabel:function addLabel($el,label){$el.attr('aria-label',label);return $el;},disable:function disable($el){$el.attr('aria-disabled',true);return $el;},enable:function enable($el){$el.attr('aria-disabled',false);return $el;},onEnterKey:function onEnterKey(event){if(event.keyCode !== 13)return;if($(event.target).is(s.params.nextButton)){s.onClickNext(event);if(s.isEnd){s.a11y.notify(s.params.lastSlideMessage);}else {s.a11y.notify(s.params.nextSlideMessage);}}else if($(event.target).is(s.params.prevButton)){s.onClickPrev(event);if(s.isBeginning){s.a11y.notify(s.params.firstSlideMessage);}else {s.a11y.notify(s.params.prevSlideMessage);}}if($(event.target).is('.' + s.params.bulletClass)){$(event.target)[0].click();}},liveRegion:$('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),notify:function notify(message){var notification=s.a11y.liveRegion;if(notification.length === 0)return;notification.html('');notification.html(message);},init:function init(){ // Setup accessibility
if(s.params.nextButton){var nextButton=$(s.params.nextButton);s.a11y.makeFocusable(nextButton);s.a11y.addRole(nextButton,'button');s.a11y.addLabel(nextButton,s.params.nextSlideMessage);}if(s.params.prevButton){var prevButton=$(s.params.prevButton);s.a11y.makeFocusable(prevButton);s.a11y.addRole(prevButton,'button');s.a11y.addLabel(prevButton,s.params.prevSlideMessage);}$(s.container).append(s.a11y.liveRegion);},initPagination:function initPagination(){if(s.params.pagination && s.params.paginationClickable && s.bullets && s.bullets.length){s.bullets.each(function(){var bullet=$(this);s.a11y.makeFocusable(bullet);s.a11y.addRole(bullet,'button');s.a11y.addLabel(bullet,s.params.paginationBulletMessage.replace(/{{index}}/,bullet.index() + 1));});}},destroy:function destroy(){if(s.a11y.liveRegion && s.a11y.liveRegion.length > 0)s.a11y.liveRegion.remove();}}; /*=========================
      Init/Destroy
      ===========================*/s.init = function(){if(s.params.loop)s.createLoop();s.updateContainerSize();s.updateSlidesSize();s.updatePagination();if(s.params.scrollbar && s.scrollbar){s.scrollbar.set();}if(s.params.effect !== 'slide' && s.effects[s.params.effect]){if(!s.params.loop)s.updateProgress();s.effects[s.params.effect].setTranslate();}if(s.params.loop){s.slideTo(s.params.initialSlide + s.loopedSlides,0,s.params.runCallbacksOnInit);}else {s.slideTo(s.params.initialSlide,0,s.params.runCallbacksOnInit);if(s.params.initialSlide === 0){if(s.parallax && s.params.parallax)s.parallax.setTranslate();if(s.lazy && s.params.lazyLoading){s.lazy.load();s.lazy.initialImageLoaded = true;}}}s.attachEvents();if(s.params.observer && s.support.observer){s.initObservers();}if(s.params.preloadImages && !s.params.lazyLoading){s.preloadImages();}if(s.params.autoplay){s.startAutoplay();}if(s.params.keyboardControl){if(s.enableKeyboardControl)s.enableKeyboardControl();}if(s.params.mousewheelControl){if(s.enableMousewheelControl)s.enableMousewheelControl();}if(s.params.hashnav){if(s.hashnav)s.hashnav.init();}if(s.params.a11y && s.a11y)s.a11y.init();s.emit('onInit',s);}; // Cleanup dynamic styles
s.cleanupStyles = function(){ // Container
s.container.removeClass(s.classNames.join(' ')).removeAttr('style'); // Wrapper
s.wrapper.removeAttr('style'); // Slides
if(s.slides && s.slides.length){s.slides.removeClass([s.params.slideVisibleClass,s.params.slideActiveClass,s.params.slideNextClass,s.params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-column').removeAttr('data-swiper-row');} // Pagination/Bullets
if(s.paginationContainer && s.paginationContainer.length){s.paginationContainer.removeClass(s.params.paginationHiddenClass);}if(s.bullets && s.bullets.length){s.bullets.removeClass(s.params.bulletActiveClass);} // Buttons
if(s.params.prevButton)$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.nextButton)$(s.params.nextButton).removeClass(s.params.buttonDisabledClass); // Scrollbar
if(s.params.scrollbar && s.scrollbar){if(s.scrollbar.track && s.scrollbar.track.length)s.scrollbar.track.removeAttr('style');if(s.scrollbar.drag && s.scrollbar.drag.length)s.scrollbar.drag.removeAttr('style');}}; // Destroy
s.destroy = function(deleteInstance,cleanupStyles){ // Detach evebts
s.detachEvents(); // Stop autoplay
s.stopAutoplay(); // Destroy loop
if(s.params.loop){s.destroyLoop();} // Cleanup styles
if(cleanupStyles){s.cleanupStyles();} // Disconnect observer
s.disconnectObservers(); // Disable keyboard/mousewheel
if(s.params.keyboardControl){if(s.disableKeyboardControl)s.disableKeyboardControl();}if(s.params.mousewheelControl){if(s.disableMousewheelControl)s.disableMousewheelControl();} // Disable a11y
if(s.params.a11y && s.a11y)s.a11y.destroy(); // Destroy callback
s.emit('onDestroy'); // Delete instance
if(deleteInstance !== false)s = null;};s.init(); // Return swiper instance
return s;} /*===========================
Add .swiper plugin from Dom libraries
===========================*/function addLibraryPlugin(lib){lib.fn.swiper = function(params){var firstInstance;lib(this).each(function(){var s=new Swiper(this,params);if(!firstInstance)firstInstance = s;});return firstInstance;};}return {setters:[],
  execute:function(){;
    /*==================================================
    Prototype
====================================================*/Swiper.prototype = {isSafari:(function(){var ua=navigator.userAgent.toLowerCase();return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;})(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),isArray:function isArray(arr){return Object.prototype.toString.apply(arr) === '[object Array]';}, /*==================================================
    Browser
    ====================================================*/browser:{ie:window.navigator.pointerEnabled || window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1 || window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1}, /*==================================================
    Devices
    ====================================================*/device:(function(){var ua=navigator.userAgent;var android=ua.match(/(Android);?[\s\/]+([\d.]+)?/);var ipad=ua.match(/(iPad).*OS\s([\d_]+)/);var ipod=ua.match(/(iPod)(.*OS\s([\d_]+))?/);var iphone=!ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);return {ios:ipad || iphone || ipod,android:android};})(), /*==================================================
    Feature Detection
    ====================================================*/support:{touch:window.Modernizr && Modernizr.touch === true || (function(){return !!('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);})(),transforms3d:window.Modernizr && Modernizr.csstransforms3d === true || (function(){var div=document.createElement('div').style;return 'webkitPerspective' in div || 'MozPerspective' in div || 'OPerspective' in div || 'MsPerspective' in div || 'perspective' in div;})(),flexbox:(function(){var div=document.createElement('div').style;var styles='alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient'.split(' ');for(var i=0;i < styles.length;i++) {if(styles[i] in div)return true;}})(),observer:(function(){return 'MutationObserver' in window || 'WebkitMutationObserver' in window;})()}, /*==================================================
    Plugins
    ====================================================*/plugins:{}}; /*===========================
Dom7 Library
===========================*/Dom7 = (function(){var Dom7=function Dom7(arr){var _this=this,i=0; // Create array-like object
for(i = 0;i < arr.length;i++) {_this[i] = arr[i];}_this.length = arr.length; // Return collection with methods
return this;};var $=function $(selector,context){var arr=[],i=0;if(selector && !context){if(selector instanceof Dom7){return selector;}}if(selector){ // String
if(typeof selector === 'string'){var els,tempParent,html=selector.trim();if(html.indexOf('<') >= 0 && html.indexOf('>') >= 0){var toCreate='div';if(html.indexOf('<li') === 0)toCreate = 'ul';if(html.indexOf('<tr') === 0)toCreate = 'tbody';if(html.indexOf('<td') === 0 || html.indexOf('<th') === 0)toCreate = 'tr';if(html.indexOf('<tbody') === 0)toCreate = 'table';if(html.indexOf('<option') === 0)toCreate = 'select';tempParent = document.createElement(toCreate);tempParent.innerHTML = selector;for(i = 0;i < tempParent.childNodes.length;i++) {arr.push(tempParent.childNodes[i]);}}else {if(!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)){ // Pure ID selector
els = [document.getElementById(selector.split('#')[1])];}else { // Other selectors
els = (context || document).querySelectorAll(selector);}for(i = 0;i < els.length;i++) {if(els[i])arr.push(els[i]);}}}else if(selector.nodeType || selector === window || selector === document){arr.push(selector);}else if(selector.length > 0 && selector[0].nodeType){for(i = 0;i < selector.length;i++) {arr.push(selector[i]);}}}return new Dom7(arr);};Dom7.prototype = { // Classes and attriutes
addClass:function addClass(className){if(typeof className === 'undefined'){return this;}var classes=className.split(' ');for(var i=0;i < classes.length;i++) {for(var j=0;j < this.length;j++) {this[j].classList.add(classes[i]);}}return this;},removeClass:function removeClass(className){var classes=className.split(' ');for(var i=0;i < classes.length;i++) {for(var j=0;j < this.length;j++) {this[j].classList.remove(classes[i]);}}return this;},hasClass:function hasClass(className){if(!this[0])return false;else return this[0].classList.contains(className);},toggleClass:function toggleClass(className){var classes=className.split(' ');for(var i=0;i < classes.length;i++) {for(var j=0;j < this.length;j++) {this[j].classList.toggle(classes[i]);}}return this;},attr:function attr(attrs,value){if(arguments.length === 1 && typeof attrs === 'string'){ // Get attr
if(this[0])return this[0].getAttribute(attrs);else return undefined;}else { // Set attrs
for(var i=0;i < this.length;i++) {if(arguments.length === 2){ // String
this[i].setAttribute(attrs,value);}else { // Object
for(var attrName in attrs) {this[i][attrName] = attrs[attrName];this[i].setAttribute(attrName,attrs[attrName]);}}}return this;}},removeAttr:function removeAttr(attr){for(var i=0;i < this.length;i++) {this[i].removeAttribute(attr);}return this;},data:function data(key,value){if(typeof value === 'undefined'){ // Get value
if(this[0]){var dataKey=this[0].getAttribute('data-' + key);if(dataKey)return dataKey;else if(this[0].dom7ElementDataStorage && key in this[0].dom7ElementDataStorage)return this[0].dom7ElementDataStorage[key];else return undefined;}else return undefined;}else { // Set value
for(var i=0;i < this.length;i++) {var el=this[i];if(!el.dom7ElementDataStorage)el.dom7ElementDataStorage = {};el.dom7ElementDataStorage[key] = value;}return this;}}, // Transforms
transform:function transform(_transform){for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = _transform;}return this;},transition:function transition(duration){if(typeof duration !== 'string'){duration = duration + 'ms';}for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;}return this;}, //Events
on:function on(eventName,targetSelector,listener,capture){function handleLiveEvent(e){var target=e.target;if($(target).is(targetSelector))listener.call(target,e);else {var parents=$(target).parents();for(var k=0;k < parents.length;k++) {if($(parents[k]).is(targetSelector))listener.call(parents[k],e);}}}var events=eventName.split(' ');var i,j;for(i = 0;i < this.length;i++) {if(typeof targetSelector === 'function' || targetSelector === false){ // Usual events
if(typeof targetSelector === 'function'){listener = arguments[1];capture = arguments[2] || false;}for(j = 0;j < events.length;j++) {this[i].addEventListener(events[j],listener,capture);}}else { //Live events
for(j = 0;j < events.length;j++) {if(!this[i].dom7LiveListeners)this[i].dom7LiveListeners = [];this[i].dom7LiveListeners.push({listener:listener,liveListener:handleLiveEvent});this[i].addEventListener(events[j],handleLiveEvent,capture);}}}return this;},off:function off(eventName,targetSelector,listener,capture){var events=eventName.split(' ');for(var i=0;i < events.length;i++) {for(var j=0;j < this.length;j++) {if(typeof targetSelector === 'function' || targetSelector === false){ // Usual events
if(typeof targetSelector === 'function'){listener = arguments[1];capture = arguments[2] || false;}this[j].removeEventListener(events[i],listener,capture);}else { // Live event
if(this[j].dom7LiveListeners){for(var k=0;k < this[j].dom7LiveListeners.length;k++) {if(this[j].dom7LiveListeners[k].listener === listener){this[j].removeEventListener(events[i],this[j].dom7LiveListeners[k].liveListener,capture);}}}}}}return this;},once:function once(eventName,targetSelector,listener,capture){var dom=this;if(typeof targetSelector === 'function'){targetSelector = false;listener = arguments[1];capture = arguments[2];}function proxy(e){listener(e);dom.off(eventName,targetSelector,proxy,capture);}dom.on(eventName,targetSelector,proxy,capture);},trigger:function trigger(eventName,eventData){for(var i=0;i < this.length;i++) {var evt;try{evt = new window.CustomEvent(eventName,{detail:eventData,bubbles:true,cancelable:true});}catch(e) {evt = document.createEvent('Event');evt.initEvent(eventName,true,true);evt.detail = eventData;}this[i].dispatchEvent(evt);}return this;},transitionEnd:function transitionEnd(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){ /*jshint validthis:true */if(e.target !== this)return;callback.call(this,e);for(i = 0;i < events.length;i++) {dom.off(events[i],fireCallBack);}}if(callback){for(i = 0;i < events.length;i++) {dom.on(events[i],fireCallBack);}}return this;}, // Sizing/Styles
width:function width(){if(this[0] === window){return window.innerWidth;}else {if(this.length > 0){return parseFloat(this.css('width'));}else {return null;}}},outerWidth:function outerWidth(includeMargins){if(this.length > 0){if(includeMargins)return this[0].offsetWidth + parseFloat(this.css('margin-right')) + parseFloat(this.css('margin-left'));else return this[0].offsetWidth;}else return null;},height:function height(){if(this[0] === window){return window.innerHeight;}else {if(this.length > 0){return parseFloat(this.css('height'));}else {return null;}}},outerHeight:function outerHeight(includeMargins){if(this.length > 0){if(includeMargins)return this[0].offsetHeight + parseFloat(this.css('margin-top')) + parseFloat(this.css('margin-bottom'));else return this[0].offsetHeight;}else return null;},offset:function offset(){if(this.length > 0){var el=this[0];var box=el.getBoundingClientRect();var body=document.body;var clientTop=el.clientTop || body.clientTop || 0;var clientLeft=el.clientLeft || body.clientLeft || 0;var scrollTop=window.pageYOffset || el.scrollTop;var scrollLeft=window.pageXOffset || el.scrollLeft;return {top:box.top + scrollTop - clientTop,left:box.left + scrollLeft - clientLeft};}else {return null;}},css:function css(props,value){var i;if(arguments.length === 1){if(typeof props === 'string'){if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(props);}else {for(i = 0;i < this.length;i++) {for(var prop in props) {this[i].style[prop] = props[prop];}}return this;}}if(arguments.length === 2 && typeof props === 'string'){for(i = 0;i < this.length;i++) {this[i].style[props] = value;}return this;}return this;}, //Dom manipulation
each:function each(callback){for(var i=0;i < this.length;i++) {callback.call(this[i],i,this[i]);}return this;},html:function html(_html){if(typeof _html === 'undefined'){return this[0]?this[0].innerHTML:undefined;}else {for(var i=0;i < this.length;i++) {this[i].innerHTML = _html;}return this;}},is:function is(selector){if(!this[0])return false;var compareWith,i;if(typeof selector === 'string'){var el=this[0];if(el === document)return selector === document;if(el === window)return selector === window;if(el.matches)return el.matches(selector);else if(el.webkitMatchesSelector)return el.webkitMatchesSelector(selector);else if(el.mozMatchesSelector)return el.mozMatchesSelector(selector);else if(el.msMatchesSelector)return el.msMatchesSelector(selector);else {compareWith = $(selector);for(i = 0;i < compareWith.length;i++) {if(compareWith[i] === this[0])return true;}return false;}}else if(selector === document)return this[0] === document;else if(selector === window)return this[0] === window;else {if(selector.nodeType || selector instanceof Dom7){compareWith = selector.nodeType?[selector]:selector;for(i = 0;i < compareWith.length;i++) {if(compareWith[i] === this[0])return true;}return false;}return false;}},index:function index(){if(this[0]){var child=this[0];var i=0;while((child = child.previousSibling) !== null) {if(child.nodeType === 1)i++;}return i;}else return undefined;},eq:function eq(index){if(typeof index === 'undefined')return this;var length=this.length;var returnIndex;if(index > length - 1){return new Dom7([]);}if(index < 0){returnIndex = length + index;if(returnIndex < 0)return new Dom7([]);else return new Dom7([this[returnIndex]]);}return new Dom7([this[index]]);},append:function append(newChild){var i,j;for(i = 0;i < this.length;i++) {if(typeof newChild === 'string'){var tempDiv=document.createElement('div');tempDiv.innerHTML = newChild;while(tempDiv.firstChild) {this[i].appendChild(tempDiv.firstChild);}}else if(newChild instanceof Dom7){for(j = 0;j < newChild.length;j++) {this[i].appendChild(newChild[j]);}}else {this[i].appendChild(newChild);}}return this;},prepend:function prepend(newChild){var i,j;for(i = 0;i < this.length;i++) {if(typeof newChild === 'string'){var tempDiv=document.createElement('div');tempDiv.innerHTML = newChild;for(j = tempDiv.childNodes.length - 1;j >= 0;j--) {this[i].insertBefore(tempDiv.childNodes[j],this[i].childNodes[0]);}}else if(newChild instanceof Dom7){for(j = 0;j < newChild.length;j++) {this[i].insertBefore(newChild[j],this[i].childNodes[0]);}}else {this[i].insertBefore(newChild,this[i].childNodes[0]);}}return this;},insertBefore:function insertBefore(selector){var before=$(selector);for(var i=0;i < this.length;i++) {if(before.length === 1){before[0].parentNode.insertBefore(this[i],before[0]);}else if(before.length > 1){for(var j=0;j < before.length;j++) {before[j].parentNode.insertBefore(this[i].cloneNode(true),before[j]);}}}},insertAfter:function insertAfter(selector){var after=$(selector);for(var i=0;i < this.length;i++) {if(after.length === 1){after[0].parentNode.insertBefore(this[i],after[0].nextSibling);}else if(after.length > 1){for(var j=0;j < after.length;j++) {after[j].parentNode.insertBefore(this[i].cloneNode(true),after[j].nextSibling);}}}},next:function next(selector){if(this.length > 0){if(selector){if(this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector))return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}else {if(this[0].nextElementSibling)return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},nextAll:function nextAll(selector){var nextEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.nextElementSibling) {var next=el.nextElementSibling;if(selector){if($(next).is(selector))nextEls.push(next);}else nextEls.push(next);el = next;}return new Dom7(nextEls);},prev:function prev(selector){if(this.length > 0){if(selector){if(this[0].previousElementSibling && $(this[0].previousElementSibling).is(selector))return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}else {if(this[0].previousElementSibling)return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},prevAll:function prevAll(selector){var prevEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.previousElementSibling) {var prev=el.previousElementSibling;if(selector){if($(prev).is(selector))prevEls.push(prev);}else prevEls.push(prev);el = prev;}return new Dom7(prevEls);},parent:function parent(selector){var parents=[];for(var i=0;i < this.length;i++) {if(selector){if($(this[i].parentNode).is(selector))parents.push(this[i].parentNode);}else {parents.push(this[i].parentNode);}}return $($.unique(parents));},parents:function parents(selector){var parents=[];for(var i=0;i < this.length;i++) {var parent=this[i].parentNode;while(parent) {if(selector){if($(parent).is(selector))parents.push(parent);}else {parents.push(parent);}parent = parent.parentNode;}}return $($.unique(parents));},find:function find(selector){var foundElements=[];for(var i=0;i < this.length;i++) {var found=this[i].querySelectorAll(selector);for(var j=0;j < found.length;j++) {foundElements.push(found[j]);}}return new Dom7(foundElements);},children:function children(selector){var children=[];for(var i=0;i < this.length;i++) {var childNodes=this[i].childNodes;for(var j=0;j < childNodes.length;j++) {if(!selector){if(childNodes[j].nodeType === 1)children.push(childNodes[j]);}else {if(childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector))children.push(childNodes[j]);}}}return new Dom7($.unique(children));},remove:function remove(){for(var i=0;i < this.length;i++) {if(this[i].parentNode)this[i].parentNode.removeChild(this[i]);}return this;},add:function add(){var dom=this;var i,j;for(i = 0;i < arguments.length;i++) {var toAdd=$(arguments[i]);for(j = 0;j < toAdd.length;j++) {dom[dom.length] = toAdd[j];dom.length++;}}return dom;}};$.fn = Dom7.prototype;$.unique = function(arr){var unique=[];for(var i=0;i < arr.length;i++) {if(unique.indexOf(arr[i]) === -1)unique.push(arr[i]);}return unique;};return $;})(); /*===========================
 Get Dom libraries
 ===========================*/swiperDomPlugins = ['jQuery','Zepto','Dom7'];for(i = 0;i < swiperDomPlugins.length;i++) {if(window[swiperDomPlugins[i]]){addLibraryPlugin(window[swiperDomPlugins[i]]);}} // Required DOM Plugins
if(typeof Dom7 === 'undefined'){domLib = window.Dom7 || window.Zepto || window.jQuery;}else {domLib = Dom7;}if(domLib){if(!('transitionEnd' in domLib.fn)){domLib.fn.transitionEnd = function(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){ /*jshint validthis:true */if(e.target !== this)return;callback.call(this,e);for(i = 0;i < events.length;i++) {dom.off(events[i],fireCallBack);}}if(callback){for(i = 0;i < events.length;i++) {dom.on(events[i],fireCallBack);}}return this;};}if(!('transform' in domLib.fn)){domLib.fn.transform = function(transform){for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;}return this;};}if(!('transition' in domLib.fn)){domLib.fn.transition = function(duration){if(typeof duration !== 'string'){duration = duration + 'ms';}for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;}return this;};}}}};});
'use strict';

System.register('ionic-angular/components', ['./components/action-sheet/action-sheet', './components/alert/alert', './components/app/app', './components/backdrop/backdrop', './components/badge/badge', './components/button/button', './components/checkbox/checkbox', './components/content/content', './components/datetime/datetime', './components/icon/icon', './components/img/img', './components/infinite-scroll/infinite-scroll', './components/infinite-scroll/infinite-scroll-content', './components/input/input', './components/item/item', './components/item/item-reorder', './components/item/item-sliding', './components/label/label', './components/list/list', './components/loading/loading', './components/menu/menu', './components/menu/menu-close', './components/menu/menu-controller', './components/menu/menu-toggle', './components/menu/menu-types', './components/modal/modal', './components/nav/nav', './components/nav/nav-controller', './components/nav/nav-params', './components/nav/nav-pop', './components/nav/nav-push', './components/nav/view-controller', './components/navbar/navbar', './components/option/option', './components/picker/picker', './components/popover/popover', './components/radio/radio-button', './components/radio/radio-group', './components/range/range', './components/refresher/refresher', './components/refresher/refresher-content', './components/scroll/scroll', './components/searchbar/searchbar', './components/segment/segment', './components/select/select', './components/show-hide-when/show-hide-when', './components/slides/slides', './components/spinner/spinner', './components/tabs/tab', './components/tabs/tabs', './components/tap-click/tap-click', './components/toast/toast', './components/toggle/toggle', './components/toolbar/toolbar', './components/virtual-scroll/virtual-scroll'], function (_export, _context) {
  "use strict";

  return {
    setters: [function (_componentsActionSheetActionSheet) {
      var _exportObj = {};
      _exportObj.ActionSheet = _componentsActionSheetActionSheet.ActionSheet;
      _exportObj.ActionSheetOptions = _componentsActionSheetActionSheet.ActionSheetOptions;

      _export(_exportObj);
    }, function (_componentsAlertAlert) {
      var _exportObj2 = {};
      _exportObj2.Alert = _componentsAlertAlert.Alert;
      _exportObj2.AlertOptions = _componentsAlertAlert.AlertOptions;
      _exportObj2.AlertInputOptions = _componentsAlertAlert.AlertInputOptions;

      _export(_exportObj2);
    }, function (_componentsAppApp) {
      var _exportObj3 = {};
      _exportObj3.App = _componentsAppApp.App;

      _export(_exportObj3);
    }, function (_componentsBackdropBackdrop) {
      var _exportObj4 = {};
      _exportObj4.Backdrop = _componentsBackdropBackdrop.Backdrop;

      _export(_exportObj4);
    }, function (_componentsBadgeBadge) {
      var _exportObj5 = {};
      _exportObj5.Badge = _componentsBadgeBadge.Badge;

      _export(_exportObj5);
    }, function (_componentsButtonButton) {
      var _exportObj6 = {};
      _exportObj6.Button = _componentsButtonButton.Button;

      _export(_exportObj6);
    }, function (_componentsCheckboxCheckbox) {
      var _exportObj7 = {};
      _exportObj7.Checkbox = _componentsCheckboxCheckbox.Checkbox;

      _export(_exportObj7);
    }, function (_componentsContentContent) {
      var _exportObj8 = {};
      _exportObj8.Content = _componentsContentContent.Content;

      _export(_exportObj8);
    }, function (_componentsDatetimeDatetime) {
      var _exportObj9 = {};
      _exportObj9.DateTime = _componentsDatetimeDatetime.DateTime;

      _export(_exportObj9);
    }, function (_componentsIconIcon) {
      var _exportObj10 = {};
      _exportObj10.Icon = _componentsIconIcon.Icon;

      _export(_exportObj10);
    }, function (_componentsImgImg) {
      var _exportObj11 = {};
      _exportObj11.Img = _componentsImgImg.Img;

      _export(_exportObj11);
    }, function (_componentsInfiniteScrollInfiniteScroll) {
      var _exportObj12 = {};
      _exportObj12.InfiniteScroll = _componentsInfiniteScrollInfiniteScroll.InfiniteScroll;

      _export(_exportObj12);
    }, function (_componentsInfiniteScrollInfiniteScrollContent) {
      var _exportObj13 = {};
      _exportObj13.InfiniteScrollContent = _componentsInfiniteScrollInfiniteScrollContent.InfiniteScrollContent;

      _export(_exportObj13);
    }, function (_componentsInputInput) {
      var _exportObj14 = {};
      _exportObj14.TextArea = _componentsInputInput.TextArea;
      _exportObj14.TextInput = _componentsInputInput.TextInput;

      _export(_exportObj14);
    }, function (_componentsItemItem) {
      var _exportObj15 = {};
      _exportObj15.Item = _componentsItemItem.Item;

      _export(_exportObj15);
    }, function (_componentsItemItemReorder) {
      var _exportObj16 = {};
      _exportObj16.ItemReorder = _componentsItemItemReorder.ItemReorder;

      _export(_exportObj16);
    }, function (_componentsItemItemSliding) {
      var _exportObj17 = {};
      _exportObj17.ItemSliding = _componentsItemItemSliding.ItemSliding;
      _exportObj17.ItemOptions = _componentsItemItemSliding.ItemOptions;
      _exportObj17.ItemSideFlags = _componentsItemItemSliding.ItemSideFlags;

      _export(_exportObj17);
    }, function (_componentsLabelLabel) {
      var _exportObj18 = {};
      _exportObj18.Label = _componentsLabelLabel.Label;

      _export(_exportObj18);
    }, function (_componentsListList) {
      var _exportObj19 = {};
      _exportObj19.List = _componentsListList.List;
      _exportObj19.ListHeader = _componentsListList.ListHeader;

      _export(_exportObj19);
    }, function (_componentsLoadingLoading) {
      var _exportObj20 = {};
      _exportObj20.Loading = _componentsLoadingLoading.Loading;
      _exportObj20.LoadingOptions = _componentsLoadingLoading.LoadingOptions;

      _export(_exportObj20);
    }, function (_componentsMenuMenu) {
      var _exportObj21 = {};
      _exportObj21.Menu = _componentsMenuMenu.Menu;

      _export(_exportObj21);
    }, function (_componentsMenuMenuClose) {
      var _exportObj22 = {};
      _exportObj22.MenuClose = _componentsMenuMenuClose.MenuClose;

      _export(_exportObj22);
    }, function (_componentsMenuMenuController) {
      var _exportObj23 = {};
      _exportObj23.MenuController = _componentsMenuMenuController.MenuController;

      _export(_exportObj23);
    }, function (_componentsMenuMenuToggle) {
      var _exportObj24 = {};
      _exportObj24.MenuToggle = _componentsMenuMenuToggle.MenuToggle;

      _export(_exportObj24);
    }, function (_componentsMenuMenuTypes) {
      var _exportObj25 = {};
      _exportObj25.MenuType = _componentsMenuMenuTypes.MenuType;

      _export(_exportObj25);
    }, function (_componentsModalModal) {
      var _exportObj26 = {};
      _exportObj26.Modal = _componentsModalModal.Modal;
      _exportObj26.ModalOptions = _componentsModalModal.ModalOptions;

      _export(_exportObj26);
    }, function (_componentsNavNav) {
      var _exportObj27 = {};
      _exportObj27.Nav = _componentsNavNav.Nav;

      _export(_exportObj27);
    }, function (_componentsNavNavController) {
      var _exportObj28 = {};
      _exportObj28.NavController = _componentsNavNavController.NavController;
      _exportObj28.NavOptions = _componentsNavNavController.NavOptions;

      _export(_exportObj28);
    }, function (_componentsNavNavParams) {
      var _exportObj29 = {};
      _exportObj29.NavParams = _componentsNavNavParams.NavParams;

      _export(_exportObj29);
    }, function (_componentsNavNavPop) {
      var _exportObj30 = {};
      _exportObj30.NavPop = _componentsNavNavPop.NavPop;

      _export(_exportObj30);
    }, function (_componentsNavNavPush) {
      var _exportObj31 = {};
      _exportObj31.NavPush = _componentsNavNavPush.NavPush;

      _export(_exportObj31);
    }, function (_componentsNavViewController) {
      var _exportObj32 = {};
      _exportObj32.ViewController = _componentsNavViewController.ViewController;

      _export(_exportObj32);
    }, function (_componentsNavbarNavbar) {
      var _exportObj33 = {};
      _exportObj33.Navbar = _componentsNavbarNavbar.Navbar;
      _exportObj33.NavbarTemplate = _componentsNavbarNavbar.NavbarTemplate;

      _export(_exportObj33);
    }, function (_componentsOptionOption) {
      var _exportObj34 = {};
      _exportObj34.Option = _componentsOptionOption.Option;

      _export(_exportObj34);
    }, function (_componentsPickerPicker) {
      var _exportObj35 = {};
      _exportObj35.Picker = _componentsPickerPicker.Picker;
      _exportObj35.PickerOptions = _componentsPickerPicker.PickerOptions;
      _exportObj35.PickerColumn = _componentsPickerPicker.PickerColumn;
      _exportObj35.PickerColumnOption = _componentsPickerPicker.PickerColumnOption;

      _export(_exportObj35);
    }, function (_componentsPopoverPopover) {
      var _exportObj36 = {};
      _exportObj36.Popover = _componentsPopoverPopover.Popover;
      _exportObj36.PopoverOptions = _componentsPopoverPopover.PopoverOptions;

      _export(_exportObj36);
    }, function (_componentsRadioRadioButton) {
      var _exportObj37 = {};
      _exportObj37.RadioButton = _componentsRadioRadioButton.RadioButton;

      _export(_exportObj37);
    }, function (_componentsRadioRadioGroup) {
      var _exportObj38 = {};
      _exportObj38.RadioGroup = _componentsRadioRadioGroup.RadioGroup;

      _export(_exportObj38);
    }, function (_componentsRangeRange) {
      var _exportObj39 = {};
      _exportObj39.Range = _componentsRangeRange.Range;
      _exportObj39.RangeKnob = _componentsRangeRange.RangeKnob;
      _exportObj39.ClientRect = _componentsRangeRange.ClientRect;

      _export(_exportObj39);
    }, function (_componentsRefresherRefresher) {
      var _exportObj40 = {};
      _exportObj40.Refresher = _componentsRefresherRefresher.Refresher;

      _export(_exportObj40);
    }, function (_componentsRefresherRefresherContent) {
      var _exportObj41 = {};
      _exportObj41.RefresherContent = _componentsRefresherRefresherContent.RefresherContent;

      _export(_exportObj41);
    }, function (_componentsScrollScroll) {
      var _exportObj42 = {};
      _exportObj42.Scroll = _componentsScrollScroll.Scroll;

      _export(_exportObj42);
    }, function (_componentsSearchbarSearchbar) {
      var _exportObj43 = {};
      _exportObj43.Searchbar = _componentsSearchbarSearchbar.Searchbar;

      _export(_exportObj43);
    }, function (_componentsSegmentSegment) {
      var _exportObj44 = {};
      _exportObj44.Segment = _componentsSegmentSegment.Segment;
      _exportObj44.SegmentButton = _componentsSegmentSegment.SegmentButton;

      _export(_exportObj44);
    }, function (_componentsSelectSelect) {
      var _exportObj45 = {};
      _exportObj45.Select = _componentsSelectSelect.Select;

      _export(_exportObj45);
    }, function (_componentsShowHideWhenShowHideWhen) {
      var _exportObj46 = {};
      _exportObj46.ShowWhen = _componentsShowHideWhenShowHideWhen.ShowWhen;
      _exportObj46.HideWhen = _componentsShowHideWhenShowHideWhen.HideWhen;
      _exportObj46.DisplayWhen = _componentsShowHideWhenShowHideWhen.DisplayWhen;

      _export(_exportObj46);
    }, function (_componentsSlidesSlides) {
      var _exportObj47 = {};
      _exportObj47.Slides = _componentsSlidesSlides.Slides;
      _exportObj47.Slide = _componentsSlidesSlides.Slide;
      _exportObj47.SlideLazy = _componentsSlidesSlides.SlideLazy;

      _export(_exportObj47);
    }, function (_componentsSpinnerSpinner) {
      var _exportObj48 = {};
      _exportObj48.Spinner = _componentsSpinnerSpinner.Spinner;

      _export(_exportObj48);
    }, function (_componentsTabsTab) {
      var _exportObj49 = {};
      _exportObj49.Tab = _componentsTabsTab.Tab;

      _export(_exportObj49);
    }, function (_componentsTabsTabs) {
      var _exportObj50 = {};
      _exportObj50.Tabs = _componentsTabsTabs.Tabs;

      _export(_exportObj50);
    }, function (_componentsTapClickTapClick) {
      var _exportObj51 = {};
      _exportObj51.TapClick = _componentsTapClickTapClick.TapClick;
      _exportObj51.isActivatable = _componentsTapClickTapClick.isActivatable;

      _export(_exportObj51);
    }, function (_componentsToastToast) {
      var _exportObj52 = {};
      _exportObj52.Toast = _componentsToastToast.Toast;
      _exportObj52.ToastOptions = _componentsToastToast.ToastOptions;

      _export(_exportObj52);
    }, function (_componentsToggleToggle) {
      var _exportObj53 = {};
      _exportObj53.Toggle = _componentsToggleToggle.Toggle;

      _export(_exportObj53);
    }, function (_componentsToolbarToolbar) {
      var _exportObj54 = {};
      _exportObj54.Toolbar = _componentsToolbarToolbar.Toolbar;
      _exportObj54.ToolbarBase = _componentsToolbarToolbar.ToolbarBase;
      _exportObj54.Header = _componentsToolbarToolbar.Header;
      _exportObj54.Footer = _componentsToolbarToolbar.Footer;

      _export(_exportObj54);
    }, function (_componentsVirtualScrollVirtualScroll) {
      var _exportObj55 = {};
      _exportObj55.VirtualScroll = _componentsVirtualScrollVirtualScroll.VirtualScroll;

      _export(_exportObj55);
    }],
    execute: function () {}
  };
});
'use strict';

System.register('ionic-angular/index', ['./config/bootstrap', './config/config', './config/directives', './decorators/page', './components', './gestures/drag-gesture', './gestures/gesture', './gestures/slide-edge-gesture', './gestures/slide-gesture', './platform/platform', './platform/storage', './util/click-block', './util/events', './util/keyboard', './util/form', './util/util', './animations/animation', './transitions/page-transition', './transitions/transition', './translation/translate', './translation/translate_pipe', './config/modes', './platform/registry', './animations/builtins', './transitions/transition-ios', './transitions/transition-md', './transitions/transition-wp'], function (_export, _context) {
  "use strict";

  return {
    setters: [function (_configBootstrap) {
      var _exportObj = {};

      for (var _key in _configBootstrap) {
        if (_key !== "default") _exportObj[_key] = _configBootstrap[_key];
      }

      _export(_exportObj);
    }, function (_configConfig) {
      var _exportObj2 = {};

      for (var _key2 in _configConfig) {
        if (_key2 !== "default") _exportObj2[_key2] = _configConfig[_key2];
      }

      _export(_exportObj2);
    }, function (_configDirectives) {
      var _exportObj3 = {};

      for (var _key3 in _configDirectives) {
        if (_key3 !== "default") _exportObj3[_key3] = _configDirectives[_key3];
      }

      _export(_exportObj3);
    }, function (_decoratorsPage) {
      var _exportObj4 = {};

      for (var _key4 in _decoratorsPage) {
        if (_key4 !== "default") _exportObj4[_key4] = _decoratorsPage[_key4];
      }

      _export(_exportObj4);
    }, function (_components) {
      var _exportObj5 = {};

      for (var _key5 in _components) {
        if (_key5 !== "default") _exportObj5[_key5] = _components[_key5];
      }

      _export(_exportObj5);
    }, function (_gesturesDragGesture) {
      var _exportObj6 = {};

      for (var _key6 in _gesturesDragGesture) {
        if (_key6 !== "default") _exportObj6[_key6] = _gesturesDragGesture[_key6];
      }

      _export(_exportObj6);
    }, function (_gesturesGesture) {
      var _exportObj7 = {};

      for (var _key7 in _gesturesGesture) {
        if (_key7 !== "default") _exportObj7[_key7] = _gesturesGesture[_key7];
      }

      _export(_exportObj7);
    }, function (_gesturesSlideEdgeGesture) {
      var _exportObj8 = {};

      for (var _key8 in _gesturesSlideEdgeGesture) {
        if (_key8 !== "default") _exportObj8[_key8] = _gesturesSlideEdgeGesture[_key8];
      }

      _export(_exportObj8);
    }, function (_gesturesSlideGesture) {
      var _exportObj9 = {};

      for (var _key9 in _gesturesSlideGesture) {
        if (_key9 !== "default") _exportObj9[_key9] = _gesturesSlideGesture[_key9];
      }

      _export(_exportObj9);
    }, function (_platformPlatform) {
      var _exportObj10 = {};

      for (var _key10 in _platformPlatform) {
        if (_key10 !== "default") _exportObj10[_key10] = _platformPlatform[_key10];
      }

      _export(_exportObj10);
    }, function (_platformStorage) {
      var _exportObj11 = {};

      for (var _key11 in _platformStorage) {
        if (_key11 !== "default") _exportObj11[_key11] = _platformStorage[_key11];
      }

      _export(_exportObj11);
    }, function (_utilClickBlock) {
      var _exportObj12 = {};

      for (var _key12 in _utilClickBlock) {
        if (_key12 !== "default") _exportObj12[_key12] = _utilClickBlock[_key12];
      }

      _export(_exportObj12);
    }, function (_utilEvents) {
      var _exportObj13 = {};

      for (var _key13 in _utilEvents) {
        if (_key13 !== "default") _exportObj13[_key13] = _utilEvents[_key13];
      }

      _export(_exportObj13);
    }, function (_utilKeyboard) {
      var _exportObj14 = {};

      for (var _key14 in _utilKeyboard) {
        if (_key14 !== "default") _exportObj14[_key14] = _utilKeyboard[_key14];
      }

      _export(_exportObj14);
    }, function (_utilForm) {
      var _exportObj15 = {};

      for (var _key15 in _utilForm) {
        if (_key15 !== "default") _exportObj15[_key15] = _utilForm[_key15];
      }

      _export(_exportObj15);
    }, function (_utilUtil) {
      var _exportObj16 = {};
      _exportObj16.reorderArray = _utilUtil.reorderArray;

      _export(_exportObj16);
    }, function (_animationsAnimation) {
      var _exportObj17 = {};

      for (var _key16 in _animationsAnimation) {
        if (_key16 !== "default") _exportObj17[_key16] = _animationsAnimation[_key16];
      }

      _export(_exportObj17);
    }, function (_transitionsPageTransition) {
      var _exportObj18 = {};

      for (var _key17 in _transitionsPageTransition) {
        if (_key17 !== "default") _exportObj18[_key17] = _transitionsPageTransition[_key17];
      }

      _export(_exportObj18);
    }, function (_transitionsTransition) {
      var _exportObj19 = {};

      for (var _key18 in _transitionsTransition) {
        if (_key18 !== "default") _exportObj19[_key18] = _transitionsTransition[_key18];
      }

      _export(_exportObj19);
    }, function (_translationTranslate) {
      var _exportObj20 = {};

      for (var _key19 in _translationTranslate) {
        if (_key19 !== "default") _exportObj20[_key19] = _translationTranslate[_key19];
      }

      _export(_exportObj20);
    }, function (_translationTranslate_pipe) {
      var _exportObj21 = {};

      for (var _key20 in _translationTranslate_pipe) {
        if (_key20 !== "default") _exportObj21[_key20] = _translationTranslate_pipe[_key20];
      }

      _export(_exportObj21);
    }, function (_configModes) {}, function (_platformRegistry) {}, function (_animationsBuiltins) {}, function (_transitionsTransitionIos) {}, function (_transitionsTransitionMd) {}, function (_transitionsTransitionWp) {}],
    execute: function () {}
  };
});
'use strict';

System.register('ionic-angular/util', ['./util/dom', './util/util', './util/datetime-util'], function (_export, _context) {
  "use strict";

  var domUtil, dom;
  return {
    setters: [function (_utilDom) {
      domUtil = _utilDom;
    }, function (_utilUtil) {
      var _exportObj = {};

      for (var _key in _utilUtil) {
        if (_key !== "default") _exportObj[_key] = _utilUtil[_key];
      }

      _export(_exportObj);
    }, function (_utilDatetimeUtil) {
      var _exportObj2 = {};

      for (var _key2 in _utilDatetimeUtil) {
        if (_key2 !== "default") _exportObj2[_key2] = _utilDatetimeUtil[_key2];
      }

      _export(_exportObj2);
    }],
    execute: function () {
      _export('dom', dom = domUtil);

      _export('dom', dom);
    }
  };
});
'use strict';

System.register('ionic-angular/animations/animation', ['../util/dom', '../util/util'], function (_export, _context) {
    "use strict";

    var CSS, rafFrames, transitionEnd, nativeTimeout, assign, isDefined, _createClass, Animation, TRANSFORMS, CSS_VALUE_REGEX, SUPPORTS_WILL_CHANGE, AnimationRegistry;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_utilDom) {
            CSS = _utilDom.CSS;
            rafFrames = _utilDom.rafFrames;
            transitionEnd = _utilDom.transitionEnd;
            nativeTimeout = _utilDom.nativeTimeout;
        }, function (_utilUtil) {
            assign = _utilUtil.assign;
            isDefined = _utilUtil.isDefined;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Animation', Animation = function () {
                function Animation(ele) {
                    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    _classCallCheck(this, Animation);

                    this._c = [];
                    this._el = [];
                    this._fx = {};
                    this._bfSty = {};
                    this._bfAdd = [];
                    this._bfRmv = [];
                    this._afSty = {};
                    this._afAdd = [];
                    this._afRmv = [];
                    this._bfReadFns = [];
                    this._bfWriteFns = [];
                    this._fFns = [];
                    this._fOnceFns = [];
                    this._rv = false;
                    this._lastUpd = 0;
                    this.isPlaying = false;
                    this.hasTween = false;
                    this.hasCompleted = false;
                    this.element(ele);
                    this._opts = assign({
                        renderDelay: 24
                    }, opts);
                }
                /**
                 * NO DOM
                 */


                _createClass(Animation, [{
                    key: '_reset',
                    value: function _reset() {
                        this._fx = {};
                        this._bfSty = {};
                        this._afSty = {};
                        this._el.length = this._c.length = this._bfAdd.length = this._bfRmv.length = this._afAdd.length = this._afRmv.length = this._fFns.length = this._bfReadFns.length = this._bfWriteFns.length = this._fOnceFns.length = 0;
                        this._easing = this._dur = null;
                    }
                }, {
                    key: 'element',
                    value: function element(ele) {
                        var i;
                        if (ele) {
                            if (ele.length) {
                                for (i = 0; i < ele.length; i++) {
                                    this._addEle(ele[i]);
                                }
                            } else if (typeof ele === 'string') {
                                ele = document.querySelectorAll(ele);
                                for (i = 0; i < ele.length; i++) {
                                    this._addEle(ele[i]);
                                }
                            } else {
                                this._addEle(ele);
                            }
                        }
                        return this;
                    }
                }, {
                    key: '_addEle',
                    value: function _addEle(ele) {
                        if (ele.nativeElement) {
                            ele = ele.nativeElement;
                        }
                        if (ele.nodeType === 1) {
                            this._el.push(ele);
                        }
                    }
                }, {
                    key: 'parent',
                    value: function parent(parentAnimation) {
                        this._parent = parentAnimation;
                        return this;
                    }
                }, {
                    key: 'add',
                    value: function add(childAnimation) {
                        childAnimation.parent(this);
                        this._c.push(childAnimation);
                        return this;
                    }
                }, {
                    key: 'getDuration',
                    value: function getDuration() {
                        return this._dur !== null ? this._dur : this._parent && this._parent.getDuration() || 0;
                    }
                }, {
                    key: 'duration',
                    value: function duration(milliseconds) {
                        this._dur = milliseconds;
                        return this;
                    }
                }, {
                    key: 'getEasing',
                    value: function getEasing() {
                        return this._easing !== null ? this._easing : this._parent && this._parent.getEasing() || null;
                    }
                }, {
                    key: 'easing',
                    value: function easing(name) {
                        this._easing = name;
                        return this;
                    }
                }, {
                    key: 'from',
                    value: function from(prop, val) {
                        this._addProp('from', prop, val);
                        return this;
                    }
                }, {
                    key: 'to',
                    value: function to(prop, val, clearProperyAfterTransition) {
                        var fx = this._addProp('to', prop, val);
                        if (clearProperyAfterTransition) {
                            // if this effect is a transform then clear the transform effect
                            // otherwise just clear the actual property
                            this.after.clearStyles([fx.trans ? CSS.transform : prop]);
                        }
                        return this;
                    }
                }, {
                    key: 'fromTo',
                    value: function fromTo(prop, fromVal, toVal, clearProperyAfterTransition) {
                        return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);
                    }
                }, {
                    key: '_addProp',
                    value: function _addProp(state, prop, val) {
                        var fxProp = this._fx[prop];
                        if (!fxProp) {
                            // first time we've see this EffectProperty
                            fxProp = this._fx[prop] = {
                                trans: typeof TRANSFORMS[prop] !== 'undefined',
                                wc: ''
                            };
                            // add the will-change property for transforms or opacity
                            if (fxProp.trans) {
                                fxProp.wc = CSS.transform;
                            } else if (prop === 'opacity') {
                                fxProp.wc = prop;
                            }
                        }
                        // add from/to EffectState to the EffectProperty
                        var fxState = fxProp[state] = {
                            val: val,
                            num: null,
                            unit: ''
                        };
                        if (typeof val === 'string' && val.indexOf(' ') < 0) {
                            var r = val.match(CSS_VALUE_REGEX);
                            var num = parseFloat(r[1]);
                            if (!isNaN(num)) {
                                fxState.num = num;
                            }
                            fxState.unit = r[0] !== r[2] ? r[2] : '';
                        } else if (typeof val === 'number') {
                            fxState.num = val;
                        }
                        return fxProp;
                    }
                }, {
                    key: 'play',
                    value: function play() {
                        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        var self = this;
                        var i;
                        if (isDefined(opts.duration)) {
                            self._dur = opts.duration;
                        }
                        console.debug('Animation, play, duration', self._dur, 'easing', self._easing);
                        // always default that an animation does not tween
                        // a tween requires that an Animation class has an element
                        // and that it has at least one FROM/TO effect
                        // and that the FROM/TO effect can tween numeric values
                        self.hasTween = false;
                        self.hasCompleted = false;
                        self.isPlaying = true;
                        // this is the top level animation and is in full control
                        // of when the async play() should actually kick off
                        // if there is no duration then it'll set the TO property immediately
                        // if there is a duration, then it'll stage all animations at the
                        // FROM property and transition duration, wait a few frames, then
                        // kick off the animation by setting the TO property for each animation
                        // ensure all past transition end events have been cleared
                        self._clearAsync();
                        if (self._dur > 30) {
                            // this animation has a duration, so it should animate
                            // place all the elements with their FROM properties
                            // set the FROM properties
                            // ******** DOM WRITE ****************
                            self._progress(0);
                            // add the will-change or translateZ properties when applicable
                            // ******** DOM WRITE ****************
                            self._willChg(true);
                            // set the async TRANSITION END event
                            // and run onFinishes when the transition ends
                            // ******** DOM WRITE ****************
                            self._asyncEnd(self._dur, true);
                            // begin each animation when everything is rendered in their place
                            // and the transition duration/easing is ready to go
                            rafFrames(self._opts.renderDelay / 16, function () {
                                // there's been a moment and the elements are in place
                                // fire off all the "before" function that have DOM READS in them
                                // elements will be in the DOM, however visibily hidden
                                // so we can read their dimensions if need be
                                // ******** DOM READ ****************
                                self._beforeReadFn();
                                // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                                // fire off all the "before" function that have DOM WRITES in them
                                // ******** DOM WRITE ****************
                                self._beforeWriteFn();
                                // stage all of the before css classes and inline styles
                                // will recursively stage all child elements
                                // ******** DOM WRITE ****************
                                self._before();
                                // now set the TRANSITION duration/easing
                                // ******** DOM WRITE ****************
                                self._setTrans(self._dur, false);
                                // wait a few moments again to wait for the transition
                                // info to take hold in the DOM
                                rafFrames(2, function () {
                                    // browser had some time to render everything in place
                                    // and the transition duration/easing is set
                                    // now set the TO properties
                                    // which will trigger the transition to begin
                                    // ******** DOM WRITE ****************
                                    self._progress(1);
                                });
                            });
                        } else {
                            // this animation does not have a duration
                            // but we still need to apply the styles and wait
                            // a frame so we can accurately read the dimensions
                            rafFrames(self._opts.renderDelay / 16, function () {
                                // fire off all the "before" function that have DOM READS in them
                                // elements will be in the DOM, however visibily hidden
                                // so we can read their dimensions if need be
                                // ******** DOM READ ****************
                                self._beforeReadFn();
                                // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                                // fire off all the "before" function that have DOM WRITES in them
                                // ******** DOM WRITE ****************
                                self._beforeWriteFn();
                                // ensure before css has ran
                                // ******** DOM WRITE ****************
                                self._before();
                                // this animation does not have a duration, so it should not animate
                                // just go straight to the TO properties and call it done
                                // ******** DOM WRITE ****************
                                self._progress(1);
                                // since there was no animation, immediately run the after
                                // ******** DOM WRITE ****************
                                self._after();
                                // since there was no animation, it's done
                                // fire off all the onFinishes
                                // and now you know
                                self._didFinish(true);
                            });
                        }
                    }
                }, {
                    key: 'stop',
                    value: function stop() {
                        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        var self = this;
                        var duration = isDefined(opts.duration) ? opts.duration : 0;
                        var stepValue = isDefined(opts.stepValue) ? opts.stepValue : 1;
                        // ensure all past transition end events have been cleared
                        this._clearAsync();
                        // set the TO properties
                        // ******** DOM WRITE ****************
                        self._progress(stepValue);
                        if (duration > 30) {
                            // this animation has a duration, so it should animate
                            // place all the elements with their TO properties
                            // now set the TRANSITION duration
                            // ******** DOM WRITE ****************
                            self._setTrans(duration, true);
                            // set the async TRANSITION END event
                            // and run onFinishes when the transition ends
                            // ******** DOM WRITE ****************
                            self._asyncEnd(duration, false);
                        } else {
                            // this animation does not have a duration, so it should not animate
                            // just go straight to the TO properties and call it done
                            // ******** DOM WRITE ****************
                            self._after();
                            // since there was no animation, it's done
                            // fire off all the onFinishes
                            self._didFinish(false);
                        }
                    }
                }, {
                    key: '_asyncEnd',
                    value: function _asyncEnd(duration, shouldComplete) {
                        var self = this;
                        function onTransitionEnd(ev) {
                            console.debug('Animation onTransitionEnd', ev.target.nodeName, ev.propertyName);
                            // ensure transition end events and timeouts have been cleared
                            self._clearAsync();
                            // set the after styles
                            // ******** DOM WRITE ****************
                            self._after();
                            // remove will change properties
                            // ******** DOM WRITE ****************
                            self._willChg(false);
                            // transition finished
                            self._didFinish(shouldComplete);
                        }
                        function onTransitionFallback() {
                            console.debug('Animation onTransitionFallback');
                            // oh noz! the transition end event didn't fire in time!
                            // instead the fallback timer when first
                            // clear the other async end events from firing
                            self._tmr = 0;
                            self._clearAsync();
                            // too late to have a smooth animation, just finish it
                            // ******** DOM WRITE ****************
                            self._setTrans(0, true);
                            // ensure the ending progress step gets rendered
                            // ******** DOM WRITE ****************
                            self._progress(1);
                            // set the after styles
                            // ******** DOM WRITE ****************
                            self._after();
                            // remove will change properties
                            // ******** DOM WRITE ****************
                            self._willChg(false);
                            // transition finished
                            self._didFinish(shouldComplete);
                        }
                        // set the TRANSITION END event on one of the transition elements
                        self._unregTrans = transitionEnd(self._transEl(), onTransitionEnd);
                        // set a fallback timeout if the transition end event never fires, or is too slow
                        // transition end fallback: (animation duration + XXms)
                        self._tmr = nativeTimeout(onTransitionFallback, duration + 400);
                    }
                }, {
                    key: '_clearAsync',
                    value: function _clearAsync() {
                        this._unregTrans && this._unregTrans();
                        if (this._tmr) {
                            clearTimeout(this._tmr);
                            this._tmr = 0;
                        }
                    }
                }, {
                    key: '_progress',
                    value: function _progress(stepValue) {
                        // bread 'n butter
                        var i;
                        var prop;
                        var fx;
                        var val;
                        var transforms;
                        var tweenEffect;
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i]._progress(stepValue);
                        }
                        if (this._el.length) {
                            // flip the number if we're going in reverse
                            if (this._rv) {
                                stepValue = stepValue * -1 + 1;
                            }
                            transforms = [];
                            for (prop in this._fx) {
                                fx = this._fx[prop];
                                if (fx.from && fx.to) {
                                    tweenEffect = fx.from.num !== fx.to.num;
                                    if (tweenEffect) {
                                        this.hasTween = true;
                                    }
                                    if (stepValue === 0) {
                                        // FROM
                                        val = fx.from.val;
                                    } else if (stepValue === 1) {
                                        // TO
                                        val = fx.to.val;
                                    } else if (tweenEffect) {
                                        // EVERYTHING IN BETWEEN
                                        val = (fx.to.num - fx.from.num) * stepValue + fx.from.num + fx.to.unit;
                                    } else {
                                        val = null;
                                    }
                                    if (val !== null) {
                                        if (fx.trans) {
                                            transforms.push(prop + '(' + val + ')');
                                        } else {
                                            for (i = 0; i < this._el.length; i++) {
                                                // ******** DOM WRITE ****************
                                                this._el[i].style[prop] = val;
                                            }
                                        }
                                    }
                                }
                            }
                            // place all transforms on the same property
                            if (transforms.length) {
                                if (!SUPPORTS_WILL_CHANGE) {
                                    // if the element doesn't support will-change
                                    // then auto add translateZ for transform properties
                                    transforms.push('translateZ(0px)');
                                }
                                for (i = 0; i < this._el.length; i++) {
                                    // ******** DOM WRITE ****************
                                    this._el[i].style[CSS.transform] = transforms.join(' ');
                                }
                            }
                        }
                    }
                }, {
                    key: '_setTrans',
                    value: function _setTrans(duration, forcedLinearEasing) {
                        var i;
                        var easing;
                        // set the TRANSITION properties inline on the element
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i]._setTrans(duration, forcedLinearEasing);
                        }
                        if (Object.keys(this._fx).length) {
                            for (i = 0; i < this._el.length; i++) {
                                // all parent/child animations should have the same duration
                                // ******** DOM WRITE ****************
                                this._el[i].style[CSS.transitionDuration] = duration + 'ms';
                                // each animation can have a different easing
                                easing = forcedLinearEasing ? 'linear' : this.getEasing();
                                if (easing) {
                                    // ******** DOM WRITE ****************
                                    this._el[i].style[CSS.transitionTimingFn] = easing;
                                }
                            }
                        }
                    }
                }, {
                    key: '_willChg',
                    value: function _willChg(addWillChange) {
                        var i;
                        var wc;
                        var prop;
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i]._willChg(addWillChange);
                        }
                        if (SUPPORTS_WILL_CHANGE) {
                            wc = [];
                            if (addWillChange) {
                                for (prop in this._fx) {
                                    if (this._fx[prop].wc !== '') {
                                        if (this._fx[prop].wc === 'webkitTransform') {
                                            wc.push('transform', '-webkit-transform');
                                        } else {
                                            wc.push(this._fx[prop].wc);
                                        }
                                    }
                                }
                            }
                            for (i = 0; i < this._el.length; i++) {
                                // ******** DOM WRITE ****************
                                this._el[i].style['willChange'] = wc.join(',');
                            }
                        }
                    }
                }, {
                    key: '_before',
                    value: function _before() {
                        // before the RENDER_DELAY
                        // before the animations have started
                        var i;
                        var j;
                        var prop;
                        var ele;
                        // stage all of the child animations
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i]._before();
                        }
                        if (!this._rv) {
                            for (i = 0; i < this._el.length; i++) {
                                ele = this._el[i];
                                // css classes to add before the animation
                                for (j = 0; j < this._bfAdd.length; j++) {
                                    // ******** DOM WRITE ****************
                                    ele.classList.add(this._bfAdd[j]);
                                }
                                // css classes to remove before the animation
                                for (j = 0; j < this._bfRmv.length; j++) {
                                    // ******** DOM WRITE ****************
                                    ele.classList.remove(this._bfRmv[j]);
                                }
                                // inline styles to add before the animation
                                for (prop in this._bfSty) {
                                    // ******** DOM WRITE ****************
                                    ele.style[prop] = this._bfSty[prop];
                                }
                            }
                        }
                    }
                }, {
                    key: '_beforeReadFn',
                    value: function _beforeReadFn() {
                        var i;
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM READ ****************
                            this._c[i]._beforeReadFn();
                        }
                        for (i = 0; i < this._bfReadFns.length; i++) {
                            // ******** DOM READ ****************
                            this._bfReadFns[i]();
                        }
                    }
                }, {
                    key: '_beforeWriteFn',
                    value: function _beforeWriteFn() {
                        var i;
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i]._beforeWriteFn();
                        }
                        for (i = 0; i < this._bfReadFns.length; i++) {
                            // ******** DOM WRITE ****************
                            this._bfWriteFns[i]();
                        }
                    }
                }, {
                    key: '_after',
                    value: function _after() {
                        // after the animations have finished
                        var i;
                        var j;
                        var prop;
                        var ele;
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i]._after();
                        }
                        for (i = 0; i < this._el.length; i++) {
                            ele = this._el[i];
                            // remove the transition duration/easing
                            // ******** DOM WRITE ****************
                            ele.style[CSS.transitionDuration] = '';
                            // ******** DOM WRITE ****************
                            ele.style[CSS.transitionTimingFn] = '';
                            if (this._rv) {
                                // finished in reverse direction
                                // css classes that were added before the animation should be removed
                                for (j = 0; j < this._bfAdd.length; j++) {
                                    // ******** DOM WRITE ****************
                                    ele.classList.remove(this._bfAdd[j]);
                                }
                                // css classes that were removed before the animation should be added
                                for (j = 0; j < this._bfRmv.length; j++) {
                                    // ******** DOM WRITE ****************
                                    ele.classList.add(this._bfRmv[j]);
                                }
                                // inline styles that were added before the animation should be removed
                                for (prop in this._bfSty) {
                                    // ******** DOM WRITE ****************
                                    ele.style[prop] = '';
                                }
                            } else {
                                // finished in forward direction
                                // css classes to add after the animation
                                for (j = 0; j < this._afAdd.length; j++) {
                                    // ******** DOM WRITE ****************
                                    ele.classList.add(this._afAdd[j]);
                                }
                                // css classes to remove after the animation
                                for (j = 0; j < this._afRmv.length; j++) {
                                    // ******** DOM WRITE ****************
                                    ele.classList.remove(this._afRmv[j]);
                                }
                                // inline styles to add after the animation
                                for (prop in this._afSty) {
                                    // ******** DOM WRITE ****************
                                    ele.style[prop] = this._afSty[prop];
                                }
                            }
                        }
                    }
                }, {
                    key: 'progressStart',
                    value: function progressStart() {
                        for (var i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i].progressStart();
                        }
                        // ******** DOM WRITE ****************
                        this._before();
                        // force no duration, linear easing
                        // ******** DOM WRITE ****************
                        this._setTrans(0, true);
                    }
                }, {
                    key: 'progressStep',
                    value: function progressStep(stepValue) {
                        var now = Date.now();
                        // only update if the last update was more than 16ms ago
                        if (now - 16 > this._lastUpd) {
                            this._lastUpd = now;
                            stepValue = Math.min(1, Math.max(0, stepValue));
                            for (var i = 0; i < this._c.length; i++) {
                                // ******** DOM WRITE ****************
                                this._c[i].progressStep(stepValue);
                            }
                            if (this._rv) {
                                // if the animation is going in reverse then
                                // flip the step value: 0 becomes 1, 1 becomes 0
                                stepValue = stepValue * -1 + 1;
                            }
                            // ******** DOM WRITE ****************
                            this._progress(stepValue);
                        }
                    }
                }, {
                    key: 'progressEnd',
                    value: function progressEnd(shouldComplete, currentStepValue) {
                        console.debug('Animation, progressEnd, shouldComplete', shouldComplete, 'currentStepValue', currentStepValue);
                        for (var i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i].progressEnd(shouldComplete, currentStepValue);
                        }
                        // set all the animations to their final position
                        // ******** DOM WRITE ****************
                        this._progress(shouldComplete ? 1 : 0);
                        // if it's already at the final position, or close, then it's done
                        // otherwise we need to add a transition end event listener
                        if (currentStepValue < 0.05 || currentStepValue > 0.95) {
                            // the progress was already left off at the point that is finished
                            // for example, the left menu was dragged all the way open already
                            // ******** DOM WRITE ****************
                            this._after();
                            // ******** DOM WRITE ****************
                            this._willChg(false);
                            this._didFinish(shouldComplete);
                        } else {
                            // the stepValue was left off at a point when it needs to finish transition still
                            // for example, the left menu was opened 75% and needs to finish opening
                            // ******** DOM WRITE ****************
                            this._asyncEnd(64, shouldComplete);
                            // force quick duration, linear easing
                            // ******** DOM WRITE ****************
                            this._setTrans(64, true);
                        }
                    }
                }, {
                    key: 'onFinish',
                    value: function onFinish(callback) {
                        var onceTimeCallback = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                        var clearOnFinishCallacks = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

                        if (clearOnFinishCallacks) {
                            this._fFns = [];
                            this._fOnceFns = [];
                        }
                        if (onceTimeCallback) {
                            this._fOnceFns.push(callback);
                        } else {
                            this._fFns.push(callback);
                        }
                        return this;
                    }
                }, {
                    key: '_didFinish',
                    value: function _didFinish(hasCompleted) {
                        this.isPlaying = false;
                        this.hasCompleted = hasCompleted;
                        var i;
                        for (i = 0; i < this._fFns.length; i++) {
                            this._fFns[i](this);
                        }
                        for (i = 0; i < this._fOnceFns.length; i++) {
                            this._fOnceFns[i](this);
                        }
                        this._fOnceFns = [];
                    }
                }, {
                    key: 'reverse',
                    value: function reverse() {
                        var shouldReverse = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

                        for (var i = 0; i < this._c.length; i++) {
                            this._c[i].reverse(shouldReverse);
                        }
                        this._rv = shouldReverse;
                        return this;
                    }
                }, {
                    key: 'destroy',
                    value: function destroy(removeElement) {
                        var i;
                        var ele;
                        for (i = 0; i < this._c.length; i++) {
                            // ******** DOM WRITE ****************
                            this._c[i].destroy(removeElement);
                        }
                        if (removeElement) {
                            for (i = 0; i < this._el.length; i++) {
                                ele = this._el[i];
                                // ******** DOM WRITE ****************
                                ele.parentNode && ele.parentNode.removeChild(ele);
                            }
                        }
                        this._clearAsync();
                        this._reset();
                    }
                }, {
                    key: '_transEl',
                    value: function _transEl() {
                        // get the lowest level element that has an Animation
                        var i;
                        var targetEl;
                        for (i = 0; i < this._c.length; i++) {
                            targetEl = this._c[i]._transEl();
                            if (targetEl) {
                                return targetEl;
                            }
                        }
                        return this.hasTween && this._el.length ? this._el[0] : null;
                    }
                }, {
                    key: 'before',
                    get: function get() {
                        var _this = this;

                        return {
                            addClass: function addClass(className) {
                                _this._bfAdd.push(className);
                                return _this;
                            },
                            removeClass: function removeClass(className) {
                                _this._bfRmv.push(className);
                                return _this;
                            },
                            setStyles: function setStyles(styles) {
                                _this._bfSty = styles;
                                return _this;
                            },
                            clearStyles: function clearStyles(propertyNames) {
                                for (var i = 0; i < propertyNames.length; i++) {
                                    _this._bfSty[propertyNames[i]] = '';
                                }
                                return _this;
                            },
                            addDomReadFn: function addDomReadFn(domReadFn) {
                                _this._bfReadFns.push(domReadFn);
                                return _this;
                            },
                            addDomWriteFn: function addDomWriteFn(domWriteFn) {
                                _this._bfWriteFns.push(domWriteFn);
                                return _this;
                            }
                        };
                    }
                }, {
                    key: 'after',
                    get: function get() {
                        var _this2 = this;

                        return {
                            addClass: function addClass(className) {
                                _this2._afAdd.push(className);
                                return _this2;
                            },
                            removeClass: function removeClass(className) {
                                _this2._afRmv.push(className);
                                return _this2;
                            },
                            setStyles: function setStyles(styles) {
                                _this2._afSty = styles;
                                return _this2;
                            },
                            clearStyles: function clearStyles(propertyNames) {
                                for (var i = 0; i < propertyNames.length; i++) {
                                    _this2._afSty[propertyNames[i]] = '';
                                }
                                return _this2;
                            }
                        };
                    }
                }], [{
                    key: 'create',
                    value: function create(name) {
                        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        var AnimationClass = AnimationRegistry[name];
                        if (!AnimationClass) {
                            // couldn't find an animation by the given name
                            // fallback to just the base Animation class
                            AnimationClass = Animation;
                        }
                        return new AnimationClass(null, opts);
                    }
                }, {
                    key: 'register',
                    value: function register(name, AnimationClass) {
                        AnimationRegistry[name] = AnimationClass;
                    }
                }]);

                return Animation;
            }());

            _export('Animation', Animation);

            TRANSFORMS = {
                'translateX': 1, 'translateY': 1, 'translateZ': 1,
                'scale': 1, 'scaleX': 1, 'scaleY': 1, 'scaleZ': 1,
                'rotate': 1, 'rotateX': 1, 'rotateY': 1, 'rotateZ': 1,
                'skewX': 1, 'skewY': 1, 'perspective': 1
            };
            CSS_VALUE_REGEX = /(^-?\d*\.?\d*)(.*)/;
            SUPPORTS_WILL_CHANGE = typeof document.documentElement.style['willChange'] !== 'undefined';
            AnimationRegistry = {};
        }
    };
});
'use strict';

System.register('ionic-angular/animations/builtins', ['./animation'], function (_export, _context) {
    "use strict";

    var Animation, SlideIn, SlideOut, FadeIn, FadeOut;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_animation) {
            Animation = _animation.Animation;
        }],
        execute: function () {
            SlideIn = function (_Animation) {
                _inherits(SlideIn, _Animation);

                function SlideIn(element) {
                    _classCallCheck(this, SlideIn);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideIn).call(this, element));

                    _this.easing('cubic-bezier(0.1,0.7,0.1,1)').duration(400).fromTo('translateY', '100%', '0%');
                    return _this;
                }

                return SlideIn;
            }(Animation);

            Animation.register('slide-in', SlideIn);

            SlideOut = function (_Animation2) {
                _inherits(SlideOut, _Animation2);

                function SlideOut(element) {
                    _classCallCheck(this, SlideOut);

                    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideOut).call(this, element));

                    _this2.easing('ease-out').duration(250).fromTo('translateY', '0%', '100%');
                    return _this2;
                }

                return SlideOut;
            }(Animation);

            Animation.register('slide-out', SlideOut);

            FadeIn = function (_Animation3) {
                _inherits(FadeIn, _Animation3);

                function FadeIn(element) {
                    _classCallCheck(this, FadeIn);

                    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(FadeIn).call(this, element));

                    _this3.easing('ease-in').duration(400).fromTo('opacity', 0.001, 1, true);
                    return _this3;
                }

                return FadeIn;
            }(Animation);

            Animation.register('fade-in', FadeIn);

            FadeOut = function (_Animation4) {
                _inherits(FadeOut, _Animation4);

                function FadeOut(element) {
                    _classCallCheck(this, FadeOut);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(FadeOut).call(this, element));

                    _this4.easing('ease-out').duration(250).fromTo('opacity', 0.999, 0);
                    return _this4;
                }

                return FadeOut;
            }(Animation);

            Animation.register('fade-out', FadeOut);
        }
    };
});
'use strict';

System.register('ionic-angular/components/ion', ['../util/dom'], function (_export, _context) {
    "use strict";

    var _getDimensions, clearDimensions, _createClass, ids, Ion;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_utilDom) {
            _getDimensions = _utilDom.getDimensions;
            clearDimensions = _utilDom.clearDimensions;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            ids = 0;

            _export('Ion', Ion = function () {
                function Ion(elementRef) {
                    _classCallCheck(this, Ion);

                    this.elementRef = elementRef;
                    this._id = 'i' + ids++;
                }

                _createClass(Ion, [{
                    key: 'getElementRef',
                    value: function getElementRef() {
                        return this.elementRef;
                    }
                }, {
                    key: 'getNativeElement',
                    value: function getNativeElement() {
                        return this.elementRef.nativeElement;
                    }
                }, {
                    key: 'getDimensions',
                    value: function getDimensions() {
                        return _getDimensions(this.elementRef.nativeElement, this._id);
                    }
                }, {
                    key: 'width',
                    value: function width() {
                        return _getDimensions(this.elementRef.nativeElement, this._id).width;
                    }
                }, {
                    key: 'height',
                    value: function height() {
                        return _getDimensions(this.elementRef.nativeElement, this._id).height;
                    }
                }, {
                    key: 'ngOnDestroy',
                    value: function ngOnDestroy() {
                        clearDimensions(this._id);
                    }
                }]);

                return Ion;
            }());

            _export('Ion', Ion);
        }
    };
});
'use strict';

System.register('ionic-angular/config/bootstrap', ['@angular/platform-browser-dynamic', '@angular/core', '@angular/http', '../components/app/app', '../util/click-block', '../util/dom', './config', '../util/events', '../util/feature-detect', '../util/form', './directives', '../util/util', '../util/keyboard', '../components/menu/menu-controller', '../platform/platform', '../util/scroll-view', '../components/tap-click/tap-click', '../translation/translate'], function (_export, _context) {
    "use strict";

    var bootstrap, enableProdMode, NgZone, PLATFORM_DIRECTIVES, provide, HTTP_PROVIDERS, App, ClickBlock, closest, nativeTimeout, nativeRaf, Config, Events, FeatureDetect, Form, IONIC_DIRECTIVES, isPresent, Keyboard, MenuController, Platform, ScrollView, TapClick, Translate, _reflect, cssLoadAttempt;

    function cssReady(done) {
        var appEle = document.body.querySelector('ion-app');
        if (!appEle || appEle.clientHeight > 0 || cssLoadAttempt > 300) {
            done();
        } else {
            nativeRaf(function () {
                cssLoadAttempt++;
                cssReady(done);
            });
        }
    }
    /**
     * @private
     */

    function setupDom(window, document, config, platform, clickBlock, featureDetect) {
        var bodyEle = document.body;
        var mode = config.get('mode');
        // if dynamic mode links have been added the fire up the correct one
        var modeLinkAttr = mode + '-href';
        var linkEle = document.head.querySelector('link[' + modeLinkAttr + ']');
        if (linkEle) {
            var href = linkEle.getAttribute(modeLinkAttr);
            linkEle.removeAttribute(modeLinkAttr);
            linkEle.href = href;
        }
        // set the mode class name
        // ios/md/wp
        bodyEle.classList.add(mode);
        // language and direction
        platform.setDir(document.documentElement.dir, false);
        platform.setLang(document.documentElement.lang, false);
        var versions = platform.versions();
        platform.platforms().forEach(function (platformName) {
            // platform-ios
            var platformClass = 'platform-' + platformName;
            bodyEle.classList.add(platformClass);
            var platformVersion = versions[platformName];
            if (platformVersion) {
                // platform-ios9
                platformClass += platformVersion.major;
                bodyEle.classList.add(platformClass);
                // platform-ios9_3
                bodyEle.classList.add(platformClass + '_' + platformVersion.minor);
            }
        });
        // touch devices should not use :hover CSS pseudo
        // enable :hover CSS when the "hoverCSS" setting is not false
        if (config.getBoolean('hoverCSS', true) !== false) {
            bodyEle.classList.add('enable-hover');
        }
        if (config.getBoolean('clickBlock', true) !== false) {
            clickBlock.enable();
        }
        // run feature detection tests
        featureDetect.run(window, document);
    }
    /**
     * Bind some global events and publish on the 'app' channel
     */
    function bindEvents(window, document, platform, events) {
        window.addEventListener('online', function (ev) {
            events.publish('app:online', ev);
        }, false);
        window.addEventListener('offline', function (ev) {
            events.publish('app:offline', ev);
        }, false);
        window.addEventListener('orientationchange', function (ev) {
            events.publish('app:rotated', ev);
        });
        // When that status taps, we respond
        window.addEventListener('statusTap', function (ev) {
            // TODO: Make this more better
            var el = document.elementFromPoint(platform.width() / 2, platform.height() / 2);
            if (!el) {
                return;
            }
            var content = closest(el, 'scroll-content');
            if (content) {
                var scroll = new ScrollView(content);
                scroll.scrollTo(0, 0, 300);
            }
        });
        // start listening for resizes XXms after the app starts
        nativeTimeout(function () {
            window.addEventListener('resize', function () {
                platform.windowResize();
            });
        }, 2000);
    }
    /**
     * @private
     */
    return {
        setters: [function (_angularPlatformBrowserDynamic) {
            bootstrap = _angularPlatformBrowserDynamic.bootstrap;
        }, function (_angularCore) {
            enableProdMode = _angularCore.enableProdMode;
            NgZone = _angularCore.NgZone;
            PLATFORM_DIRECTIVES = _angularCore.PLATFORM_DIRECTIVES;
            provide = _angularCore.provide;
        }, function (_angularHttp) {
            HTTP_PROVIDERS = _angularHttp.HTTP_PROVIDERS;
        }, function (_componentsAppApp) {
            App = _componentsAppApp.App;
        }, function (_utilClickBlock) {
            ClickBlock = _utilClickBlock.ClickBlock;
        }, function (_utilDom) {
            closest = _utilDom.closest;
            nativeTimeout = _utilDom.nativeTimeout;
            nativeRaf = _utilDom.nativeRaf;
        }, function (_config) {
            Config = _config.Config;
        }, function (_utilEvents) {
            Events = _utilEvents.Events;
        }, function (_utilFeatureDetect) {
            FeatureDetect = _utilFeatureDetect.FeatureDetect;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_directives) {
            IONIC_DIRECTIVES = _directives.IONIC_DIRECTIVES;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_utilKeyboard) {
            Keyboard = _utilKeyboard.Keyboard;
        }, function (_componentsMenuMenuController) {
            MenuController = _componentsMenuMenuController.MenuController;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }, function (_utilScrollView) {
            ScrollView = _utilScrollView.ScrollView;
        }, function (_componentsTapClickTapClick) {
            TapClick = _componentsTapClickTapClick.TapClick;
        }, function (_translationTranslate) {
            Translate = _translationTranslate.Translate;
        }],
        execute: function () {
            _reflect = Reflect;

            /**
             * @name ionicBootstrap
             * @description
             * `ionicBootstrap` allows you to bootstrap your entire application. Similar to Angular's `bootstrap`, `ionicBootstrap`
             * takes a root component in order to start the app. You can pass along any providers that you may want to inject into your
             * app as an array for the second argument. You can also pass a config object as the third argument to configure your app's settings.
             *
             * @usage
             *
             * ```ts
             * import { ionicBootstrap } from 'ionic-angular';
             * import { Component } from '@angular/core';
             *
             * @Component({
             *   templateUrl: 'build/app.html',
             * })
             * export class MyClass{}
             *
             * ionicBootstrap(MyClass, null, {tabbarPlacement: 'bottom'})
             * ```
             */
            function ionicBootstrap(appRootComponent, customProviders, config) {
                // get all Ionic Providers
                var providers = ionicProviders(customProviders, config);
                // automatically set "ion-app" selector to users root component
                addSelector(appRootComponent, 'ion-app');
                cssReady(function () {
                    // call angular bootstrap
                    bootstrap(appRootComponent, providers).then(function (ngComponentRef) {
                        // ionic app has finished bootstrapping
                        ionicPostBootstrap(ngComponentRef);
                    });
                });
            }
            /**
             * @private
             */

            _export('ionicBootstrap', ionicBootstrap);

            function ionicPostBootstrap(ngComponentRef) {
                var app = ngComponentRef.injector.get(App);
                app.setAppInjector(ngComponentRef.injector);
                // prepare platform ready
                var platform = ngComponentRef.injector.get(Platform);
                platform.setZone(ngComponentRef.injector.get(NgZone));
                platform.prepareReady();
                // TODO: Use PLATFORM_INITIALIZER
                ngComponentRef.injector.get(TapClick);
                return ngComponentRef;
            }

            _export('ionicPostBootstrap', ionicPostBootstrap);

            cssLoadAttempt = 0;
            function ionicProviders(customProviders, config) {
                // create an instance of Config
                if (!(config instanceof Config)) {
                    config = new Config(config);
                }
                // enable production mode if config set to true
                if (config.getBoolean('prodMode')) {
                    enableProdMode();
                }
                // create an instance of Platform
                var platform = new Platform();
                // initialize platform
                platform.setUrl(window.location.href);
                platform.setUserAgent(window.navigator.userAgent);
                platform.setNavigatorPlatform(window.navigator.platform);
                platform.load(config);
                config.setPlatform(platform);
                var clickBlock = new ClickBlock();
                var events = new Events();
                var featureDetect = new FeatureDetect();
                setupDom(window, document, config, platform, clickBlock, featureDetect);
                bindEvents(window, document, platform, events);
                var providers = [App, provide(ClickBlock, { useValue: clickBlock }), provide(Config, { useValue: config }), provide(Events, { useValue: events }), provide(FeatureDetect, { useValue: featureDetect }), Form, Keyboard, MenuController, provide(Platform, { useValue: platform }), Translate, TapClick, provide(PLATFORM_DIRECTIVES, { useValue: IONIC_DIRECTIVES, multi: true }), HTTP_PROVIDERS];
                if (isPresent(customProviders)) {
                    providers.push(customProviders);
                }
                return providers;
            }
            _export('ionicProviders', ionicProviders);

            function addSelector(type, selector) {
                if (type) {
                    var annotations = _reflect.getMetadata('annotations', type);
                    if (annotations && !annotations[0].selector) {
                        annotations[0].selector = selector;
                        _reflect.defineMetadata('annotations', annotations, type);
                    }
                }
            }

            _export('addSelector', addSelector);
        }
    };
});
'use strict';

System.register('ionic-angular/config/config', ['../platform/platform', '../util/util'], function (_export, _context) {
    "use strict";

    var Platform, isObject, isDefined, isFunction, isArray, _createClass, Config, modeConfigs;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }, function (_utilUtil) {
            isObject = _utilUtil.isObject;
            isDefined = _utilUtil.isDefined;
            isFunction = _utilUtil.isFunction;
            isArray = _utilUtil.isArray;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Config', Config = function () {
                function Config(config) {
                    _classCallCheck(this, Config);

                    this._c = {};
                    this._s = {};
                    this._s = config && isObject(config) && !isArray(config) ? config : {};
                }
                /**
                 * @name get
                 * @description
                 * Returns a single config value, given a key.
                 *
                 * @param {string} [key] - the key for the config value
                 * @param {any} [fallbackValue] - a fallback value to use when the config
                 * value was not found, or is config value is `null`. Fallback value
                 *  defaults to `null`.
                 */


                _createClass(Config, [{
                    key: 'get',
                    value: function get(key) {
                        var fallbackValue = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

                        if (!isDefined(this._c[key])) {
                            if (!isDefined(key)) {
                                throw 'config key is not defined';
                            }
                            // if the value was already set this will all be skipped
                            // if there was no user config then it'll check each of
                            // the user config's platforms, which already contains
                            // settings from default platform configs
                            var userPlatformValue = undefined;
                            var userDefaultValue = this._s[key];
                            var userPlatformModeValue = undefined;
                            var userDefaultModeValue = undefined;
                            var platformValue = undefined;
                            var platformModeValue = undefined;
                            var configObj = null;
                            if (this.platform) {
                                var queryStringValue = this.platform.query('ionic' + key.toLowerCase());
                                if (isDefined(queryStringValue)) {
                                    return this._c[key] = queryStringValue === 'true' ? true : queryStringValue === 'false' ? false : queryStringValue;
                                }
                                // check the platform settings object for this value
                                // loop though each of the active platforms
                                // array of active platforms, which also knows the hierarchy,
                                // with the last one the most important
                                var activePlatformKeys = this.platform.platforms();
                                // loop through all of the active platforms we're on
                                for (var i = 0, l = activePlatformKeys.length; i < l; i++) {
                                    // get user defined platform values
                                    if (this._s.platforms) {
                                        configObj = this._s.platforms[activePlatformKeys[i]];
                                        if (configObj) {
                                            if (isDefined(configObj[key])) {
                                                userPlatformValue = configObj[key];
                                            }
                                            configObj = Config.getModeConfig(configObj.mode);
                                            if (configObj && isDefined(configObj[key])) {
                                                userPlatformModeValue = configObj[key];
                                            }
                                        }
                                    }
                                    // get default platform's setting
                                    configObj = Platform.get(activePlatformKeys[i]);
                                    if (configObj && configObj.settings) {
                                        if (isDefined(configObj.settings[key])) {
                                            // found a setting for this platform
                                            platformValue = configObj.settings[key];
                                        }
                                        configObj = Config.getModeConfig(configObj.settings.mode);
                                        if (configObj && isDefined(configObj[key])) {
                                            // found setting for this platform's mode
                                            platformModeValue = configObj[key];
                                        }
                                    }
                                }
                            }
                            configObj = Config.getModeConfig(this._s.mode);
                            if (configObj && isDefined(configObj[key])) {
                                userDefaultModeValue = configObj[key];
                            }
                            // cache the value
                            this._c[key] = isDefined(userPlatformValue) ? userPlatformValue : isDefined(userDefaultValue) ? userDefaultValue : isDefined(userPlatformModeValue) ? userPlatformModeValue : isDefined(userDefaultModeValue) ? userDefaultModeValue : isDefined(platformValue) ? platformValue : isDefined(platformModeValue) ? platformModeValue : null;
                        }
                        // return key's value
                        // either it came directly from the user config
                        // or it was from the users platform configs
                        // or it was from the default platform configs
                        // in that order
                        var rtnVal = void 0;
                        if (isFunction(this._c[key])) {
                            rtnVal = this._c[key](this.platform);
                        } else {
                            rtnVal = this._c[key];
                        }
                        return rtnVal !== null ? rtnVal : fallbackValue;
                    }
                }, {
                    key: 'getBoolean',
                    value: function getBoolean(key) {
                        var fallbackValue = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

                        var val = this.get(key);
                        if (val === null) {
                            return fallbackValue;
                        }
                        if (typeof val === 'string') {
                            return val === 'true';
                        }
                        return !!val;
                    }
                }, {
                    key: 'getNumber',
                    value: function getNumber(key) {
                        var fallbackValue = arguments.length <= 1 || arguments[1] === undefined ? NaN : arguments[1];

                        var val = parseFloat(this.get(key));
                        return isNaN(val) ? fallbackValue : val;
                    }
                }, {
                    key: 'set',
                    value: function set() {
                        var arg0 = arguments.length <= 0 ? undefined : arguments[0];
                        var arg1 = arguments.length <= 1 ? undefined : arguments[1];
                        switch (arguments.length) {
                            case 2:
                                // set('key', 'value') = set key/value pair
                                // arg1 = value
                                this._s[arg0] = arg1;
                                delete this._c[arg0]; // clear cache
                                break;
                            case 3:
                                // setting('ios', 'key', 'value') = set key/value pair for platform
                                // arg0 = platform
                                // arg1 = key
                                // arg2 = value
                                this._s.platforms = this._s.platforms || {};
                                this._s.platforms[arg0] = this._s.platforms[arg0] || {};
                                this._s.platforms[arg0][arg1] = arguments.length <= 2 ? undefined : arguments[2];
                                delete this._c[arg1]; // clear cache
                                break;
                        }
                        return this;
                    }
                }, {
                    key: 'settings',
                    value: function settings(arg0, arg1) {
                        switch (arguments.length) {
                            case 0:
                                return this._s;
                            case 1:
                                // settings({...})
                                this._s = arg0;
                                this._c = {}; // clear cache
                                break;
                            case 2:
                                // settings('ios', {...})
                                this._s.platforms = this._s.platforms || {};
                                this._s.platforms[arg0] = arg1;
                                this._c = {}; // clear cache
                                break;
                        }
                        return this;
                    }
                }, {
                    key: 'setPlatform',
                    value: function setPlatform(platform) {
                        this.platform = platform;
                    }
                }], [{
                    key: 'setModeConfig',
                    value: function setModeConfig(mode, config) {
                        modeConfigs[mode] = config;
                    }
                }, {
                    key: 'getModeConfig',
                    value: function getModeConfig(mode) {
                        return modeConfigs[mode] || null;
                    }
                }]);

                return Config;
            }());

            _export('Config', Config);

            modeConfigs = {};
        }
    };
});
'use strict';

System.register('ionic-angular/config/directives', ['@angular/common', '../components/menu/menu', '../components/menu/menu-toggle', '../components/menu/menu-close', '../components/backdrop/backdrop', '../components/badge/badge', '../components/button/button', '../components/content/content', '../components/img/img', '../components/scroll/scroll', '../components/infinite-scroll/infinite-scroll', '../components/infinite-scroll/infinite-scroll-content', '../components/refresher/refresher', '../components/refresher/refresher-content', '../components/slides/slides', '../components/tabs/tabs', '../components/tabs/tab', '../components/list/list', '../components/item/item', '../components/item/item-reorder', '../components/item/item-sliding', '../components/virtual-scroll/virtual-scroll', '../components/virtual-scroll/virtual-item', '../components/toolbar/toolbar', '../components/toolbar/toolbar-item', '../components/toolbar/toolbar-title', '../components/icon/icon', '../components/spinner/spinner', '../components/checkbox/checkbox', '../components/select/select', '../components/option/option', '../components/datetime/datetime', '../components/toggle/toggle', '../components/input/input', '../components/label/label', '../components/segment/segment', '../components/radio/radio-button', '../components/radio/radio-group', '../components/range/range', '../components/searchbar/searchbar', '../components/nav/nav', '../components/nav/nav-pop', '../components/nav/nav-push', '../components/nav/nav-router', '../components/navbar/navbar', '../components/show-hide-when/show-hide-when'], function (_export, _context) {
  "use strict";

  var CORE_DIRECTIVES, FORM_DIRECTIVES, Menu, MenuToggle, MenuClose, Backdrop, Badge, Button, Content, Img, Scroll, InfiniteScroll, InfiniteScrollContent, Refresher, RefresherContent, Slides, Slide, SlideLazy, Tabs, Tab, List, ListHeader, Item, ItemContent, Reorder, ItemSliding, ItemOptions, VirtualScroll, VirtualItem, VirtualHeader, VirtualFooter, Toolbar, Header, Footer, ToolbarItem, ToolbarTitle, Icon, Spinner, Checkbox, Select, Option, DateTime, Toggle, TextInput, TextArea, Label, Segment, SegmentButton, RadioButton, RadioGroup, Range, Searchbar, Nav, NavPop, NavPush, NavRouter, NavbarTemplate, Navbar, ShowWhen, HideWhen, IONIC_DIRECTIVES;
  return {
    setters: [function (_angularCommon) {
      CORE_DIRECTIVES = _angularCommon.CORE_DIRECTIVES;
      FORM_DIRECTIVES = _angularCommon.FORM_DIRECTIVES;
    }, function (_componentsMenuMenu) {
      Menu = _componentsMenuMenu.Menu;
    }, function (_componentsMenuMenuToggle) {
      MenuToggle = _componentsMenuMenuToggle.MenuToggle;
    }, function (_componentsMenuMenuClose) {
      MenuClose = _componentsMenuMenuClose.MenuClose;
    }, function (_componentsBackdropBackdrop) {
      Backdrop = _componentsBackdropBackdrop.Backdrop;
    }, function (_componentsBadgeBadge) {
      Badge = _componentsBadgeBadge.Badge;
    }, function (_componentsButtonButton) {
      Button = _componentsButtonButton.Button;
    }, function (_componentsContentContent) {
      Content = _componentsContentContent.Content;
    }, function (_componentsImgImg) {
      Img = _componentsImgImg.Img;
    }, function (_componentsScrollScroll) {
      Scroll = _componentsScrollScroll.Scroll;
    }, function (_componentsInfiniteScrollInfiniteScroll) {
      InfiniteScroll = _componentsInfiniteScrollInfiniteScroll.InfiniteScroll;
    }, function (_componentsInfiniteScrollInfiniteScrollContent) {
      InfiniteScrollContent = _componentsInfiniteScrollInfiniteScrollContent.InfiniteScrollContent;
    }, function (_componentsRefresherRefresher) {
      Refresher = _componentsRefresherRefresher.Refresher;
    }, function (_componentsRefresherRefresherContent) {
      RefresherContent = _componentsRefresherRefresherContent.RefresherContent;
    }, function (_componentsSlidesSlides) {
      Slides = _componentsSlidesSlides.Slides;
      Slide = _componentsSlidesSlides.Slide;
      SlideLazy = _componentsSlidesSlides.SlideLazy;
    }, function (_componentsTabsTabs) {
      Tabs = _componentsTabsTabs.Tabs;
    }, function (_componentsTabsTab) {
      Tab = _componentsTabsTab.Tab;
    }, function (_componentsListList) {
      List = _componentsListList.List;
      ListHeader = _componentsListList.ListHeader;
    }, function (_componentsItemItem) {
      Item = _componentsItemItem.Item;
      ItemContent = _componentsItemItem.ItemContent;
    }, function (_componentsItemItemReorder) {
      Reorder = _componentsItemItemReorder.Reorder;
    }, function (_componentsItemItemSliding) {
      ItemSliding = _componentsItemItemSliding.ItemSliding;
      ItemOptions = _componentsItemItemSliding.ItemOptions;
    }, function (_componentsVirtualScrollVirtualScroll) {
      VirtualScroll = _componentsVirtualScrollVirtualScroll.VirtualScroll;
    }, function (_componentsVirtualScrollVirtualItem) {
      VirtualItem = _componentsVirtualScrollVirtualItem.VirtualItem;
      VirtualHeader = _componentsVirtualScrollVirtualItem.VirtualHeader;
      VirtualFooter = _componentsVirtualScrollVirtualItem.VirtualFooter;
    }, function (_componentsToolbarToolbar) {
      Toolbar = _componentsToolbarToolbar.Toolbar;
      Header = _componentsToolbarToolbar.Header;
      Footer = _componentsToolbarToolbar.Footer;
    }, function (_componentsToolbarToolbarItem) {
      ToolbarItem = _componentsToolbarToolbarItem.ToolbarItem;
    }, function (_componentsToolbarToolbarTitle) {
      ToolbarTitle = _componentsToolbarToolbarTitle.ToolbarTitle;
    }, function (_componentsIconIcon) {
      Icon = _componentsIconIcon.Icon;
    }, function (_componentsSpinnerSpinner) {
      Spinner = _componentsSpinnerSpinner.Spinner;
    }, function (_componentsCheckboxCheckbox) {
      Checkbox = _componentsCheckboxCheckbox.Checkbox;
    }, function (_componentsSelectSelect) {
      Select = _componentsSelectSelect.Select;
    }, function (_componentsOptionOption) {
      Option = _componentsOptionOption.Option;
    }, function (_componentsDatetimeDatetime) {
      DateTime = _componentsDatetimeDatetime.DateTime;
    }, function (_componentsToggleToggle) {
      Toggle = _componentsToggleToggle.Toggle;
    }, function (_componentsInputInput) {
      TextInput = _componentsInputInput.TextInput;
      TextArea = _componentsInputInput.TextArea;
    }, function (_componentsLabelLabel) {
      Label = _componentsLabelLabel.Label;
    }, function (_componentsSegmentSegment) {
      Segment = _componentsSegmentSegment.Segment;
      SegmentButton = _componentsSegmentSegment.SegmentButton;
    }, function (_componentsRadioRadioButton) {
      RadioButton = _componentsRadioRadioButton.RadioButton;
    }, function (_componentsRadioRadioGroup) {
      RadioGroup = _componentsRadioRadioGroup.RadioGroup;
    }, function (_componentsRangeRange) {
      Range = _componentsRangeRange.Range;
    }, function (_componentsSearchbarSearchbar) {
      Searchbar = _componentsSearchbarSearchbar.Searchbar;
    }, function (_componentsNavNav) {
      Nav = _componentsNavNav.Nav;
    }, function (_componentsNavNavPop) {
      NavPop = _componentsNavNavPop.NavPop;
    }, function (_componentsNavNavPush) {
      NavPush = _componentsNavNavPush.NavPush;
    }, function (_componentsNavNavRouter) {
      NavRouter = _componentsNavNavRouter.NavRouter;
    }, function (_componentsNavbarNavbar) {
      NavbarTemplate = _componentsNavbarNavbar.NavbarTemplate;
      Navbar = _componentsNavbarNavbar.Navbar;
    }, function (_componentsShowHideWhenShowHideWhen) {
      ShowWhen = _componentsShowHideWhenShowHideWhen.ShowWhen;
      HideWhen = _componentsShowHideWhenShowHideWhen.HideWhen;
    }],
    execute: function () {
      _export('IONIC_DIRECTIVES', IONIC_DIRECTIVES = [
      // Angular
      CORE_DIRECTIVES, FORM_DIRECTIVES,
      // Content
      Menu, MenuToggle, MenuClose, Backdrop, Badge, Button, Content, Scroll, InfiniteScroll, InfiniteScrollContent, Refresher, RefresherContent, Img,
      // Lists
      List, ListHeader, Item, ItemContent, ItemSliding, ItemOptions, Reorder, VirtualScroll, VirtualItem, VirtualHeader, VirtualFooter,
      // Slides
      Slides, Slide, SlideLazy,
      // Tabs
      Tabs, Tab,
      // Toolbar
      Header, Footer, Toolbar, ToolbarTitle, ToolbarItem,
      // Media
      Icon, Spinner,
      // Forms
      Searchbar, Segment, SegmentButton, Checkbox, RadioGroup, RadioButton, Range, Select, Option, DateTime, Toggle, TextArea, TextInput, Label,
      // Nav
      Nav, NavbarTemplate, Navbar, NavPush, NavPop, NavRouter, ShowWhen, HideWhen]);

      _export('IONIC_DIRECTIVES', IONIC_DIRECTIVES);
    }
  };
});
'use strict';

System.register('ionic-angular/config/modes', ['./config'], function (_export, _context) {
    "use strict";

    var Config;
    return {
        setters: [function (_config) {
            Config = _config.Config;
        }],
        execute: function () {
            // iOS Mode Settings
            Config.setModeConfig('ios', {
                activator: 'highlight',
                actionSheetEnter: 'action-sheet-slide-in',
                actionSheetLeave: 'action-sheet-slide-out',
                alertEnter: 'alert-pop-in',
                alertLeave: 'alert-pop-out',
                backButtonText: 'Back',
                backButtonIcon: 'ios-arrow-back',
                iconMode: 'ios',
                loadingEnter: 'loading-pop-in',
                loadingLeave: 'loading-pop-out',
                menuType: 'reveal',
                modalEnter: 'modal-slide-in',
                modalLeave: 'modal-slide-out',
                pageTransition: 'ios-transition',
                pageTransitionDelay: 16,
                pickerEnter: 'picker-slide-in',
                pickerLeave: 'picker-slide-out',
                pickerRotateFactor: -0.46,
                popoverEnter: 'popover-pop-in',
                popoverLeave: 'popover-pop-out',
                spinner: 'ios',
                tabbarHighlight: false,
                tabbarPlacement: 'bottom',
                tabSubPages: false,
                toastEnter: 'toast-slide-in',
                toastLeave: 'toast-slide-out'
            });
            // Material Design Mode Settings
            Config.setModeConfig('md', {
                activator: 'ripple',
                actionSheetEnter: 'action-sheet-md-slide-in',
                actionSheetLeave: 'action-sheet-md-slide-out',
                alertEnter: 'alert-md-pop-in',
                alertLeave: 'alert-md-pop-out',
                backButtonText: '',
                backButtonIcon: 'md-arrow-back',
                iconMode: 'md',
                loadingEnter: 'loading-md-pop-in',
                loadingLeave: 'loading-md-pop-out',
                menuType: 'overlay',
                modalEnter: 'modal-md-slide-in',
                modalLeave: 'modal-md-slide-out',
                pageTransition: 'md-transition',
                pageTransitionDelay: 64,
                pickerEnter: 'picker-slide-in',
                pickerLeave: 'picker-slide-out',
                pickerRotateFactor: 0,
                popoverEnter: 'popover-md-pop-in',
                popoverLeave: 'popover-md-pop-out',
                spinner: 'crescent',
                tabbarHighlight: true,
                tabbarPlacement: 'top',
                tabSubPages: true,
                toastEnter: 'toast-md-slide-in',
                toastLeave: 'toast-md-slide-out'
            });
            // Windows Mode Settings
            Config.setModeConfig('wp', {
                activator: 'highlight',
                actionSheetEnter: 'action-sheet-wp-slide-in',
                actionSheetLeave: 'action-sheet-wp-slide-out',
                alertEnter: 'alert-wp-pop-in',
                alertLeave: 'alert-wp-pop-out',
                backButtonText: '',
                backButtonIcon: 'ios-arrow-back',
                iconMode: 'ios',
                loadingEnter: 'loading-wp-pop-in',
                loadingLeave: 'loading-wp-pop-out',
                menuType: 'overlay',
                modalEnter: 'modal-md-slide-in',
                modalLeave: 'modal-md-slide-out',
                pageTransition: 'wp-transition',
                pageTransitionDelay: 96,
                pickerEnter: 'picker-slide-in',
                pickerLeave: 'picker-slide-out',
                pickerRotateFactor: 0,
                popoverEnter: 'popover-md-pop-in',
                popoverLeave: 'popover-md-pop-out',
                spinner: 'circles',
                tabbarPlacement: 'top',
                tabSubPages: true,
                toastEnter: 'toast-wp-slide-in',
                toastLeave: 'toast-wp-slide-out'
            });
        }
    };
});
'use strict';

System.register('ionic-angular/decorators/page', ['@angular/core'], function (_export, _context) {
    "use strict";

    var Component, _reflect;

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
        }],
        execute: function () {
            _reflect = Reflect;

            /**
             * @private
             */
            function Page(config) {
                return function (cls) {
                    // deprecated warning: added beta.8 2016-05-27
                    console.warn('@Page decorator has been deprecated. Please use Angular\'s @Component instead.\nimport {Component} from \'@angular/core\';');
                    config.selector = 'ion-page';
                    config.host = config.host || {};
                    config.host['[hidden]'] = '_hidden';
                    config.host['[class.tab-subpage]'] = '_tabSubPage';
                    var annotations = _reflect.getMetadata('annotations', cls) || [];
                    annotations.push(new Component(config));
                    _reflect.defineMetadata('annotations', annotations, cls);
                    return cls;
                };
            }

            _export('Page', Page);
        }
    };
});
'use strict';

System.register('ionic-angular/gestures/drag-gesture', ['./gesture', '../util'], function (_export, _context) {
    "use strict";

    var Gesture, defaults, _createClass, _get, DragGesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_gesture) {
            Gesture = _gesture.Gesture;
        }, function (_util) {
            defaults = _util.defaults;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _export('DragGesture', DragGesture = function (_Gesture) {
                _inherits(DragGesture, _Gesture);

                function DragGesture(element) {
                    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    _classCallCheck(this, DragGesture);

                    defaults(opts, {});
                    return _possibleConstructorReturn(this, Object.getPrototypeOf(DragGesture).call(this, element, opts));
                }

                _createClass(DragGesture, [{
                    key: 'listen',
                    value: function listen() {
                        var _this2 = this;

                        _get(Object.getPrototypeOf(DragGesture.prototype), 'listen', this).call(this);
                        this.on('panstart', function (ev) {
                            if (_this2.onDragStart(ev) !== false) {
                                _this2.dragging = true;
                            }
                        });
                        this.on('panmove', function (ev) {
                            if (!_this2.dragging) return;
                            if (_this2.onDrag(ev) === false) {
                                _this2.dragging = false;
                            }
                        });
                        this.on('panend', function (ev) {
                            if (!_this2.dragging) return;
                            _this2.onDragEnd(ev);
                            _this2.dragging = false;
                        });
                    }
                }, {
                    key: 'onDrag',
                    value: function onDrag(ev) {
                        return true;
                    }
                }, {
                    key: 'onDragStart',
                    value: function onDragStart(ev) {
                        return true;
                    }
                }, {
                    key: 'onDragEnd',
                    value: function onDragEnd(ev) {}
                }]);

                return DragGesture;
            }(Gesture));

            _export('DragGesture', DragGesture);
        }
    };
});
'use strict';

System.register('ionic-angular/gestures/gesture', ['../util', './hammer'], function (_export, _context) {
    "use strict";

    var defaults, assign, Hammer, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, _createClass, Gesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_util) {
            defaults = _util.defaults;
            assign = _util.assign;
        }, function (_hammer) {
            Hammer = _hammer.Hammer;
            DIRECTION_HORIZONTAL = _hammer.DIRECTION_HORIZONTAL;
            DIRECTION_VERTICAL = _hammer.DIRECTION_VERTICAL;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Gesture', Gesture = function () {
                function Gesture(element) {
                    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    _classCallCheck(this, Gesture);

                    this._callbacks = {};
                    this.isListening = false;
                    defaults(opts, {
                        domEvents: true
                    });
                    this.element = element;
                    // Map 'x' or 'y' string to hammerjs opts
                    this.direction = opts.direction || 'x';
                    opts.direction = this.direction === 'x' ? DIRECTION_HORIZONTAL : DIRECTION_VERTICAL;
                    this._options = opts;
                }

                _createClass(Gesture, [{
                    key: 'options',
                    value: function options(opts) {
                        assign(this._options, opts);
                    }
                }, {
                    key: 'on',
                    value: function on(type, cb) {
                        if (type === 'pinch' || type === 'rotate') {
                            this._hammer.get('pinch').set({ enable: true });
                        }
                        this._hammer.on(type, cb);
                        (this._callbacks[type] || (this._callbacks[type] = [])).push(cb);
                    }
                }, {
                    key: 'off',
                    value: function off(type, cb) {
                        this._hammer.off(type, this._callbacks[type] ? cb : null);
                    }
                }, {
                    key: 'listen',
                    value: function listen() {
                        if (!this.isListening) {
                            this._hammer = Hammer(this.element, this._options);
                        }
                        this.isListening = true;
                    }
                }, {
                    key: 'unlisten',
                    value: function unlisten() {
                        var eventType = void 0;
                        var i = void 0;
                        if (this._hammer && this.isListening) {
                            for (eventType in this._callbacks) {
                                for (i = 0; i < this._callbacks[eventType].length; i++) {
                                    this._hammer.off(eventType, this._callbacks[eventType]);
                                }
                            }
                            this._hammer.destroy();
                        }
                        this._callbacks = {};
                        this._hammer = null;
                        this.isListening = false;
                    }
                }, {
                    key: 'destroy',
                    value: function destroy() {
                        this.unlisten();
                        this.element = this._options = null;
                    }
                }]);

                return Gesture;
            }());

            _export('Gesture', Gesture);
        }
    };
});
'use strict';

System.register('ionic-angular/gestures/hammer', ['../util/util'], function (_export, _context) {
    "use strict";

    var assign, _typeof, win, doc, VENDOR_PREFIXES, TEST_ELEMENT, TYPE_FUNCTION, round, abs, now, _uniqueId, MOBILE_REGEX, SUPPORT_TOUCH, SUPPORT_POINTER_EVENTS, SUPPORT_ONLY_TOUCH, INPUT_TYPE_TOUCH, INPUT_TYPE_PEN, INPUT_TYPE_MOUSE, INPUT_TYPE_KINECT, COMPUTE_INTERVAL, INPUT_START, INPUT_MOVE, INPUT_END, INPUT_CANCEL, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, DIRECTION_ALL, PROPS_XY, PROPS_CLIENT_XY, MOUSE_INPUT_MAP, MOUSE_ELEMENT_EVENTS, MOUSE_WINDOW_EVENTS, POINTER_INPUT_MAP, IE10_POINTER_TYPE_ENUM, POINTER_ELEMENT_EVENTS, POINTER_WINDOW_EVENTS, SINGLE_TOUCH_INPUT_MAP, SINGLE_TOUCH_TARGET_EVENTS, SINGLE_TOUCH_WINDOW_EVENTS, TOUCH_INPUT_MAP, TOUCH_TARGET_EVENTS, PREFIXED_TOUCH_ACTION, NATIVE_TOUCH_ACTION, TOUCH_ACTION_COMPUTE, TOUCH_ACTION_AUTO, TOUCH_ACTION_MANIPULATION, TOUCH_ACTION_NONE, TOUCH_ACTION_PAN_X, TOUCH_ACTION_PAN_Y, STATE_POSSIBLE, STATE_BEGAN, STATE_CHANGED, STATE_ENDED, STATE_RECOGNIZED, STATE_CANCELLED, STATE_FAILED, VERSION, _defaults, STOP, FORCED_STOP;

    /**
     * set a timeout with a given scope
     * @param {Function} fn
     * @param {Number} timeout
     * @param {Object} context
     * @returns {number}
     */
    function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }
    /**
     * if the argument is an array, we want to execute the fn on each entry
     * if it aint an array we don't want to do a thing.
     * this is used by all the methods that accept a single and array argument.
     * @param {*|Array} arg
     * @param {String} fn
     * @param {Object} [context]
     * @returns {Boolean}
     */
    function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }
    /**
     * walk objects and arrays
     * @param {Object} obj
     * @param {Function} iterator
     * @param {Object} context
     */
    function each(obj, iterator, context) {
        var i;
        if (!obj) {
            return;
        }
        if (obj.forEach) {
            obj.forEach(iterator, context);
        } else if (obj.length !== undefined) {
            i = 0;
            while (i < obj.length) {
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else {
            for (i in obj) {
                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
        }
    }
    /**
     * simple class inheritance
     * @param {Function} child
     * @param {Function} base
     * @param {Object} [properties]
     */
    function inherit(child, base, properties) {
        var baseP = base.prototype,
            childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) {
            assign(childP, properties);
        }
    }
    /**
     * simple function bind
     * @param {Function} fn
     * @param {Object} context
     * @returns {Function}
     */
    function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }
    /**
     * let a boolean value also be a function that must return a boolean
     * this first item in args will be used as the context
     * @param {Boolean|Function} val
     * @param {Array} [args]
     * @returns {Boolean}
     */
    function boolOrFn(val, args) {
        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
        }
        return val;
    }
    /**
     * use the val2 when val1 is undefined
     * @param {*} val1
     * @param {*} val2
     * @returns {*}
     */
    function ifUndefined(val1, val2) {
        return val1 === undefined ? val2 : val1;
    }
    /**
     * addEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function addEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.addEventListener(type, handler, false);
        });
    }
    /**
     * removeEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function removeEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.removeEventListener(type, handler, false);
        });
    }
    /**
     * find if a node is in the given parent
     * @method hasParent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */
    function hasParent(node, parent) {
        while (node) {
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }
    /**
     * small indexOf wrapper
     * @param {String} str
     * @param {String} find
     * @returns {Boolean} found
     */
    function inStr(str, find) {
        return str.indexOf(find) > -1;
    }
    /**
     * split string on whitespace
     * @param {String} str
     * @returns {Array} words
     */
    function splitStr(str) {
        return str.trim().split(/\s+/g);
    }
    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */
    function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
            return src.indexOf(find);
        } else {
            var i = 0;
            while (i < src.length) {
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                    return i;
                }
                i++;
            }
            return -1;
        }
    }
    /**
     * convert array-like objects to real arrays
     * @param {Object} obj
     * @returns {Array}
     */
    function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }
    /**
     * unique array with objects based on a key (like 'id') or just by the array's value
     * @param {Array} src [{id:1},{id:2},{id:1}]
     * @param {String} [key]
     * @param {Boolean} [sort=False]
     * @returns {Array} [{id:1},{id:2}]
     */
    function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;
        while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
                results.push(src[i]);
            }
            values[i] = val;
            i++;
        }
        if (sort) {
            if (!key) {
                results = results.sort();
            } else {
                results = results.sort(function sortUniqueArray(a, b) {
                    return a[key] > b[key] ? 1 : 0;
                });
            }
        }
        return results;
    }
    /**
     * get the prefixed property
     * @param {Object} obj
     * @param {String} property
     * @returns {String|Undefined} prefixed
     */
    function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) {
                return prop;
            }
            i++;
        }
        return undefined;
    }
    /**
     * get a unique id
     * @returns {number} uniqueId
     */

    function uniqueId() {
        return _uniqueId++;
    }
    /**
     * get the window object of an element
     * @param {HTMLElement} element
     * @returns {DocumentView|Window}
     */
    function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
    }

    /**
     * create new input type manager
     * @param {Manager} manager
     * @param {Function} callback
     * @returns {Input}
     * @constructor
     */
    function Input(manager, callback) {
        var self = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;
        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function (ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
                self.handler(ev);
            }
        };
        this.init();
    }

    /**
     * create new input type manager
     * called by the Manager constructor
     * @param {Hammer} manager
     * @returns {Input}
     */
    function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;
        if (inputClass) {
            Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
        } else {
            Type = TouchMouseInput;
        }
        return new Type(manager, inputHandler);
    }
    /**
     * handle input events
     * @param {Manager} manager
     * @param {String} eventType
     * @param {Object} input
     */
    function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) {
            manager.session = {};
        }
        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;
        // compute scale, rotation etc
        computeInputData(manager, input);
        // emit secret event
        manager.emit('hammer.input', input);
        manager.recognize(input);
        manager.session.prevInput = input;
    }
    /**
     * extend the data with some usable properties like scale, rotate, velocity etc
     * @param {Object} manager
     * @param {Object} input
     */
    function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;
        // store the first input to calculate the distance and direction
        if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
        }
        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
            session.firstMultiple = false;
        }
        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input);
        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
        }
        input.target = target;
    }
    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
     * velocity is calculated every x ms
     * @param {Object} session
     * @param {Object} input
     */
    function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input,
            deltaTime = input.timeStamp - last.timeStamp,
            velocity,
            velocityX,
            velocityY,
            direction;
        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }
    /**
     * create a simple clone from the input used for storage of firstInput and firstMultiple
     * @param {Object} input
     * @returns {Object} clonedInputData
     */
    function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while (i < input.pointers.length) {
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }
        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }
    /**
     * get the center of all the pointers
     * @param {Array} pointers
     * @return {Object} center contains `x` and `y` properties
     */
    function getCenter(pointers) {
        var pointersLength = pointers.length;
        // no need to loop when only one touch
        if (pointersLength === 1) {
            return {
                x: round(pointers[0].clientX),
                y: round(pointers[0].clientY)
            };
        }
        var x = 0,
            y = 0,
            i = 0;
        while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }
        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }
    /**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} x
     * @param {Number} y
     * @return {Object} velocity `x` and `y`
     */
    function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }
    /**
     * get the direction between two points
     * @param {Number} x
     * @param {Number} y
     * @return {Number} direction
     */
    function getDirection(x, y) {
        if (x === y) {
            return DIRECTION_NONE;
        }
        if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    /**
     * calculate the absolute distance between two points
     * @param {Object} p1 {x, y}
     * @param {Object} p2 {x, y}
     * @param {Array} [props] containing x and y keys
     * @return {Number} distance
     */
    function getDistance(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
    }
    /**
     * calculate the angle between two coordinates
     * @param {Object} p1
     * @param {Object} p2
     * @param {Array} [props] containing x and y keys
     * @return {Number} angle
     */
    function getAngle(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
     * calculate the rotation degrees between two pointersets
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} rotation
     */
    function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
     * calculate the scale factor between two pointersets
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} scale
     */
    function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }

    /**
     * Mouse events input
     * @constructor
     * @extends Input
     */
    function MouseInput(manager, handler) {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;
        this.allow = true; // used by Input.TouchMouse to disable mouse events
        this.pressed = false; // mousedown state
        Input.apply(this, arguments);
    }

    /**
     * Pointer events input
     * @constructor
     * @extends Input
     */
    function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;
        Input.apply(this, arguments);
        this.store = this.manager.session.pointerEvents = [];
    }

    /**
     * Touch events input
     * @constructor
     * @extends Input
     */
    function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;
        Input.apply(this, arguments);
    }

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
        }
        return [all, changed];
    }

    /**
     * Multi-user touch events input
     * @constructor
     * @extends Input
     */
    function TouchInput(manager, handler) {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};
        Input.apply(this, arguments);
    }

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;
        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
        }
        var i,
            targetTouches,
            changedTouches = toArray(ev.changedTouches),
            changedTargetTouches = [],
            target = this.target;
        // get target touches from touches
        targetTouches = allTouches.filter(function (touch) {
            return hasParent(touch.target, target);
        });
        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }
        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
                changedTargetTouches.push(changedTouches[i]);
            }
            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) {
                delete targetIds[changedTouches[i].identifier];
            }
            i++;
        }
        if (!changedTargetTouches.length) {
            return;
        }
        return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
    }
    /**
     * Combined touch and mouse input
     *
     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
     * This because touch devices also emit mouse events while doing a touch.
     *
     * @constructor
     * @extends Input
     */
    function TouchMouseInput() {
        Input.apply(this, arguments);
        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);
    }

    /**
     * Touch Action
     * sets the touchAction property or uses the js alternative
     * @param {Manager} manager
     * @param {String} value
     * @constructor
     */
    function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }

    /**
     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
     * @param {String} actions
     * @returns {*}
     */
    function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
        }
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
        // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
        }
        // pan-x OR pan-y
        if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        }
        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
        }
        return TOUCH_ACTION_AUTO;
    }
    /**
     * Recognizer flow explained; *
     * All recognizers have the initial state of POSSIBLE when a input session starts.
     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
     * Example session for mouse-input: mousedown -> mousemove -> mouseup
     *
     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
     * which determines with state it should be.
     *
     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
     * POSSIBLE to give it another change on the next cycle.
     *
     *               Possible
     *                  |
     *            +-----+---------------+
     *            |                     |
     *      +-----+-----+               |
     *      |           |               |
     *   Failed      Cancelled          |
     *                          +-------+------+
     *                          |              |
     *                      Recognized       Began
     *                                         |
     *                                      Changed
     *                                         |
     *                                  Ended/Recognized
     */

    /**
     * Recognizer
     * Every recognizer needs to extend from this class.
     * @constructor
     * @param {Object} options
     */
    function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});
        this.id = uniqueId();
        this.manager = null;
        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);
        this.state = STATE_POSSIBLE;
        this.simultaneous = {};
        this.requireFail = [];
    }

    /**
     * get a usable string, used as event postfix
     * @param {Const} state
     * @returns {String} state
     */
    function stateStr(state) {
        if (state & STATE_CANCELLED) {
            return 'cancel';
        } else if (state & STATE_ENDED) {
            return 'end';
        } else if (state & STATE_CHANGED) {
            return 'move';
        } else if (state & STATE_BEGAN) {
            return 'start';
        }
        return '';
    }
    /**
     * direction cons to string
     * @param {Const} direction
     * @returns {String}
     */
    function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
            return 'down';
        } else if (direction == DIRECTION_UP) {
            return 'up';
        } else if (direction == DIRECTION_LEFT) {
            return 'left';
        } else if (direction == DIRECTION_RIGHT) {
            return 'right';
        }
        return '';
    }
    /**
     * get a recognizer by name if it is bound to a manager
     * @param {Recognizer|String} otherRecognizer
     * @param {Recognizer} recognizer
     * @returns {Recognizer}
     */
    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) {
            return manager.get(otherRecognizer);
        }
        return otherRecognizer;
    }
    /**
     * This recognizer is just used as a base for the simple attribute recognizers.
     * @constructor
     * @extends Recognizer
     */
    function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }

    /**
     * Pan
     * Recognized when the pointer is down and moved in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);
        this.pX = null;
        this.pY = null;
    }

    /**
     * Pinch
     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
     * @constructor
     * @extends AttrRecognizer
     */
    function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    /**
     * Press
     * Recognized when the pointer is down for x ms without any movement.
     * @constructor
     * @extends Recognizer
     */
    function PressRecognizer() {
        Recognizer.apply(this, arguments);
        this._timer = null;
        this._input = null;
    }

    /**
     * Rotate
     * Recognized when two or more pointer are moving in a circular motion.
     * @constructor
     * @extends AttrRecognizer
     */
    function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    /**
     * Swipe
     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    /**
     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
     * a single tap.
     *
     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
     * multi-taps being recognized.
     * @constructor
     * @extends Recognizer
     */
    function TapRecognizer() {
        Recognizer.apply(this, arguments);
        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;
        this._timer = null;
        this._input = null;
        this.count = 0;
    }

    /**
     * Simple way to create a manager with a default set of recognizers.
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, _defaults.preset);
        return new Manager(element, options);
    }
    /**
     * @const {string}
     */

    /**
     * Manager
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Manager(element, options) {
        this.options = assign({}, _defaults, options || {});
        this.options.inputTarget = this.options.inputTarget || element;
        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);
        toggleCssProps(this, true);
        each(this.options.recognizers, function (item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }

    /**
     * add/remove the css properties as defined in manager.options.cssProps
     * @param {Manager} manager
     * @param {Boolean} add
     */
    function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) {
            return;
        }
        each(manager.options.cssProps, function (value, name) {
            element.style[prefixed(element.style, name)] = add ? value : '';
        });
    }
    /**
     * trigger dom event
     * @param {String} event
     * @param {Object} data
     */
    function triggerDomEvent(event, data) {
        var gestureEvent = doc.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }
    return {
        setters: [function (_utilUtil) {
            assign = _utilUtil.assign;
        }],
        execute: function () {
            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };
            win = window;
            doc = document;
            VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
            TEST_ELEMENT = doc.createElement('div');
            TYPE_FUNCTION = 'function';
            round = Math.round;
            abs = Math.abs;
            now = Date.now;
            _uniqueId = 1;
            MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
            SUPPORT_TOUCH = 'ontouchstart' in window;
            SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
            SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
            INPUT_TYPE_TOUCH = 'touch';
            INPUT_TYPE_PEN = 'pen';
            INPUT_TYPE_MOUSE = 'mouse';
            INPUT_TYPE_KINECT = 'kinect';
            COMPUTE_INTERVAL = 25;
            INPUT_START = 1;
            INPUT_MOVE = 2;
            INPUT_END = 4;
            INPUT_CANCEL = 8;
            DIRECTION_NONE = 1;

            _export('DIRECTION_LEFT', DIRECTION_LEFT = 2);

            _export('DIRECTION_LEFT', DIRECTION_LEFT);

            _export('DIRECTION_RIGHT', DIRECTION_RIGHT = 4);

            _export('DIRECTION_RIGHT', DIRECTION_RIGHT);

            DIRECTION_UP = 8;
            DIRECTION_DOWN = 16;

            _export('DIRECTION_HORIZONTAL', DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT);

            _export('DIRECTION_HORIZONTAL', DIRECTION_HORIZONTAL);

            _export('DIRECTION_VERTICAL', DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN);

            _export('DIRECTION_VERTICAL', DIRECTION_VERTICAL);

            DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
            PROPS_XY = ['x', 'y'];
            PROPS_CLIENT_XY = ['clientX', 'clientY'];
            Input.prototype = {
                /**
                 * should handle the inputEvent data and trigger the callback
                 * @virtual
                 */
                handler: function handler() {},
                /**
                 * bind the events
                 */
                init: function init() {
                    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
                    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
                    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
                },
                /**
                 * unbind the events
                 */
                destroy: function destroy() {
                    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
                    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
                    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
                }
            };MOUSE_INPUT_MAP = {
                mousedown: INPUT_START,
                mousemove: INPUT_MOVE,
                mouseup: INPUT_END
            };
            MOUSE_ELEMENT_EVENTS = 'mousedown';
            MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
            inherit(MouseInput, Input, {
                /**
                 * handle mouse events
                 * @param {Object} ev
                 */
                handler: function MEhandler(ev) {
                    var eventType = MOUSE_INPUT_MAP[ev.type];
                    // on start we want to have the left mouse button down
                    if (eventType & INPUT_START && ev.button === 0) {
                        this.pressed = true;
                    }
                    if (eventType & INPUT_MOVE && ev.which !== 1) {
                        eventType = INPUT_END;
                    }
                    // mouse must be down, and mouse events are allowed (see the TouchMouse input)
                    if (!this.pressed || !this.allow) {
                        return;
                    }
                    if (eventType & INPUT_END) {
                        this.pressed = false;
                    }
                    this.callback(this.manager, eventType, {
                        pointers: [ev],
                        changedPointers: [ev],
                        pointerType: INPUT_TYPE_MOUSE,
                        srcEvent: ev
                    });
                }
            });
            POINTER_INPUT_MAP = {
                pointerdown: INPUT_START,
                pointermove: INPUT_MOVE,
                pointerup: INPUT_END,
                pointercancel: INPUT_CANCEL,
                pointerout: INPUT_CANCEL
            };
            IE10_POINTER_TYPE_ENUM = {
                2: INPUT_TYPE_TOUCH,
                3: INPUT_TYPE_PEN,
                4: INPUT_TYPE_MOUSE,
                5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
            };
            POINTER_ELEMENT_EVENTS = 'pointerdown';
            POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

            // IE10 has prefixed support, and case-sensitive
            if (win.MSPointerEvent && !win.PointerEvent) {
                POINTER_ELEMENT_EVENTS = 'MSPointerDown';
                POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
            }inherit(PointerEventInput, Input, {
                /**
                 * handle mouse events
                 * @param {Object} ev
                 */
                handler: function PEhandler(ev) {
                    var store = this.store;
                    var removePointer = false;
                    var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
                    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
                    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
                    var isTouch = pointerType == INPUT_TYPE_TOUCH;
                    // get index of the event in the store
                    var storeIndex = inArray(store, ev.pointerId, 'pointerId');
                    // start and mouse must be down
                    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                        if (storeIndex < 0) {
                            store.push(ev);
                            storeIndex = store.length - 1;
                        }
                    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                        removePointer = true;
                    }
                    // it not found, so the pointer hasn't been down (so it's probably a hover)
                    if (storeIndex < 0) {
                        return;
                    }
                    // update the event in the store
                    store[storeIndex] = ev;
                    this.callback(this.manager, eventType, {
                        pointers: store,
                        changedPointers: [ev],
                        pointerType: pointerType,
                        srcEvent: ev
                    });
                    if (removePointer) {
                        // remove from the store
                        store.splice(storeIndex, 1);
                    }
                }
            });
            SINGLE_TOUCH_INPUT_MAP = {
                touchstart: INPUT_START,
                touchmove: INPUT_MOVE,
                touchend: INPUT_END,
                touchcancel: INPUT_CANCEL
            };
            SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
            SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
            inherit(SingleTouchInput, Input, {
                handler: function TEhandler(ev) {
                    var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
                    // should we handle the touch events?
                    if (type === INPUT_START) {
                        this.started = true;
                    }
                    if (!this.started) {
                        return;
                    }
                    var touches = normalizeSingleTouches.call(this, ev, type);
                    // when done, reset the started state
                    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                        this.started = false;
                    }
                    this.callback(this.manager, type, {
                        pointers: touches[0],
                        changedPointers: touches[1],
                        pointerType: INPUT_TYPE_TOUCH,
                        srcEvent: ev
                    });
                }
            });TOUCH_INPUT_MAP = {
                touchstart: INPUT_START,
                touchmove: INPUT_MOVE,
                touchend: INPUT_END,
                touchcancel: INPUT_CANCEL
            };
            TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
            inherit(TouchInput, Input, {
                handler: function MTEhandler(ev) {
                    var type = TOUCH_INPUT_MAP[ev.type];
                    var touches = getTouches.call(this, ev, type);
                    if (!touches) {
                        return;
                    }
                    this.callback(this.manager, type, {
                        pointers: touches[0],
                        changedPointers: touches[1],
                        pointerType: INPUT_TYPE_TOUCH,
                        srcEvent: ev
                    });
                }
            });inherit(TouchMouseInput, Input, {
                /**
                 * handle mouse and touch events
                 * @param {Hammer} manager
                 * @param {String} inputEvent
                 * @param {Object} inputData
                 */
                handler: function TMEhandler(manager, inputEvent, inputData) {
                    var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
                        isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
                    // when we're in a touch event, so  block all upcoming mouse events
                    // most mobile browser also emit mouseevents, right after touchstart
                    if (isTouch) {
                        this.mouse.allow = false;
                    } else if (isMouse && !this.mouse.allow) {
                        return;
                    }
                    // reset the allowMouse when we're done
                    if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
                        this.mouse.allow = true;
                    }
                    this.callback(manager, inputEvent, inputData);
                },
                /**
                 * remove the event listeners
                 */
                destroy: function destroy() {
                    this.touch.destroy();
                    this.mouse.destroy();
                }
            });
            PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
            NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
            TOUCH_ACTION_COMPUTE = 'compute';
            TOUCH_ACTION_AUTO = 'auto';
            TOUCH_ACTION_MANIPULATION = 'manipulation';
            TOUCH_ACTION_NONE = 'none';
            TOUCH_ACTION_PAN_X = 'pan-x';
            TOUCH_ACTION_PAN_Y = 'pan-y';
            TouchAction.prototype = {
                /**
                 * set the touchAction value on the element or enable the polyfill
                 * @param {String} value
                 */
                set: function set(value) {
                    // find out the touch-action by the event handlers
                    if (value == TOUCH_ACTION_COMPUTE) {
                        value = this.compute();
                    }
                    if (NATIVE_TOUCH_ACTION && this.manager.element.style) {
                        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
                    }
                    this.actions = value.toLowerCase().trim();
                },
                /**
                 * just re-set the touchAction value
                 */
                update: function update() {
                    this.set(this.manager.options.touchAction);
                },
                /**
                 * compute the value for the touchAction property based on the recognizer's settings
                 * @returns {String} value
                 */
                compute: function compute() {
                    var actions = [];
                    each(this.manager.recognizers, function (recognizer) {
                        if (boolOrFn(recognizer.options.enable, [recognizer])) {
                            actions = actions.concat(recognizer.getTouchAction());
                        }
                    });
                    return cleanTouchActions(actions.join(' '));
                },
                /**
                 * this method is called on each input cycle and provides the preventing of the browser behavior
                 * @param {Object} input
                 */
                preventDefaults: function preventDefaults(input) {
                    // not needed with native support for the touchAction property
                    if (NATIVE_TOUCH_ACTION) {
                        return;
                    }
                    var srcEvent = input.srcEvent;
                    var direction = input.offsetDirection;
                    // if the touch action did prevented once this session
                    if (this.manager.session.prevented) {
                        srcEvent.preventDefault();
                        return;
                    }
                    var actions = this.actions;
                    var hasNone = inStr(actions, TOUCH_ACTION_NONE);
                    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
                    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
                    if (hasNone) {
                        //do not prevent defaults if this is a tap gesture
                        var isTapPointer = input.pointers.length === 1;
                        var isTapMovement = input.distance < 2;
                        var isTapTouchTime = input.deltaTime < 250;
                        if (isTapPointer && isTapMovement && isTapTouchTime) {
                            return;
                        }
                    }
                    if (hasPanX && hasPanY) {
                        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
                        return;
                    }
                    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
                        return this.preventSrc(srcEvent);
                    }
                },
                /**
                 * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
                 * @param {Object} srcEvent
                 */
                preventSrc: function preventSrc(srcEvent) {
                    this.manager.session.prevented = true;
                    srcEvent.preventDefault();
                }
            };STATE_POSSIBLE = 1;
            STATE_BEGAN = 2;
            STATE_CHANGED = 4;
            STATE_ENDED = 8;
            STATE_RECOGNIZED = STATE_ENDED;
            STATE_CANCELLED = 16;
            STATE_FAILED = 32;
            Recognizer.prototype = {
                /**
                 * @virtual
                 * @type {Object}
                 */
                defaults: {},
                /**
                 * set options
                 * @param {Object} options
                 * @return {Recognizer}
                 */
                set: function set(options) {
                    assign(this.options, options);
                    // also update the touchAction, in case something changed about the directions/enabled state
                    this.manager && this.manager.touchAction.update();
                    return this;
                },
                /**
                 * recognize simultaneous with an other recognizer.
                 * @param {Recognizer} otherRecognizer
                 * @returns {Recognizer} this
                 */
                recognizeWith: function recognizeWith(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
                        return this;
                    }
                    var simultaneous = this.simultaneous;
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    if (!simultaneous[otherRecognizer.id]) {
                        simultaneous[otherRecognizer.id] = otherRecognizer;
                        otherRecognizer.recognizeWith(this);
                    }
                    return this;
                },
                /**
                 * drop the simultaneous link. it doesnt remove the link on the other recognizer.
                 * @param {Recognizer} otherRecognizer
                 * @returns {Recognizer} this
                 */
                dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
                        return this;
                    }
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    delete this.simultaneous[otherRecognizer.id];
                    return this;
                },
                /**
                 * recognizer can only run when an other is failing
                 * @param {Recognizer} otherRecognizer
                 * @returns {Recognizer} this
                 */
                requireFailure: function requireFailure(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
                        return this;
                    }
                    var requireFail = this.requireFail;
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    if (inArray(requireFail, otherRecognizer) === -1) {
                        requireFail.push(otherRecognizer);
                        otherRecognizer.requireFailure(this);
                    }
                    return this;
                },
                /**
                 * drop the requireFailure link. it does not remove the link on the other recognizer.
                 * @param {Recognizer} otherRecognizer
                 * @returns {Recognizer} this
                 */
                dropRequireFailure: function dropRequireFailure(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
                        return this;
                    }
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    var index = inArray(this.requireFail, otherRecognizer);
                    if (index > -1) {
                        this.requireFail.splice(index, 1);
                    }
                    return this;
                },
                /**
                 * has require failures boolean
                 * @returns {boolean}
                 */
                hasRequireFailures: function hasRequireFailures() {
                    return this.requireFail.length > 0;
                },
                /**
                 * if the recognizer can recognize simultaneous with an other recognizer
                 * @param {Recognizer} otherRecognizer
                 * @returns {Boolean}
                 */
                canRecognizeWith: function canRecognizeWith(otherRecognizer) {
                    return !!this.simultaneous[otherRecognizer.id];
                },
                /**
                 * You should use `tryEmit` instead of `emit` directly to check
                 * that all the needed recognizers has failed before emitting.
                 * @param {Object} input
                 */
                emit: function emit(input) {
                    var self = this;
                    var state = this.state;
                    function emit(event) {
                        self.manager.emit(event, input);
                    }
                    // 'panstart' and 'panmove'
                    if (state < STATE_ENDED) {
                        emit(self.options.event + stateStr(state));
                    }
                    emit(self.options.event); // simple 'eventName' events
                    if (input.additionalEvent) {
                        emit(input.additionalEvent);
                    }
                    // panend and pancancel
                    if (state >= STATE_ENDED) {
                        emit(self.options.event + stateStr(state));
                    }
                },
                /**
                 * Check that all the require failure recognizers has failed,
                 * if true, it emits a gesture event,
                 * otherwise, setup the state to FAILED.
                 * @param {Object} input
                 */
                tryEmit: function tryEmit(input) {
                    if (this.canEmit()) {
                        return this.emit(input);
                    }
                    // it's failing anyway
                    this.state = STATE_FAILED;
                },
                /**
                 * can we emit?
                 * @returns {boolean}
                 */
                canEmit: function canEmit() {
                    var i = 0;
                    while (i < this.requireFail.length) {
                        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                            return false;
                        }
                        i++;
                    }
                    return true;
                },
                /**
                 * update the recognizer
                 * @param {Object} inputData
                 */
                recognize: function recognize(inputData) {
                    // make a new copy of the inputData
                    // so we can change the inputData without messing up the other recognizers
                    var inputDataClone = assign({}, inputData);
                    // is is enabled and allow recognizing?
                    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                        this.reset();
                        this.state = STATE_FAILED;
                        return;
                    }
                    // reset when we've reached the end
                    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                        this.state = STATE_POSSIBLE;
                    }
                    this.state = this.process(inputDataClone);
                    // the recognizer has recognized a gesture
                    // so trigger an event
                    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                        this.tryEmit(inputDataClone);
                    }
                },
                /**
                 * return the state of the recognizer
                 * the actual recognizing happens in this method
                 * @virtual
                 * @param {Object} inputData
                 * @returns {Const} STATE
                 */
                process: function process(inputData) {},
                /**
                 * return the preferred touch-action
                 * @virtual
                 * @returns {Array}
                 */
                getTouchAction: function getTouchAction() {},
                /**
                 * called when the gesture isn't allowed to recognize
                 * like when another is being recognized or it is disabled
                 * @virtual
                 */
                reset: function reset() {}
            };inherit(AttrRecognizer, Recognizer, {
                /**
                 * @namespace
                 * @memberof AttrRecognizer
                 */
                defaults: {
                    /**
                     * @type {Number}
                     * @default 1
                     */
                    pointers: 1
                },
                /**
                 * Used to check if it the recognizer receives valid input, like input.distance > 10.
                 * @memberof AttrRecognizer
                 * @param {Object} input
                 * @returns {Boolean} recognized
                 */
                attrTest: function attrTest(input) {
                    var optionPointers = this.options.pointers;
                    return optionPointers === 0 || input.pointers.length === optionPointers;
                },
                /**
                 * Process the input and return the state for the recognizer
                 * @memberof AttrRecognizer
                 * @param {Object} input
                 * @returns {*} State
                 */
                process: function process(input) {
                    var state = this.state;
                    var eventType = input.eventType;
                    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
                    var isValid = this.attrTest(input);
                    // on cancel input and we've recognized before, return STATE_CANCELLED
                    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                        return state | STATE_CANCELLED;
                    } else if (isRecognized || isValid) {
                        if (eventType & INPUT_END) {
                            return state | STATE_ENDED;
                        } else if (!(state & STATE_BEGAN)) {
                            return STATE_BEGAN;
                        }
                        return state | STATE_CHANGED;
                    }
                    return STATE_FAILED;
                }
            });inherit(PanRecognizer, AttrRecognizer, {
                /**
                 * @namespace
                 * @memberof PanRecognizer
                 */
                defaults: {
                    event: 'pan',
                    threshold: 10,
                    pointers: 1,
                    direction: DIRECTION_ALL
                },
                getTouchAction: function getTouchAction() {
                    var direction = this.options.direction;
                    var actions = [];
                    if (direction & DIRECTION_HORIZONTAL) {
                        actions.push(TOUCH_ACTION_PAN_Y);
                    }
                    if (direction & DIRECTION_VERTICAL) {
                        actions.push(TOUCH_ACTION_PAN_X);
                    }
                    return actions;
                },
                directionTest: function directionTest(input) {
                    var options = this.options;
                    var hasMoved = true;
                    var distance = input.distance;
                    var direction = input.direction;
                    var x = input.deltaX;
                    var y = input.deltaY;
                    // lock to axis?
                    if (!(direction & options.direction)) {
                        if (options.direction & DIRECTION_HORIZONTAL) {
                            direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                            hasMoved = x != this.pX;
                            distance = Math.abs(input.deltaX);
                        } else {
                            direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                            hasMoved = y != this.pY;
                            distance = Math.abs(input.deltaY);
                        }
                    }
                    input.direction = direction;
                    return hasMoved && distance > options.threshold && direction & options.direction;
                },
                attrTest: function attrTest(input) {
                    return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
                },
                emit: function emit(input) {
                    this.pX = input.deltaX;
                    this.pY = input.deltaY;
                    var direction = directionStr(input.direction);
                    if (direction) {
                        input.additionalEvent = this.options.event + direction;
                    }
                    this._super.emit.call(this, input);
                }
            });inherit(PinchRecognizer, AttrRecognizer, {
                /**
                 * @namespace
                 * @memberof PinchRecognizer
                 */
                defaults: {
                    event: 'pinch',
                    threshold: 0,
                    pointers: 2
                },
                getTouchAction: function getTouchAction() {
                    return [TOUCH_ACTION_NONE];
                },
                attrTest: function attrTest(input) {
                    return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
                },
                emit: function emit(input) {
                    if (input.scale !== 1) {
                        var inOut = input.scale < 1 ? 'in' : 'out';
                        input.additionalEvent = this.options.event + inOut;
                    }
                    this._super.emit.call(this, input);
                }
            });inherit(PressRecognizer, Recognizer, {
                /**
                 * @namespace
                 * @memberof PressRecognizer
                 */
                defaults: {
                    event: 'press',
                    pointers: 1,
                    time: 251,
                    threshold: 9 // a minimal movement is ok, but keep it low
                },
                getTouchAction: function getTouchAction() {
                    return [TOUCH_ACTION_AUTO];
                },
                process: function process(input) {
                    var options = this.options;
                    var validPointers = input.pointers.length === options.pointers;
                    var validMovement = input.distance < options.threshold;
                    var validTime = input.deltaTime > options.time;
                    this._input = input;
                    // we only allow little movement
                    // and we've reached an end event, so a tap is possible
                    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
                        this.reset();
                    } else if (input.eventType & INPUT_START) {
                        this.reset();
                        this._timer = setTimeoutContext(function () {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.time, this);
                    } else if (input.eventType & INPUT_END) {
                        return STATE_RECOGNIZED;
                    }
                    return STATE_FAILED;
                },
                reset: function reset() {
                    clearTimeout(this._timer);
                },
                emit: function emit(input) {
                    if (this.state !== STATE_RECOGNIZED) {
                        return;
                    }
                    if (input && input.eventType & INPUT_END) {
                        this.manager.emit(this.options.event + 'up', input);
                    } else {
                        this._input.timeStamp = now();
                        this.manager.emit(this.options.event, this._input);
                    }
                }
            });inherit(RotateRecognizer, AttrRecognizer, {
                /**
                 * @namespace
                 * @memberof RotateRecognizer
                 */
                defaults: {
                    event: 'rotate',
                    threshold: 0,
                    pointers: 2
                },
                getTouchAction: function getTouchAction() {
                    return [TOUCH_ACTION_NONE];
                },
                attrTest: function attrTest(input) {
                    return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
                }
            });inherit(SwipeRecognizer, AttrRecognizer, {
                /**
                 * @namespace
                 * @memberof SwipeRecognizer
                 */
                defaults: {
                    event: 'swipe',
                    threshold: 10,
                    velocity: 0.3,
                    direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                    pointers: 1
                },
                getTouchAction: function getTouchAction() {
                    return PanRecognizer.prototype.getTouchAction.call(this);
                },
                attrTest: function attrTest(input) {
                    var direction = this.options.direction;
                    var velocity;
                    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                        velocity = input.overallVelocity;
                    } else if (direction & DIRECTION_HORIZONTAL) {
                        velocity = input.overallVelocityX;
                    } else if (direction & DIRECTION_VERTICAL) {
                        velocity = input.overallVelocityY;
                    }
                    return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
                },
                emit: function emit(input) {
                    var direction = directionStr(input.offsetDirection);
                    if (direction) {
                        this.manager.emit(this.options.event + direction, input);
                    }
                    this.manager.emit(this.options.event, input);
                }
            });inherit(TapRecognizer, Recognizer, {
                /**
                 * @namespace
                 * @memberof PinchRecognizer
                 */
                defaults: {
                    event: 'tap',
                    pointers: 1,
                    taps: 1,
                    interval: 300,
                    time: 250,
                    threshold: 9,
                    posThreshold: 10 // a multi-tap can be a bit off the initial position
                },
                getTouchAction: function getTouchAction() {
                    return [TOUCH_ACTION_MANIPULATION];
                },
                process: function process(input) {
                    var options = this.options;
                    var validPointers = input.pointers.length === options.pointers;
                    var validMovement = input.distance < options.threshold;
                    var validTouchTime = input.deltaTime < options.time;
                    this.reset();
                    if (input.eventType & INPUT_START && this.count === 0) {
                        return this.failTimeout();
                    }
                    // we only allow little movement
                    // and we've reached an end event, so a tap is possible
                    if (validMovement && validTouchTime && validPointers) {
                        if (input.eventType != INPUT_END) {
                            return this.failTimeout();
                        }
                        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                        this.pTime = input.timeStamp;
                        this.pCenter = input.center;
                        if (!validMultiTap || !validInterval) {
                            this.count = 1;
                        } else {
                            this.count += 1;
                        }
                        this._input = input;
                        // if tap count matches we have recognized it,
                        // else it has began recognizing...
                        var tapCount = this.count % options.taps;
                        if (tapCount === 0) {
                            // no failing requirements, immediately trigger the tap event
                            // or wait as long as the multitap interval to trigger
                            if (!this.hasRequireFailures()) {
                                return STATE_RECOGNIZED;
                            } else {
                                this._timer = setTimeoutContext(function () {
                                    this.state = STATE_RECOGNIZED;
                                    this.tryEmit();
                                }, options.interval, this);
                                return STATE_BEGAN;
                            }
                        }
                    }
                    return STATE_FAILED;
                },
                failTimeout: function failTimeout() {
                    this._timer = setTimeoutContext(function () {
                        this.state = STATE_FAILED;
                    }, this.options.interval, this);
                    return STATE_FAILED;
                },
                reset: function reset() {
                    clearTimeout(this._timer);
                },
                emit: function emit() {
                    if (this.state == STATE_RECOGNIZED) {
                        this._input.tapCount = this.count;
                        this.manager.emit(this.options.event, this._input);
                    }
                }
            });VERSION = '2.0.6';
            _defaults = {
                /**
                 * set if DOM events are being triggered.
                 * But this is slower and unused by simple implementations, so disabled by default.
                 * @type {Boolean}
                 * @default false
                 */
                domEvents: false,
                /**
                 * The value for the touchAction property/fallback.
                 * When set to `compute` it will magically set the correct value based on the added recognizers.
                 * @type {String}
                 * @default compute
                 */
                touchAction: TOUCH_ACTION_COMPUTE,
                /**
                 * @type {Boolean}
                 * @default true
                 */
                enable: true,
                /**
                 * EXPERIMENTAL FEATURE -- can be removed/changed
                 * Change the parent input target element.
                 * If Null, then it is being set the to main element.
                 * @type {Null|EventTarget}
                 * @default null
                 */
                inputTarget: null,
                /**
                 * force an input class
                 * @type {Null|Function}
                 * @default null
                 */
                inputClass: null,
                /**
                 * Default recognizer setup when calling `Hammer()`
                 * When creating a new Manager these will be skipped.
                 * @type {Array}
                 */
                preset: [
                // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
                [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],
                /**
                 * Some CSS properties can be used to improve the working of Hammer.
                 * Add them to this method and they will be set when creating a new Manager.
                 * @namespace
                 */
                cssProps: {
                    /**
                     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
                     * @type {String}
                     * @default 'none'
                     */
                    userSelect: 'none',
                    /**
                     * Disable the Windows Phone grippers when pressing an element.
                     * @type {String}
                     * @default 'none'
                     */
                    touchSelect: 'none',
                    /**
                     * Disables the default callout shown when you touch and hold a touch target.
                     * On iOS, when you touch and hold a touch target such as a link, Safari displays
                     * a callout containing information about the link. This property allows you to disable that callout.
                     * @type {String}
                     * @default 'none'
                     */
                    touchCallout: 'none',
                    /**
                     * Specifies whether zooming is enabled. Used by IE10>
                     * @type {String}
                     * @default 'none'
                     */
                    contentZooming: 'none',
                    /**
                     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
                     * @type {String}
                     * @default 'none'
                     */
                    userDrag: 'none',
                    /**
                     * Overrides the highlight color shown when the user taps a link or a JavaScript
                     * clickable element in iOS. This property obeys the alpha value, if specified.
                     * @type {String}
                     * @default 'rgba(0,0,0,0)'
                     */
                    tapHighlightColor: 'rgba(0,0,0,0)'
                }
            };
            STOP = 1;
            FORCED_STOP = 2;
            Manager.prototype = {
                /**
                 * set options
                 * @param {Object} options
                 * @returns {Manager}
                 */
                set: function set(options) {
                    assign(this.options, options);
                    // Options that need a little more setup
                    if (options.touchAction) {
                        this.touchAction.update();
                    }
                    if (options.inputTarget) {
                        // Clean up existing event listeners and reinitialize
                        this.input.destroy();
                        this.input.target = options.inputTarget;
                        this.input.init();
                    }
                    return this;
                },
                /**
                 * stop recognizing for this session.
                 * This session will be discarded, when a new [input]start event is fired.
                 * When forced, the recognizer cycle is stopped immediately.
                 * @param {Boolean} [force]
                 */
                stop: function stop(force) {
                    this.session.stopped = force ? FORCED_STOP : STOP;
                },
                /**
                 * run the recognizers!
                 * called by the inputHandler function on every movement of the pointers (touches)
                 * it walks through all the recognizers and tries to detect the gesture that is being made
                 * @param {Object} inputData
                 */
                recognize: function recognize(inputData) {
                    var session = this.session;
                    if (session.stopped) {
                        return;
                    }
                    // run the touch-action polyfill
                    this.touchAction.preventDefaults(inputData);
                    var recognizer;
                    var recognizers = this.recognizers;
                    // this holds the recognizer that is being recognized.
                    // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
                    // if no recognizer is detecting a thing, it is set to `null`
                    var curRecognizer = session.curRecognizer;
                    // reset when the last recognizer is recognized
                    // or when we're in a new session
                    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                        curRecognizer = session.curRecognizer = null;
                    }
                    var i = 0;
                    while (i < recognizers.length) {
                        recognizer = recognizers[i];
                        // find out if we are allowed try to recognize the input for this one.
                        // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                        //      that is being recognized.
                        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                        //      this can be setup with the `recognizeWith()` method on the recognizer.
                        if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
                            recognizer.recognize(inputData);
                        } else {
                            recognizer.reset();
                        }
                        // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                        // current active recognizer. but only if we don't already have an active recognizer
                        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                            curRecognizer = session.curRecognizer = recognizer;
                        }
                        i++;
                    }
                },
                /**
                 * get a recognizer by its event name.
                 * @param {Recognizer|String} recognizer
                 * @returns {Recognizer|Null}
                 */
                get: function get(recognizer) {
                    if (recognizer instanceof Recognizer) {
                        return recognizer;
                    }
                    var recognizers = this.recognizers;
                    for (var i = 0; i < recognizers.length; i++) {
                        if (recognizers[i].options.event == recognizer) {
                            return recognizers[i];
                        }
                    }
                    return null;
                },
                /**
                 * add a recognizer to the manager
                 * existing recognizers with the same event name will be removed
                 * @param {Recognizer} recognizer
                 * @returns {Recognizer|Manager}
                 */
                add: function add(recognizer) {
                    if (invokeArrayArg(recognizer, 'add', this)) {
                        return this;
                    }
                    // remove existing
                    var existing = this.get(recognizer.options.event);
                    if (existing) {
                        this.remove(existing);
                    }
                    this.recognizers.push(recognizer);
                    recognizer.manager = this;
                    this.touchAction.update();
                    return recognizer;
                },
                /**
                 * remove a recognizer by name or instance
                 * @param {Recognizer|String} recognizer
                 * @returns {Manager}
                 */
                remove: function remove(recognizer) {
                    if (invokeArrayArg(recognizer, 'remove', this)) {
                        return this;
                    }
                    recognizer = this.get(recognizer);
                    // let's make sure this recognizer exists
                    if (recognizer) {
                        var recognizers = this.recognizers;
                        var index = inArray(recognizers, recognizer);
                        if (index !== -1) {
                            recognizers.splice(index, 1);
                            this.touchAction.update();
                        }
                    }
                    return this;
                },
                /**
                 * bind event
                 * @param {String} events
                 * @param {Function} handler
                 * @returns {EventEmitter} this
                 */
                on: function on(events, handler) {
                    var handlers = this.handlers;
                    each(splitStr(events), function (event) {
                        handlers[event] = handlers[event] || [];
                        handlers[event].push(handler);
                    });
                    return this;
                },
                /**
                 * unbind event, leave emit blank to remove all handlers
                 * @param {String} events
                 * @param {Function} [handler]
                 * @returns {EventEmitter} this
                 */
                off: function off(events, handler) {
                    var handlers = this.handlers;
                    each(splitStr(events), function (event) {
                        if (!handler) {
                            delete handlers[event];
                        } else {
                            handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
                        }
                    });
                    return this;
                },
                /**
                 * emit event to the listeners
                 * @param {String} event
                 * @param {Object} data
                 */
                emit: function emit(event, data) {
                    // we also want to trigger dom events
                    if (this.options.domEvents) {
                        triggerDomEvent(event, data);
                    }
                    // no handlers, so skip it all
                    var handlers = this.handlers[event] && this.handlers[event].slice();
                    if (!handlers || !handlers.length) {
                        return;
                    }
                    data.type = event;
                    data.preventDefault = function () {
                        data.srcEvent.preventDefault();
                    };
                    var i = 0;
                    while (i < handlers.length) {
                        handlers[i](data);
                        i++;
                    }
                },
                /**
                 * destroy the manager and unbinds all events
                 * it doesn't unbind dom events, that is the user own responsibility
                 */
                destroy: function destroy() {
                    this.element && toggleCssProps(this, false);
                    this.handlers = {};
                    this.session = {};
                    this.input.destroy();
                    this.element = null;
                }
            };assign(Hammer, {
                INPUT_START: INPUT_START,
                INPUT_MOVE: INPUT_MOVE,
                INPUT_END: INPUT_END,
                INPUT_CANCEL: INPUT_CANCEL,
                STATE_POSSIBLE: STATE_POSSIBLE,
                STATE_BEGAN: STATE_BEGAN,
                STATE_CHANGED: STATE_CHANGED,
                STATE_ENDED: STATE_ENDED,
                STATE_RECOGNIZED: STATE_RECOGNIZED,
                STATE_CANCELLED: STATE_CANCELLED,
                STATE_FAILED: STATE_FAILED,
                DIRECTION_NONE: DIRECTION_NONE,
                DIRECTION_LEFT: DIRECTION_LEFT,
                DIRECTION_RIGHT: DIRECTION_RIGHT,
                DIRECTION_UP: DIRECTION_UP,
                DIRECTION_DOWN: DIRECTION_DOWN,
                DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
                DIRECTION_VERTICAL: DIRECTION_VERTICAL,
                DIRECTION_ALL: DIRECTION_ALL,
                Manager: Manager,
                Input: Input,
                TouchAction: TouchAction,
                TouchInput: TouchInput,
                MouseInput: MouseInput,
                PointerEventInput: PointerEventInput,
                TouchMouseInput: TouchMouseInput,
                SingleTouchInput: SingleTouchInput,
                Recognizer: Recognizer,
                AttrRecognizer: AttrRecognizer,
                Tap: TapRecognizer,
                Pan: PanRecognizer,
                Swipe: SwipeRecognizer,
                Pinch: PinchRecognizer,
                Rotate: RotateRecognizer,
                Press: PressRecognizer,
                on: addEventListeners,
                off: removeEventListeners,
                each: each,
                inherit: inherit,
                bindFn: bindFn,
                prefixed: prefixed
            });
            win.Hammer = Hammer;

            _export('Hammer', Hammer);
        }
    };
});
'use strict';

System.register('ionic-angular/gestures/slide-edge-gesture', ['./slide-gesture', '../util/util', '../util/dom'], function (_export, _context) {
    "use strict";

    var SlideGesture, defaults, windowDimensions, _createClass, SlideEdgeGesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_slideGesture) {
            SlideGesture = _slideGesture.SlideGesture;
        }, function (_utilUtil) {
            defaults = _utilUtil.defaults;
        }, function (_utilDom) {
            windowDimensions = _utilDom.windowDimensions;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('SlideEdgeGesture', SlideEdgeGesture = function (_SlideGesture) {
                _inherits(SlideEdgeGesture, _SlideGesture);

                function SlideEdgeGesture(element) {
                    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    _classCallCheck(this, SlideEdgeGesture);

                    defaults(opts, {
                        edge: 'left',
                        maxEdgeStart: 50
                    });

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideEdgeGesture).call(this, element, opts));

                    // Can check corners through use of eg 'left top'
                    _this.edges = opts.edge.split(' ');
                    _this.maxEdgeStart = opts.maxEdgeStart;
                    return _this;
                }

                _createClass(SlideEdgeGesture, [{
                    key: 'canStart',
                    value: function canStart(ev) {
                        var _this2 = this;

                        this._d = this.getContainerDimensions();
                        return this.edges.every(function (edge) {
                            return _this2._checkEdge(edge, ev.center);
                        });
                    }
                }, {
                    key: 'getContainerDimensions',
                    value: function getContainerDimensions() {
                        return {
                            left: 0,
                            top: 0,
                            width: windowDimensions().width,
                            height: windowDimensions().height
                        };
                    }
                }, {
                    key: '_checkEdge',
                    value: function _checkEdge(edge, pos) {
                        switch (edge) {
                            case 'left':
                                return pos.x <= this._d.left + this.maxEdgeStart;
                            case 'right':
                                return pos.x >= this._d.width - this.maxEdgeStart;
                            case 'top':
                                return pos.y <= this._d.top + this.maxEdgeStart;
                            case 'bottom':
                                return pos.y >= this._d.height - this.maxEdgeStart;
                        }
                    }
                }]);

                return SlideEdgeGesture;
            }(SlideGesture));

            _export('SlideEdgeGesture', SlideEdgeGesture);
        }
    };
});
'use strict';

System.register('ionic-angular/gestures/slide-gesture', ['./drag-gesture', '../util'], function (_export, _context) {
    "use strict";

    var DragGesture, clamp, _createClass, SlideGesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_dragGesture) {
            DragGesture = _dragGesture.DragGesture;
        }, function (_util) {
            clamp = _util.clamp;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('SlideGesture', SlideGesture = function (_DragGesture) {
                _inherits(SlideGesture, _DragGesture);

                function SlideGesture(element) {
                    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    _classCallCheck(this, SlideGesture);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SlideGesture).call(this, element, opts));

                    _this.slide = null;
                    _this.element = element;
                    return _this;
                }
                /*
                 * Get the min and max for the slide. pageX/pageY.
                 * Only called on dragstart.
                 */


                _createClass(SlideGesture, [{
                    key: 'getSlideBoundaries',
                    value: function getSlideBoundaries(slide, ev) {
                        return {
                            min: 0,
                            max: this.element.offsetWidth
                        };
                    }
                }, {
                    key: 'getElementStartPos',
                    value: function getElementStartPos(slide, ev) {
                        return 0;
                    }
                }, {
                    key: 'canStart',
                    value: function canStart(ev) {
                        return true;
                    }
                }, {
                    key: 'onDragStart',
                    value: function onDragStart(ev) {
                        if (!this.canStart(ev)) {
                            return false;
                        }
                        this.slide = {};
                        this.onSlideBeforeStart(this.slide, ev);

                        var _getSlideBoundaries = this.getSlideBoundaries(this.slide, ev);

                        var min = _getSlideBoundaries.min;
                        var max = _getSlideBoundaries.max;

                        this.slide.min = min;
                        this.slide.max = max;
                        this.slide.elementStartPos = this.getElementStartPos(this.slide, ev);
                        this.slide.pointerStartPos = ev.center[this.direction];
                        this.slide.started = true;
                        this.onSlideStart(this.slide, ev);
                        return true;
                    }
                }, {
                    key: 'onDrag',
                    value: function onDrag(ev) {
                        if (!this.slide || !this.slide.started) {
                            return false;
                        }
                        this.slide.pos = ev.center[this.direction];
                        this.slide.distance = clamp(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
                        this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
                        this.onSlide(this.slide, ev);
                        return true;
                    }
                }, {
                    key: 'onDragEnd',
                    value: function onDragEnd(ev) {
                        if (!this.slide || !this.slide.started) return;
                        this.onSlideEnd(this.slide, ev);
                        this.slide = null;
                    }
                }, {
                    key: 'onSlideBeforeStart',
                    value: function onSlideBeforeStart(slide, ev) {}
                }, {
                    key: 'onSlideStart',
                    value: function onSlideStart(slide, ev) {}
                }, {
                    key: 'onSlide',
                    value: function onSlide(slide, ev) {}
                }, {
                    key: 'onSlideEnd',
                    value: function onSlideEnd(slide, ev) {}
                }]);

                return SlideGesture;
            }(DragGesture));

            _export('SlideGesture', SlideGesture);
        }
    };
});
'use strict';

System.register('ionic-angular/platform/platform', ['@angular/core', '../util/util', '../util/dom'], function (_export, _context) {
    "use strict";

    var EventEmitter, getQuerystring, ready, windowDimensions, flushDimensionCache, _createClass, Platform, PlatformNode, platformRegistry, platformDefault;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function insertSuperset(platformNode) {
        var supersetPlaformName = platformNode.superset();
        if (supersetPlaformName) {
            // add a platform in between two exist platforms
            // so we can build the correct hierarchy of active platforms
            var supersetPlatform = new PlatformNode(supersetPlaformName);
            supersetPlatform.parent = platformNode.parent;
            supersetPlatform.child = platformNode;
            if (supersetPlatform.parent) {
                supersetPlatform.parent.child = supersetPlatform;
            }
            platformNode.parent = supersetPlatform;
        }
    }
    /**
     * @private
     */
    return {
        setters: [function (_angularCore) {
            EventEmitter = _angularCore.EventEmitter;
        }, function (_utilUtil) {
            getQuerystring = _utilUtil.getQuerystring;
        }, function (_utilDom) {
            ready = _utilDom.ready;
            windowDimensions = _utilDom.windowDimensions;
            flushDimensionCache = _utilDom.flushDimensionCache;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Platform', Platform = function () {
                function Platform() {
                    var _this = this;

                    var platforms = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

                    _classCallCheck(this, Platform);

                    this._versions = {};
                    this._onResizes = [];
                    this._bbActions = [];
                    // Events meant to be triggered by the engine
                    // **********************************************
                    /**
                     * @private
                     */
                    this.backButton = new EventEmitter();
                    /**
                     * The pause event emits when the native platform puts the application
                     * into the background, typically when the user switches to a different
                     * application. This event would emit when a Cordova app is put into
                     * the background, however, it would not fire on a standard web browser.
                     */
                    this.pause = new EventEmitter();
                    /**
                     * The resume event emits when the native platform pulls the application
                     * out from the background. This event would emit when a Cordova app comes
                     * out from the background, however, it would not fire on a standard web browser.
                     */
                    this.resume = new EventEmitter();
                    this._platforms = platforms;
                    this._readyPromise = new Promise(function (res) {
                        _this._readyResolve = res;
                    });
                    this.backButton.subscribe(function () {
                        // the hardware back button event has been fired
                        console.debug('hardware back button');
                        // decide which backbutton action should run
                        _this.runBackButtonAction();
                    });
                }
                /**
                 * @private
                 */


                _createClass(Platform, [{
                    key: 'setZone',
                    value: function setZone(zone) {
                        this.zone = zone;
                    }
                }, {
                    key: 'is',
                    value: function is(platformName) {
                        return this._platforms.indexOf(platformName) > -1;
                    }
                }, {
                    key: 'platforms',
                    value: function platforms() {
                        // get the array of active platforms, which also knows the hierarchy,
                        // with the last one the most important
                        return this._platforms;
                    }
                }, {
                    key: 'versions',
                    value: function versions() {
                        // get all the platforms that have a valid parsed version
                        return this._versions;
                    }
                }, {
                    key: 'version',
                    value: function version() {
                        for (var platformName in this._versions) {
                            if (this._versions[platformName]) {
                                return this._versions[platformName];
                            }
                        }
                        return {};
                    }
                }, {
                    key: 'ready',
                    value: function ready() {
                        return this._readyPromise;
                    }
                }, {
                    key: 'triggerReady',
                    value: function triggerReady(readySource) {
                        var _this2 = this;

                        this.zone.run(function () {
                            _this2._readyResolve(readySource);
                        });
                    }
                }, {
                    key: 'prepareReady',
                    value: function prepareReady() {
                        var _this3 = this;

                        ready(function () {
                            _this3.triggerReady('dom');
                        });
                    }
                }, {
                    key: 'setDir',
                    value: function setDir(dir, updateDocument) {
                        this._dir = (dir || '').toLowerCase();
                        if (updateDocument !== false) {
                            document.documentElement.setAttribute('dir', dir);
                        }
                    }
                }, {
                    key: 'dir',
                    value: function dir() {
                        return this._dir;
                    }
                }, {
                    key: 'isRTL',
                    value: function isRTL() {
                        return this._dir === 'rtl';
                    }
                }, {
                    key: 'setLang',
                    value: function setLang(language, updateDocument) {
                        this._lang = language;
                        if (updateDocument !== false) {
                            document.documentElement.setAttribute('lang', language);
                        }
                    }
                }, {
                    key: 'lang',
                    value: function lang() {
                        return this._lang;
                    }
                }, {
                    key: 'exitApp',
                    value: function exitApp() {}
                }, {
                    key: 'registerBackButtonAction',
                    value: function registerBackButtonAction(fn) {
                        var _this4 = this;

                        var priority = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

                        var action = { fn: fn, priority: priority };
                        this._bbActions.push(action);
                        // return a function to unregister this back button action
                        return function () {
                            var index = _this4._bbActions.indexOf(action);
                            if (index > -1) {
                                _this4._bbActions.splice(index, 1);
                            }
                        };
                    }
                }, {
                    key: 'runBackButtonAction',
                    value: function runBackButtonAction() {
                        // decide which one back button action should run
                        var winner = null;
                        this._bbActions.forEach(function (action) {
                            if (!winner || action.priority >= winner.priority) {
                                winner = action;
                            }
                        });
                        // run the winning action if there is one
                        winner && winner.fn && winner.fn();
                    }
                }, {
                    key: 'setUrl',
                    value: function setUrl(url) {
                        this._url = url;
                        this._qs = getQuerystring(url);
                    }
                }, {
                    key: 'url',
                    value: function url() {
                        return this._url;
                    }
                }, {
                    key: 'query',
                    value: function query(key) {
                        return (this._qs || {})[key];
                    }
                }, {
                    key: 'setUserAgent',
                    value: function setUserAgent(userAgent) {
                        this._ua = userAgent;
                    }
                }, {
                    key: 'userAgent',
                    value: function userAgent() {
                        return this._ua || '';
                    }
                }, {
                    key: 'setNavigatorPlatform',
                    value: function setNavigatorPlatform(navigatorPlatform) {
                        this._bPlt = navigatorPlatform;
                    }
                }, {
                    key: 'navigatorPlatform',
                    value: function navigatorPlatform() {
                        return this._bPlt || '';
                    }
                }, {
                    key: 'width',
                    value: function width() {
                        return windowDimensions().width;
                    }
                }, {
                    key: 'height',
                    value: function height() {
                        return windowDimensions().height;
                    }
                }, {
                    key: 'isPortrait',
                    value: function isPortrait() {
                        return this.width() < this.height();
                    }
                }, {
                    key: 'isLandscape',
                    value: function isLandscape() {
                        return !this.isPortrait();
                    }
                }, {
                    key: 'windowResize',
                    value: function windowResize() {
                        var self = this;
                        clearTimeout(self._resizeTm);
                        self._resizeTm = setTimeout(function () {
                            flushDimensionCache();
                            for (var i = 0; i < self._onResizes.length; i++) {
                                try {
                                    self._onResizes[i]();
                                } catch (e) {
                                    console.error(e);
                                }
                            }
                        }, 200);
                    }
                }, {
                    key: 'onResize',
                    value: function onResize(cb) {
                        var self = this;
                        self._onResizes.push(cb);
                        return function () {
                            var index = self._onResizes.indexOf(cb);
                            if (index > -1) {
                                self._onResizes.splice(index, 1);
                            }
                        };
                    }
                }, {
                    key: 'testQuery',
                    value: function testQuery(queryValue, queryTestValue) {
                        var valueSplit = queryValue.toLowerCase().split(';');
                        return valueSplit.indexOf(queryTestValue) > -1;
                    }
                }, {
                    key: 'testNavigatorPlatform',
                    value: function testNavigatorPlatform(navigatorPlatformExpression) {
                        var rgx = new RegExp(navigatorPlatformExpression, 'i');
                        return rgx.test(this._bPlt);
                    }
                }, {
                    key: 'matchUserAgentVersion',
                    value: function matchUserAgentVersion(userAgentExpression) {
                        if (this._ua && userAgentExpression) {
                            var val = this._ua.match(userAgentExpression);
                            if (val) {
                                return {
                                    major: val[1],
                                    minor: val[2]
                                };
                            }
                        }
                    }
                }, {
                    key: 'isPlatformMatch',
                    value: function isPlatformMatch(queryStringName, userAgentAtLeastHas) {
                        var userAgentMustNotHave = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

                        var queryValue = this.query('ionicplatform');
                        if (queryValue) {
                            return this.testQuery(queryValue, queryStringName);
                        }
                        userAgentAtLeastHas = userAgentAtLeastHas || [queryStringName];
                        var userAgent = this._ua.toLowerCase();
                        for (var i = 0; i < userAgentAtLeastHas.length; i++) {
                            if (userAgent.indexOf(userAgentAtLeastHas[i]) > -1) {
                                for (var j = 0; j < userAgentMustNotHave.length; j++) {
                                    if (userAgent.indexOf(userAgentMustNotHave[j]) > -1) {
                                        return false;
                                    }
                                }
                                return true;
                            }
                        }
                        return false;
                    }
                }, {
                    key: 'load',
                    value: function load(config) {
                        var rootPlatformNode = void 0;
                        var enginePlatformNode = void 0;
                        var self = this;
                        // figure out the most specific platform and active engine
                        var tmpPlatform = void 0;
                        for (var platformName in platformRegistry) {
                            tmpPlatform = this.matchPlatform(platformName);
                            if (tmpPlatform) {
                                // we found a platform match!
                                // check if its more specific than the one we already have
                                if (tmpPlatform.isEngine) {
                                    // because it matched then this should be the active engine
                                    // you cannot have more than one active engine
                                    enginePlatformNode = tmpPlatform;
                                } else if (!rootPlatformNode || tmpPlatform.depth > rootPlatformNode.depth) {
                                    // only find the root node for platforms that are not engines
                                    // set this node as the root since we either don't already
                                    // have one, or this one is more specific that the current one
                                    rootPlatformNode = tmpPlatform;
                                }
                            }
                        }
                        if (!rootPlatformNode) {
                            rootPlatformNode = new PlatformNode(platformDefault);
                        }
                        // build a Platform instance filled with the
                        // hierarchy of active platforms and settings
                        if (rootPlatformNode) {
                            // check if we found an engine node (cordova/node-webkit/etc)
                            if (enginePlatformNode) {
                                // add the engine to the first in the platform hierarchy
                                // the original rootPlatformNode now becomes a child
                                // of the engineNode, which is not the new root
                                enginePlatformNode.child = rootPlatformNode;
                                rootPlatformNode.parent = enginePlatformNode;
                                rootPlatformNode = enginePlatformNode;
                            }
                            var platformNode = rootPlatformNode;
                            while (platformNode) {
                                insertSuperset(platformNode);
                                platformNode = platformNode.child;
                            }
                            // make sure the root noot is actually the root
                            // incase a node was inserted before the root
                            platformNode = rootPlatformNode.parent;
                            while (platformNode) {
                                rootPlatformNode = platformNode;
                                platformNode = platformNode.parent;
                            }
                            platformNode = rootPlatformNode;
                            while (platformNode) {
                                platformNode.initialize(this, config);
                                // set the array of active platforms with
                                // the last one in the array the most important
                                this._platforms.push(platformNode.name);
                                // get the platforms version if a version parser was provided
                                this._versions[platformNode.name] = platformNode.version(this);
                                // go to the next platform child
                                platformNode = platformNode.child;
                            }
                        }
                        if (this._platforms.indexOf('mobile') > -1 && this._platforms.indexOf('cordova') === -1) {
                            this._platforms.push('mobileweb');
                        }
                    }
                }, {
                    key: 'matchPlatform',
                    value: function matchPlatform(platformName) {
                        // build a PlatformNode and assign config data to it
                        // use it's getRoot method to build up its hierarchy
                        // depending on which platforms match
                        var platformNode = new PlatformNode(platformName);
                        var rootNode = platformNode.getRoot(this);
                        if (rootNode) {
                            rootNode.depth = 0;
                            var childPlatform = rootNode.child;
                            while (childPlatform) {
                                rootNode.depth++;
                                childPlatform = childPlatform.child;
                            }
                        }
                        return rootNode;
                    }
                }], [{
                    key: 'register',
                    value: function register(platformConfig) {
                        platformRegistry[platformConfig.name] = platformConfig;
                    }
                }, {
                    key: 'registry',
                    value: function registry() {
                        return platformRegistry;
                    }
                }, {
                    key: 'get',
                    value: function get(platformName) {
                        return platformRegistry[platformName] || {};
                    }
                }, {
                    key: 'setDefault',
                    value: function setDefault(platformName) {
                        platformDefault = platformName;
                    }
                }]);

                return Platform;
            }());

            _export('Platform', Platform);

            PlatformNode = function () {
                function PlatformNode(platformName) {
                    _classCallCheck(this, PlatformNode);

                    this.c = Platform.get(platformName);
                    this.name = platformName;
                    this.isEngine = this.c.isEngine;
                }

                _createClass(PlatformNode, [{
                    key: 'settings',
                    value: function settings() {
                        return this.c.settings || {};
                    }
                }, {
                    key: 'superset',
                    value: function superset() {
                        return this.c.superset;
                    }
                }, {
                    key: 'isMatch',
                    value: function isMatch(p) {
                        return this.c.isMatch && this.c.isMatch(p) || false;
                    }
                }, {
                    key: 'initialize',
                    value: function initialize(platform, config) {
                        this.c.initialize && this.c.initialize(platform, config);
                    }
                }, {
                    key: 'version',
                    value: function version(p) {
                        if (this.c.versionParser) {
                            var v = this.c.versionParser(p);
                            if (v) {
                                var str = v.major + '.' + v.minor;
                                return {
                                    str: str,
                                    num: parseFloat(str),
                                    major: parseInt(v.major, 10),
                                    minor: parseInt(v.minor, 10)
                                };
                            }
                        }
                    }
                }, {
                    key: 'getRoot',
                    value: function getRoot(p) {
                        if (this.isMatch(p)) {
                            var parents = this.getSubsetParents(this.name);
                            if (!parents.length) {
                                return this;
                            }
                            var platform = null;
                            var rootPlatform = null;
                            for (var i = 0; i < parents.length; i++) {
                                platform = new PlatformNode(parents[i]);
                                platform.child = this;
                                rootPlatform = platform.getRoot(p);
                                if (rootPlatform) {
                                    this.parent = platform;
                                    return rootPlatform;
                                }
                            }
                        }
                        return null;
                    }
                }, {
                    key: 'getSubsetParents',
                    value: function getSubsetParents(subsetPlatformName) {
                        var platformRegistry = Platform.registry();
                        var parentPlatformNames = [];
                        var platform = null;
                        for (var platformName in platformRegistry) {
                            platform = platformRegistry[platformName];
                            if (platform.subsets && platform.subsets.indexOf(subsetPlatformName) > -1) {
                                parentPlatformNames.push(platformName);
                            }
                        }
                        return parentPlatformNames;
                    }
                }]);

                return PlatformNode;
            }();

            platformRegistry = {};
            platformDefault = null;
        }
    };
});
'use strict';

System.register('ionic-angular/platform/registry', ['./platform', '../util/dom'], function (_export, _context) {
    "use strict";

    var Platform, windowLoad, win, doc;

    function isIOSDevice(p) {
        // shortcut function to be reused internally
        // checks navigator.platform to see if it's an actual iOS device
        // this does not use the user-agent string because it is often spoofed
        // an actual iPad will return true, a chrome dev tools iPad will return false
        return p.testNavigatorPlatform('iphone|ipad|ipod');
    }
    return {
        setters: [function (_platform) {
            Platform = _platform.Platform;
        }, function (_utilDom) {
            windowLoad = _utilDom.windowLoad;
        }],
        execute: function () {
            win = window;
            doc = document;

            Platform.register({
                name: 'core',
                settings: {
                    mode: 'md',
                    keyboardHeight: 290
                }
            });
            Platform.setDefault('core');
            Platform.register({
                name: 'mobile'
            });
            Platform.register({
                name: 'phablet',
                isMatch: function isMatch(p) {
                    var smallest = Math.min(p.width(), p.height());
                    var largest = Math.max(p.width(), p.height());
                    return smallest > 390 && smallest < 520 && largest > 620 && largest < 800;
                }
            });
            Platform.register({
                name: 'tablet',
                isMatch: function isMatch(p) {
                    var smallest = Math.min(p.width(), p.height());
                    var largest = Math.max(p.width(), p.height());
                    return smallest > 460 && smallest < 820 && largest > 780 && largest < 1400;
                }
            });
            Platform.register({
                name: 'android',
                superset: 'mobile',
                subsets: ['phablet', 'tablet'],
                settings: {
                    activator: function activator(p) {
                        // md mode defaults to use ripple activator
                        // however, under-powered devices shouldn't use ripple
                        // if this a linux device, and is using Android Chrome v36 (Android 5.0)
                        // or above then use ripple, otherwise do not use a ripple effect
                        if (p.testNavigatorPlatform('linux')) {
                            var chromeVersion = p.matchUserAgentVersion(/Chrome\/(\d+).(\d+)?/);
                            if (chromeVersion) {
                                // linux android device using modern android chrome browser gets ripple
                                return parseInt(chromeVersion.major, 10) < 36 ? 'none' : 'ripple';
                            }
                            // linux android device not using chrome browser checks just android's version
                            if (p.version().major < 5) {
                                return 'none';
                            }
                        }
                        // fallback to always use ripple
                        return 'ripple';
                    },
                    autoFocusAssist: 'immediate',
                    hoverCSS: false,
                    keyboardHeight: 300,
                    mode: 'md'
                },
                isMatch: function isMatch(p) {
                    return p.isPlatformMatch('android', ['android', 'silk'], ['windows phone']);
                },
                versionParser: function versionParser(p) {
                    return p.matchUserAgentVersion(/Android (\d+).(\d+)?/);
                }
            });
            Platform.register({
                name: 'ios',
                superset: 'mobile',
                subsets: ['ipad', 'iphone'],
                settings: {
                    autoFocusAssist: 'delay',
                    hoverCSS: false,
                    inputBlurring: isIOSDevice,
                    inputCloning: isIOSDevice,
                    keyboardHeight: 300,
                    mode: 'ios',
                    scrollAssist: isIOSDevice,
                    statusbarPadding: !!win.cordova,
                    swipeBackEnabled: isIOSDevice,
                    swipeBackThreshold: 40,
                    tapPolyfill: isIOSDevice,
                    virtualScrollEventAssist: !win.indexedDB
                },
                isMatch: function isMatch(p) {
                    return p.isPlatformMatch('ios', ['iphone', 'ipad', 'ipod'], ['windows phone']);
                },
                versionParser: function versionParser(p) {
                    return p.matchUserAgentVersion(/OS (\d+)_(\d+)?/);
                }
            });
            Platform.register({
                name: 'ipad',
                superset: 'tablet',
                settings: {
                    keyboardHeight: 500
                },
                isMatch: function isMatch(p) {
                    return p.isPlatformMatch('ipad');
                }
            });
            Platform.register({
                name: 'iphone',
                subsets: ['phablet'],
                isMatch: function isMatch(p) {
                    return p.isPlatformMatch('iphone');
                }
            });
            Platform.register({
                name: 'windows',
                superset: 'mobile',
                subsets: ['phablet', 'tablet'],
                settings: {
                    mode: 'wp',
                    autoFocusAssist: 'immediate',
                    hoverCSS: false
                },
                isMatch: function isMatch(p) {
                    return p.isPlatformMatch('windows', ['windows phone']);
                },
                versionParser: function versionParser(p) {
                    return p.matchUserAgentVersion(/Windows Phone (\d+).(\d+)?/);
                }
            });
            Platform.register({
                name: 'cordova',
                isEngine: true,
                initialize: function initialize(p, config) {
                    // prepare a custom "ready" for cordova "deviceready"
                    p.prepareReady = function () {
                        // 1) ionic bootstrapped
                        windowLoad(function () {
                            // 2) window onload triggered or completed
                            doc.addEventListener('deviceready', function () {
                                // 3) cordova deviceready event triggered
                                // add cordova listeners to emit platform events
                                doc.addEventListener('backbutton', function (ev) {
                                    p.zone.run(function () {
                                        p.backButton.emit(ev);
                                    });
                                });
                                doc.addEventListener('pause', function (ev) {
                                    p.zone.run(function () {
                                        p.pause.emit(ev);
                                    });
                                });
                                doc.addEventListener('resume', function (ev) {
                                    p.zone.run(function () {
                                        p.resume.emit(ev);
                                    });
                                });
                                // cordova has its own exitApp method
                                p.exitApp = function () {
                                    win.navigator.app.exitApp();
                                };
                                // cordova has fully loaded and we've added listeners
                                p.triggerReady('cordova');
                            });
                        });
                    };
                },
                isMatch: function isMatch() {
                    return !!(win.cordova || win.PhoneGap || win.phonegap);
                }
            });
        }
    };
});
'use strict';

System.register('ionic-angular/platform/storage', ['./storage/storage', './storage/local-storage', './storage/sql'], function (_export, _context) {
  "use strict";

  return {
    setters: [function (_storageStorage) {
      var _exportObj = {};

      for (var _key in _storageStorage) {
        if (_key !== "default") _exportObj[_key] = _storageStorage[_key];
      }

      _export(_exportObj);
    }, function (_storageLocalStorage) {
      var _exportObj2 = {};

      for (var _key2 in _storageLocalStorage) {
        if (_key2 !== "default") _exportObj2[_key2] = _storageLocalStorage[_key2];
      }

      _export(_exportObj2);
    }, function (_storageSql) {
      var _exportObj3 = {};

      for (var _key3 in _storageSql) {
        if (_key3 !== "default") _exportObj3[_key3] = _storageSql[_key3];
      }

      _export(_exportObj3);
    }],
    execute: function () {}
  };
});
'use strict';

System.register('ionic-angular/transitions/page-transition', ['../animations/animation', '../components/content/content', './transition'], function (_export, _context) {
    "use strict";

    var Animation, Content, Transition, _createClass, _get, PageTransition;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    function parsePxUnit(val) {
        return val.indexOf('px') > 0 ? parseInt(val, 10) : 0;
    }
    return {
        setters: [function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_componentsContentContent) {
            Content = _componentsContentContent.Content;
        }, function (_transition) {
            Transition = _transition.Transition;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _export('PageTransition', PageTransition = function (_Transition) {
                _inherits(PageTransition, _Transition);

                function PageTransition(enteringView, leavingView, opts) {
                    _classCallCheck(this, PageTransition);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PageTransition).call(this, enteringView, leavingView, opts));

                    _this.enteringPage = new Animation(_this.enteringView.pageRef());
                    _this.enteringPage.before.addClass('show-page');
                    _this.add(_this.enteringPage);
                    _this.before.addDomReadFn(_this.readDimensions.bind(_this));
                    _this.before.addDomWriteFn(_this.writeDimensions.bind(_this));
                    return _this;
                }
                /**
                 * DOM READ
                 */


                _createClass(PageTransition, [{
                    key: 'readDimensions',
                    value: function readDimensions() {
                        var content = this.enteringView.getContent();
                        if (content && content instanceof Content) {
                            content.readDimensions();
                        }
                    }
                }, {
                    key: 'writeDimensions',
                    value: function writeDimensions() {
                        var content = this.enteringView.getContent();
                        if (content && content instanceof Content) {
                            content.writeDimensions();
                        }
                    }
                }, {
                    key: 'destroy',
                    value: function destroy() {
                        _get(Object.getPrototypeOf(PageTransition.prototype), 'destroy', this).call(this);
                        this.enteringView = this.enteringPage = null;
                    }
                }]);

                return PageTransition;
            }(Transition));

            _export('PageTransition', PageTransition);
        }
    };
});
'use strict';

System.register('ionic-angular/transitions/transition-ios', ['../animations/animation', './page-transition'], function (_export, _context) {
    "use strict";

    var Animation, PageTransition, DURATION, EASING, OPACITY, TRANSLATEX, OFF_RIGHT, OFF_LEFT, CENTER, OFF_OPACITY, SHOW_BACK_BTN_CSS, IOSTransition;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_pageTransition) {
            PageTransition = _pageTransition.PageTransition;
        }],
        execute: function () {
            DURATION = 500;
            EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
            OPACITY = 'opacity';
            TRANSLATEX = 'translateX';
            OFF_RIGHT = '99.5%';
            OFF_LEFT = '-33%';
            CENTER = '0%';
            OFF_OPACITY = 0.8;
            SHOW_BACK_BTN_CSS = 'show-back-button';

            IOSTransition = function (_PageTransition) {
                _inherits(IOSTransition, _PageTransition);

                function IOSTransition(enteringView, leavingView, opts) {
                    _classCallCheck(this, IOSTransition);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(IOSTransition).call(this, enteringView, leavingView, opts));

                    _this.duration(opts.duration || DURATION);
                    _this.easing(opts.easing || EASING);
                    // what direction is the transition going
                    var backDirection = opts.direction === 'back';
                    // do they have navbars?
                    var enteringHasNavbar = enteringView.hasNavbar();
                    var leavingHasNavbar = leavingView && leavingView.hasNavbar();
                    // entering content
                    var enteringContent = new Animation(enteringView.contentRef());
                    enteringContent.element(enteringView.toolbarRefs());
                    _this.add(enteringContent);
                    if (backDirection) {
                        // entering content, back direction
                        enteringContent.fromTo(TRANSLATEX, OFF_LEFT, CENTER, true).fromTo(OPACITY, OFF_OPACITY, 1, true);
                    } else {
                        // entering content, forward direction
                        enteringContent.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
                    }
                    if (enteringHasNavbar) {
                        // entering page has a navbar
                        var enteringNavBar = new Animation(enteringView.navbarRef());
                        enteringNavBar.before.addClass('show-navbar');
                        _this.add(enteringNavBar);
                        var enteringTitle = new Animation(enteringView.titleRef());
                        var enteringNavbarItems = new Animation(enteringView.navbarItemRefs());
                        var enteringNavbarBg = new Animation(enteringView.navbarBgRef());
                        var enteringBackButton = new Animation(enteringView.backBtnRef());
                        enteringNavBar.add(enteringTitle).add(enteringNavbarItems).add(enteringNavbarBg).add(enteringBackButton);
                        enteringTitle.fromTo(OPACITY, 0.01, 1, true);
                        enteringNavbarItems.fromTo(OPACITY, 0.01, 1, true);
                        // set properties depending on direction
                        if (backDirection) {
                            // entering navbar, back direction
                            enteringTitle.fromTo(TRANSLATEX, OFF_LEFT, CENTER, true);
                            if (enteringView.enableBack()) {
                                // back direction, entering page has a back button
                                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS).fromTo(OPACITY, 0.01, 1, true);
                            }
                        } else {
                            // entering navbar, forward direction
                            enteringTitle.fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
                            if (leavingHasNavbar) {
                                // entering navbar, forward direction, and there's a leaving navbar
                                // should just fade in, no sliding
                                enteringNavbarBg.before.clearStyles([TRANSLATEX]).fromTo(OPACITY, 0.01, 1, true);
                            } else {
                                // entering navbar, forward direction, and there's no leaving navbar
                                // should just slide in, no fading in
                                enteringNavbarBg.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
                            }
                            if (enteringView.enableBack()) {
                                // forward direction, entering page has a back button
                                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS).fromTo(OPACITY, 0.01, 1, true);
                                var enteringBackBtnText = new Animation(enteringView.backBtnTextRef());
                                enteringBackBtnText.fromTo(TRANSLATEX, '100px', '0px');
                                enteringNavBar.add(enteringBackBtnText);
                            } else {
                                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
                            }
                        }
                    }
                    // setup leaving view
                    if (leavingView) {
                        // leaving content
                        var leavingContent = new Animation(leavingView.contentRef());
                        leavingContent.element(leavingView.toolbarRefs());
                        _this.add(leavingContent);
                        if (backDirection) {
                            // leaving content, back direction
                            leavingContent.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, CENTER, '100%');
                        } else {
                            // leaving content, forward direction
                            leavingContent.fromTo(TRANSLATEX, CENTER, OFF_LEFT).fromTo(OPACITY, 1, OFF_OPACITY);
                        }
                        if (leavingHasNavbar) {
                            // leaving page has a navbar
                            var leavingNavBar = new Animation(leavingView.navbarRef());
                            var leavingBackButton = new Animation(leavingView.backBtnRef());
                            var leavingTitle = new Animation(leavingView.titleRef());
                            var leavingNavbarItems = new Animation(leavingView.navbarItemRefs());
                            var leavingNavbarBg = new Animation(leavingView.navbarBgRef());
                            leavingNavBar.add(leavingBackButton).add(leavingTitle).add(leavingNavbarItems).add(leavingNavbarBg);
                            _this.add(leavingNavBar);
                            // fade out leaving navbar items
                            leavingBackButton.fromTo(OPACITY, 0.99, 0);
                            leavingTitle.fromTo(OPACITY, 0.99, 0);
                            leavingNavbarItems.fromTo(OPACITY, 0.99, 0);
                            if (backDirection) {
                                // leaving navbar, back direction
                                leavingTitle.fromTo(TRANSLATEX, CENTER, '100%');
                                if (enteringHasNavbar) {
                                    // leaving navbar, back direction, and there's an entering navbar
                                    // should just fade out, no sliding
                                    leavingNavbarBg.before.clearStyles([TRANSLATEX]).fromTo('opacity', 0.99, 0);
                                } else {
                                    // leaving navbar, back direction, and there's no entering navbar
                                    // should just slide out, no fading out
                                    leavingNavbarBg.before.clearStyles([OPACITY]).fromTo(TRANSLATEX, CENTER, '100%');
                                }
                                var leavingBackBtnText = new Animation(leavingView.backBtnTextRef());
                                leavingBackBtnText.fromTo(TRANSLATEX, CENTER, 300 + 'px');
                                leavingNavBar.add(leavingBackBtnText);
                            } else {
                                // leaving navbar, forward direction
                                leavingTitle.fromTo(TRANSLATEX, CENTER, OFF_LEFT);
                            }
                        }
                    }
                    return _this;
                }

                return IOSTransition;
            }(PageTransition);

            PageTransition.register('ios-transition', IOSTransition);
        }
    };
});
'use strict';

System.register('ionic-angular/transitions/transition-md', ['../animations/animation', './page-transition'], function (_export, _context) {
    "use strict";

    var Animation, PageTransition, TRANSLATEY, OFF_BOTTOM, CENTER, SHOW_BACK_BTN_CSS, MDTransition;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_pageTransition) {
            PageTransition = _pageTransition.PageTransition;
        }],
        execute: function () {
            TRANSLATEY = 'translateY';
            OFF_BOTTOM = '40px';
            CENTER = '0px';
            SHOW_BACK_BTN_CSS = 'show-back-button';

            MDTransition = function (_PageTransition) {
                _inherits(MDTransition, _PageTransition);

                function MDTransition(enteringView, leavingView, opts) {
                    _classCallCheck(this, MDTransition);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MDTransition).call(this, enteringView, leavingView, opts));

                    // what direction is the transition going
                    var backDirection = opts.direction === 'back';
                    // do they have navbars?
                    var enteringHasNavbar = enteringView.hasNavbar();
                    var leavingHasNavbar = leavingView && leavingView.hasNavbar();
                    if (backDirection) {
                        _this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
                        _this.enteringPage.before.clearStyles([TRANSLATEY]);
                    } else {
                        _this.duration(opts.duration || 280).easing('cubic-bezier(0.36,0.66,0.04,1)');
                        _this.enteringPage.fromTo(TRANSLATEY, OFF_BOTTOM, CENTER, true).fromTo('opacity', 0.01, 1, true);
                    }
                    if (enteringHasNavbar) {
                        var enteringNavBar = new Animation(enteringView.navbarRef());
                        enteringNavBar.before.addClass('show-navbar');
                        _this.add(enteringNavBar);
                        var enteringBackButton = new Animation(enteringView.backBtnRef());
                        _this.add(enteringBackButton);
                        if (enteringView.enableBack()) {
                            enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
                        } else {
                            enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
                        }
                    }
                    // setup leaving view
                    if (leavingView && backDirection) {
                        // leaving content
                        _this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
                        var leavingPage = new Animation(leavingView.pageRef());
                        _this.add(leavingPage.fromTo(TRANSLATEY, CENTER, OFF_BOTTOM).fromTo('opacity', 0.99, 0));
                    }
                    return _this;
                }

                return MDTransition;
            }(PageTransition);

            PageTransition.register('md-transition', MDTransition);
        }
    };
});
'use strict';

System.register('ionic-angular/transitions/transition-wp', ['../animations/animation', './page-transition'], function (_export, _context) {
    "use strict";

    var Animation, PageTransition, SHOW_BACK_BTN_CSS, SCALE_SMALL, WPTransition;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_pageTransition) {
            PageTransition = _pageTransition.PageTransition;
        }],
        execute: function () {
            SHOW_BACK_BTN_CSS = 'show-back-button';
            SCALE_SMALL = .95;

            WPTransition = function (_PageTransition) {
                _inherits(WPTransition, _PageTransition);

                function WPTransition(enteringView, leavingView, opts) {
                    _classCallCheck(this, WPTransition);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WPTransition).call(this, enteringView, leavingView, opts));

                    // what direction is the transition going
                    var backDirection = opts.direction === 'back';
                    // do they have navbars?
                    var enteringHasNavbar = enteringView.hasNavbar();
                    var leavingHasNavbar = leavingView && leavingView.hasNavbar();
                    if (backDirection) {
                        _this.duration(opts.duration || 120).easing('cubic-bezier(0.47,0,0.745,0.715)');
                        _this.enteringPage.before.clearStyles(['scale']);
                    } else {
                        _this.duration(opts.duration || 280).easing('cubic-bezier(0,0 0.05,1)');
                        _this.enteringPage.fromTo('scale', SCALE_SMALL, 1, true).fromTo('opacity', 0.01, 1, true);
                    }
                    if (enteringHasNavbar) {
                        var enteringNavBar = new Animation(enteringView.navbarRef());
                        enteringNavBar.before.addClass('show-navbar');
                        _this.add(enteringNavBar);
                        var enteringBackButton = new Animation(enteringView.backBtnRef());
                        _this.add(enteringBackButton);
                        if (enteringView.enableBack()) {
                            enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
                        } else {
                            enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
                        }
                    }
                    // setup leaving view
                    if (leavingView && backDirection) {
                        // leaving content
                        _this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
                        var leavingPage = new Animation(leavingView.pageRef());
                        _this.add(leavingPage.fromTo('scale', 1, SCALE_SMALL).fromTo('opacity', 0.99, 0));
                    }
                    return _this;
                }

                return WPTransition;
            }(PageTransition);

            PageTransition.register('wp-transition', WPTransition);
        }
    };
});
'use strict';

System.register('ionic-angular/transitions/transition', ['../animations/animation'], function (_export, _context) {
    "use strict";

    var Animation, _createClass, Transition, TransitionRegistry;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Transition', Transition = function (_Animation) {
                _inherits(Transition, _Animation);

                function Transition(enteringView, leavingView, opts) {
                    _classCallCheck(this, Transition);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Transition).call(this, null, {
                        renderDelay: opts.renderDelay
                    }));

                    _this.enteringView = enteringView;
                    return _this;
                }

                _createClass(Transition, null, [{
                    key: 'createTransition',
                    value: function createTransition(enteringView, leavingView, opts) {
                        var TransitionClass = TransitionRegistry[opts.animation];
                        if (!TransitionClass) {
                            // didn't find a transition animation, default to ios-transition
                            TransitionClass = TransitionRegistry['ios-transition'];
                        }
                        return new TransitionClass(enteringView, leavingView, opts);
                    }
                }, {
                    key: 'register',
                    value: function register(name, TransitionClass) {
                        TransitionRegistry[name] = TransitionClass;
                    }
                }]);

                return Transition;
            }(Animation));

            _export('Transition', Transition);

            TransitionRegistry = {};
        }
    };
});
'use strict';

System.register('ionic-angular/translation/translate', [], function (_export, _context) {
    "use strict";

    var _createClass, Translate;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Translate', Translate = function () {
                function Translate() {
                    _classCallCheck(this, Translate);

                    this._transMap = {};
                    this._language = {};
                }

                _createClass(Translate, [{
                    key: 'translations',
                    value: function translations(lang, map) {
                        this._transMap[lang] = map;
                    }
                }, {
                    key: 'setLanguage',
                    value: function setLanguage(lang) {
                        this._language = lang;
                    }
                }, {
                    key: 'getTranslations',
                    value: function getTranslations(lang) {
                        return this._transMap[lang];
                    }
                }, {
                    key: 'translate',
                    value: function translate(key, lang) {
                        // If the language isn't specified and we have no overridden one, return the string passed.
                        if (!lang && !this._language) {
                            return key;
                        }
                        var setLanguage = lang || this._language;
                        var map = this.getTranslations(setLanguage);
                        if (!map) {
                            console.warn('I18N: No translation for key', key, 'using language', setLanguage);
                            return '';
                        }
                        return this._getTranslation(map, key);
                    }
                }, {
                    key: '_getTranslation',
                    value: function _getTranslation(map, key) {
                        return map && map[key] || '';
                    }
                }]);

                return Translate;
            }());

            _export('Translate', Translate);
        }
    };
});
"use strict";

System.register("ionic-angular/translation/translate_pipe", ["@angular/core", "./translate"], function (_export, _context) {
    "use strict";

    var Injectable, Pipe, Translate, _createClass, _typeof, __decorate, __metadata, TranslatePipe, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Injectable = _angularCore.Injectable;
            Pipe = _angularCore.Pipe;
        }, function (_translate) {
            Translate = _translate.Translate;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("TranslatePipe", TranslatePipe = function () {
                function TranslatePipe(translate) {
                    _classCallCheck(this, TranslatePipe);

                    this.translate = {};
                    this.translate = translate;
                }

                _createClass(TranslatePipe, [{
                    key: "transform",
                    value: function transform(value, args) {
                        var lang = void 0;
                        if (args.length > 0) {
                            lang = args[0];
                        }
                        return this.translate.translate(value, lang);
                    }
                }, {
                    key: "supports",
                    value: function supports(obj) {
                        return true;
                    }
                }]);

                return TranslatePipe;
            }());

            _export("TranslatePipe", TranslatePipe);

            _export("TranslatePipe", TranslatePipe = __decorate([Pipe({ name: 'translate' }), Injectable(), __metadata('design:paramtypes', [typeof (_a = typeof Translate !== 'undefined' && Translate) === 'function' && _a || Object])], TranslatePipe));
        }
    };
});
'use strict';

System.register('ionic-angular/util/click-block', ['./dom'], function (_export, _context) {
    "use strict";

    var nativeTimeout, _createClass, CSS_CLICK_BLOCK, DEFAULT_EXPIRE, cbEle, fallbackTimerId, isShowing, ClickBlock;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _show(expire) {
        clearTimeout(fallbackTimerId);
        fallbackTimerId = nativeTimeout(hide, expire || DEFAULT_EXPIRE);
        if (!isShowing) {
            cbEle.classList.add(CSS_CLICK_BLOCK);
            isShowing = true;
        }
    }
    function hide() {
        clearTimeout(fallbackTimerId);
        if (isShowing) {
            cbEle.classList.remove(CSS_CLICK_BLOCK);
            isShowing = false;
        }
    }
    return {
        setters: [function (_dom) {
            nativeTimeout = _dom.nativeTimeout;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            CSS_CLICK_BLOCK = 'click-block-active';
            DEFAULT_EXPIRE = 330;
            cbEle = void 0;
            fallbackTimerId = void 0;
            isShowing = false;

            _export('ClickBlock', ClickBlock = function () {
                function ClickBlock() {
                    _classCallCheck(this, ClickBlock);

                    this._enabled = false;
                }

                _createClass(ClickBlock, [{
                    key: 'enable',
                    value: function enable() {
                        cbEle = document.createElement('click-block');
                        document.body.appendChild(cbEle);
                        cbEle.addEventListener('touchmove', function (ev) {
                            ev.preventDefault();
                            ev.stopPropagation();
                        });
                        this._enabled = true;
                    }
                }, {
                    key: 'show',
                    value: function show(shouldShow, expire) {
                        if (this._enabled) {
                            if (shouldShow) {
                                _show(expire);
                            } else {
                                hide();
                            }
                        }
                    }
                }]);

                return ClickBlock;
            }());

            _export('ClickBlock', ClickBlock);
        }
    };
});
'use strict';

System.register('ionic-angular/util/datetime-util', ['./util'], function (_export, _context) {
    "use strict";

    var isBlank, isPresent, isString, assign, ISO_8601_REGEXP, TIME_REGEXP, FORMAT_YYYY, FORMAT_YY, FORMAT_MMMM, FORMAT_MMM, FORMAT_MM, FORMAT_M, FORMAT_DDDD, FORMAT_DDD, FORMAT_DD, FORMAT_D, FORMAT_HH, FORMAT_H, FORMAT_hh, FORMAT_h, FORMAT_mm, FORMAT_m, FORMAT_A, FORMAT_a, FORMAT_KEYS, FORMAT_REGEX, DAY_NAMES, DAY_SHORT_NAMES, MONTH_NAMES, MONTH_SHORT_NAMES;

    function twoDigit(val) {
        return ('0' + (isPresent(val) ? val : '0')).slice(-2);
    }
    function threeDigit(val) {
        return ('00' + (isPresent(val) ? val : '0')).slice(-3);
    }
    function fourDigit(val) {
        return ('000' + (isPresent(val) ? val : '0')).slice(-4);
    }
    return {
        setters: [function (_util) {
            isBlank = _util.isBlank;
            isPresent = _util.isPresent;
            isString = _util.isString;
            assign = _util.assign;
        }],
        execute: function () {
            function renderDateTime(template, value, locale) {
                if (isBlank(value)) {
                    return '';
                }
                var tokens = [];
                var hasText = false;
                FORMAT_KEYS.forEach(function (format, index) {
                    if (template.indexOf(format.f) > -1) {
                        var token = '{' + index + '}';
                        var text = renderTextFormat(format.f, value[format.k], value, locale);
                        if (!hasText && text && isPresent(value[format.k])) {
                            hasText = true;
                        }
                        tokens.push(token, text);
                        template = template.replace(format.f, token);
                    }
                });
                if (!hasText) {
                    return '';
                }
                for (var i = 0; i < tokens.length; i += 2) {
                    template = template.replace(tokens[i], tokens[i + 1]);
                }
                return template;
            }

            _export('renderDateTime', renderDateTime);

            function renderTextFormat(format, value, date, locale) {
                if (format === FORMAT_DDDD || format === FORMAT_DDD) {
                    try {
                        value = new Date(date.year, date.month - 1, date.day).getDay();
                        if (format === FORMAT_DDDD) {
                            return (isPresent(locale.dayNames) ? locale.dayNames : DAY_NAMES)[value];
                        }
                        return (isPresent(locale.dayShortNames) ? locale.dayShortNames : DAY_SHORT_NAMES)[value];
                    } catch (e) {}
                    return '';
                }
                if (format === FORMAT_A) {
                    return date ? date.hour < 12 ? 'AM' : 'PM' : isPresent(value) ? value.toUpperCase() : '';
                }
                if (format === FORMAT_a) {
                    return date ? date.hour < 12 ? 'am' : 'pm' : isPresent(value) ? value : '';
                }
                if (isBlank(value)) {
                    return '';
                }
                if (format === FORMAT_YY || format === FORMAT_MM || format === FORMAT_DD || format === FORMAT_HH || format === FORMAT_mm) {
                    return twoDigit(value);
                }
                if (format === FORMAT_YYYY) {
                    return fourDigit(value);
                }
                if (format === FORMAT_MMMM) {
                    return (isPresent(locale.monthNames) ? locale.monthNames : MONTH_NAMES)[value - 1];
                }
                if (format === FORMAT_MMM) {
                    return (isPresent(locale.monthShortNames) ? locale.monthShortNames : MONTH_SHORT_NAMES)[value - 1];
                }
                if (format === FORMAT_hh || format === FORMAT_h) {
                    if (value === 0) {
                        return '12';
                    }
                    if (value > 12) {
                        value -= 12;
                    }
                    if (format === FORMAT_hh && value < 10) {
                        return '0' + value;
                    }
                }
                return value.toString();
            }

            _export('renderTextFormat', renderTextFormat);

            function dateValueRange(format, min, max) {
                var opts = [];
                var i = void 0;
                if (format === FORMAT_YYYY || format === FORMAT_YY) {
                    // year
                    i = max.year;
                    while (i >= min.year) {
                        opts.push(i--);
                    }
                } else if (format === FORMAT_MMMM || format === FORMAT_MMM || format === FORMAT_MM || format === FORMAT_M || format === FORMAT_hh || format === FORMAT_h) {
                    // month or 12-hour
                    for (i = 1; i < 13; i++) {
                        opts.push(i);
                    }
                } else if (format === FORMAT_DDDD || format === FORMAT_DDD || format === FORMAT_DD || format === FORMAT_D) {
                    // day
                    for (i = 1; i < 32; i++) {
                        opts.push(i);
                    }
                } else if (format === FORMAT_HH || format === FORMAT_H) {
                    // 24-hour
                    for (i = 0; i < 24; i++) {
                        opts.push(i);
                    }
                } else if (format === FORMAT_mm || format === FORMAT_m) {
                    // minutes
                    for (i = 0; i < 60; i++) {
                        opts.push(i);
                    }
                } else if (format === FORMAT_A || format === FORMAT_a) {
                    // AM/PM
                    opts.push('am', 'pm');
                }
                return opts;
            }

            _export('dateValueRange', dateValueRange);

            function dateSortValue(year, month, day) {
                return parseInt('1' + fourDigit(year) + twoDigit(month) + twoDigit(day), 10);
            }

            _export('dateSortValue', dateSortValue);

            function dateDataSortValue(data) {
                if (data) {
                    return dateSortValue(data.year, data.month, data.day);
                }
                return -1;
            }

            _export('dateDataSortValue', dateDataSortValue);

            function daysInMonth(month, year) {
                return month === 4 || month === 6 || month === 9 || month === 11 ? 30 : month === 2 ? isLeapYear(year) ? 29 : 28 : 31;
            }

            _export('daysInMonth', daysInMonth);

            function isLeapYear(year) {
                return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
            }

            _export('isLeapYear', isLeapYear);

            ISO_8601_REGEXP = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
            TIME_REGEXP = /^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
            function parseDate(val) {
                // manually parse IS0 cuz Date.parse cannot be trusted
                // ISO 8601 format: 1994-12-15T13:47:20Z
                var parse = void 0;
                if (isPresent(val) && val !== '') {
                    // try parsing for just time first, HH:MM
                    parse = TIME_REGEXP.exec(val);
                    if (isPresent(parse)) {
                        // adjust the array so it fits nicely with the datetime parse
                        parse.unshift(undefined, undefined);
                        parse[2] = parse[3] = undefined;
                    } else {
                        // try parsing for full ISO datetime
                        parse = ISO_8601_REGEXP.exec(val);
                    }
                }
                if (isBlank(parse)) {
                    // wasn't able to parse the ISO datetime
                    return null;
                }
                // ensure all the parse values exist with at least 0
                for (var i = 1; i < 8; i++) {
                    parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : null;
                }
                var tzOffset = 0;
                if (isPresent(parse[9]) && isPresent(parse[10])) {
                    // hours
                    tzOffset = parseInt(parse[10], 10) * 60;
                    if (isPresent(parse[11])) {
                        // minutes
                        tzOffset += parseInt(parse[11], 10);
                    }
                    if (parse[9] === '-') {
                        // + or -
                        tzOffset *= -1;
                    }
                }
                return {
                    year: parse[1],
                    month: parse[2],
                    day: parse[3],
                    hour: parse[4],
                    minute: parse[5],
                    second: parse[6],
                    millisecond: parse[7],
                    tzOffset: tzOffset
                };
            }

            _export('parseDate', parseDate);

            function updateDate(existingData, newData) {
                if (isPresent(newData) && newData !== '') {
                    if (isString(newData)) {
                        // new date is a string, and hopefully in the ISO format
                        // convert it to our DateTimeData if a valid ISO
                        newData = parseDate(newData);
                        if (newData) {
                            // successfully parsed the ISO string to our DateTimeData
                            assign(existingData, newData);
                            return;
                        }
                    } else if (isPresent(newData.year) || isPresent(newData.hour)) {
                        // newData is from of a datetime picker's selected values
                        // update the existing DateTimeData data with the new values
                        // do some magic for 12-hour values
                        if (isPresent(newData.ampm) && isPresent(newData.hour)) {
                            if (newData.ampm.value === 'pm') {
                                newData.hour.value = newData.hour.value === 12 ? 12 : newData.hour.value + 12;
                            } else {
                                newData.hour.value = newData.hour.value === 12 ? 0 : newData.hour.value;
                            }
                        }
                        // merge new values from the picker's selection
                        // to the existing DateTimeData values
                        for (var k in newData) {
                            existingData[k] = newData[k].value;
                        }
                        return;
                    }
                    // eww, invalid data
                    console.warn('Error parsing date: "' + newData + '". Please provide a valid ISO 8601 datetime format: https://www.w3.org/TR/NOTE-datetime');
                } else {
                    // blank data, clear everything out
                    for (var k in existingData) {
                        delete existingData[k];
                    }
                }
            }

            _export('updateDate', updateDate);

            function parseTemplate(template) {
                var formats = [];
                template = template.replace(/[^\w\s]/gi, ' ');
                FORMAT_KEYS.forEach(function (format) {
                    if (format.f.length > 1 && template.indexOf(format.f) > -1 && template.indexOf(format.f + format.f.charAt(0)) < 0) {
                        template = template.replace(format.f, ' ' + format.f + ' ');
                    }
                });
                var words = template.split(' ').filter(function (w) {
                    return w.length > 0;
                });
                words.forEach(function (word, i) {
                    FORMAT_KEYS.forEach(function (format) {
                        if (word === format.f) {
                            if (word === FORMAT_A || word === FORMAT_a) {
                                // this format is an am/pm format, so it's an "a" or "A"
                                if (formats.indexOf(FORMAT_h) < 0 && formats.indexOf(FORMAT_hh) < 0 || words[i - 1] !== FORMAT_m && words[i - 1] !== FORMAT_mm) {
                                    // template does not already have a 12-hour format
                                    // or this am/pm format doesn't have a minute format immediately before it
                                    // so do not treat this word "a" or "A" as an am/pm format
                                    return;
                                }
                            }
                            formats.push(word);
                        }
                    });
                });
                return formats;
            }

            _export('parseTemplate', parseTemplate);

            function getValueFromFormat(date, format) {
                if (format === FORMAT_A || format === FORMAT_a) {
                    return date.hour < 12 ? 'am' : 'pm';
                }
                if (format === FORMAT_hh || format === FORMAT_h) {
                    return date.hour > 12 ? date.hour - 12 : date.hour;
                }
                return date[convertFormatToKey(format)];
            }

            _export('getValueFromFormat', getValueFromFormat);

            function convertFormatToKey(format) {
                for (var k in FORMAT_KEYS) {
                    if (FORMAT_KEYS[k].f === format) {
                        return FORMAT_KEYS[k].k;
                    }
                }
                return null;
            }

            _export('convertFormatToKey', convertFormatToKey);

            function convertDataToISO(data) {
                // https://www.w3.org/TR/NOTE-datetime
                var rtn = '';
                if (isPresent(data)) {
                    if (isPresent(data.year)) {
                        // YYYY
                        rtn = fourDigit(data.year);
                        if (isPresent(data.month)) {
                            // YYYY-MM
                            rtn += '-' + twoDigit(data.month);
                            if (isPresent(data.day)) {
                                // YYYY-MM-DD
                                rtn += '-' + twoDigit(data.day);
                                if (isPresent(data.hour)) {
                                    // YYYY-MM-DDTHH:mm:SS
                                    rtn += 'T' + twoDigit(data.hour) + ':' + twoDigit(data.minute) + ':' + twoDigit(data.second);
                                    if (data.millisecond > 0) {
                                        // YYYY-MM-DDTHH:mm:SS.SSS
                                        rtn += '.' + threeDigit(data.millisecond);
                                    }
                                    if (isBlank(data.tzOffset) || data.tzOffset === 0) {
                                        // YYYY-MM-DDTHH:mm:SSZ
                                        rtn += 'Z';
                                    } else {
                                        // YYYY-MM-DDTHH:mm:SS+/-HH:mm
                                        rtn += (data.tzOffset > 0 ? '+' : '-') + twoDigit(Math.floor(data.tzOffset / 60)) + ':' + twoDigit(data.tzOffset % 60);
                                    }
                                }
                            }
                        }
                    } else if (isPresent(data.hour)) {
                        // HH:mm
                        rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);
                        if (isPresent(data.second)) {
                            // HH:mm:SS
                            rtn += ':' + twoDigit(data.second);
                            if (isPresent(data.millisecond)) {
                                // HH:mm:SS.SSS
                                rtn += '.' + threeDigit(data.millisecond);
                            }
                        }
                    }
                }
                return rtn;
            }
            _export('convertDataToISO', convertDataToISO);

            FORMAT_YYYY = 'YYYY';
            FORMAT_YY = 'YY';
            FORMAT_MMMM = 'MMMM';
            FORMAT_MMM = 'MMM';
            FORMAT_MM = 'MM';
            FORMAT_M = 'M';
            FORMAT_DDDD = 'DDDD';
            FORMAT_DDD = 'DDD';
            FORMAT_DD = 'DD';
            FORMAT_D = 'D';
            FORMAT_HH = 'HH';
            FORMAT_H = 'H';
            FORMAT_hh = 'hh';
            FORMAT_h = 'h';
            FORMAT_mm = 'mm';
            FORMAT_m = 'm';
            FORMAT_A = 'A';
            FORMAT_a = 'a';
            FORMAT_KEYS = [{ f: FORMAT_YYYY, k: 'year' }, { f: FORMAT_MMMM, k: 'month' }, { f: FORMAT_DDDD, k: 'day' }, { f: FORMAT_MMM, k: 'month' }, { f: FORMAT_DDD, k: 'day' }, { f: FORMAT_YY, k: 'year' }, { f: FORMAT_MM, k: 'month' }, { f: FORMAT_DD, k: 'day' }, { f: FORMAT_HH, k: 'hour' }, { f: FORMAT_hh, k: 'hour' }, { f: FORMAT_mm, k: 'minute' }, { f: FORMAT_M, k: 'month' }, { f: FORMAT_D, k: 'day' }, { f: FORMAT_H, k: 'hour' }, { f: FORMAT_h, k: 'hour' }, { f: FORMAT_m, k: 'minute' }, { f: FORMAT_A, k: 'ampm' }, { f: FORMAT_a, k: 'ampm' }];
            FORMAT_REGEX = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|DD?D?D?|ddd?d?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|.)/g;
            DAY_NAMES = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            DAY_SHORT_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            MONTH_SHORT_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        }
    };
});
"use strict";

System.register("ionic-angular/util/debouncer", [], function (_export, _context) {
    "use strict";

    var _createClass, Debouncer;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export("Debouncer", Debouncer = function () {
                function Debouncer(wait) {
                    _classCallCheck(this, Debouncer);

                    this.wait = wait;
                    this.timer = null;
                }

                _createClass(Debouncer, [{
                    key: "debounce",
                    value: function debounce(callback) {
                        this.callback = callback;
                        this.schedule();
                    }
                }, {
                    key: "schedule",
                    value: function schedule() {
                        if (this.timer) {
                            clearTimeout(this.timer);
                            this.timer = null;
                        }
                        if (this.wait <= 0) {
                            this.callback();
                        } else {
                            this.timer = setTimeout(this.callback, this.wait);
                        }
                    }
                }]);

                return Debouncer;
            }());

            _export("Debouncer", Debouncer);
        }
    };
});
'use strict';

System.register('ionic-angular/util/dom', [], function (_export, _context) {
    "use strict";

    var originalRaf, nativeRaf, raf, cancelRaf, nativeTimeout, clearNativeTimeout, CSS, skipInputAttrsReg, matchesFn, matchesMethods, dimensionCache;
    return {
        setters: [],
        execute: function () {
            // RequestAnimationFrame Polyfill (Android 4.3 and below)
            /*! @author Paul Irish */
            /*! @source https://gist.github.com/paulirish/1579671 */
            (function () {
                var rafLastTime = 0;
                var win = window;
                if (!win.requestAnimationFrame) {
                    win.requestAnimationFrame = function (callback) {
                        var currTime = Date.now();
                        var timeToCall = Math.max(0, 16 - (currTime - rafLastTime));
                        var id = window.setTimeout(function () {
                            callback(currTime + timeToCall);
                        }, timeToCall);
                        rafLastTime = currTime + timeToCall;
                        return id;
                    };
                }
                if (!win.cancelAnimationFrame) {
                    win.cancelAnimationFrame = function (id) {
                        clearTimeout(id);
                    };
                }
            })();
            // use native raf rather than the zone wrapped one
            originalRaf = window[window['Zone']['__symbol__']('requestAnimationFrame')] || window[window['Zone']['__symbol__']('webkitRequestAnimationFrame')];

            _export('nativeRaf', nativeRaf = originalRaf !== undefined ? originalRaf['bind'](window) : window.requestAnimationFrame.bind(window));

            _export('nativeRaf', nativeRaf);

            _export('raf', raf = window.requestAnimationFrame.bind(window));

            _export('raf', raf);

            _export('cancelRaf', cancelRaf = window.cancelAnimationFrame.bind(window));

            _export('cancelRaf', cancelRaf);

            _export('nativeTimeout', nativeTimeout = window[window['Zone']['__symbol__']('setTimeout')]['bind'](window));

            _export('nativeTimeout', nativeTimeout);

            _export('clearNativeTimeout', clearNativeTimeout = window[window['Zone']['__symbol__']('clearTimeout')]['bind'](window));

            _export('clearNativeTimeout', clearNativeTimeout);

            function rafFrames(framesToWait, callback) {
                framesToWait = Math.ceil(framesToWait);
                if (framesToWait < 2) {
                    nativeRaf(callback);
                } else {
                    nativeTimeout(function () {
                        nativeRaf(callback);
                    }, (framesToWait - 1) * 16.6667);
                }
            }

            _export('rafFrames', rafFrames);

            _export('CSS', CSS = {});

            _export('CSS', CSS);

            (function () {
                // transform
                var i;
                var keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform', '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];
                for (i = 0; i < keys.length; i++) {
                    if (document.documentElement.style[keys[i]] !== undefined) {
                        CSS.transform = keys[i];
                        break;
                    }
                }
                // transition
                keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
                for (i = 0; i < keys.length; i++) {
                    if (document.documentElement.style[keys[i]] !== undefined) {
                        CSS.transition = keys[i];
                        break;
                    }
                }
                // The only prefix we care about is webkit for transitions.
                var isWebkit = CSS.transition.indexOf('webkit') > -1;
                // transition duration
                CSS.transitionDuration = (isWebkit ? '-webkit-' : '') + 'transition-duration';
                // transition timing function
                CSS.transitionTimingFn = (isWebkit ? '-webkit-' : '') + 'transition-timing-function';
                // transition delay
                CSS.transitionDelay = (isWebkit ? '-webkit-' : '') + 'transition-delay';
                // To be sure transitionend works everywhere, include *both* the webkit and non-webkit events
                CSS.transitionEnd = (isWebkit ? 'webkitTransitionEnd ' : '') + 'transitionend';
                // transform origin
                CSS.transformOrigin = (isWebkit ? '-webkit-' : '') + 'transform-origin';
            })();
            function transitionEnd(el, callback) {
                if (el) {
                    CSS.transitionEnd.split(' ').forEach(function (eventName) {
                        el.addEventListener(eventName, onEvent);
                    });
                    return unregister;
                }
                function unregister() {
                    CSS.transitionEnd.split(' ').forEach(function (eventName) {
                        el.removeEventListener(eventName, onEvent);
                    });
                }
                function onEvent(ev) {
                    if (el === ev.target) {
                        unregister();
                        callback(ev);
                    }
                }
            }

            _export('transitionEnd', transitionEnd);

            function ready(callback) {
                var promise = null;
                if (!callback) {
                    // a callback wasn't provided, so let's return a promise instead
                    promise = new Promise(function (resolve) {
                        callback = resolve;
                    });
                }
                if (document.readyState === 'complete' || document.readyState === 'interactive') {
                    callback();
                } else {
                    document.addEventListener('DOMContentLoaded', completed, false);
                    window.addEventListener('load', completed, false);
                }
                return promise;
                function completed() {
                    document.removeEventListener('DOMContentLoaded', completed, false);
                    window.removeEventListener('load', completed, false);
                    callback();
                }
            }

            _export('ready', ready);

            function windowLoad(callback) {
                var promise = null;
                if (!callback) {
                    // a callback wasn't provided, so let's return a promise instead
                    promise = new Promise(function (resolve) {
                        callback = resolve;
                    });
                }
                if (document.readyState === 'complete') {
                    callback();
                } else {
                    window.addEventListener('load', completed, false);
                }
                return promise;
                function completed() {
                    window.removeEventListener('load', completed, false);
                    callback();
                }
            }

            _export('windowLoad', windowLoad);

            function pointerCoord(ev) {
                // get coordinates for either a mouse click
                // or a touch depending on the given event
                var c = { x: 0, y: 0 };
                if (ev) {
                    var touches = ev.touches && ev.touches.length ? ev.touches : [ev];
                    var e = ev.changedTouches && ev.changedTouches[0] || touches[0];
                    if (e) {
                        c.x = e.clientX || e.pageX || 0;
                        c.y = e.clientY || e.pageY || 0;
                    }
                }
                return c;
            }

            _export('pointerCoord', pointerCoord);

            function hasPointerMoved(threshold, startCoord, endCoord) {
                return startCoord && endCoord && (Math.abs(startCoord.x - endCoord.x) > threshold || Math.abs(startCoord.y - endCoord.y) > threshold);
            }

            _export('hasPointerMoved', hasPointerMoved);

            function isActive(ele) {
                return !!(ele && document.activeElement === ele);
            }

            _export('isActive', isActive);

            function hasFocus(ele) {
                return isActive(ele) && ele.parentElement.querySelector(':focus') === ele;
            }

            _export('hasFocus', hasFocus);

            function isTextInput(ele) {
                return !!ele && (ele.tagName === 'TEXTAREA' || ele.contentEditable === 'true' || ele.tagName === 'INPUT' && !/^(radio|checkbox|range|file|submit|reset|color|image|button)$/i.test(ele.type));
            }

            _export('isTextInput', isTextInput);

            function hasFocusedTextInput() {
                var ele = document.activeElement;
                if (isTextInput(ele)) {
                    return ele.parentElement.querySelector(':focus') === ele;
                }
                return false;
            }

            _export('hasFocusedTextInput', hasFocusedTextInput);

            skipInputAttrsReg = /^(value|checked|disabled|type|class|style|id|autofocus|autocomplete|autocorrect)$/i;
            function copyInputAttributes(srcElement, destElement) {
                // copy attributes from one element to another
                // however, skip over a few of them as they're already
                // handled in the angular world
                var attrs = srcElement.attributes;
                for (var i = 0; i < attrs.length; i++) {
                    var attr = attrs[i];
                    if (!skipInputAttrsReg.test(attr.name)) {
                        destElement.setAttribute(attr.name, attr.value);
                    }
                }
            }

            _export('copyInputAttributes', copyInputAttributes);

            matchesFn = void 0;
            matchesMethods = ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector'];

            matchesMethods.some(function (fn) {
                if (typeof document.documentElement[fn] === 'function') {
                    matchesFn = fn;
                    return true;
                }
            });
            function closest(ele, selector, checkSelf) {
                if (ele && matchesFn) {
                    // traverse parents
                    ele = checkSelf ? ele : ele.parentElement;
                    while (ele !== null) {
                        if (ele[matchesFn](selector)) {
                            return ele;
                        }
                        ele = ele.parentElement;
                    }
                }
                return null;
            }
            /**
             * Get the element offsetWidth and offsetHeight. Values are cached
             * to reduce DOM reads. Cache is cleared on a window resize.
             */

            _export('closest', closest);

            function getDimensions(ele, id) {
                var dimensions = dimensionCache[id];
                if (!dimensions) {
                    // make sure we got good values before caching
                    if (ele.offsetWidth && ele.offsetHeight) {
                        dimensions = dimensionCache[id] = {
                            width: ele.offsetWidth,
                            height: ele.offsetHeight,
                            left: ele.offsetLeft,
                            top: ele.offsetTop
                        };
                    } else {
                        // do not cache bad values
                        return { width: 0, height: 0, left: 0, top: 0 };
                    }
                }
                return dimensions;
            }

            _export('getDimensions', getDimensions);

            function clearDimensions(id) {
                delete dimensionCache[id];
            }

            _export('clearDimensions', clearDimensions);

            function windowDimensions() {
                if (!dimensionCache.win) {
                    // make sure we got good values before caching
                    if (window.innerWidth && window.innerHeight) {
                        dimensionCache.win = {
                            width: window.innerWidth,
                            height: window.innerHeight
                        };
                    } else {
                        // do not cache bad values
                        return { width: 0, height: 0 };
                    }
                }
                return dimensionCache.win;
            }

            _export('windowDimensions', windowDimensions);

            function flushDimensionCache() {
                dimensionCache = {};
            }

            _export('flushDimensionCache', flushDimensionCache);

            dimensionCache = {};
        }
    };
});
"use strict";

System.register("ionic-angular/util/events", [], function (_export, _context) {
    "use strict";

    var _createClass, Events;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export("Events", Events = function () {
                function Events() {
                    _classCallCheck(this, Events);

                    this._channels = [];
                }
                /**
                 * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
                 *
                 * @param {string} topic the topic to subscribe to
                 * @param {function} handler the event handler
                 */


                _createClass(Events, [{
                    key: "subscribe",
                    value: function subscribe(topic) {
                        var _this = this;

                        if (!this._channels[topic]) {
                            this._channels[topic] = [];
                        }

                        for (var _len = arguments.length, handlers = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            handlers[_key - 1] = arguments[_key];
                        }

                        handlers.forEach(function (handler) {
                            _this._channels[topic].push(handler);
                        });
                    }
                }, {
                    key: "unsubscribe",
                    value: function unsubscribe(topic, handler) {
                        var t = this._channels[topic];
                        if (!t) {
                            // Wasn't found, wasn't removed
                            return false;
                        }
                        if (!handler) {
                            // Remove all handlers for this topic
                            delete this._channels[topic];
                            return true;
                        }
                        // We need to find and remove a specific handler
                        var i = t.indexOf(handler);
                        if (i < 0) {
                            // Wasn't found, wasn't removed
                            return false;
                        }
                        t.splice(i, 1);
                        // If the channel is empty now, remove it from the channel map
                        if (!t.length) {
                            delete this._channels[topic];
                        }
                        return true;
                    }
                }, {
                    key: "publish",
                    value: function publish(topic) {
                        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                            args[_key2 - 1] = arguments[_key2];
                        }

                        var t = this._channels[topic];
                        if (!t) {
                            return null;
                        }
                        var responses = [];
                        t.forEach(function (handler) {
                            responses.push(handler(args));
                        });
                        return responses;
                    }
                }]);

                return Events;
            }());

            _export("Events", Events);
        }
    };
});
'use strict';

System.register('ionic-angular/util/feature-detect', [], function (_export, _context) {
    "use strict";

    var _createClass, FeatureDetect, featureDetects;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('FeatureDetect', FeatureDetect = function () {
                function FeatureDetect() {
                    _classCallCheck(this, FeatureDetect);

                    this._results = {};
                }

                _createClass(FeatureDetect, [{
                    key: 'run',
                    value: function run(window, document) {
                        for (var name in featureDetects) {
                            this._results[name] = featureDetects[name](window, document, document.body);
                        }
                    }
                }, {
                    key: 'has',
                    value: function has(featureName) {
                        return !!this._results[featureName];
                    }
                }], [{
                    key: 'add',
                    value: function add(name, fn) {
                        featureDetects[name] = fn;
                    }
                }]);

                return FeatureDetect;
            }());

            _export('FeatureDetect', FeatureDetect);

            featureDetects = {};

            FeatureDetect.add('hairlines', function (window, document, body) {
                /**
                * Hairline Shim
                * Add the "hairline" CSS class name to the body tag
                * if the browser supports subpixels.
                */
                var canDo = false;
                if (window.devicePixelRatio >= 2) {
                    var hairlineEle = document.createElement('div');
                    hairlineEle.style.border = '.5px solid transparent';
                    body.appendChild(hairlineEle);
                    if (hairlineEle.offsetHeight === 1) {
                        body.classList.add('hairlines');
                        canDo = true;
                    }
                    body.removeChild(hairlineEle);
                }
                return canDo;
            });
            FeatureDetect.add('backdrop-filter', function (window, document, body) {
                /**
                * backdrop-filter Shim
                * Checks if css backdrop-filter is implemented by the browser.
                */
                var styles = body.style;
                var backdrop = styles['backdrop-filter'] !== undefined || styles['-webkit-backdrop-filter'] !== undefined;
                if (backdrop) {
                    body.classList.add('backdrop-filter');
                }
                return backdrop;
            });
        }
    };
});
"use strict";

System.register("ionic-angular/util/form", ["@angular/core"], function (_export, _context) {
    "use strict";

    var Injectable, _createClass, _typeof, __decorate, __metadata, Form;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Injectable = _angularCore.Injectable;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Form", Form = function () {
                function Form() {
                    _classCallCheck(this, Form);

                    this._focused = null;
                    this._ids = -1;
                    this._inputs = [];
                    this.focusCtrl(document);
                }

                _createClass(Form, [{
                    key: "register",
                    value: function register(input) {
                        this._inputs.push(input);
                    }
                }, {
                    key: "deregister",
                    value: function deregister(input) {
                        var index = this._inputs.indexOf(input);
                        if (index > -1) {
                            this._inputs.splice(index, 1);
                        }
                        if (input === this._focused) {
                            this._focused = null;
                        }
                    }
                }, {
                    key: "focusCtrl",
                    value: function focusCtrl(document) {
                        // raw DOM fun
                        var focusCtrl = document.createElement('focus-ctrl');
                        focusCtrl.setAttribute('aria-hidden', true);
                        this._blur = document.createElement('button');
                        this._blur.tabIndex = -1;
                        focusCtrl.appendChild(this._blur);
                        document.body.appendChild(focusCtrl);
                    }
                }, {
                    key: "focusOut",
                    value: function focusOut() {
                        console.debug('focusOut');
                        var activeElement = document.activeElement;
                        if (activeElement) {
                            activeElement.blur();
                        }
                        this._blur.focus();
                    }
                }, {
                    key: "setAsFocused",
                    value: function setAsFocused(input) {
                        this._focused = input;
                    }
                }, {
                    key: "tabFocus",
                    value: function tabFocus(currentInput) {
                        var index = this._inputs.indexOf(currentInput);
                        if (index > -1 && index + 1 < this._inputs.length) {
                            var nextInput = this._inputs[index + 1];
                            if (nextInput !== this._focused) {
                                console.debug('tabFocus, next');
                                return nextInput.initFocus();
                            }
                        }
                        index = this._inputs.indexOf(this._focused);
                        if (index > 0) {
                            var previousInput = this._inputs[index - 1];
                            if (previousInput) {
                                console.debug('tabFocus, previous');
                                previousInput.initFocus();
                            }
                        }
                    }
                }, {
                    key: "nextId",
                    value: function nextId() {
                        return ++this._ids;
                    }
                }]);

                return Form;
            }());

            _export("Form", Form);

            _export("Form", Form = __decorate([Injectable(), __metadata('design:paramtypes', [])], Form));
        }
    };
});
"use strict";

System.register("ionic-angular/util/key", [], function (_export, _context) {
    "use strict";

    var Key;
    return {
        setters: [],
        execute: function () {
            _export("Key", Key);

            (function (Key) {
                Key[Key["ENTER"] = 13] = "ENTER";
                Key[Key["ESCAPE"] = 27] = "ESCAPE";
                Key[Key["TAB"] = 9] = "TAB";
            })(Key || _export("Key", Key = {}));
            ;
        }
    };
});
"use strict";

System.register("ionic-angular/util/keyboard", ["@angular/core", "../config/config", "./form", "./dom", "./key"], function (_export, _context) {
    "use strict";

    var Injectable, NgZone, Config, Form, hasFocusedTextInput, nativeRaf, rafFrames, nativeTimeout, Key, _createClass, _typeof, __decorate, __metadata, Keyboard, KEYBOARD_CLOSE_POLLING, KEYBOARD_POLLING_CHECKS_MAX, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Injectable = _angularCore.Injectable;
            NgZone = _angularCore.NgZone;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_form2) {
            Form = _form2.Form;
        }, function (_dom) {
            hasFocusedTextInput = _dom.hasFocusedTextInput;
            nativeRaf = _dom.nativeRaf;
            rafFrames = _dom.rafFrames;
            nativeTimeout = _dom.nativeTimeout;
        }, function (_key) {
            Key = _key.Key;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Keyboard", Keyboard = function () {
                function Keyboard(config, _form, _zone) {
                    var _this = this;

                    _classCallCheck(this, Keyboard);

                    this._form = _form;
                    this._zone = _zone;
                    _zone.runOutsideAngular(function () {
                        _this.focusOutline(config.get('focusOutline'), document);
                    });
                }
                /**
                 * Check to see if the keyboard is open or not.
                 *
                 * ```ts
                 * export class MyClass{
                 *  constructor(keyboard: Keyboard){
                 *    this.keyboard = keyboard;
                 *  }
                 *  keyboardCheck(){
                 *    setTimeout(()  => console.log('is the keyboard open ', this.keyboard.isOpen()));
                 *  }
                 * }
                 *
                 * ```
                 *
                 * @return {boolean} returns a true or flase value if the keyboard is open or not
                 */


                _createClass(Keyboard, [{
                    key: "isOpen",
                    value: function isOpen() {
                        return hasFocusedTextInput();
                    }
                }, {
                    key: "onClose",
                    value: function onClose(callback) {
                        var pollingInternval = arguments.length <= 1 || arguments[1] === undefined ? KEYBOARD_CLOSE_POLLING : arguments[1];
                        var pollingChecksMax = arguments.length <= 2 || arguments[2] === undefined ? KEYBOARD_POLLING_CHECKS_MAX : arguments[2];

                        console.debug('keyboard onClose');
                        var self = this;
                        var checks = 0;
                        var promise = null;
                        if (!callback) {
                            // a callback wasn't provided, so let's return a promise instead
                            promise = new Promise(function (resolve) {
                                callback = resolve;
                            });
                        }
                        function checkKeyboard() {
                            console.debug('keyboard isOpen', self.isOpen());
                            if (!self.isOpen() || checks > pollingChecksMax) {
                                rafFrames(30, function () {
                                    self._zone.run(function () {
                                        console.debug('keyboard closed');
                                        callback();
                                    });
                                });
                            } else {
                                nativeTimeout(checkKeyboard, pollingInternval);
                            }
                            checks++;
                        }
                        nativeTimeout(checkKeyboard, pollingInternval);
                        return promise;
                    }
                }, {
                    key: "close",
                    value: function close() {
                        var _this2 = this;

                        console.debug('keyboard close()');
                        nativeRaf(function () {
                            if (hasFocusedTextInput()) {
                                // only focus out when a text input has focus
                                _this2._form.focusOut();
                            }
                        });
                    }
                }, {
                    key: "focusOutline",
                    value: function focusOutline(setting, document) {
                        /* Focus Outline
                         * --------------------------------------------------
                         * By default, when a keydown event happens from a tab key, then
                         * the 'focus-outline' css class is added to the body element
                         * so focusable elements have an outline. On a mousedown or
                         * touchstart event, then the 'focus-outline' css class is removed.
                         *
                         * Config default overrides:
                         * focusOutline: true     - Always add the focus-outline
                         * focusOutline: false    - Do not add the focus-outline
                         */
                        var self = this;
                        var isKeyInputEnabled = false;
                        function cssClass() {
                            nativeRaf(function () {
                                document.body.classList[isKeyInputEnabled ? 'add' : 'remove']('focus-outline');
                            });
                        }
                        if (setting === true) {
                            isKeyInputEnabled = true;
                            return cssClass();
                        } else if (setting === false) {
                            return;
                        }
                        // default is to add the focus-outline when the tab key is used
                        function keyDown(ev) {
                            if (!isKeyInputEnabled && ev.keyCode === Key.TAB) {
                                isKeyInputEnabled = true;
                                enableKeyInput();
                            }
                        }
                        function pointerDown() {
                            isKeyInputEnabled = false;
                            enableKeyInput();
                        }
                        function enableKeyInput() {
                            cssClass();
                            self._zone.runOutsideAngular(function () {
                                document.removeEventListener('mousedown', pointerDown);
                                document.removeEventListener('touchstart', pointerDown);
                                if (isKeyInputEnabled) {
                                    document.addEventListener('mousedown', pointerDown);
                                    document.addEventListener('touchstart', pointerDown);
                                }
                            });
                        }
                        document.addEventListener('keydown', keyDown);
                    }
                }]);

                return Keyboard;
            }());

            _export("Keyboard", Keyboard);

            _export("Keyboard", Keyboard = __decorate([Injectable(), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object, typeof (_b = typeof Form !== 'undefined' && Form) === 'function' && _b || Object, typeof (_c = typeof NgZone !== 'undefined' && NgZone) === 'function' && _c || Object])], Keyboard));
            KEYBOARD_CLOSE_POLLING = 150;
            KEYBOARD_POLLING_CHECKS_MAX = 100;
        }
    };
});
'use strict';

System.register('ionic-angular/util/scroll-view', ['../util/dom'], function (_export, _context) {
    "use strict";

    var CSS, pointerCoord, nativeRaf, cancelRaf, _createClass, ScrollView, MAX_VELOCITY, MIN_VELOCITY_START_DECELERATION, MIN_VELOCITY_CONTINUE_DECELERATION, DECELERATION_FRICTION, FRAME_MS;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_utilDom) {
            CSS = _utilDom.CSS;
            pointerCoord = _utilDom.pointerCoord;
            nativeRaf = _utilDom.nativeRaf;
            cancelRaf = _utilDom.cancelRaf;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('ScrollView', ScrollView = function () {
                function ScrollView(ele) {
                    _classCallCheck(this, ScrollView);

                    this._js = false;
                    this._top = 0;
                    this._el = ele;
                }

                _createClass(ScrollView, [{
                    key: 'getTop',
                    value: function getTop() {
                        if (this._js) {
                            return this._top;
                        }
                        return this._top = this._el.scrollTop;
                    }
                }, {
                    key: 'setTop',
                    value: function setTop(top) {
                        this._top = top;
                        if (this._js) {
                            this._el.style[CSS.transform] = 'translate3d(0px,' + top * -1 + 'px,0px)';
                        } else {
                            this._el.scrollTop = top;
                        }
                    }
                }, {
                    key: 'scrollTo',
                    value: function scrollTo(x, y, duration) {
                        // scroll animation loop w/ easing
                        // credit https://gist.github.com/dezinezync/5487119
                        var self = this;
                        if (!self._el) {
                            // invalid element
                            return Promise.resolve();
                        }
                        x = x || 0;
                        y = y || 0;
                        var fromY = self._el.scrollTop;
                        var fromX = self._el.scrollLeft;
                        var xDistance = Math.abs(x - fromX);
                        var yDistance = Math.abs(y - fromY);
                        var maxAttempts = duration / 16 + 100;
                        return new Promise(function (resolve) {
                            var startTime = void 0;
                            var attempts = 0;
                            // scroll loop
                            function step() {
                                attempts++;
                                if (!self._el || !self.isPlaying || attempts > maxAttempts) {
                                    self.isPlaying = false;
                                    resolve();
                                    return;
                                }
                                var time = Math.min(1, (Date.now() - startTime) / duration);
                                // where .5 would be 50% of time on a linear scale easedT gives a
                                // fraction based on the easing method
                                var easedT = --time * time * time + 1;
                                if (fromY !== y) {
                                    self.setTop(easedT * (y - fromY) + fromY);
                                }
                                if (fromX !== x) {
                                    self._el.scrollLeft = Math.floor(easedT * (x - fromX) + fromX);
                                }
                                if (easedT < 1) {
                                    nativeRaf(step);
                                } else {
                                    // done
                                    resolve();
                                }
                            }
                            // start scroll loop
                            self.isPlaying = true;
                            // chill out for a frame first
                            nativeRaf(function () {
                                startTime = Date.now();
                                nativeRaf(step);
                            });
                        });
                    }
                }, {
                    key: 'scrollToTop',
                    value: function scrollToTop(duration) {
                        return this.scrollTo(0, 0, duration);
                    }
                }, {
                    key: 'scrollToBottom',
                    value: function scrollToBottom(duration) {
                        var y = 0;
                        if (this._el) {
                            y = this._el.scrollHeight - this._el.clientHeight;
                        }
                        return this.scrollTo(0, y, duration);
                    }
                }, {
                    key: 'stop',
                    value: function stop() {
                        this.isPlaying = false;
                    }
                }, {
                    key: 'jsScroll',
                    value: function jsScroll(onScrollCallback) {
                        var _this = this;

                        this._js = true;
                        this._cb = onScrollCallback;
                        this._pos = [];
                        if (this._el) {
                            this._el.addEventListener('touchstart', this._start.bind(this));
                            this._el.addEventListener('touchmove', this._move.bind(this));
                            this._el.addEventListener('touchend', this._end.bind(this));
                            this._el.parentElement.classList.add('js-scroll');
                        }
                        return function () {
                            if (_this._el) {
                                _this._el.removeEventListener('touchstart', _this._start.bind(_this));
                                _this._el.removeEventListener('touchmove', _this._move.bind(_this));
                                _this._el.removeEventListener('touchend', _this._end.bind(_this));
                                _this._el.parentElement.classList.remove('js-scroll');
                            }
                        };
                    }
                }, {
                    key: '_start',
                    value: function _start(ev) {
                        this._velocity = 0;
                        this._pos.length = 0;
                        this._max = null;
                        this._pos.push(pointerCoord(ev).y, Date.now());
                    }
                }, {
                    key: '_move',
                    value: function _move(ev) {
                        if (this._pos.length) {
                            var y = pointerCoord(ev).y;
                            // ******** DOM READ ****************
                            this._setMax();
                            this._top -= y - this._pos[this._pos.length - 2];
                            this._top = Math.min(Math.max(this._top, 0), this._max);
                            this._pos.push(y, Date.now());
                            // ******** DOM READ THEN DOM WRITE ****************
                            this._cb(this._top);
                            // ******** DOM WRITE ****************
                            this.setTop(this._top);
                        }
                    }
                }, {
                    key: '_setMax',
                    value: function _setMax() {
                        if (!this._max) {
                            // ******** DOM READ ****************
                            this._max = this._el.offsetHeight - this._el.parentElement.offsetHeight + this._el.parentElement.offsetTop;
                        }
                    }
                }, {
                    key: '_end',
                    value: function _end(ev) {
                        // figure out what the scroll position was about 100ms ago
                        var positions = this._pos;
                        this._velocity = 0;
                        cancelRaf(this._rafId);
                        if (!positions.length) return;
                        var y = pointerCoord(ev).y;
                        positions.push(y, Date.now());
                        var endPos = positions.length - 1;
                        var startPos = endPos;
                        var timeRange = Date.now() - 100;
                        // move pointer to position measured 100ms ago
                        for (var i = endPos; i > 0 && positions[i] > timeRange; i -= 2) {
                            startPos = i;
                        }
                        if (startPos !== endPos) {
                            // compute relative movement between these two points
                            var timeOffset = positions[endPos] - positions[startPos];
                            var movedTop = positions[startPos - 1] - positions[endPos - 1];
                            // based on XXms compute the movement to apply for each render step
                            this._velocity = movedTop / timeOffset * FRAME_MS;
                            // verify that we have enough velocity to start deceleration
                            if (Math.abs(this._velocity) > MIN_VELOCITY_START_DECELERATION) {
                                // ******** DOM READ ****************
                                this._setMax();
                                this._rafId = nativeRaf(this._decelerate.bind(this));
                            }
                        }
                        positions.length = 0;
                    }
                }, {
                    key: '_decelerate',
                    value: function _decelerate() {
                        var self = this;
                        if (self._velocity) {
                            self._velocity *= DECELERATION_FRICTION;
                            // update top with updated velocity
                            // clamp top within scroll limits
                            self._top = Math.min(Math.max(self._top + self._velocity, 0), self._max);
                            // ******** DOM READ THEN DOM WRITE ****************
                            self._cb(self._top);
                            // ******** DOM WRITE ****************
                            self.setTop(self._top);
                            if (self._top > 0 && self._top < self._max && Math.abs(self._velocity) > MIN_VELOCITY_CONTINUE_DECELERATION) {
                                self._rafId = nativeRaf(self._decelerate.bind(self));
                            }
                        }
                    }
                }, {
                    key: 'destroy',
                    value: function destroy() {
                        this._velocity = 0;
                        this.stop();
                        this._el = null;
                    }
                }]);

                return ScrollView;
            }());

            _export('ScrollView', ScrollView);

            MAX_VELOCITY = 150;
            MIN_VELOCITY_START_DECELERATION = 4;
            MIN_VELOCITY_CONTINUE_DECELERATION = 0.12;
            DECELERATION_FRICTION = 0.97;
            FRAME_MS = 1000 / 60;
        }
    };
});
'use strict';

System.register('ionic-angular/util/ui-event-manager', [], function (_export, _context) {
    "use strict";

    var _createClass, PointerEvents, UIEventManager;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function listenEvent(ele, eventName, zoneWrapped, option, callback) {
        var rawEvent = '__zone_symbol__addEventListener' in ele && !zoneWrapped;
        if (rawEvent) {
            ele.__zone_symbol__addEventListener(eventName, callback, option);
            return function () {
                return ele.__zone_symbol__removeEventListener(eventName, callback);
            };
        } else {
            ele.addEventListener(eventName, callback, option);
            return function () {
                return ele.removeEventListener(eventName, callback);
            };
        }
    }
    return {
        setters: [],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('PointerEvents', PointerEvents = function () {
                function PointerEvents(ele, pointerDown, pointerMove, pointerUp, zone, option) {
                    var _this = this;

                    _classCallCheck(this, PointerEvents);

                    this.ele = ele;
                    this.pointerDown = pointerDown;
                    this.pointerMove = pointerMove;
                    this.pointerUp = pointerUp;
                    this.zone = zone;
                    this.option = option;
                    this.rmTouchStart = null;
                    this.rmTouchMove = null;
                    this.rmTouchEnd = null;
                    this.rmMouseStart = null;
                    this.rmMouseMove = null;
                    this.rmMouseUp = null;
                    this.lastTouchEvent = 0;
                    this.mouseWait = 2 * 1000;
                    this.rmTouchStart = listenEvent(ele, 'touchstart', zone, option, function (ev) {
                        return _this.handleTouchStart(ev);
                    });
                    this.rmMouseStart = listenEvent(ele, 'mousedown', zone, option, function (ev) {
                        return _this.handleMouseDown(ev);
                    });
                }

                _createClass(PointerEvents, [{
                    key: 'handleTouchStart',
                    value: function handleTouchStart(ev) {
                        var _this2 = this;

                        this.lastTouchEvent = Date.now() + this.mouseWait;
                        if (!this.pointerDown(ev)) {
                            return;
                        }
                        if (!this.rmTouchMove) {
                            this.rmTouchMove = listenEvent(this.ele, 'touchmove', this.zone, this.option, this.pointerMove);
                        }
                        if (!this.rmTouchEnd) {
                            this.rmTouchEnd = listenEvent(this.ele, 'touchend', this.zone, this.option, function (ev) {
                                return _this2.handleTouchEnd(ev);
                            });
                        }
                    }
                }, {
                    key: 'handleMouseDown',
                    value: function handleMouseDown(ev) {
                        var _this3 = this;

                        if (this.lastTouchEvent > Date.now()) {
                            console.debug('mousedown event dropped because of previous touch');
                            return;
                        }
                        if (!this.pointerDown(ev)) {
                            return;
                        }
                        if (!this.rmMouseMove) {
                            this.rmMouseMove = listenEvent(window, 'mousemove', this.zone, this.option, this.pointerMove);
                        }
                        if (!this.rmMouseUp) {
                            this.rmMouseUp = listenEvent(window, 'mouseup', this.zone, this.option, function (ev) {
                                return _this3.handleMouseUp(ev);
                            });
                        }
                    }
                }, {
                    key: 'handleTouchEnd',
                    value: function handleTouchEnd(ev) {
                        this.rmTouchMove && this.rmTouchMove();
                        this.rmTouchMove = null;
                        this.rmTouchEnd && this.rmTouchEnd();
                        this.rmTouchEnd = null;
                        this.pointerUp(ev);
                    }
                }, {
                    key: 'handleMouseUp',
                    value: function handleMouseUp(ev) {
                        this.rmMouseMove && this.rmMouseMove();
                        this.rmMouseMove = null;
                        this.rmMouseUp && this.rmMouseUp();
                        this.rmMouseUp = null;
                        this.pointerUp(ev);
                    }
                }, {
                    key: 'stop',
                    value: function stop() {
                        this.rmTouchMove && this.rmTouchMove();
                        this.rmTouchEnd && this.rmTouchEnd();
                        this.rmTouchMove = null;
                        this.rmTouchEnd = null;
                        this.rmMouseMove && this.rmMouseMove();
                        this.rmMouseUp && this.rmMouseUp();
                        this.rmMouseMove = null;
                        this.rmMouseUp = null;
                    }
                }, {
                    key: 'destroy',
                    value: function destroy() {
                        this.rmTouchStart && this.rmTouchStart();
                        this.rmTouchStart = null;
                        this.rmMouseStart && this.rmMouseStart();
                        this.rmMouseStart = null;
                        this.stop();
                        this.pointerDown = null;
                        this.pointerMove = null;
                        this.pointerUp = null;
                        this.ele = null;
                    }
                }]);

                return PointerEvents;
            }());

            _export('PointerEvents', PointerEvents);

            _export('UIEventManager', UIEventManager = function () {
                function UIEventManager() {
                    var zoneWrapped = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

                    _classCallCheck(this, UIEventManager);

                    this.zoneWrapped = zoneWrapped;
                    this.events = [];
                }

                _createClass(UIEventManager, [{
                    key: 'listenRef',
                    value: function listenRef(ref, eventName, callback, option) {
                        return this.listen(ref.nativeElement, eventName, callback, option);
                    }
                }, {
                    key: 'pointerEventsRef',
                    value: function pointerEventsRef(ref, pointerStart, pointerMove, pointerEnd, option) {
                        return this.pointerEvents(ref.nativeElement, pointerStart, pointerMove, pointerEnd, option);
                    }
                }, {
                    key: 'pointerEvents',
                    value: function pointerEvents(element, pointerDown, pointerMove, pointerUp) {
                        var option = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

                        if (!element) {
                            return;
                        }
                        var submanager = new PointerEvents(element, pointerDown, pointerMove, pointerUp, this.zoneWrapped, option);
                        var removeFunc = function removeFunc() {
                            return submanager.destroy();
                        };
                        this.events.push(removeFunc);
                        return submanager;
                    }
                }, {
                    key: 'listen',
                    value: function listen(element, eventName, callback) {
                        var option = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

                        if (!element) {
                            return;
                        }
                        var removeFunc = listenEvent(element, eventName, this.zoneWrapped, option, callback);
                        this.events.push(removeFunc);
                        return removeFunc;
                    }
                }, {
                    key: 'unlistenAll',
                    value: function unlistenAll() {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = this.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var event = _step.value;

                                event();
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        this.events.length = 0;
                    }
                }]);

                return UIEventManager;
            }());

            _export('UIEventManager', UIEventManager);
        }
    };
});
'use strict';

System.register('ionic-angular/util/util', [], function (_export, _context) {
    "use strict";

    var _typeof, isBoolean, isString, isNumber, isFunction, isDefined, isUndefined, isPresent, isBlank, isObject, isArray, isTrueProperty, isCheckedProperty, uid;

    function _baseExtend(dst, objs, deep) {
        for (var i = 0, ii = objs.length; i < ii; ++i) {
            var obj = objs[i];
            if (!obj || !isObject(obj) && !isFunction(obj)) continue;
            var keys = Object.keys(obj);
            for (var j = 0, jj = keys.length; j < jj; j++) {
                var key = keys[j];
                var src = obj[key];
                if (deep && isObject(src)) {
                    if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
                    _baseExtend(dst[key], [src], true);
                } else {
                    dst[key] = src;
                }
            }
        }
        return dst;
    }
    return {
        setters: [],
        execute: function () {
            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };
            /**
             * Given a min and max, restrict the given number
             * to the range.
             * @param min the minimum
             * @param n the value
             * @param max the maximum
             */
            function clamp(min, n, max) {
                return Math.max(min, Math.min(n, max));
            }
            /**
             * The assign() method is used to copy the values of all enumerable own
             * properties from one or more source objects to a target object. It will
             * return the target object. When available, this method will use
             * `Object.assign()` under-the-hood.
             * @param target  The target object
             * @param source(s)  The source object
             */

            _export('clamp', clamp);

            function assign() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                if (typeof Object.assign !== 'function') {
                    // use the old-school shallow extend method
                    return _baseExtend(args[0], [].slice.call(args, 1), false);
                }
                // use the built in ES6 Object.assign method
                return Object.assign.apply(null, args);
            }
            /**
             * Do a deep extend (merge).
             * @param dst the destination
             * @param ... the param objects
             */

            _export('assign', assign);

            function merge(dst) {
                for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                }

                return _baseExtend(dst, [].slice.call(arguments, 1), true);
            }
            _export('merge', merge);

            function debounce(fn, wait) {
                var immediate = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

                var timeout, args, context, timestamp, result;
                return function () {
                    context = this;
                    args = arguments;
                    timestamp = Date.now();
                    var later = function later() {
                        var last = Date.now() - timestamp;
                        if (last < wait) {
                            timeout = setTimeout(later, wait - last);
                        } else {
                            timeout = null;
                            if (!immediate) result = fn.apply(context, args);
                        }
                    };
                    var callNow = immediate && !timeout;
                    if (!timeout) {
                        timeout = setTimeout(later, wait);
                    }
                    if (callNow) result = fn.apply(context, args);
                    return result;
                };
            }
            /**
             * Apply default arguments if they don't exist in
             * the first object.
             * @param the destination to apply defaults to.
             */

            _export('debounce', debounce);

            function defaults(dest) {
                for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                    args[_key3 - 1] = arguments[_key3];
                }

                for (var i = arguments.length - 1; i >= 1; i--) {
                    var source = arguments[i] || {};
                    for (var key in source) {
                        if (source.hasOwnProperty(key) && !dest.hasOwnProperty(key)) {
                            dest[key] = source[key];
                        }
                    }
                }
                return dest;
            }

            _export('defaults', defaults);

            _export('isBoolean', isBoolean = function isBoolean(val) {
                return typeof val === 'boolean';
            });

            _export('isBoolean', isBoolean);

            _export('isString', isString = function isString(val) {
                return typeof val === 'string';
            });

            _export('isString', isString);

            _export('isNumber', isNumber = function isNumber(val) {
                return typeof val === 'number';
            });

            _export('isNumber', isNumber);

            _export('isFunction', isFunction = function isFunction(val) {
                return typeof val === 'function';
            });

            _export('isFunction', isFunction);

            _export('isDefined', isDefined = function isDefined(val) {
                return typeof val !== 'undefined';
            });

            _export('isDefined', isDefined);

            _export('isUndefined', isUndefined = function isUndefined(val) {
                return typeof val === 'undefined';
            });

            _export('isUndefined', isUndefined);

            _export('isPresent', isPresent = function isPresent(val) {
                return val !== undefined && val !== null;
            });

            _export('isPresent', isPresent);

            _export('isBlank', isBlank = function isBlank(val) {
                return val === undefined || val === null;
            });

            _export('isBlank', isBlank);

            _export('isObject', isObject = function isObject(val) {
                return (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
            });

            _export('isObject', isObject);

            _export('isArray', isArray = Array.isArray);

            _export('isArray', isArray);

            _export('isTrueProperty', isTrueProperty = function isTrueProperty(val) {
                if (typeof val === 'string') {
                    val = val.toLowerCase().trim();
                    return val === 'true' || val === 'on' || val === '';
                }
                return !!val;
            });

            _export('isTrueProperty', isTrueProperty);

            _export('isCheckedProperty', isCheckedProperty = function isCheckedProperty(a, b) {
                if (a === undefined || a === null || a === '') {
                    return b === undefined || b === null || b === '';
                } else if (a === true || a === 'true') {
                    return b === true || b === 'true';
                } else if (a === false || a === 'false') {
                    return b === false || b === 'false';
                } else if (a === 0 || a === '0') {
                    return b === 0 || b === '0';
                }
                // not using strict comparison on purpose
                /* tslint:disable */
                return a == b;
                /* tslint:enable */
            });

            _export('isCheckedProperty', isCheckedProperty);

            /**
             * Convert a string in the format thisIsAString to a slug format this-is-a-string
             */
            function pascalCaseToDashCase() {
                var val = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                return val.charAt(0).toLowerCase() + val.substring(1).replace(/[A-Z]/g, function (match) {
                    return '-' + match.toLowerCase();
                });
            }

            _export('pascalCaseToDashCase', pascalCaseToDashCase);

            uid = 0;
            function nextUid() {
                return ++uid;
            }
            /**
             * Grab all query strings keys and values.
             * @param url
             */

            _export('nextUid', nextUid);

            function getQuerystring(url) {
                var queryParams = {};
                if (url) {
                    var startIndex = url.indexOf('?');
                    if (startIndex !== -1) {
                        var queries = url.slice(startIndex + 1).split('&');
                        for (var i = 0; i < queries.length; i++) {
                            if (queries[i].indexOf('=') > 0) {
                                var split = queries[i].split('=');
                                if (split.length > 1) {
                                    queryParams[split[0].toLowerCase()] = split[1].split('#')[0];
                                }
                            }
                        }
                    }
                }
                return queryParams;
            }

            _export('getQuerystring', getQuerystring);

            function reorderArray(array, indexes) {
                var element = array[indexes.from];
                array.splice(indexes.from, 1);
                array.splice(indexes.to, 0, element);
                return array;
            }

            _export('reorderArray', reorderArray);
        }
    };
});
"use strict";

System.register("ionic-angular/components/alert/alert", ["@angular/core", "../../animations/animation", "../../transitions/transition", "../../config/config", "../../util/util", "../../util/key", "../nav/nav-params", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, Renderer, HostListener, ViewEncapsulation, Animation, Transition, Config, isPresent, Key, NavParams, ViewController, _createClass, _typeof, __decorate, __metadata, Alert, AlertCmp, AlertPopIn, AlertPopOut, AlertMdPopIn, AlertMdPopOut, AlertWpPopIn, AlertWpPopOut, alertIds, _a, _b, _c, _d, _e;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            Renderer = _angularCore.Renderer;
            HostListener = _angularCore.HostListener;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_transitionsTransition) {
            Transition = _transitionsTransition.Transition;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_utilKey) {
            Key = _utilKey.Key;
        }, function (_navNavParams) {
            NavParams = _navNavParams.NavParams;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Alert", Alert = function (_ViewController) {
                _inherits(Alert, _ViewController);

                function Alert() {
                    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, Alert);

                    opts.inputs = opts.inputs || [];
                    opts.buttons = opts.buttons || [];
                    opts.enableBackdropDismiss = isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Alert).call(this, AlertCmp, opts));

                    _this.isOverlay = true;
                    // by default, alerts should not fire lifecycle events of other views
                    // for example, when an alert enters, the current active view should
                    // not fire its lifecycle events because it's not conceptually leaving
                    _this.fireOtherLifecycles = false;
                    return _this;
                }
                /**
                * @private
                */


                _createClass(Alert, [{
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        var key = direction === 'back' ? 'alertLeave' : 'alertEnter';
                        return this._nav && this._nav.config.get(key);
                    }
                }, {
                    key: "setTitle",
                    value: function setTitle(title) {
                        this.data.title = title;
                    }
                }, {
                    key: "setSubTitle",
                    value: function setSubTitle(subTitle) {
                        this.data.subTitle = subTitle;
                    }
                }, {
                    key: "setBody",
                    value: function setBody(message) {
                        // deprecated warning
                        console.warn('Alert setBody() has been renamed to setMessage()');
                        this.setMessage(message);
                    }
                }, {
                    key: "setMessage",
                    value: function setMessage(message) {
                        this.data.message = message;
                    }
                }, {
                    key: "addInput",
                    value: function addInput(input) {
                        this.data.inputs.push(input);
                    }
                }, {
                    key: "addButton",
                    value: function addButton(button) {
                        this.data.buttons.push(button);
                    }
                }, {
                    key: "setCssClass",
                    value: function setCssClass(cssClass) {
                        this.data.cssClass = cssClass;
                    }
                }], [{
                    key: "create",
                    value: function create() {
                        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        return new Alert(opts);
                    }
                }]);

                return Alert;
            }(ViewController));

            _export("Alert", Alert);

            AlertCmp = function () {
                function AlertCmp(_viewCtrl, _elementRef, _config, params, renderer) {
                    _classCallCheck(this, AlertCmp);

                    this._viewCtrl = _viewCtrl;
                    this._elementRef = _elementRef;
                    this._config = _config;
                    this.d = params.data;
                    if (this.d.cssClass) {
                        this.d.cssClass.split(' ').forEach(function (cssClass) {
                            renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
                        });
                    }
                    this.id = ++alertIds;
                    this.descId = '';
                    this.hdrId = 'alert-hdr-' + this.id;
                    this.subHdrId = 'alert-subhdr-' + this.id;
                    this.msgId = 'alert-msg-' + this.id;
                    this.activeId = '';
                    this.lastClick = 0;
                    if (this.d.message) {
                        this.descId = this.msgId;
                    } else if (this.d.subTitle) {
                        this.descId = this.subHdrId;
                    }
                    if (!this.d.message) {
                        this.d.message = '';
                    }
                }

                _createClass(AlertCmp, [{
                    key: "ionViewLoaded",
                    value: function ionViewLoaded() {
                        var _this2 = this;

                        // normalize the data
                        var data = this.d;
                        data.buttons = data.buttons.map(function (button) {
                            if (typeof button === 'string') {
                                return { text: button };
                            }
                            return button;
                        });
                        data.inputs = data.inputs.map(function (input, index) {
                            return {
                                type: input.type || 'text',
                                name: isPresent(input.name) ? input.name : index,
                                placeholder: isPresent(input.placeholder) ? input.placeholder : '',
                                value: isPresent(input.value) ? input.value : '',
                                label: input.label,
                                checked: !!input.checked,
                                id: 'alert-input-' + _this2.id + '-' + index
                            };
                        });
                        // An alert can be created with several different inputs. Radios,
                        // checkboxes and inputs are all accepted, but they cannot be mixed.
                        var inputTypes = [];
                        data.inputs.forEach(function (input) {
                            if (inputTypes.indexOf(input.type) < 0) {
                                inputTypes.push(input.type);
                            }
                        });
                        if (inputTypes.length > 1 && (inputTypes.indexOf('checkbox') > -1 || inputTypes.indexOf('radio') > -1)) {
                            console.warn('Alert cannot mix input types: ' + inputTypes.join('/') + '. Please see alert docs for more info.');
                        }
                        this.inputType = inputTypes.length ? inputTypes[0] : null;
                        var checkedInput = this.d.inputs.find(function (input) {
                            return input.checked;
                        });
                        if (checkedInput) {
                            this.activeId = checkedInput.id;
                        }
                    }
                }, {
                    key: "_keyUp",
                    value: function _keyUp(ev) {
                        if (this.enabled && this._viewCtrl.isLast()) {
                            if (ev.keyCode === Key.ENTER) {
                                if (this.lastClick + 1000 < Date.now()) {
                                    // do not fire this click if there recently was already a click
                                    // this can happen when the button has focus and used the enter
                                    // key to click the button. However, both the click handler and
                                    // this keyup event will fire, so only allow one of them to go.
                                    console.debug('alert, enter button');
                                    var button = this.d.buttons[this.d.buttons.length - 1];
                                    this.btnClick(button);
                                }
                            } else if (ev.keyCode === Key.ESCAPE) {
                                console.debug('alert, escape button');
                                this.bdClick();
                            }
                        }
                    }
                }, {
                    key: "ionViewDidEnter",
                    value: function ionViewDidEnter() {
                        var activeElement = document.activeElement;
                        if (document.activeElement) {
                            activeElement.blur();
                        }
                        var focusableEle = this._elementRef.nativeElement.querySelector('input,button');
                        if (focusableEle) {
                            focusableEle.focus();
                        }
                        this.enabled = true;
                    }
                }, {
                    key: "btnClick",
                    value: function btnClick(button, dismissDelay) {
                        var _this3 = this;

                        if (!this.enabled) {
                            return;
                        }
                        // keep the time of the most recent button click
                        this.lastClick = Date.now();
                        var shouldDismiss = true;
                        if (button.handler) {
                            // a handler has been provided, execute it
                            // pass the handler the values from the inputs
                            if (button.handler(this.getValues()) === false) {
                                // if the return value of the handler is false then do not dismiss
                                shouldDismiss = false;
                            }
                        }
                        if (shouldDismiss) {
                            setTimeout(function () {
                                _this3.dismiss(button.role);
                            }, dismissDelay || this._config.get('pageTransitionDelay'));
                        }
                    }
                }, {
                    key: "rbClick",
                    value: function rbClick(checkedInput) {
                        if (this.enabled) {
                            this.d.inputs.forEach(function (input) {
                                input.checked = checkedInput === input;
                            });
                            this.activeId = checkedInput.id;
                        }
                    }
                }, {
                    key: "cbClick",
                    value: function cbClick(checkedInput) {
                        if (this.enabled) {
                            checkedInput.checked = !checkedInput.checked;
                        }
                    }
                }, {
                    key: "bdClick",
                    value: function bdClick() {
                        if (this.enabled && this.d.enableBackdropDismiss) {
                            var cancelBtn = this.d.buttons.find(function (b) {
                                return b.role === 'cancel';
                            });
                            if (cancelBtn) {
                                this.btnClick(cancelBtn, 1);
                            } else {
                                this.dismiss('backdrop');
                            }
                        }
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(role) {
                        return this._viewCtrl.dismiss(this.getValues(), role);
                    }
                }, {
                    key: "getValues",
                    value: function getValues() {
                        if (this.inputType === 'radio') {
                            // this is an alert with radio buttons (single value select)
                            // return the one value which is checked, otherwise undefined
                            var checkedInput = this.d.inputs.find(function (i) {
                                return i.checked;
                            });
                            return checkedInput ? checkedInput.value : undefined;
                        }
                        if (this.inputType === 'checkbox') {
                            // this is an alert with checkboxes (multiple value select)
                            // return an array of all the checked values
                            return this.d.inputs.filter(function (i) {
                                return i.checked;
                            }).map(function (i) {
                                return i.value;
                            });
                        }
                        // this is an alert with text inputs
                        // return an object of all the values with the input name as the key
                        var values = {};
                        this.d.inputs.forEach(function (i) {
                            values[i.name] = i.value;
                        });
                        return values;
                    }
                }]);

                return AlertCmp;
            }();

            __decorate([HostListener('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], AlertCmp.prototype, "_keyUp", null);
            AlertCmp = __decorate([Component({
                selector: 'ion-alert',
                template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="alert-wrapper">' + '<div class="alert-head">' + '<h2 id="{{hdrId}}" class="alert-title" *ngIf="d.title" [innerHTML]="d.title"></h2>' + '<h3 id="{{subHdrId}}" class="alert-sub-title" *ngIf="d.subTitle" [innerHTML]="d.subTitle"></h3>' + '</div>' + '<div id="{{msgId}}" class="alert-message" [innerHTML]="d.message"></div>' + '<div *ngIf="d.inputs.length" [ngSwitch]="inputType">' + '<template ngSwitchCase="radio">' + '<div class="alert-radio-group" role="radiogroup" [attr.aria-labelledby]="hdrId" [attr.aria-activedescendant]="activeId">' + '<button category="alert-radio-button" *ngFor="let i of d.inputs" (click)="rbClick(i)" [attr.aria-checked]="i.checked" [attr.id]="i.id" class="alert-tappable alert-radio" role="radio">' + '<div class="alert-radio-icon"><div class="alert-radio-inner"></div></div>' + '<div class="alert-radio-label">' + '{{i.label}}' + '</div>' + '</button>' + '</div>' + '</template>' + '<template ngSwitchCase="checkbox">' + '<div class="alert-checkbox-group">' + '<button category="alert-checkbox-button" *ngFor="let i of d.inputs" (click)="cbClick(i)" [attr.aria-checked]="i.checked" class="alert-tappable alert-checkbox" role="checkbox">' + '<div class="alert-checkbox-icon"><div class="alert-checkbox-inner"></div></div>' + '<div class="alert-checkbox-label">' + '{{i.label}}' + '</div>' + '</button>' + '</div>' + '</template>' + '<template ngSwitchDefault>' + '<div class="alert-input-group">' + '<div *ngFor="let i of d.inputs" class="alert-input-wrapper">' + '<input [placeholder]="i.placeholder" [(ngModel)]="i.value" [type]="i.type" class="alert-input">' + '</div>' + '</div>' + '</template>' + '</div>' + '<div class="alert-button-group" [ngClass]="{vertical: d.buttons.length>2}">' + '<button category="alert-button" *ngFor="let b of d.buttons" (click)="btnClick(b)" [ngClass]="b.cssClass">' + '{{b.text}}' + '</button>' + '</div>' + '</div>',
                host: {
                    'role': 'dialog',
                    '[attr.aria-labelledby]': 'hdrId',
                    '[attr.aria-describedby]': 'descId'
                },
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof ViewController !== 'undefined' && ViewController) === 'function' && _a || Object, typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, typeof (_c = typeof Config !== 'undefined' && Config) === 'function' && _c || Object, typeof (_d = typeof NavParams !== 'undefined' && NavParams) === 'function' && _d || Object, typeof (_e = typeof Renderer !== 'undefined' && Renderer) === 'function' && _e || Object])], AlertCmp);
            /**
             * Animations for alerts
             */

            AlertPopIn = function (_Transition) {
                _inherits(AlertPopIn, _Transition);

                function AlertPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, AlertPopIn);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertPopIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.alert-wrapper'));
                    wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
                    backdrop.fromTo('opacity', 0.01, 0.3);
                    _this4.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this4;
                }

                return AlertPopIn;
            }(Transition);

            Transition.register('alert-pop-in', AlertPopIn);

            AlertPopOut = function (_Transition2) {
                _inherits(AlertPopOut, _Transition2);

                function AlertPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, AlertPopOut);

                    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertPopOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.alert-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
                    backdrop.fromTo('opacity', 0.3, 0);
                    _this5.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this5;
                }

                return AlertPopOut;
            }(Transition);

            Transition.register('alert-pop-out', AlertPopOut);

            AlertMdPopIn = function (_Transition3) {
                _inherits(AlertMdPopIn, _Transition3);

                function AlertMdPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, AlertMdPopIn);

                    var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertMdPopIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.alert-wrapper'));
                    wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
                    backdrop.fromTo('opacity', 0.01, 0.5);
                    _this6.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this6;
                }

                return AlertMdPopIn;
            }(Transition);

            Transition.register('alert-md-pop-in', AlertMdPopIn);

            AlertMdPopOut = function (_Transition4) {
                _inherits(AlertMdPopOut, _Transition4);

                function AlertMdPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, AlertMdPopOut);

                    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertMdPopOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.alert-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
                    backdrop.fromTo('opacity', 0.5, 0);
                    _this7.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this7;
                }

                return AlertMdPopOut;
            }(Transition);

            Transition.register('alert-md-pop-out', AlertMdPopOut);

            AlertWpPopIn = function (_Transition5) {
                _inherits(AlertWpPopIn, _Transition5);

                function AlertWpPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, AlertWpPopIn);

                    var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertWpPopIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.alert-wrapper'));
                    wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.3, 1);
                    backdrop.fromTo('opacity', 0.01, 0.5);
                    _this8.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(backdrop).add(wrapper);
                    return _this8;
                }

                return AlertWpPopIn;
            }(Transition);

            Transition.register('alert-wp-pop-in', AlertWpPopIn);

            AlertWpPopOut = function (_Transition6) {
                _inherits(AlertWpPopOut, _Transition6);

                function AlertWpPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, AlertWpPopOut);

                    var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(AlertWpPopOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.alert-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 1.3);
                    backdrop.fromTo('opacity', 0.5, 0);
                    _this9.easing('ease-out').duration(150).add(backdrop).add(wrapper);
                    return _this9;
                }

                return AlertWpPopOut;
            }(Transition);

            Transition.register('alert-wp-pop-out', AlertWpPopOut);
            alertIds = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/action-sheet/action-sheet", ["@angular/core", "../../animations/animation", "../../transitions/transition", "../../config/config", "../../util/util", "../../util/key", "../nav/nav-params", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, Renderer, ElementRef, HostListener, ViewEncapsulation, Animation, Transition, Config, isPresent, Key, NavParams, ViewController, _createClass, _typeof, __decorate, __metadata, ActionSheet, ActionSheetCmp, ActionSheetSlideIn, ActionSheetSlideOut, ActionSheetMdSlideIn, ActionSheetMdSlideOut, ActionSheetWpSlideIn, ActionSheetWpSlideOut, actionSheetIds, _a, _b, _c, _d, _e;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Renderer = _angularCore.Renderer;
            ElementRef = _angularCore.ElementRef;
            HostListener = _angularCore.HostListener;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_transitionsTransition) {
            Transition = _transitionsTransition.Transition;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_utilKey) {
            Key = _utilKey.Key;
        }, function (_navNavParams) {
            NavParams = _navNavParams.NavParams;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("ActionSheet", ActionSheet = function (_ViewController) {
                _inherits(ActionSheet, _ViewController);

                function ActionSheet() {
                    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, ActionSheet);

                    opts.buttons = opts.buttons || [];
                    opts.enableBackdropDismiss = isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheet).call(this, ActionSheetCmp, opts));

                    _this.isOverlay = true;
                    // by default, actionsheets should not fire lifecycle events of other views
                    // for example, when an actionsheets enters, the current active view should
                    // not fire its lifecycle events because it's not conceptually leaving
                    _this.fireOtherLifecycles = false;
                    return _this;
                }
                /**
                * @private
                */


                _createClass(ActionSheet, [{
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        var key = 'actionSheet' + (direction === 'back' ? 'Leave' : 'Enter');
                        return this._nav && this._nav.config.get(key);
                    }
                }, {
                    key: "setTitle",
                    value: function setTitle(title) {
                        this.data.title = title;
                    }
                }, {
                    key: "setSubTitle",
                    value: function setSubTitle(subTitle) {
                        this.data.subTitle = subTitle;
                    }
                }, {
                    key: "addButton",
                    value: function addButton(button) {
                        this.data.buttons.push(button);
                    }
                }], [{
                    key: "create",
                    value: function create() {
                        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        return new ActionSheet(opts);
                    }
                }]);

                return ActionSheet;
            }(ViewController));

            _export("ActionSheet", ActionSheet);

            ActionSheetCmp = function () {
                function ActionSheetCmp(_viewCtrl, _config, _elementRef, params, renderer) {
                    _classCallCheck(this, ActionSheetCmp);

                    this._viewCtrl = _viewCtrl;
                    this._config = _config;
                    this._elementRef = _elementRef;
                    this.d = params.data;
                    if (this.d.cssClass) {
                        renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
                    }
                    this.id = ++actionSheetIds;
                    if (this.d.title) {
                        this.hdrId = 'acst-hdr-' + this.id;
                    }
                    if (this.d.subTitle) {
                        this.descId = 'acst-subhdr-' + this.id;
                    }
                }

                _createClass(ActionSheetCmp, [{
                    key: "ionViewLoaded",
                    value: function ionViewLoaded() {
                        var _this2 = this;

                        // normalize the data
                        var buttons = [];
                        this.d.buttons.forEach(function (button) {
                            if (typeof button === 'string') {
                                button = { text: button };
                            }
                            if (!button.cssClass) {
                                button.cssClass = '';
                            }
                            // deprecated warning
                            if (button.style) {
                                console.warn('Action sheet "style" property has been renamed to "role"');
                                button.role = button.style;
                            }
                            if (button.role === 'cancel') {
                                _this2.d.cancelButton = button;
                            } else {
                                if (button.role === 'destructive') {
                                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-destructive';
                                } else if (button.role === 'selected') {
                                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-selected';
                                }
                                buttons.push(button);
                            }
                        });
                        this.d.buttons = buttons;
                    }
                }, {
                    key: "ionViewDidEnter",
                    value: function ionViewDidEnter() {
                        var activeElement = document.activeElement;
                        if (document.activeElement) {
                            activeElement.blur();
                        }
                        var focusableEle = this._elementRef.nativeElement.querySelector('button');
                        if (focusableEle) {
                            focusableEle.focus();
                        }
                        this.enabled = true;
                    }
                }, {
                    key: "_keyUp",
                    value: function _keyUp(ev) {
                        if (this.enabled && this._viewCtrl.isLast()) {
                            if (ev.keyCode === Key.ESCAPE) {
                                console.debug('actionsheet, escape button');
                                this.bdClick();
                            }
                        }
                    }
                }, {
                    key: "click",
                    value: function click(button, dismissDelay) {
                        var _this3 = this;

                        if (!this.enabled) {
                            return;
                        }
                        var shouldDismiss = true;
                        if (button.handler) {
                            // a handler has been provided, execute it
                            if (button.handler() === false) {
                                // if the return value of the handler is false then do not dismiss
                                shouldDismiss = false;
                            }
                        }
                        if (shouldDismiss) {
                            setTimeout(function () {
                                _this3.dismiss(button.role);
                            }, dismissDelay || this._config.get('pageTransitionDelay'));
                        }
                    }
                }, {
                    key: "bdClick",
                    value: function bdClick() {
                        if (this.enabled && this.d.enableBackdropDismiss) {
                            if (this.d.cancelButton) {
                                this.click(this.d.cancelButton, 1);
                            } else {
                                this.dismiss('backdrop');
                            }
                        }
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(role) {
                        return this._viewCtrl.dismiss(null, role);
                    }
                }]);

                return ActionSheetCmp;
            }();

            __decorate([HostListener('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], ActionSheetCmp.prototype, "_keyUp", null);
            ActionSheetCmp = __decorate([Component({
                selector: 'ion-action-sheet',
                template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="action-sheet-wrapper">' + '<div class="action-sheet-container">' + '<div class="action-sheet-group">' + '<div class="action-sheet-title" id="{{hdrId}}" *ngIf="d.title">{{d.title}}</div>' + '<div class="action-sheet-sub-title" id="{{descId}}" *ngIf="d.subTitle">{{d.subTitle}}</div>' + '<button category="action-sheet-button" (click)="click(b)" *ngFor="let b of d.buttons" class="disable-hover" [ngClass]="b.cssClass">' + '<ion-icon [name]="b.icon" *ngIf="b.icon" class="action-sheet-icon"></ion-icon> ' + '{{b.text}}' + '</button>' + '</div>' + '<div class="action-sheet-group" *ngIf="d.cancelButton">' + '<button category="action-sheet-button" (click)="click(d.cancelButton)" class="action-sheet-cancel disable-hover" [ngClass]="d.cancelButton.cssClass">' + '<ion-icon [name]="d.cancelButton.icon" *ngIf="d.cancelButton.icon" class="action-sheet-icon"></ion-icon> ' + '{{d.cancelButton.text}}' + '</button>' + '</div>' + '</div>' + '</div>',
                host: {
                    'role': 'dialog',
                    '[attr.aria-labelledby]': 'hdrId',
                    '[attr.aria-describedby]': 'descId'
                },
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof ViewController !== 'undefined' && ViewController) === 'function' && _a || Object, typeof (_b = typeof Config !== 'undefined' && Config) === 'function' && _b || Object, typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object, typeof (_d = typeof NavParams !== 'undefined' && NavParams) === 'function' && _d || Object, typeof (_e = typeof Renderer !== 'undefined' && Renderer) === 'function' && _e || Object])], ActionSheetCmp);

            ActionSheetSlideIn = function (_Transition) {
                _inherits(ActionSheetSlideIn, _Transition);

                function ActionSheetSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ActionSheetSlideIn);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetSlideIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.action-sheet-wrapper'));
                    backdrop.fromTo('opacity', 0.01, 0.4);
                    wrapper.fromTo('translateY', '100%', '0%');
                    _this4.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
                    return _this4;
                }

                return ActionSheetSlideIn;
            }(Transition);

            Transition.register('action-sheet-slide-in', ActionSheetSlideIn);

            ActionSheetSlideOut = function (_Transition2) {
                _inherits(ActionSheetSlideOut, _Transition2);

                function ActionSheetSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ActionSheetSlideOut);

                    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.action-sheet-wrapper'));
                    backdrop.fromTo('opacity', 0.4, 0);
                    wrapper.fromTo('translateY', '0%', '100%');
                    _this5.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(backdrop).add(wrapper);
                    return _this5;
                }

                return ActionSheetSlideOut;
            }(Transition);

            Transition.register('action-sheet-slide-out', ActionSheetSlideOut);

            ActionSheetMdSlideIn = function (_Transition3) {
                _inherits(ActionSheetMdSlideIn, _Transition3);

                function ActionSheetMdSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ActionSheetMdSlideIn);

                    var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetMdSlideIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.action-sheet-wrapper'));
                    backdrop.fromTo('opacity', 0.01, 0.26);
                    wrapper.fromTo('translateY', '100%', '0%');
                    _this6.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
                    return _this6;
                }

                return ActionSheetMdSlideIn;
            }(Transition);

            Transition.register('action-sheet-md-slide-in', ActionSheetMdSlideIn);

            ActionSheetMdSlideOut = function (_Transition4) {
                _inherits(ActionSheetMdSlideOut, _Transition4);

                function ActionSheetMdSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ActionSheetMdSlideOut);

                    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetMdSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.action-sheet-wrapper'));
                    backdrop.fromTo('opacity', 0.26, 0);
                    wrapper.fromTo('translateY', '0%', '100%');
                    _this7.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
                    return _this7;
                }

                return ActionSheetMdSlideOut;
            }(Transition);

            Transition.register('action-sheet-md-slide-out', ActionSheetMdSlideOut);

            ActionSheetWpSlideIn = function (_Transition5) {
                _inherits(ActionSheetWpSlideIn, _Transition5);

                function ActionSheetWpSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ActionSheetWpSlideIn);

                    var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetWpSlideIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.action-sheet-wrapper'));
                    backdrop.fromTo('opacity', 0.01, 0.16);
                    wrapper.fromTo('translateY', '100%', '0%');
                    _this8.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
                    return _this8;
                }

                return ActionSheetWpSlideIn;
            }(Transition);

            Transition.register('action-sheet-wp-slide-in', ActionSheetWpSlideIn);

            ActionSheetWpSlideOut = function (_Transition6) {
                _inherits(ActionSheetWpSlideOut, _Transition6);

                function ActionSheetWpSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ActionSheetWpSlideOut);

                    var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActionSheetWpSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.action-sheet-wrapper'));
                    backdrop.fromTo('opacity', 0.1, 0);
                    wrapper.fromTo('translateY', '0%', '100%');
                    _this9.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
                    return _this9;
                }

                return ActionSheetWpSlideOut;
            }(Transition);

            Transition.register('action-sheet-wp-slide-out', ActionSheetWpSlideOut);
            actionSheetIds = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/app/app", ["@angular/core", "@angular/platform-browser", "../../util/click-block", "../../config/config", "../../platform/platform"], function (_export, _context) {
    "use strict";

    var Injectable, Title, ClickBlock, Config, Platform, _createClass, _typeof, __decorate, __metadata, App, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Injectable = _angularCore.Injectable;
        }, function (_angularPlatformBrowser) {
            Title = _angularPlatformBrowser.Title;
        }, function (_utilClickBlock) {
            ClickBlock = _utilClickBlock.ClickBlock;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("App", App = function () {
                function App(_config, _clickBlock, _platform) {
                    _classCallCheck(this, App);

                    this._config = _config;
                    this._clickBlock = _clickBlock;
                    this._platform = _platform;
                    this._disTime = 0;
                    this._scrollTime = 0;
                    this._title = '';
                    this._titleSrv = new Title();
                    this._rootNav = null;
                    // listen for hardware back button events
                    // register this back button action with a default priority
                    _platform.registerBackButtonAction(this.navPop.bind(this));
                }
                /**
                 * Sets the document title.
                 * @param {string} val  Value to set the document title to.
                 */


                _createClass(App, [{
                    key: "setTitle",
                    value: function setTitle(val) {
                        if (val !== this._title) {
                            this._title = val;
                            this._titleSrv.setTitle(val);
                        }
                    }
                }, {
                    key: "setEnabled",
                    value: function setEnabled(isEnabled) {
                        var duration = arguments.length <= 1 || arguments[1] === undefined ? 700 : arguments[1];

                        this._disTime = isEnabled ? 0 : Date.now() + duration;
                        var CLICK_BLOCK_BUFFER_IN_MILLIS = 64;
                        if (this._clickBlock) {
                            if (isEnabled || duration <= 32) {
                                // disable the click block if it's enabled, or the duration is tiny
                                this._clickBlock.show(false, 0);
                            } else {
                                // show the click block for duration + some number
                                this._clickBlock.show(true, duration + CLICK_BLOCK_BUFFER_IN_MILLIS);
                            }
                        }
                    }
                }, {
                    key: "isEnabled",
                    value: function isEnabled() {
                        return this._disTime < Date.now();
                    }
                }, {
                    key: "setScrolling",
                    value: function setScrolling() {
                        this._scrollTime = Date.now();
                    }
                }, {
                    key: "isScrolling",
                    value: function isScrolling() {
                        return this._scrollTime + 64 > Date.now();
                    }
                }, {
                    key: "getActiveNav",
                    value: function getActiveNav() {
                        var nav = this._rootNav || null;
                        var activeChildNav;
                        while (nav) {
                            activeChildNav = nav.getActiveChildNav();
                            if (!activeChildNav) {
                                break;
                            }
                            nav = activeChildNav;
                        }
                        return nav;
                    }
                }, {
                    key: "getRootNav",
                    value: function getRootNav() {
                        return this._rootNav;
                    }
                }, {
                    key: "setRootNav",
                    value: function setRootNav(nav) {
                        this._rootNav = nav;
                    }
                }, {
                    key: "navPop",
                    value: function navPop() {
                        // function used to climb up all parent nav controllers
                        function navPop(nav) {
                            if (nav) {
                                if (nav.length && nav.length() > 1) {
                                    // this nav controller has more than one view
                                    // pop the current view on this nav and we're done here
                                    console.debug('app, goBack pop nav');
                                    return nav.pop();
                                } else if (nav.previousTab) {
                                    // FYI, using "nav instanceof Tabs" throws a Promise runtime error for whatever reason, idk
                                    // this is a Tabs container
                                    // see if there is a valid previous tab to go to
                                    var prevTab = nav.previousTab(true);
                                    if (prevTab) {
                                        console.debug('app, goBack previous tab');
                                        nav.select(prevTab);
                                        return Promise.resolve();
                                    }
                                }
                                // try again using the parent nav (if there is one)
                                return navPop(nav.parent);
                            }
                            // nerp, never found nav that could pop off a view
                            return null;
                        }
                        // app must be enabled and there must be a
                        // root nav controller for go back to work
                        if (this._rootNav && this.isEnabled()) {
                            // first check if the root navigation has any overlays
                            // opened in it's portal, like alert/actionsheet/popup
                            var portal = this._rootNav.getPortal && this._rootNav.getPortal();
                            if (portal && portal.length() > 0) {
                                // there is an overlay view in the portal
                                // let's pop this one off to go back
                                console.debug('app, goBack pop overlay');
                                return portal.pop();
                            }
                            // next get the active nav, check itself and climb up all
                            // of its parent navs until it finds a nav that can pop
                            var navPromise = navPop(this.getActiveNav());
                            if (navPromise === null) {
                                // no views to go back to
                                // let's exit the app
                                if (this._config.getBoolean('navExitApp', true)) {
                                    console.debug('app, goBack exitApp');
                                    this._platform.exitApp();
                                }
                            } else {
                                return navPromise;
                            }
                        }
                        return Promise.resolve();
                    }
                }, {
                    key: "getRegisteredComponent",
                    value: function getRegisteredComponent(cls) {
                        // deprecated warning: added 2016-04-28, beta7
                        console.warn('Using app.getRegisteredComponent() to query components has been deprecated. ' + 'Please use Angular\'s ViewChild annotation instead:\n\nhttp://learnangular2.com/viewChild/');
                    }
                }, {
                    key: "getComponent",
                    value: function getComponent(id) {
                        // deprecated warning: added 2016-04-28, beta7
                        console.warn('Using app.getComponent() to query components has been deprecated. ' + 'Please use Angular\'s ViewChild annotation instead:\n\nhttp://learnangular2.com/viewChild/');
                    }
                }, {
                    key: "setAppInjector",
                    value: function setAppInjector(injector) {
                        this._appInjector = injector;
                    }
                }, {
                    key: "getAppInjector",
                    value: function getAppInjector() {
                        return this._appInjector;
                    }
                }]);

                return App;
            }());

            _export("App", App);

            _export("App", App = __decorate([Injectable(), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object, typeof (_b = typeof ClickBlock !== 'undefined' && ClickBlock) === 'function' && _b || Object, typeof (_c = typeof Platform !== 'undefined' && Platform) === 'function' && _c || Object])], App));
        }
    };
});
"use strict";

System.register("ionic-angular/components/backdrop/backdrop", ["@angular/core", "../../util/util"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, Input, isTrueProperty, _createClass, _typeof, __decorate, __metadata, DISABLE_SCROLL, Backdrop_1, Backdrop, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Input = _angularCore.Input;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            DISABLE_SCROLL = 'disable-scroll';
            Backdrop_1 = void 0;

            _export("Backdrop", Backdrop = Backdrop_1 = function () {
                function Backdrop(elementRef) {
                    _classCallCheck(this, Backdrop);

                    this.elementRef = elementRef;
                    this.pushed = false;
                    this.disableScroll = true;
                }

                _createClass(Backdrop, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        if (isTrueProperty(this.disableScroll)) {
                            Backdrop_1.push();
                            this.pushed = true;
                        }
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        if (this.pushed) {
                            Backdrop_1.pop();
                            this.pushed = false;
                        }
                    }
                }], [{
                    key: "push",
                    value: function push() {
                        if (this.nuBackDrops === 0) {
                            console.debug('adding .disable-scroll to body');
                            document.body.classList.add(DISABLE_SCROLL);
                        } else {
                            console.warn('several backdrops on screen? probably a bug');
                        }
                        this.nuBackDrops++;
                    }
                }, {
                    key: "pop",
                    value: function pop() {
                        if (this.nuBackDrops === 0) {
                            console.error('pop requires a push');
                            return;
                        }
                        this.nuBackDrops--;
                        if (this.nuBackDrops === 0) {
                            console.debug('removing .disable-scroll from body');
                            document.body.classList.remove(DISABLE_SCROLL);
                        }
                    }
                }]);

                return Backdrop;
            }());

            _export("Backdrop", Backdrop);

            Backdrop.nuBackDrops = 0;
            __decorate([Input(), __metadata('design:type', Object)], Backdrop.prototype, "disableScroll", void 0);
            _export("Backdrop", Backdrop = Backdrop_1 = __decorate([Directive({
                selector: 'ion-backdrop',
                host: {
                    'role': 'presentation',
                    'tappable': '',
                    'disable-activated': ''
                }
            }), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object])], Backdrop));
        }
    };
});
"use strict";

System.register("ionic-angular/components/badge/badge", ["@angular/core", "../../config/config"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, Renderer, Config, _createClass, _typeof, __decorate, __metadata, Badge, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Renderer = _angularCore.Renderer;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Badge", Badge = function () {
                function Badge(config, _elementRef, _renderer) {
                    _classCallCheck(this, Badge);

                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    var element = _elementRef.nativeElement;
                    this._readAttrs(element);
                }
                /**
                 * @private
                 */


                _createClass(Badge, [{
                    key: "_readAttrs",
                    value: function _readAttrs(element) {
                        var elementAttrs = element.attributes;
                        var attrName = void 0;
                        for (var i = 0, l = elementAttrs.length; i < l; i++) {
                            if (elementAttrs[i].value !== '') continue;
                            attrName = elementAttrs[i].name;
                            // Ignore attributes item-left, item-right
                            if (attrName.indexOf('item') === -1) {
                                this._setClass(attrName);
                            }
                        }
                    }
                }, {
                    key: "_setClass",
                    value: function _setClass(color) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, 'badge-' + color, true);
                    }
                }]);

                return Badge;
            }());

            _export("Badge", Badge);

            _export("Badge", Badge = __decorate([Directive({
                selector: 'ion-badge'
            }), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object, typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object])], Badge));
        }
    };
});
"use strict";

System.register("ionic-angular/components/button/button", ["@angular/core", "../../config/config", "../../util/util"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, Renderer, Attribute, Input, ChangeDetectionStrategy, ViewEncapsulation, Config, isTrueProperty, _createClass, _typeof, __decorate, __metadata, __param, Button, BUTTON_SIZE_ATTRS, BUTTON_STYLE_ATTRS, BUTTON_SHAPE_ATTRS, BUTTON_DISPLAY_ATTRS, IGNORE_ATTRS, TEXT, ICON, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            Renderer = _angularCore.Renderer;
            Attribute = _angularCore.Attribute;
            Input = _angularCore.Input;
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Button", Button = function () {
                function Button(config, _elementRef, _renderer, ionItem) {
                    _classCallCheck(this, Button);

                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this._role = 'button'; // bar-button/item-button
                    this._size = null; // large/small/default
                    this._style = 'default'; // outline/clear/solid
                    this._shape = null; // round/fab
                    this._display = null; // block/full
                    this._colors = []; // primary/secondary
                    this._icon = null; // left/right/only
                    this._disabled = false; // disabled
                    this.isItem = ionItem === '';
                    var element = _elementRef.nativeElement;
                    if (config.get('hoverCSS') === false) {
                        _renderer.setElementClass(_elementRef.nativeElement, 'disable-hover', true);
                    }
                    if (element.hasAttribute('ion-item')) {
                        // no need to put on these classes for an ion-item
                        this._role = null;
                        return;
                    }
                    if (element.hasAttribute('disabled')) {
                        this._disabled = true;
                    }
                    this._readAttrs(element);
                }
                /**
                 * @input {string} Large button.
                 */


                _createClass(Button, [{
                    key: "_attr",
                    value: function _attr(type, attrName, attrValue) {
                        this._setClass(this[type], false);
                        if (isTrueProperty(attrValue)) {
                            this[type] = attrName;
                            this._setClass(attrName, true);
                        } else {
                            // Special handling for '_style' which defaults to 'default'.
                            this[type] = type === '_style' ? 'default' : null;
                        }
                        if (type === '_style') {
                            this._setColor(attrName, isTrueProperty(attrValue));
                        }
                    }
                }, {
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        // If the button has a role applied to it
                        if (this.category) {
                            this.setRole(this.category);
                        }
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        this._init = true;
                        this._readIcon(this._elementRef.nativeElement);
                        this._assignCss(true);
                    }
                }, {
                    key: "ngAfterContentChecked",
                    value: function ngAfterContentChecked() {
                        this._readIcon(this._elementRef.nativeElement);
                        this._assignCss(true);
                    }
                }, {
                    key: "addClass",
                    value: function addClass(className) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
                    }
                }, {
                    key: "setRole",
                    value: function setRole(val) {
                        this._role = val;
                    }
                }, {
                    key: "_readIcon",
                    value: function _readIcon(element) {
                        // figure out if and where the icon lives in the button
                        var childNodes = element.childNodes;
                        if (childNodes.length > 0) {
                            childNodes = childNodes[0].childNodes;
                        }
                        var childNode = void 0;
                        var nodes = [];
                        for (var i = 0, l = childNodes.length; i < l; i++) {
                            childNode = childNodes[i];
                            if (childNode.nodeType === 3) {
                                // text node
                                if (childNode.textContent.trim() !== '') {
                                    nodes.push(TEXT);
                                }
                            } else if (childNode.nodeType === 1) {
                                if (childNode.nodeName === 'ION-ICON') {
                                    // icon element node
                                    nodes.push(ICON);
                                } else {
                                    // element other than an <ion-icon>
                                    nodes.push(TEXT);
                                }
                            }
                        }
                        // Remove any classes that are set already
                        this._setClass(this._icon, false);
                        if (nodes.length > 1) {
                            if (nodes[0] === ICON && nodes[1] === TEXT) {
                                this._icon = 'icon-left';
                            } else if (nodes[0] === TEXT && nodes[1] === ICON) {
                                this._icon = 'icon-right';
                            }
                        } else if (nodes.length === 1 && nodes[0] === ICON) {
                            this._icon = 'icon-only';
                        }
                    }
                }, {
                    key: "_readAttrs",
                    value: function _readAttrs(element) {
                        var elementAttrs = element.attributes;
                        var attrName = void 0;
                        for (var i = 0, l = elementAttrs.length; i < l; i++) {
                            if (elementAttrs[i].value !== '') continue;
                            attrName = elementAttrs[i].name;
                            if (BUTTON_STYLE_ATTRS.indexOf(attrName) > -1) {
                                this._style = attrName;
                            } else if (BUTTON_DISPLAY_ATTRS.indexOf(attrName) > -1) {
                                this._display = attrName;
                            } else if (BUTTON_SHAPE_ATTRS.indexOf(attrName) > -1) {
                                this._shape = attrName;
                            } else if (BUTTON_SIZE_ATTRS.indexOf(attrName) > -1) {
                                this._size = attrName;
                            } else if (!IGNORE_ATTRS.test(attrName)) {
                                this._colors.push(attrName);
                            }
                        }
                    }
                }, {
                    key: "_assignCss",
                    value: function _assignCss(assignCssClass) {
                        var role = this._role;
                        if (role) {
                            this._renderer.setElementClass(this._elementRef.nativeElement, role, assignCssClass); // button
                            this._setClass(this._style, assignCssClass); // button-clear
                            this._setClass(this._shape, assignCssClass); // button-round
                            this._setClass(this._display, assignCssClass); // button-full
                            this._setClass(this._size, assignCssClass); // button-small
                            this._setClass(this._icon, assignCssClass); // button-icon-left
                            this._setColor(this._style, assignCssClass); // button-secondary, button-clear-secondary
                        }
                    }
                }, {
                    key: "_setClass",
                    value: function _setClass(type, assignCssClass) {
                        if (type && this._init) {
                            this._renderer.setElementClass(this._elementRef.nativeElement, this._role + '-' + type.toLowerCase(), assignCssClass);
                        }
                    }
                }, {
                    key: "_setColor",
                    value: function _setColor(type, assignCssClass) {
                        var _this = this;

                        if (type && this._init) {
                            // Support array to allow removal of many styles at once.
                            var styles = type instanceof Array ? type : [type];
                            styles.forEach(function (styleName) {
                                // If the role is not a bar-button, don't apply the solid style
                                styleName = _this._role !== 'bar-button' && styleName === 'solid' ? 'default' : styleName;
                                var colorStyle = styleName !== null && styleName !== 'default' ? styleName.toLowerCase() + '-' : '';
                                _this._colors.forEach(function (colorName) {
                                    _this._setClass(colorStyle + colorName, assignCssClass); // button-secondary, button-clear-secondary
                                });
                            });
                        }
                    }
                }, {
                    key: "large",
                    set: function set(val) {
                        this._attr('_size', 'large', val);
                    }
                }, {
                    key: "small",
                    set: function set(val) {
                        this._attr('_size', 'small', val);
                    }
                }, {
                    key: "default",
                    set: function set(val) {
                        this._attr('_size', 'default', val);
                    }
                }, {
                    key: "outline",
                    set: function set(val) {
                        this._attr('_style', 'outline', val);
                    }
                }, {
                    key: "clear",
                    set: function set(val) {
                        this._attr('_style', 'clear', val);
                    }
                }, {
                    key: "solid",
                    set: function set(val) {
                        this._attr('_style', 'solid', val);
                    }
                }, {
                    key: "round",
                    set: function set(val) {
                        this._attr('_shape', 'round', val);
                    }
                }, {
                    key: "block",
                    set: function set(val) {
                        this._attr('_display', 'block', val);
                    }
                }, {
                    key: "full",
                    set: function set(val) {
                        this._attr('_display', 'full', val);
                    }
                }, {
                    key: "color",
                    set: function set(val) {
                        // Clear the colors for all styles including the default one.
                        this._setColor(BUTTON_STYLE_ATTRS.concat(['default']), false);
                        // Support array input which is also supported via multiple attributes (e.g. primary, secondary, etc).
                        this._colors = val instanceof Array ? val : [val];
                        // Set the colors for the currently effective style.
                        this._setColor(this._style, true);
                    }
                }], [{
                    key: "setRoles",
                    value: function setRoles(contentButtonChildren, role) {
                        var buttons = contentButtonChildren.toArray();
                        buttons.forEach(function (button) {
                            button.setRole(role);
                        });
                    }
                }]);

                return Button;
            }());

            _export("Button", Button);

            __decorate([Input(), __metadata('design:type', String)], Button.prototype, "category", void 0);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "large", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "small", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "default", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "outline", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "clear", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "solid", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "round", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "block", null);
            __decorate([Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], Button.prototype, "full", null);
            __decorate([Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Button.prototype, "color", null);
            _export("Button", Button = __decorate([Component({
                selector: 'button:not([ion-item]),[button]',
                template: '<span class="button-inner">' + '<ng-content></ng-content>' + '</span>' + '<ion-button-effect></ion-button-effect>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __param(3, Attribute('ion-item')), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object, typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object, String])], Button));
            BUTTON_SIZE_ATTRS = ['large', 'small', 'default'];
            BUTTON_STYLE_ATTRS = ['clear', 'outline', 'solid'];
            BUTTON_SHAPE_ATTRS = ['round', 'fab'];
            BUTTON_DISPLAY_ATTRS = ['block', 'full'];
            IGNORE_ATTRS = /_ng|button|left|right/;
            TEXT = 1;
            ICON = 2;
        }
    };
});
"use strict";

System.register("ionic-angular/components/checkbox/checkbox", ["@angular/core", "@angular/common", "../../util/form", "../item/item", "../../util/util"], function (_export, _context) {
    "use strict";

    var Component, EventEmitter, forwardRef, HostListener, Input, Optional, Output, Provider, ViewEncapsulation, NG_VALUE_ACCESSOR, Form, Item, isTrueProperty, _createClass, _typeof, __decorate, __metadata, __param, CHECKBOX_VALUE_ACCESSOR, Checkbox, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            EventEmitter = _angularCore.EventEmitter;
            forwardRef = _angularCore.forwardRef;
            HostListener = _angularCore.HostListener;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
            Provider = _angularCore.Provider;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NG_VALUE_ACCESSOR = _angularCommon.NG_VALUE_ACCESSOR;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_itemItem) {
            Item = _itemItem.Item;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            CHECKBOX_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, { useExisting: forwardRef(function () {
                    return Checkbox;
                }), multi: true });

            _export("Checkbox", Checkbox = function () {
                function Checkbox(_form, _item) {
                    _classCallCheck(this, Checkbox);

                    this._form = _form;
                    this._item = _item;
                    this._checked = false;
                    this._disabled = false;
                    /**
                     * @output {Checkbox} expression to evaluate when the checkbox value changes
                     */
                    this.ionChange = new EventEmitter();
                    _form.register(this);
                    if (_item) {
                        this.id = 'chk-' + _item.registerInput('checkbox');
                        this._labelId = 'lbl-' + _item.id;
                        this._item.setCssClass('item-checkbox', true);
                    }
                }
                /**
                 * @private
                 */


                _createClass(Checkbox, [{
                    key: "_click",
                    value: function _click(ev) {
                        console.debug('checkbox, checked');
                        ev.preventDefault();
                        ev.stopPropagation();
                        this.onChange(!this._checked);
                    }
                }, {
                    key: "_setChecked",
                    value: function _setChecked(isChecked) {
                        if (isChecked !== this._checked) {
                            this._checked = isChecked;
                            if (this._init) {
                                this.ionChange.emit(this);
                            }
                            this._item && this._item.setCssClass('item-checkbox-checked', isChecked);
                        }
                    }
                }, {
                    key: "writeValue",
                    value: function writeValue(val) {
                        this._setChecked(isTrueProperty(val));
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        var _this = this;

                        this._fn = fn;
                        this.onChange = function (isChecked) {
                            console.debug('checkbox, onChange', isChecked);
                            fn(isChecked);
                            _this._setChecked(isChecked);
                            _this.onTouched();
                        };
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "onChange",
                    value: function onChange(isChecked) {
                        // used when this input does not have an ngModel or ngControl
                        console.debug('checkbox, onChange (no ngModel)', isChecked);
                        this._setChecked(isChecked);
                        this.onTouched();
                    }
                }, {
                    key: "onTouched",
                    value: function onTouched() {}
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        this._init = true;
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._form.deregister(this);
                    }
                }, {
                    key: "checked",
                    get: function get() {
                        return this._checked;
                    },
                    set: function set(val) {
                        this._setChecked(isTrueProperty(val));
                        this.onChange(this._checked);
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this._item && this._item.setCssClass('item-checkbox-disabled', this._disabled);
                    }
                }]);

                return Checkbox;
            }());

            _export("Checkbox", Checkbox);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Checkbox.prototype, "ionChange", void 0);
            __decorate([HostListener('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Checkbox.prototype, "_click", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Checkbox.prototype, "checked", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Checkbox.prototype, "disabled", null);
            _export("Checkbox", Checkbox = __decorate([Component({
                selector: 'ion-checkbox',
                template: '<div class="checkbox-icon" [class.checkbox-checked]="_checked">' + '<div class="checkbox-inner"></div>' + '</div>' + '<button role="checkbox" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
                host: {
                    '[class.checkbox-disabled]': '_disabled'
                },
                providers: [CHECKBOX_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            }), __param(1, Optional()), __metadata('design:paramtypes', [typeof (_b = typeof Form !== 'undefined' && Form) === 'function' && _b || Object, typeof (_c = typeof Item !== 'undefined' && Item) === 'function' && _c || Object])], Checkbox));
        }
    };
});
"use strict";

System.register("ionic-angular/components/content/content", ["@angular/core", "../app/app", "../ion", "../../config/config", "../../util/keyboard", "../../util/dom", "../../util/scroll-view", "../tabs/tabs", "../nav/view-controller", "../../util/util"], function (_export, _context) {
    "use strict";

    var ChangeDetectionStrategy, Component, ElementRef, Input, NgZone, Optional, ViewEncapsulation, App, Ion, Config, Keyboard, nativeRaf, nativeTimeout, transitionEnd, ScrollView, Tabs, ViewController, isTrueProperty, _createClass, _typeof, __decorate, __metadata, __param, Content, _a, _b, _c, _d, _e, _f, _g;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    function parsePxUnit(val) {
        return val.indexOf('px') > 0 ? parseInt(val, 10) : 0;
    }
    return {
        setters: [function (_angularCore) {
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            Input = _angularCore.Input;
            NgZone = _angularCore.NgZone;
            Optional = _angularCore.Optional;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilKeyboard) {
            Keyboard = _utilKeyboard.Keyboard;
        }, function (_utilDom) {
            nativeRaf = _utilDom.nativeRaf;
            nativeTimeout = _utilDom.nativeTimeout;
            transitionEnd = _utilDom.transitionEnd;
        }, function (_utilScrollView) {
            ScrollView = _utilScrollView.ScrollView;
        }, function (_tabsTabs) {
            Tabs = _tabsTabs.Tabs;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Content", Content = function (_Ion) {
                _inherits(Content, _Ion);

                function Content(_elementRef, _config, _app, _keyboard, _zone, viewCtrl, _tabs) {
                    _classCallCheck(this, Content);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Content).call(this, _elementRef));

                    _this._elementRef = _elementRef;
                    _this._config = _config;
                    _this._app = _app;
                    _this._keyboard = _keyboard;
                    _this._zone = _zone;
                    _this._tabs = _tabs;
                    _this._inputPolling = false;
                    _this._sbPadding = _config.getBoolean('statusbarPadding', false);
                    if (viewCtrl) {
                        viewCtrl.setContent(_this);
                        viewCtrl.setContentRef(_elementRef);
                    }
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(Content, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        var self = this;
                        self._scrollEle = self._elementRef.nativeElement.children[0];
                        self._zone.runOutsideAngular(function () {
                            self._scroll = new ScrollView(self._scrollEle);
                            if (self._config.getBoolean('tapPolyfill')) {
                                self._scLsn = self.addScrollListener(function () {
                                    self._app.setScrolling();
                                });
                            }
                        });
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._scLsn && this._scLsn();
                        this._scroll && this._scroll.destroy();
                        this._scrollEle = this._footerEle = this._scLsn = null;
                    }
                }, {
                    key: "addScrollListener",
                    value: function addScrollListener(handler) {
                        return this._addListener('scroll', handler);
                    }
                }, {
                    key: "addTouchStartListener",
                    value: function addTouchStartListener(handler) {
                        return this._addListener('touchstart', handler);
                    }
                }, {
                    key: "addTouchMoveListener",
                    value: function addTouchMoveListener(handler) {
                        return this._addListener('touchmove', handler);
                    }
                }, {
                    key: "addTouchEndListener",
                    value: function addTouchEndListener(handler) {
                        return this._addListener('touchend', handler);
                    }
                }, {
                    key: "addMouseDownListener",
                    value: function addMouseDownListener(handler) {
                        return this._addListener('mousedown', handler);
                    }
                }, {
                    key: "addMouseUpListener",
                    value: function addMouseUpListener(handler) {
                        return this._addListener('mouseup', handler);
                    }
                }, {
                    key: "addMouseMoveListener",
                    value: function addMouseMoveListener(handler) {
                        return this._addListener('mousemove', handler);
                    }
                }, {
                    key: "_addListener",
                    value: function _addListener(type, handler) {
                        var _this2 = this;

                        if (!this._scrollEle) {
                            return;
                        }
                        // ensure we're not creating duplicates
                        this._scrollEle.removeEventListener(type, handler);
                        this._scrollEle.addEventListener(type, handler);
                        return function () {
                            if (_this2._scrollEle) {
                                _this2._scrollEle.removeEventListener(type, handler);
                            }
                        };
                    }
                }, {
                    key: "getScrollElement",
                    value: function getScrollElement() {
                        return this._scrollEle;
                    }
                }, {
                    key: "onScrollEnd",
                    value: function onScrollEnd(callback) {
                        var lastScrollTop = null;
                        var framesUnchanged = 0;
                        var _scrollEle = this._scrollEle;
                        function next() {
                            var currentScrollTop = _scrollEle.scrollTop;
                            if (lastScrollTop !== null) {
                                if (Math.round(lastScrollTop) === Math.round(currentScrollTop)) {
                                    framesUnchanged++;
                                } else {
                                    framesUnchanged = 0;
                                }
                                if (framesUnchanged > 9) {
                                    return callback();
                                }
                            }
                            lastScrollTop = currentScrollTop;
                            nativeRaf(function () {
                                nativeRaf(next);
                            });
                        }
                        nativeTimeout(next, 100);
                    }
                }, {
                    key: "onScrollElementTransitionEnd",
                    value: function onScrollElementTransitionEnd(callback) {
                        transitionEnd(this._scrollEle, callback);
                    }
                }, {
                    key: "scrollTo",
                    value: function scrollTo(x, y) {
                        var duration = arguments.length <= 2 || arguments[2] === undefined ? 300 : arguments[2];

                        return this._scroll.scrollTo(x, y, duration);
                    }
                }, {
                    key: "scrollToTop",
                    value: function scrollToTop() {
                        var duration = arguments.length <= 0 || arguments[0] === undefined ? 300 : arguments[0];

                        return this._scroll.scrollToTop(duration);
                    }
                }, {
                    key: "getScrollTop",
                    value: function getScrollTop() {
                        return this._scroll.getTop();
                    }
                }, {
                    key: "setScrollTop",
                    value: function setScrollTop(top) {
                        this._scroll.setTop(top);
                    }
                }, {
                    key: "scrollToBottom",
                    value: function scrollToBottom() {
                        var duration = arguments.length <= 0 || arguments[0] === undefined ? 300 : arguments[0];

                        return this._scroll.scrollToBottom(duration);
                    }
                }, {
                    key: "jsScroll",
                    value: function jsScroll(onScrollCallback) {
                        return this._scroll.jsScroll(onScrollCallback);
                    }
                }, {
                    key: "addCssClass",
                    value: function addCssClass(className) {
                        this.getNativeElement().classList.add(className);
                    }
                }, {
                    key: "removeCssClass",
                    value: function removeCssClass(className) {
                        this.getNativeElement().classList.remove(className);
                    }
                }, {
                    key: "setScrollElementStyle",
                    value: function setScrollElementStyle(prop, val) {
                        this._scrollEle.style[prop] = val;
                    }
                }, {
                    key: "getContentDimensions",
                    value: function getContentDimensions() {
                        var _scrollEle = this._scrollEle;
                        var parentElement = _scrollEle.parentElement;
                        return {
                            contentHeight: parentElement.offsetHeight,
                            contentTop: parentElement.offsetTop,
                            contentBottom: parentElement.offsetTop + parentElement.offsetHeight,
                            contentWidth: parentElement.offsetWidth,
                            contentLeft: parentElement.offsetLeft,
                            contentRight: parentElement.offsetLeft + parentElement.offsetWidth,
                            scrollHeight: _scrollEle.scrollHeight,
                            scrollTop: _scrollEle.scrollTop,
                            scrollBottom: _scrollEle.scrollTop + _scrollEle.scrollHeight,
                            scrollWidth: _scrollEle.scrollWidth,
                            scrollLeft: _scrollEle.scrollLeft,
                            scrollRight: _scrollEle.scrollLeft + _scrollEle.scrollWidth
                        };
                    }
                }, {
                    key: "addScrollPadding",
                    value: function addScrollPadding(newPadding) {
                        if (newPadding > this._scrollPadding) {
                            console.debug('content addScrollPadding', newPadding);
                            this._scrollPadding = newPadding;
                            this._scrollEle.style.paddingBottom = newPadding + 'px';
                        }
                    }
                }, {
                    key: "clearScrollPaddingFocusOut",
                    value: function clearScrollPaddingFocusOut() {
                        var _this3 = this;

                        if (!this._inputPolling) {
                            this._inputPolling = true;
                            this._keyboard.onClose(function () {
                                _this3._scrollPadding = 0;
                                _this3._scrollEle.style.paddingBottom = _this3._paddingBottom > 0 ? _this3._paddingBottom + 'px' : '';
                                _this3._inputPolling = false;
                                _this3.addScrollPadding(0);
                            }, 200, Infinity);
                        }
                    }
                }, {
                    key: "readDimensions",
                    value: function readDimensions() {
                        this._paddingTop = 0;
                        this._paddingRight = 0;
                        this._paddingBottom = 0;
                        this._paddingLeft = 0;
                        this._headerHeight = 0;
                        this._footerHeight = 0;
                        this._tabbarPlacement = null;
                        var ele = this._elementRef.nativeElement;
                        var parentEle = ele.parentElement;
                        var computedStyle = void 0;
                        for (var i = 0; i < parentEle.children.length; i++) {
                            ele = parentEle.children[i];
                            if (ele.tagName === 'ION-CONTENT') {
                                if (this._fullscreen) {
                                    computedStyle = getComputedStyle(ele);
                                    this._paddingTop = parsePxUnit(computedStyle.paddingTop);
                                    this._paddingBottom = parsePxUnit(computedStyle.paddingBottom);
                                    this._paddingRight = parsePxUnit(computedStyle.paddingRight);
                                    this._paddingLeft = parsePxUnit(computedStyle.paddingLeft);
                                }
                            } else if (ele.tagName === 'ION-HEADER') {
                                this._headerHeight = ele.clientHeight;
                            } else if (ele.tagName === 'ION-FOOTER') {
                                this._footerHeight = ele.clientHeight;
                                this._footerEle = ele;
                            }
                        }
                        ele = parentEle;
                        var tabbarEle = void 0;
                        while (ele && ele.tagName !== 'ION-MODAL' && !ele.classList.contains('tab-subpage')) {
                            if (ele.tagName === 'ION-TABS') {
                                tabbarEle = ele.firstElementChild;
                                this._tabbarHeight = tabbarEle.clientHeight;
                                if (this._tabbarPlacement === null) {
                                    // this is the first tabbar found, remember it's position
                                    this._tabbarPlacement = ele.getAttribute('tabbarplacement');
                                }
                            }
                            ele = ele.parentElement;
                        }
                    }
                }, {
                    key: "writeDimensions",
                    value: function writeDimensions() {
                        var newVal = void 0;
                        var scrollEle = this._scrollEle;
                        // only write when it has changed
                        if (this._fullscreen) {
                            // adjust the content with padding, allowing content to scroll under headers/footers
                            // however, on iOS you cannot control the margins of the scrollbar (last tested iOS9.2)
                            // only add inline padding styles if the computed padding value, which would
                            // have come from the app's css, is different than the new padding value
                            newVal = this._headerHeight + this._paddingTop;
                            if (this._tabbarPlacement === 'top') {
                                newVal += this._tabbarHeight;
                            }
                            if (newVal !== this.adjustedTop) {
                                scrollEle.style.paddingTop = newVal > 0 ? newVal + 'px' : '';
                                this.adjustedTop = newVal;
                            }
                            newVal = this._footerHeight + this._paddingBottom;
                            if (this._tabbarPlacement === 'bottom') {
                                newVal += this._tabbarHeight;
                                if (newVal > 0 && this._footerEle) {
                                    this._footerEle.style.bottom = newVal - this._footerHeight - this._paddingBottom + 'px';
                                }
                            }
                            if (newVal !== this.adjustedBottom) {
                                scrollEle.style.paddingBottom = newVal > 0 ? newVal + 'px' : '';
                                this.adjustedBottom = newVal;
                            }
                        } else {
                            // adjust the content with margins
                            newVal = this._headerHeight;
                            if (this._tabbarPlacement === 'top') {
                                newVal += this._tabbarHeight;
                            }
                            if (newVal !== this.adjustedTop) {
                                scrollEle.style.marginTop = newVal > 0 ? newVal + 'px' : '';
                                this.adjustedTop = newVal;
                            }
                            newVal = this._footerHeight;
                            if (this._tabbarPlacement === 'bottom') {
                                newVal += this._tabbarHeight;
                            }
                            if (newVal !== this.adjustedBottom) {
                                scrollEle.style.marginBottom = newVal > 0 ? newVal + 'px' : '';
                                this.adjustedBottom = newVal;
                                if (newVal > 0 && this._footerEle) {
                                    this._footerEle.style.bottom = newVal - this._footerHeight + 'px';
                                }
                            }
                        }
                        if (this._tabbarPlacement !== null && this._tabs) {
                            // set the position of the tabbar
                            if (this._tabbarPlacement === 'top') {
                                this._tabs.setTabbarPosition(this._headerHeight, -1);
                            } else {
                                this._tabs.setTabbarPosition(-1, 0);
                            }
                        }
                    }
                }, {
                    key: "fullscreen",
                    get: function get() {
                        return !!this._fullscreen;
                    },
                    set: function set(val) {
                        this._fullscreen = isTrueProperty(val);
                    }
                }]);

                return Content;
            }(Ion));

            _export("Content", Content);

            __decorate([Input(), __metadata('design:type', Boolean)], Content.prototype, "fullscreen", null);
            _export("Content", Content = __decorate([Component({
                selector: 'ion-content',
                template: '<scroll-content>' + '<ng-content></ng-content>' + '</scroll-content>' + '<ng-content select="ion-fixed"></ng-content>' + '<ng-content select="ion-refresher"></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.statusbar-padding]': '_sbPadding'
                }
            }), __param(5, Optional()), __param(6, Optional()), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object, typeof (_b = typeof Config !== 'undefined' && Config) === 'function' && _b || Object, typeof (_c = typeof App !== 'undefined' && App) === 'function' && _c || Object, typeof (_d = typeof Keyboard !== 'undefined' && Keyboard) === 'function' && _d || Object, typeof (_e = typeof NgZone !== 'undefined' && NgZone) === 'function' && _e || Object, typeof (_f = typeof ViewController !== 'undefined' && ViewController) === 'function' && _f || Object, typeof (_g = typeof Tabs !== 'undefined' && Tabs) === 'function' && _g || Object])], Content));
        }
    };
});
"use strict";

System.register("ionic-angular/components/datetime/datetime", ["@angular/core", "@angular/common", "../../config/config", "../picker/picker", "../../util/form", "../item/item", "../../util/util", "../../util/datetime-util", "../nav/nav-controller"], function (_export, _context) {
    "use strict";

    var Component, Optional, Input, Output, Provider, forwardRef, EventEmitter, HostListener, ViewEncapsulation, NG_VALUE_ACCESSOR, Config, Picker, Form, Item, merge, isBlank, isPresent, isTrueProperty, isArray, isString, dateValueRange, renderDateTime, renderTextFormat, convertFormatToKey, getValueFromFormat, parseTemplate, parseDate, updateDate, convertDataToISO, daysInMonth, dateSortValue, dateDataSortValue, NavController, _createClass, _typeof, __decorate, __metadata, __param, DATETIME_VALUE_ACCESSOR, DateTime, _a, _b, _c, _d, _e, _f;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    /**
     * @private
     * Use to convert a string of comma separated numbers or
     * an array of numbers, and clean up any user input
     */
    function convertToArrayOfNumbers(input, type) {
        var values = [];
        if (isString(input)) {
            // convert the string to an array of strings
            // auto remove any whitespace and [] characters
            input = input.replace(/\[|\]|\s/g, '').split(',');
        }
        if (isArray(input)) {
            // ensure each value is an actual number in the returned array
            input.forEach(function (num) {
                num = parseInt(num, 10);
                if (!isNaN(num)) {
                    values.push(num);
                }
            });
        }
        if (!values.length) {
            console.warn("Invalid \"" + type + "Values\". Must be an array of numbers, or a comma separated string of numbers.");
        }
        return values;
    }
    /**
     * @private
     * Use to convert a string of comma separated strings or
     * an array of strings, and clean up any user input
     */
    function convertToArrayOfStrings(input, type) {
        if (isPresent(input)) {
            var values = [];
            if (isString(input)) {
                // convert the string to an array of strings
                // auto remove any [] characters
                input = input.replace(/\[|\]/g, '').split(',');
            }
            if (isArray(input)) {
                // trim up each string value
                input.forEach(function (val) {
                    val = val.trim();
                    if (val) {
                        values.push(val);
                    }
                });
            }
            if (!values.length) {
                console.warn("Invalid \"" + type + "Names\". Must be an array of strings, or a comma separated string.");
            }
            return values;
        }
    }
    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Optional = _angularCore.Optional;
            Input = _angularCore.Input;
            Output = _angularCore.Output;
            Provider = _angularCore.Provider;
            forwardRef = _angularCore.forwardRef;
            EventEmitter = _angularCore.EventEmitter;
            HostListener = _angularCore.HostListener;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NG_VALUE_ACCESSOR = _angularCommon.NG_VALUE_ACCESSOR;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_pickerPicker) {
            Picker = _pickerPicker.Picker;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_itemItem) {
            Item = _itemItem.Item;
        }, function (_utilUtil) {
            merge = _utilUtil.merge;
            isBlank = _utilUtil.isBlank;
            isPresent = _utilUtil.isPresent;
            isTrueProperty = _utilUtil.isTrueProperty;
            isArray = _utilUtil.isArray;
            isString = _utilUtil.isString;
        }, function (_utilDatetimeUtil) {
            dateValueRange = _utilDatetimeUtil.dateValueRange;
            renderDateTime = _utilDatetimeUtil.renderDateTime;
            renderTextFormat = _utilDatetimeUtil.renderTextFormat;
            convertFormatToKey = _utilDatetimeUtil.convertFormatToKey;
            getValueFromFormat = _utilDatetimeUtil.getValueFromFormat;
            parseTemplate = _utilDatetimeUtil.parseTemplate;
            parseDate = _utilDatetimeUtil.parseDate;
            updateDate = _utilDatetimeUtil.updateDate;
            convertDataToISO = _utilDatetimeUtil.convertDataToISO;
            daysInMonth = _utilDatetimeUtil.daysInMonth;
            dateSortValue = _utilDatetimeUtil.dateSortValue;
            dateDataSortValue = _utilDatetimeUtil.dateDataSortValue;
        }, function (_navNavController) {
            NavController = _navNavController.NavController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            DATETIME_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, { useExisting: forwardRef(function () {
                    return DateTime;
                }), multi: true });

            _export("DateTime", DateTime = function () {
                function DateTime(_form, _config, _item, _nav) {
                    _classCallCheck(this, DateTime);

                    this._form = _form;
                    this._config = _config;
                    this._item = _item;
                    this._nav = _nav;
                    this._disabled = false;
                    this._text = '';
                    this._isOpen = false;
                    this._value = {};
                    this._locale = {};
                    /**
                     * @input {string} The display format of the date and time as text that shows
                     * within the item. When the `pickerFormat` input is not used, then the
                     * `displayFormat` is used for both display the formatted text, and determining
                     * the datetime picker's columns. See the `pickerFormat` input description for
                     * more info. Defaults to `MMM D, YYYY`.
                     */
                    this.displayFormat = 'MMM D, YYYY';
                    /**
                     * @input {string} The text to display on the picker's cancel button. Default: `Cancel`.
                     */
                    this.cancelText = 'Cancel';
                    /**
                     * @input {string} The text to display on the picker's "Done" button. Default: `Done`.
                     */
                    this.doneText = 'Done';
                    /**
                     * @input {any} Any additional options that the picker interface can accept.
                     * See the [Picker API docs](../../picker/Picker) for the picker options.
                     */
                    this.pickerOptions = {};
                    /**
                     * @output {any} Any expression to evaluate when the datetime selection has changed.
                     */
                    this.ionChange = new EventEmitter();
                    /**
                     * @output {any} Any expression to evaluate when the datetime selection was cancelled.
                     */
                    this.ionCancel = new EventEmitter();
                    this._form.register(this);
                    if (_item) {
                        this.id = 'dt-' + _item.registerInput('datetime');
                        this._labelId = 'lbl-' + _item.id;
                        this._item.setCssClass('item-datetime', true);
                    }
                    if (!_nav) {
                        console.error('parent <ion-nav> required for <ion-datetime>');
                    }
                }

                _createClass(DateTime, [{
                    key: "_click",
                    value: function _click(ev) {
                        if (ev.detail === 0) {
                            // do not continue if the click event came from a form submit
                            return;
                        }
                        ev.preventDefault();
                        ev.stopPropagation();
                        this.open();
                    }
                }, {
                    key: "_keyup",
                    value: function _keyup() {
                        if (!this._isOpen) {
                            this.open();
                        }
                    }
                }, {
                    key: "open",
                    value: function open() {
                        var _this = this;

                        if (this._disabled) {
                            return;
                        }
                        console.debug('datetime, open picker');
                        // the user may have assigned some options specifically for the alert
                        var pickerOptions = merge({}, this.pickerOptions);
                        var picker = Picker.create(pickerOptions);
                        pickerOptions.buttons = [{
                            text: this.cancelText,
                            role: 'cancel',
                            handler: function handler() {
                                _this.ionCancel.emit(null);
                            }
                        }, {
                            text: this.doneText,
                            handler: function handler(data) {
                                console.log('datetime, done', data);
                                _this.onChange(data);
                                _this.ionChange.emit(data);
                            }
                        }];
                        this.generate(picker);
                        this.validate(picker);
                        picker.ionChange.subscribe(function () {
                            _this.validate(picker);
                        });
                        this._nav.present(picker, pickerOptions);
                        this._isOpen = true;
                        picker.onDismiss(function () {
                            _this._isOpen = false;
                        });
                    }
                }, {
                    key: "generate",
                    value: function generate(picker) {
                        var _this2 = this;

                        // if a picker format wasn't provided, then fallback
                        // to use the display format
                        var template = this.pickerFormat || this.displayFormat;
                        if (isPresent(template)) {
                            // make sure we've got up to date sizing information
                            this.calcMinMax();
                            // does not support selecting by day name
                            // automaticallly remove any day name formats
                            template = template.replace('DDDD', '{~}').replace('DDD', '{~}');
                            if (template.indexOf('D') === -1) {
                                // there is not a day in the template
                                // replace the day name with a numeric one if it exists
                                template = template.replace('{~}', 'D');
                            }
                            // make sure no day name replacer is left in the string
                            template = template.replace(/{~}/g, '');
                            // parse apart the given template into an array of "formats"
                            parseTemplate(template).forEach(function (format) {
                                // loop through each format in the template
                                // create a new picker column to build up with data
                                var key = convertFormatToKey(format);
                                var values = void 0;
                                // first see if they have exact values to use for this input
                                if (isPresent(_this2[key + 'Values'])) {
                                    // user provide exact values for this date part
                                    values = convertToArrayOfNumbers(_this2[key + 'Values'], key);
                                } else {
                                    // use the default date part values
                                    values = dateValueRange(format, _this2._min, _this2._max);
                                }
                                var column = {
                                    name: key,
                                    options: values.map(function (val) {
                                        return {
                                            value: val,
                                            text: renderTextFormat(format, val, null, _this2._locale)
                                        };
                                    })
                                };
                                if (column.options.length) {
                                    // cool, we've loaded up the columns with options
                                    // preselect the option for this column
                                    var selected = column.options.find(function (opt) {
                                        return opt.value === getValueFromFormat(_this2._value, format);
                                    });
                                    if (selected) {
                                        // set the select index for this column's options
                                        column.selectedIndex = column.options.indexOf(selected);
                                    }
                                    // add our newly created column to the picker
                                    picker.addColumn(column);
                                }
                            });
                            this.divyColumns(picker);
                        }
                    }
                }, {
                    key: "validate",
                    value: function validate(picker) {
                        var i = void 0;
                        var today = new Date();
                        var columns = picker.getColumns();
                        // find the columns used
                        var yearCol = columns.find(function (col) {
                            return col.name === 'year';
                        });
                        var monthCol = columns.find(function (col) {
                            return col.name === 'month';
                        });
                        var dayCol = columns.find(function (col) {
                            return col.name === 'day';
                        });
                        var yearOpt = void 0;
                        var monthOpt = void 0;
                        var dayOpt = void 0;
                        // default to assuming today's year
                        var selectedYear = today.getFullYear();
                        if (yearCol) {
                            yearOpt = yearCol.options[yearCol.selectedIndex];
                            if (yearOpt) {
                                // they have a selected year value
                                selectedYear = yearOpt.value;
                            }
                        }
                        // default to assuming this month has 31 days
                        var numDaysInMonth = 31;
                        var selectedMonth = void 0;
                        if (monthCol) {
                            monthOpt = monthCol.options[monthCol.selectedIndex];
                            if (monthOpt) {
                                // they have a selected month value
                                selectedMonth = monthOpt.value;
                                // calculate how many days are in this month
                                numDaysInMonth = daysInMonth(selectedMonth, selectedYear);
                            }
                        }
                        // create sort values for the min/max datetimes
                        var minCompareVal = dateDataSortValue(this._min);
                        var maxCompareVal = dateDataSortValue(this._max);
                        if (monthCol) {
                            // enable/disable which months are valid
                            // to show within the min/max date range
                            for (i = 0; i < monthCol.options.length; i++) {
                                monthOpt = monthCol.options[i];
                                // loop through each month and see if it
                                // is within the min/max date range
                                monthOpt.disabled = dateSortValue(selectedYear, monthOpt.value, 31) < minCompareVal || dateSortValue(selectedYear, monthOpt.value, 1) > maxCompareVal;
                            }
                        }
                        if (dayCol) {
                            if (isPresent(selectedMonth)) {
                                // enable/disable which days are valid
                                // to show within the min/max date range
                                for (i = 0; i < 31; i++) {
                                    dayOpt = dayCol.options[i];
                                    // loop through each day and see if it
                                    // is within the min/max date range
                                    var compareVal = dateSortValue(selectedYear, selectedMonth, dayOpt.value);
                                    dayOpt.disabled = compareVal < minCompareVal || compareVal > maxCompareVal || numDaysInMonth <= i;
                                }
                            } else {
                                // enable/disable which numbers of days to show in this month
                                for (i = 0; i < 31; i++) {
                                    dayCol.options[i].disabled = numDaysInMonth <= i;
                                }
                            }
                        }
                        picker.refresh();
                    }
                }, {
                    key: "divyColumns",
                    value: function divyColumns(picker) {
                        var pickerColumns = picker.getColumns();
                        var columns = [];
                        pickerColumns.forEach(function (col, i) {
                            columns.push(0);
                            col.options.forEach(function (opt) {
                                if (opt.text.length > columns[i]) {
                                    columns[i] = opt.text.length;
                                }
                            });
                        });
                        if (columns.length === 2) {
                            var width = Math.max(columns[0], columns[1]);
                            pickerColumns[0].columnWidth = pickerColumns[1].columnWidth = width * 16 + "px";
                        } else if (columns.length === 3) {
                            var width = Math.max(columns[0], columns[2]);
                            pickerColumns[1].columnWidth = columns[1] * 16 + "px";
                            pickerColumns[0].columnWidth = pickerColumns[2].columnWidth = width * 16 + "px";
                        } else if (columns.length > 3) {
                            columns.forEach(function (col, i) {
                                pickerColumns[i].columnWidth = col * 12 + "px";
                            });
                        }
                    }
                }, {
                    key: "setValue",
                    value: function setValue(newData) {
                        updateDate(this._value, newData);
                    }
                }, {
                    key: "getValue",
                    value: function getValue() {
                        return this._value;
                    }
                }, {
                    key: "checkHasValue",
                    value: function checkHasValue(inputValue) {
                        if (this._item) {
                            this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
                        }
                    }
                }, {
                    key: "updateText",
                    value: function updateText() {
                        // create the text of the formatted data
                        this._text = renderDateTime(this.displayFormat, this._value, this._locale);
                    }
                }, {
                    key: "calcMinMax",
                    value: function calcMinMax() {
                        var todaysYear = new Date().getFullYear();
                        if (isBlank(this.min)) {
                            if (isPresent(this.yearValues)) {
                                this.min = Math.min.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
                            } else {
                                this.min = (todaysYear - 100).toString();
                            }
                        }
                        if (isBlank(this.max)) {
                            if (isPresent(this.yearValues)) {
                                this.max = Math.max.apply(Math, convertToArrayOfNumbers(this.yearValues, 'year'));
                            } else {
                                this.max = todaysYear.toString();
                            }
                        }
                        var min = this._min = parseDate(this.min);
                        var max = this._max = parseDate(this.max);
                        min.month = min.month || 1;
                        min.day = min.day || 1;
                        min.hour = min.hour || 0;
                        min.minute = min.minute || 0;
                        min.second = min.second || 0;
                        max.month = max.month || 12;
                        max.day = max.day || 31;
                        max.hour = max.hour || 23;
                        max.minute = max.minute || 59;
                        max.second = max.second || 59;
                    }
                }, {
                    key: "writeValue",
                    value: function writeValue(val) {
                        console.debug('datetime, writeValue', val);
                        this.setValue(val);
                        this.updateText();
                        this.checkHasValue(val);
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        var _this3 = this;

                        // first see if locale names were provided in the inputs
                        // then check to see if they're in the config
                        // if neither were provided then it will use default English names
                        ['monthNames', 'monthShortNames', 'dayNames', 'dayShortNames'].forEach(function (type) {
                            _this3._locale[type] = convertToArrayOfStrings(isPresent(_this3[type]) ? _this3[type] : _this3._config.get(type), type);
                        });
                        // update how the datetime value is displayed as formatted text
                        this.updateText();
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        var _this4 = this;

                        this._fn = fn;
                        this.onChange = function (val) {
                            console.debug('datetime, onChange', val);
                            _this4.setValue(val);
                            _this4.updateText();
                            _this4.checkHasValue(val);
                            // convert DateTimeData value to iso datetime format
                            fn(convertDataToISO(_this4._value));
                            _this4.onTouched();
                        };
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "onChange",
                    value: function onChange(val) {
                        // onChange used when there is not an ngControl
                        console.debug('datetime, onChange w/out ngControl', val);
                        this.setValue(val);
                        this.updateText();
                        this.onTouched();
                    }
                }, {
                    key: "onTouched",
                    value: function onTouched() {}
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._form.deregister(this);
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this._item && this._item.setCssClass('item-datetime-disabled', this._disabled);
                    }
                }]);

                return DateTime;
            }());

            _export("DateTime", DateTime);

            __decorate([Input(), __metadata('design:type', String)], DateTime.prototype, "min", void 0);
            __decorate([Input(), __metadata('design:type', String)], DateTime.prototype, "max", void 0);
            __decorate([Input(), __metadata('design:type', String)], DateTime.prototype, "displayFormat", void 0);
            __decorate([Input(), __metadata('design:type', String)], DateTime.prototype, "pickerFormat", void 0);
            __decorate([Input(), __metadata('design:type', String)], DateTime.prototype, "cancelText", void 0);
            __decorate([Input(), __metadata('design:type', String)], DateTime.prototype, "doneText", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "yearValues", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "monthValues", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "dayValues", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "hourValues", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "minuteValues", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "monthNames", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "monthShortNames", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "dayNames", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "dayShortNames", void 0);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "pickerOptions", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], DateTime.prototype, "ionChange", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], DateTime.prototype, "ionCancel", void 0);
            __decorate([HostListener('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], DateTime.prototype, "_click", null);
            __decorate([HostListener('keyup.space'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], DateTime.prototype, "_keyup", null);
            __decorate([Input(), __metadata('design:type', Object)], DateTime.prototype, "disabled", null);
            _export("DateTime", DateTime = __decorate([Component({
                selector: 'ion-datetime',
                template: '<div class="datetime-text">{{_text}}</div>' + '<button aria-haspopup="true" ' + 'type="button" ' + '[id]="id" ' + 'category="item-cover" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
                host: {
                    '[class.datetime-disabled]': '_disabled'
                },
                providers: [DATETIME_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            }), __param(2, Optional()), __param(3, Optional()), __metadata('design:paramtypes', [typeof (_c = typeof Form !== 'undefined' && Form) === 'function' && _c || Object, typeof (_d = typeof Config !== 'undefined' && Config) === 'function' && _d || Object, typeof (_e = typeof Item !== 'undefined' && Item) === 'function' && _e || Object, typeof (_f = typeof NavController !== 'undefined' && NavController) === 'function' && _f || Object])], DateTime));
        }
    };
});
"use strict";

System.register("ionic-angular/components/icon/icon", ["@angular/core", "../../config/config"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, Renderer, Input, Config, _createClass, _typeof, __decorate, __metadata, Icon, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Renderer = _angularCore.Renderer;
            Input = _angularCore.Input;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Icon", Icon = function () {
                function Icon(config, _elementRef, _renderer) {
                    _classCallCheck(this, Icon);

                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this._name = '';
                    this._ios = '';
                    this._md = '';
                    this._css = '';
                    this.mode = config.get('iconMode');
                }
                /**
                 * @private
                 */


                _createClass(Icon, [{
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        if (this._css) {
                            this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
                        }
                    }
                }, {
                    key: "update",
                    value: function update() {
                        var css = 'ion-';
                        if (this._ios && this.mode === 'ios') {
                            css += this._ios;
                        } else if (this._md && this.mode === 'md') {
                            css += this._md;
                        } else {
                            css += this._name;
                        }
                        if (this.mode === 'ios' && !this.isActive && css.indexOf('logo') < 0) {
                            css += '-outline';
                        }
                        if (this._css !== css) {
                            if (this._css) {
                                this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
                            }
                            this._css = css;
                            this._renderer.setElementClass(this._elementRef.nativeElement, css, true);
                            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', css.replace('ion-', '').replace('ios-', '').replace('md-', '').replace('-', ' '));
                        }
                    }
                }, {
                    key: "addClass",
                    value: function addClass(className) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
                    }
                }, {
                    key: "name",
                    get: function get() {
                        return this._name;
                    },
                    set: function set(val) {
                        if (!/^md-|^ios-|^logo-/.test(val)) {
                            // this does not have one of the defaults
                            // so lets auto add in the mode prefix for them
                            val = this.mode + '-' + val;
                        }
                        this._name = val;
                        this.update();
                    }
                }, {
                    key: "ios",
                    get: function get() {
                        return this._ios;
                    },
                    set: function set(val) {
                        this._ios = val;
                        this.update();
                    }
                }, {
                    key: "md",
                    get: function get() {
                        return this._md;
                    },
                    set: function set(val) {
                        this._md = val;
                        this.update();
                    }
                }, {
                    key: "isActive",
                    get: function get() {
                        return this._isActive === undefined || this._isActive === true || this._isActive === 'true';
                    },
                    set: function set(val) {
                        this._isActive = val;
                        this.update();
                    }
                }]);

                return Icon;
            }());

            _export("Icon", Icon);

            __decorate([Input(), __metadata('design:type', String)], Icon.prototype, "name", null);
            __decorate([Input(), __metadata('design:type', String)], Icon.prototype, "ios", null);
            __decorate([Input(), __metadata('design:type', String)], Icon.prototype, "md", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Icon.prototype, "isActive", null);
            _export("Icon", Icon = __decorate([Directive({
                selector: 'ion-icon',
                host: {
                    'role': 'img'
                }
            }), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object, typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object])], Icon));
        }
    };
});
"use strict";

System.register("ionic-angular/components/img/img", ["@angular/core", "../../util/dom", "../../util/util", "../../platform/platform"], function (_export, _context) {
    "use strict";

    var Component, Input, HostBinding, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, NgZone, nativeRaf, isPresent, Platform, _createClass, _typeof, __decorate, __metadata, Img, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function getUnitValue(val) {
        if (isPresent(val)) {
            if (typeof val === 'string') {
                if (val.indexOf('%') > -1 || val.indexOf('px') > -1) {
                    return val;
                }
                if (val.length) {
                    return val + 'px';
                }
            } else if (typeof val === 'number') {
                return val + 'px';
            }
        }
        return '';
    }
    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Input = _angularCore.Input;
            HostBinding = _angularCore.HostBinding;
            ElementRef = _angularCore.ElementRef;
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
            NgZone = _angularCore.NgZone;
        }, function (_utilDom) {
            nativeRaf = _utilDom.nativeRaf;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Img", Img = function () {
                function Img(_elementRef, _platform, _zone) {
                    _classCallCheck(this, Img);

                    this._elementRef = _elementRef;
                    this._platform = _platform;
                    this._zone = _zone;
                    this._src = '';
                    this._normalizeSrc = '';
                    this._imgs = [];
                    this._enabled = true;
                }

                _createClass(Img, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        this._init = true;
                        this._update();
                    }
                }, {
                    key: "_update",
                    value: function _update() {
                        var _this = this;

                        if (this._enabled && this._src !== '') {
                            // actively update the image
                            for (var i = this._imgs.length - 1; i >= 0; i--) {
                                if (this._imgs[i].src === this._normalizeSrc) {
                                    // this is the active image
                                    if (this._imgs[i].complete) {
                                        this._loaded(true);
                                    }
                                } else {
                                    // no longer the active image
                                    if (this._imgs[i].parentElement) {
                                        this._imgs[i].parentElement.removeChild(this._imgs[i]);
                                    }
                                    this._imgs.splice(i, 1);
                                }
                            }
                            if (!this._imgs.length) {
                                this._zone.runOutsideAngular(function () {
                                    var img = new Image();
                                    img.style.width = _this._width;
                                    img.style.height = _this._height;
                                    if (isPresent(_this.alt)) {
                                        img.alt = _this.alt;
                                    }
                                    if (isPresent(_this.title)) {
                                        img.title = _this.title;
                                    }
                                    img.addEventListener('load', function () {
                                        if (img.src === _this._normalizeSrc) {
                                            _this._elementRef.nativeElement.appendChild(img);
                                            nativeRaf(function () {
                                                _this._update();
                                            });
                                        }
                                    });
                                    img.src = _this._src;
                                    _this._imgs.push(img);
                                    _this._loaded(false);
                                });
                            }
                        } else {
                            // do not actively update the image
                            if (!this._imgs.some(function (img) {
                                return img.src === _this._normalizeSrc;
                            })) {
                                this._loaded(false);
                            }
                        }
                    }
                }, {
                    key: "_loaded",
                    value: function _loaded(isLoaded) {
                        this._elementRef.nativeElement.classList[isLoaded ? 'add' : 'remove']('img-loaded');
                    }
                }, {
                    key: "enable",
                    value: function enable(shouldEnable) {
                        this._enabled = shouldEnable;
                        this._update();
                    }
                }, {
                    key: "src",
                    set: function set(val) {
                        var tmpImg = new Image();
                        tmpImg.src = isPresent(val) ? val : '';
                        this._src = isPresent(val) ? val : '';
                        this._normalizeSrc = tmpImg.src;
                        if (this._init) {
                            this._update();
                        }
                    }
                }, {
                    key: "width",
                    set: function set(val) {
                        this._w = getUnitValue(val);
                    }
                }, {
                    key: "height",
                    set: function set(val) {
                        this._h = getUnitValue(val);
                    }
                }, {
                    key: "_width",
                    get: function get() {
                        return isPresent(this._w) ? this._w : '';
                    }
                }, {
                    key: "_height",
                    get: function get() {
                        return isPresent(this._h) ? this._h : '';
                    }
                }]);

                return Img;
            }());

            _export("Img", Img);

            __decorate([Input(), __metadata('design:type', String), __metadata('design:paramtypes', [String])], Img.prototype, "src", null);
            __decorate([Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Img.prototype, "width", null);
            __decorate([Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Img.prototype, "height", null);
            __decorate([Input(), __metadata('design:type', String)], Img.prototype, "alt", void 0);
            __decorate([Input(), __metadata('design:type', String)], Img.prototype, "title", void 0);
            __decorate([HostBinding('style.width'), __metadata('design:type', String)], Img.prototype, "_width", null);
            __decorate([HostBinding('style.height'), __metadata('design:type', String)], Img.prototype, "_height", null);
            _export("Img", Img = __decorate([Component({
                selector: 'ion-img',
                template: '<div class="img-placeholder" [style.height]="_h" [style.width]="_w"></div>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object, typeof (_b = typeof Platform !== 'undefined' && Platform) === 'function' && _b || Object, typeof (_c = typeof NgZone !== 'undefined' && NgZone) === 'function' && _c || Object])], Img));
        }
    };
});
"use strict";

System.register("ionic-angular/components/infinite-scroll/infinite-scroll-content", ["@angular/core", "../../config/config", "./infinite-scroll"], function (_export, _context) {
    "use strict";

    var Component, Input, ViewEncapsulation, Config, InfiniteScroll, _createClass, _typeof, __decorate, __metadata, InfiniteScrollContent, _a, _b;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Input = _angularCore.Input;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_infiniteScroll) {
            InfiniteScroll = _infiniteScroll.InfiniteScroll;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("InfiniteScrollContent", InfiniteScrollContent = function () {
                function InfiniteScrollContent(inf, _config) {
                    _classCallCheck(this, InfiniteScrollContent);

                    this.inf = inf;
                    this._config = _config;
                }
                /**
                 * @private
                 */


                _createClass(InfiniteScrollContent, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        if (!this.loadingSpinner) {
                            this.loadingSpinner = this._config.get('infiniteLoadingSpinner', this._config.get('spinner', 'ios'));
                        }
                    }
                }]);

                return InfiniteScrollContent;
            }());

            _export("InfiniteScrollContent", InfiniteScrollContent);

            __decorate([Input(), __metadata('design:type', String)], InfiniteScrollContent.prototype, "loadingSpinner", void 0);
            __decorate([Input(), __metadata('design:type', String)], InfiniteScrollContent.prototype, "loadingText", void 0);
            _export("InfiniteScrollContent", InfiniteScrollContent = __decorate([Component({
                selector: 'ion-infinite-scroll-content',
                template: '<div class="infinite-loading">' + '<div class="infinite-loading-spinner" *ngIf="loadingSpinner">' + '<ion-spinner [name]="loadingSpinner"></ion-spinner>' + '</div>' + '<div class="infinite-loading-text" [innerHTML]="loadingText" *ngIf="loadingText"></div>' + '</div>',
                host: {
                    '[attr.state]': 'inf.state'
                },
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof InfiniteScroll !== 'undefined' && InfiniteScroll) === 'function' && _a || Object, typeof (_b = typeof Config !== 'undefined' && Config) === 'function' && _b || Object])], InfiniteScrollContent));
        }
    };
});
"use strict";

System.register("ionic-angular/components/infinite-scroll/infinite-scroll", ["@angular/core", "../content/content"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, EventEmitter, Host, Input, NgZone, Output, Content, _createClass, _typeof, __decorate, __metadata, __param, InfiniteScroll, STATE_ENABLED, STATE_DISABLED, STATE_LOADING, _a, _b, _c, _d;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            Host = _angularCore.Host;
            Input = _angularCore.Input;
            NgZone = _angularCore.NgZone;
            Output = _angularCore.Output;
        }, function (_contentContent) {
            Content = _contentContent.Content;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("InfiniteScroll", InfiniteScroll = function () {
                function InfiniteScroll(_content, _zone, _elementRef) {
                    _classCallCheck(this, InfiniteScroll);

                    this._content = _content;
                    this._zone = _zone;
                    this._elementRef = _elementRef;
                    this._lastCheck = 0;
                    this._highestY = 0;
                    this._thr = '15%';
                    this._thrPx = 0;
                    this._thrPc = 0.15;
                    this._init = false;
                    this.state = STATE_ENABLED;
                    /**
                     * @output {event} The expression to call when the scroll reaches
                     * the threshold distance. From within your infinite handler,
                     * you must call the infinite scroll's `complete()` method when
                     * your async operation has completed.
                     */
                    this.ionInfinite = new EventEmitter();
                    _content.addCssClass('has-infinite-scroll');
                }
                /**
                 * @input {string} The threshold distance from the bottom
                 * of the content to call the `infinite` output event when scrolled.
                 * The threshold value can be either a percent, or
                 * in pixels. For example, use the value of `10%` for the `infinite`
                 * output event to get called when the user has scrolled 10%
                 * from the bottom of the page. Use the value `100px` when the
                 * scroll is within 100 pixels from the bottom of the page.
                 * Default is `15%`.
                 */


                _createClass(InfiniteScroll, [{
                    key: "_onScroll",
                    value: function _onScroll() {
                        var _this = this;

                        if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {
                            return 1;
                        }
                        var now = Date.now();
                        if (this._lastCheck + 32 > now) {
                            // no need to check less than every XXms
                            return 2;
                        }
                        this._lastCheck = now;
                        var infiniteHeight = this._elementRef.nativeElement.scrollHeight;
                        if (!infiniteHeight) {
                            // if there is no height of this element then do nothing
                            return 3;
                        }
                        var d = this._content.getContentDimensions();
                        var reloadY = d.contentHeight;
                        if (this._thrPc) {
                            reloadY += reloadY * this._thrPc;
                        } else {
                            reloadY += this._thrPx;
                        }
                        var distanceFromInfinite = d.scrollHeight - infiniteHeight - d.scrollTop - reloadY;
                        if (distanceFromInfinite < 0) {
                            this._zone.run(function () {
                                if (_this.state !== STATE_LOADING && _this.state !== STATE_DISABLED) {
                                    _this.state = STATE_LOADING;
                                    _this.ionInfinite.emit(_this);
                                }
                            });
                            return 5;
                        }
                        return 6;
                    }
                }, {
                    key: "complete",
                    value: function complete() {
                        this.state = STATE_ENABLED;
                    }
                }, {
                    key: "enable",
                    value: function enable(shouldEnable) {
                        this.state = shouldEnable ? STATE_ENABLED : STATE_DISABLED;
                        this._setListeners(shouldEnable);
                    }
                }, {
                    key: "_setListeners",
                    value: function _setListeners(shouldListen) {
                        var _this2 = this;

                        if (this._init) {
                            if (shouldListen) {
                                if (!this._scLsn) {
                                    this._zone.runOutsideAngular(function () {
                                        _this2._scLsn = _this2._content.addScrollListener(_this2._onScroll.bind(_this2));
                                    });
                                }
                            } else {
                                this._scLsn && this._scLsn();
                                this._scLsn = null;
                            }
                        }
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        this._init = true;
                        this._setListeners(this.state !== STATE_DISABLED);
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._setListeners(false);
                    }
                }, {
                    key: "threshold",
                    get: function get() {
                        return this._thr;
                    },
                    set: function set(val) {
                        this._thr = val;
                        if (val.indexOf('%') > -1) {
                            this._thrPx = 0;
                            this._thrPc = parseFloat(val) / 100;
                        } else {
                            this._thrPx = parseFloat(val);
                            this._thrPc = 0;
                        }
                    }
                }]);

                return InfiniteScroll;
            }());

            _export("InfiniteScroll", InfiniteScroll);

            __decorate([Input(), __metadata('design:type', String)], InfiniteScroll.prototype, "threshold", null);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], InfiniteScroll.prototype, "ionInfinite", void 0);
            _export("InfiniteScroll", InfiniteScroll = __decorate([Directive({
                selector: 'ion-infinite-scroll'
            }), __param(0, Host()), __metadata('design:paramtypes', [typeof (_b = typeof Content !== 'undefined' && Content) === 'function' && _b || Object, typeof (_c = typeof NgZone !== 'undefined' && NgZone) === 'function' && _c || Object, typeof (_d = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _d || Object])], InfiniteScroll));
            STATE_ENABLED = 'enabled';
            STATE_DISABLED = 'disabled';
            STATE_LOADING = 'loading';
        }
    };
});
"use strict";

System.register("ionic-angular/components/input/input-base", ["@angular/core", "../../util/util", "../../util/dom", "./native-input"], function (_export, _context) {
    "use strict";

    var Input, Output, EventEmitter, ViewChild, isTrueProperty, pointerCoord, hasPointerMoved, closest, copyInputAttributes, NativeInput, NextInput, _createClass, _typeof, __decorate, __metadata, InputBase, SCROLL_ASSIST_SPEED, _a, _b, _c, _d, _e, _f, _g;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function getScrollAssistDuration(distanceToScroll) {
        distanceToScroll = Math.abs(distanceToScroll);
        var duration = distanceToScroll / SCROLL_ASSIST_SPEED;
        return Math.min(400, Math.max(150, duration));
    }
    return {
        setters: [function (_angularCore) {
            Input = _angularCore.Input;
            Output = _angularCore.Output;
            EventEmitter = _angularCore.EventEmitter;
            ViewChild = _angularCore.ViewChild;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_utilDom) {
            pointerCoord = _utilDom.pointerCoord;
            hasPointerMoved = _utilDom.hasPointerMoved;
            closest = _utilDom.closest;
            copyInputAttributes = _utilDom.copyInputAttributes;
        }, function (_nativeInput) {
            NativeInput = _nativeInput.NativeInput;
            NextInput = _nativeInput.NextInput;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("InputBase", InputBase = function () {
                function InputBase(config, _form, _item, _app, _platform, _elementRef, _scrollView, _nav, ngControl) {
                    _classCallCheck(this, InputBase);

                    this._form = _form;
                    this._item = _item;
                    this._app = _app;
                    this._platform = _platform;
                    this._elementRef = _elementRef;
                    this._scrollView = _scrollView;
                    this._nav = _nav;
                    this._disabled = false;
                    this._type = 'text';
                    this._value = '';
                    this.placeholder = '';
                    this.blur = new EventEmitter();
                    this.focus = new EventEmitter();
                    this._useAssist = config.getBoolean('scrollAssist', false);
                    this._usePadding = config.getBoolean('scrollPadding', this._useAssist);
                    this._keyboardHeight = config.getNumber('keyboardHeight');
                    this._autoFocusAssist = config.get('autoFocusAssist', 'delay');
                    this._autoComplete = config.get('autocomplete', 'off');
                    this._autoCorrect = config.get('autocorrect', 'off');
                    if (ngControl) {
                        ngControl.valueAccessor = this;
                        this.inputControl = ngControl;
                    }
                    _form.register(this);
                }

                _createClass(InputBase, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        if (this._item) {
                            this._item.setCssClass('item-input', true);
                            this._item.registerInput(this._type);
                        }
                        var clearInput = this.clearInput;
                        if (typeof clearInput === 'string') {
                            this.clearInput = clearInput === '' || clearInput === 'true';
                        }
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        var self = this;
                        self._scrollMove = function (ev) {
                            // scroll move event listener this instance can reuse
                            if (!(self._nav && self._nav.isTransitioning())) {
                                self.deregScrollMove();
                                if (self.hasFocus()) {
                                    self._native.hideFocus(true);
                                    self._scrollView.onScrollEnd(function () {
                                        self._native.hideFocus(false);
                                        if (self.hasFocus()) {
                                            // if it still has focus then keep listening
                                            self.regScrollMove();
                                        }
                                    });
                                }
                            }
                        };
                        this.setItemInputControlCss();
                    }
                }, {
                    key: "ngAfterContentChecked",
                    value: function ngAfterContentChecked() {
                        this.setItemInputControlCss();
                    }
                }, {
                    key: "setItemInputControlCss",
                    value: function setItemInputControlCss() {
                        var item = this._item;
                        var nativeInput = this._native;
                        var inputControl = this.inputControl;
                        // Set the control classes on the item
                        if (item && inputControl) {
                            this.setControlCss(item, inputControl);
                        }
                        // Set the control classes on the native input
                        if (nativeInput && inputControl) {
                            this.setControlCss(nativeInput, inputControl);
                        }
                    }
                }, {
                    key: "setControlCss",
                    value: function setControlCss(element, control) {
                        element.setCssClass('ng-untouched', control.untouched);
                        element.setCssClass('ng-touched', control.touched);
                        element.setCssClass('ng-pristine', control.pristine);
                        element.setCssClass('ng-dirty', control.dirty);
                        element.setCssClass('ng-valid', control.valid);
                        element.setCssClass('ng-invalid', !control.valid);
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._form.deregister(this);
                    }
                }, {
                    key: "writeValue",
                    value: function writeValue(val) {
                        this._value = val;
                        this.checkHasValue(val);
                    }
                }, {
                    key: "onChange",
                    value: function onChange(val) {
                        this.checkHasValue(val);
                    }
                }, {
                    key: "onTouched",
                    value: function onTouched(val) {}
                }, {
                    key: "hasFocus",
                    value: function hasFocus() {
                        // check if an input has focus or not
                        return this._native.hasFocus();
                    }
                }, {
                    key: "checkHasValue",
                    value: function checkHasValue(inputValue) {
                        if (this._item) {
                            this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
                        }
                    }
                }, {
                    key: "focusChange",
                    value: function focusChange(inputHasFocus) {
                        if (this._item) {
                            this._item.setCssClass('input-has-focus', inputHasFocus);
                        }
                        if (!inputHasFocus) {
                            this.deregScrollMove();
                        }
                    }
                }, {
                    key: "pointerStart",
                    value: function pointerStart(ev) {
                        // input cover touchstart
                        console.debug('scroll assist pointerStart', ev.type);
                        if (ev.type === 'touchstart') {
                            this._isTouch = true;
                        }
                        if ((this._isTouch || !this._isTouch && ev.type === 'mousedown') && this._app.isEnabled()) {
                            // remember where the touchstart/mousedown started
                            this._coord = pointerCoord(ev);
                        }
                    }
                }, {
                    key: "pointerEnd",
                    value: function pointerEnd(ev) {
                        // input cover touchend/mouseup
                        console.debug('scroll assist pointerEnd', ev.type);
                        if (this._isTouch && ev.type === 'mouseup' || !this._app.isEnabled()) {
                            // the app is actively doing something right now
                            // don't try to scroll in the input
                            ev.preventDefault();
                            ev.stopPropagation();
                        } else if (this._coord) {
                            // get where the touchend/mouseup ended
                            var endCoord = pointerCoord(ev);
                            // focus this input if the pointer hasn't moved XX pixels
                            // and the input doesn't already have focus
                            if (!hasPointerMoved(8, this._coord, endCoord) && !this.hasFocus()) {
                                ev.preventDefault();
                                ev.stopPropagation();
                                // begin the input focus process
                                console.debug('initFocus', ev.type);
                                this.initFocus();
                            }
                        }
                        this._coord = null;
                    }
                }, {
                    key: "initFocus",
                    value: function initFocus() {
                        var _this = this;

                        // begin the process of setting focus to the inner input element
                        var scrollView = this._scrollView;
                        if (scrollView) {
                            // this input is inside of a scroll view
                            // find out if text input should be manually scrolled into view
                            // get container of this input, probably an ion-item a few nodes up
                            var ele = this._elementRef.nativeElement;
                            ele = closest(ele, 'ion-item,[ion-item]') || ele;
                            var scrollData = InputBase.getScrollData(ele.offsetTop, ele.offsetHeight, scrollView.getContentDimensions(), this._keyboardHeight, this._platform.height());
                            if (scrollData.scrollAmount > -3 && scrollData.scrollAmount < 3) {
                                // the text input is in a safe position that doesn't
                                // require it to be scrolled into view, just set focus now
                                this.setFocus();
                                this.regScrollMove();
                                return;
                            }
                            if (this._usePadding) {
                                // add padding to the bottom of the scroll view (if needed)
                                scrollView.addScrollPadding(scrollData.scrollPadding);
                            }
                            // manually scroll the text input to the top
                            // do not allow any clicks while it's scrolling
                            var scrollDuration = getScrollAssistDuration(scrollData.scrollAmount);
                            this._app.setEnabled(false, scrollDuration);
                            this._nav && this._nav.setTransitioning(true, scrollDuration);
                            // temporarily move the focus to the focus holder so the browser
                            // doesn't freak out while it's trying to get the input in place
                            // at this point the native text input still does not have focus
                            this._native.beginFocus(true, scrollData.inputSafeY);
                            // scroll the input into place
                            scrollView.scrollTo(0, scrollData.scrollTo, scrollDuration).then(function () {
                                // the scroll view is in the correct position now
                                // give the native text input focus
                                _this._native.beginFocus(false, 0);
                                // ensure this is the focused input
                                _this.setFocus();
                                // all good, allow clicks again
                                _this._app.setEnabled(true);
                                _this._nav && _this._nav.setTransitioning(false);
                                _this.regScrollMove();
                                if (_this._usePadding) {
                                    _this._scrollView.clearScrollPaddingFocusOut();
                                }
                            });
                        } else {
                            // not inside of a scroll view, just focus it
                            this.setFocus();
                            this.regScrollMove();
                        }
                    }
                }, {
                    key: "setFocus",
                    value: function setFocus() {
                        // immediately set focus
                        this._form.setAsFocused(this);
                        // set focus on the actual input element
                        console.debug("input-base, setFocus " + this._native.element().value);
                        this._native.setFocus();
                        // ensure the body hasn't scrolled down
                        document.body.scrollTop = 0;
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        this.onChange = fn;
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "regScrollMove",
                    value: function regScrollMove() {
                        var _this2 = this;

                        // register scroll move listener
                        if (this._useAssist && this._scrollView) {
                            setTimeout(function () {
                                _this2.deregScrollMove();
                                _this2._deregScroll = _this2._scrollView.addScrollListener(_this2._scrollMove);
                            }, 80);
                        }
                    }
                }, {
                    key: "deregScrollMove",
                    value: function deregScrollMove() {
                        // deregister the scroll move listener
                        this._deregScroll && this._deregScroll();
                    }
                }, {
                    key: "focusNext",
                    value: function focusNext() {
                        this._form.tabFocus(this);
                    }
                }, {
                    key: "value",
                    get: function get() {
                        return this._value;
                    },
                    set: function set(val) {
                        this._value = val;
                        this.checkHasValue(val);
                    }
                }, {
                    key: "type",
                    get: function get() {
                        return this._type;
                    },
                    set: function set(val) {
                        this._type = 'text';
                        if (val) {
                            val = val.toLowerCase();
                            if (/password|email|number|search|tel|url|date|month|time|week/.test(val)) {
                                this._type = val;
                            }
                        }
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this._item && this._item.setCssClass('item-input-disabled', this._disabled);
                        this._native && this._native.isDisabled(this._disabled);
                    }
                }, {
                    key: "_nativeInput",
                    set: function set(nativeInput) {
                        var _this3 = this;

                        this._native = nativeInput;
                        if (this._item && this._item.labelId !== null) {
                            nativeInput.labelledBy(this._item.labelId);
                        }
                        nativeInput.valueChange.subscribe(function (inputValue) {
                            _this3.onChange(inputValue);
                        });
                        this.focusChange(this.hasFocus());
                        nativeInput.focusChange.subscribe(function (textInputHasFocus) {
                            _this3.focusChange(textInputHasFocus);
                            _this3.checkHasValue(nativeInput.getValue());
                            if (!textInputHasFocus) {
                                _this3.onTouched(textInputHasFocus);
                            }
                        });
                        this.checkHasValue(nativeInput.getValue());
                        this.disabled = this._disabled;
                        var ionInputEle = this._elementRef.nativeElement;
                        var nativeInputEle = nativeInput.element();
                        // copy ion-input attributes to the native input element
                        copyInputAttributes(ionInputEle, nativeInputEle);
                        if (ionInputEle.hasAttribute('autofocus')) {
                            // the ion-input element has the autofocus attributes
                            ionInputEle.removeAttribute('autofocus');
                            if (this._autoFocusAssist === 'immediate') {
                                // config says to immediate focus on the input
                                // works best on android devices
                                nativeInputEle.focus();
                            } else if (this._autoFocusAssist === 'delay') {
                                // config says to chill out a bit and focus on the input after transitions
                                // works best on desktop
                                setTimeout(function () {
                                    nativeInputEle.focus();
                                }, 650);
                            }
                        }
                        // by default set autocomplete="off" unless specified by the input
                        if (ionInputEle.hasAttribute('autocomplete')) {
                            this._autoComplete = ionInputEle.getAttribute('autocomplete');
                        }
                        nativeInputEle.setAttribute('autocomplete', this._autoComplete);
                        // by default set autocorrect="off" unless specified by the input
                        if (ionInputEle.hasAttribute('autocorrect')) {
                            this._autoCorrect = ionInputEle.getAttribute('autocorrect');
                        }
                        nativeInputEle.setAttribute('autocorrect', this._autoCorrect);
                    }
                }, {
                    key: "_nextInput",
                    set: function set(nextInput) {
                        var _this4 = this;

                        if (nextInput) {
                            nextInput.focused.subscribe(function () {
                                _this4._form.tabFocus(_this4);
                            });
                        }
                    }
                }], [{
                    key: "getScrollData",
                    value: function getScrollData(inputOffsetTop, inputOffsetHeight, scrollViewDimensions, keyboardHeight, plaformHeight) {
                        // compute input's Y values relative to the body
                        var inputTop = inputOffsetTop + scrollViewDimensions.contentTop - scrollViewDimensions.scrollTop;
                        var inputBottom = inputTop + inputOffsetHeight;
                        // compute the safe area which is the viewable content area when the soft keyboard is up
                        var safeAreaTop = scrollViewDimensions.contentTop;
                        var safeAreaHeight = plaformHeight - keyboardHeight - safeAreaTop;
                        safeAreaHeight /= 2;
                        var safeAreaBottom = safeAreaTop + safeAreaHeight;
                        var inputTopWithinSafeArea = inputTop >= safeAreaTop && inputTop <= safeAreaBottom;
                        var inputTopAboveSafeArea = inputTop < safeAreaTop;
                        var inputTopBelowSafeArea = inputTop > safeAreaBottom;
                        var inputBottomWithinSafeArea = inputBottom >= safeAreaTop && inputBottom <= safeAreaBottom;
                        var inputBottomBelowSafeArea = inputBottom > safeAreaBottom;
                        /*
                        Text Input Scroll To Scenarios
                        ---------------------------------------
                        1) Input top within safe area, bottom within safe area
                        2) Input top within safe area, bottom below safe area, room to scroll
                        3) Input top above safe area, bottom within safe area, room to scroll
                        4) Input top below safe area, no room to scroll, input smaller than safe area
                        5) Input top within safe area, bottom below safe area, no room to scroll, input smaller than safe area
                        6) Input top within safe area, bottom below safe area, no room to scroll, input larger than safe area
                        7) Input top below safe area, no room to scroll, input larger than safe area
                        */
                        var scrollData = {
                            scrollAmount: 0,
                            scrollTo: 0,
                            scrollPadding: 0,
                            inputSafeY: 0
                        };
                        if (inputTopWithinSafeArea && inputBottomWithinSafeArea) {
                            // Input top within safe area, bottom within safe area
                            // no need to scroll to a position, it's good as-is
                            return scrollData;
                        }
                        // looks like we'll have to do some auto-scrolling
                        if (inputTopBelowSafeArea || inputBottomBelowSafeArea) {
                            // Input top and bottom below safe area
                            // auto scroll the input up so at least the top of it shows
                            if (safeAreaHeight > inputOffsetHeight) {
                                // safe area height is taller than the input height, so we
                                // can bring it up the input just enough to show the input bottom
                                scrollData.scrollAmount = Math.round(safeAreaBottom - inputBottom);
                            } else {
                                // safe area height is smaller than the input height, so we can
                                // only scroll it up so the input top is at the top of the safe area
                                // however the input bottom will be below the safe area
                                scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
                            }
                            scrollData.inputSafeY = -(inputTop - safeAreaTop) + 4;
                        } else if (inputTopAboveSafeArea) {
                            // Input top above safe area
                            // auto scroll the input down so at least the top of it shows
                            scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
                            scrollData.inputSafeY = safeAreaTop - inputTop + 4;
                        }
                        // figure out where it should scroll to for the best position to the input
                        scrollData.scrollTo = scrollViewDimensions.scrollTop - scrollData.scrollAmount;
                        if (scrollData.scrollAmount < 0) {
                            // when auto-scrolling up, there also needs to be enough
                            // content padding at the bottom of the scroll view
                            // manually add it if there isn't enough scrollable area
                            // figure out how many scrollable area is left to scroll up
                            var availablePadding = scrollViewDimensions.scrollHeight - scrollViewDimensions.scrollTop - scrollViewDimensions.contentHeight;
                            var paddingSpace = availablePadding + scrollData.scrollAmount;
                            if (paddingSpace < 0) {
                                // there's not enough scrollable area at the bottom, so manually add more
                                scrollData.scrollPadding = scrollViewDimensions.contentHeight - safeAreaHeight;
                            }
                        }
                        // if (!window.safeAreaEle) {
                        //   window.safeAreaEle = document.createElement('div');
                        //   window.safeAreaEle.style.position = 'absolute';
                        //   window.safeAreaEle.style.background = 'rgba(0, 128, 0, 0.7)';
                        //   window.safeAreaEle.style.padding = '2px 5px';
                        //   window.safeAreaEle.style.textShadow = '1px 1px white';
                        //   window.safeAreaEle.style.left = '0px';
                        //   window.safeAreaEle.style.right = '0px';
                        //   window.safeAreaEle.style.fontWeight = 'bold';
                        //   window.safeAreaEle.style.pointerEvents = 'none';
                        //   document.body.appendChild(window.safeAreaEle);
                        // }
                        // window.safeAreaEle.style.top = safeAreaTop + 'px';
                        // window.safeAreaEle.style.height = safeAreaHeight + 'px';
                        // window.safeAreaEle.innerHTML = `
                        //   <div>scrollTo: ${scrollData.scrollTo}</div>
                        //   <div>scrollAmount: ${scrollData.scrollAmount}</div>
                        //   <div>scrollPadding: ${scrollData.scrollPadding}</div>
                        //   <div>inputSafeY: ${scrollData.inputSafeY}</div>
                        //   <div>scrollHeight: ${scrollViewDimensions.scrollHeight}</div>
                        //   <div>scrollTop: ${scrollViewDimensions.scrollTop}</div>
                        //   <div>contentHeight: ${scrollViewDimensions.contentHeight}</div>
                        // `;
                        return scrollData;
                    }
                }]);

                return InputBase;
            }());

            _export("InputBase", InputBase);

            __decorate([Input(), __metadata('design:type', Object)], InputBase.prototype, "clearInput", void 0);
            __decorate([Input(), __metadata('design:type', String)], InputBase.prototype, "placeholder", void 0);
            __decorate([ViewChild(NativeInput), __metadata('design:type', typeof (_a = typeof NativeInput !== 'undefined' && NativeInput) === 'function' && _a || Object)], InputBase.prototype, "_native", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], InputBase.prototype, "blur", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_c = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _c || Object)], InputBase.prototype, "focus", void 0);
            __decorate([Input(), __metadata('design:type', Object)], InputBase.prototype, "value", null);
            __decorate([Input(), __metadata('design:type', Object)], InputBase.prototype, "type", null);
            __decorate([Input(), __metadata('design:type', Object)], InputBase.prototype, "disabled", null);
            __decorate([ViewChild(NativeInput), __metadata('design:type', typeof (_d = typeof NativeInput !== 'undefined' && NativeInput) === 'function' && _d || Object), __metadata('design:paramtypes', [typeof (_e = typeof NativeInput !== 'undefined' && NativeInput) === 'function' && _e || Object])], InputBase.prototype, "_nativeInput", null);
            __decorate([ViewChild(NextInput), __metadata('design:type', typeof (_f = typeof NextInput !== 'undefined' && NextInput) === 'function' && _f || Object), __metadata('design:paramtypes', [typeof (_g = typeof NextInput !== 'undefined' && NextInput) === 'function' && _g || Object])], InputBase.prototype, "_nextInput", null);
            SCROLL_ASSIST_SPEED = 0.3;
        }
    };
});
"use strict";

System.register("ionic-angular/components/input/input", ["@angular/core", "@angular/common", "../app/app", "../../config/config", "../content/content", "../../util/form", "./input-base", "../item/item", "./native-input", "../nav/nav-controller", "../../platform/platform"], function (_export, _context) {
    "use strict";

    var Component, Optional, ElementRef, ViewEncapsulation, NgControl, App, Config, Content, Form, InputBase, Item, NativeInput, NextInput, NavController, Platform, _get, _createClass, _typeof, __decorate, __metadata, __param, TextInput, TextArea, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Optional = _angularCore.Optional;
            ElementRef = _angularCore.ElementRef;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NgControl = _angularCommon.NgControl;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_contentContent) {
            Content = _contentContent.Content;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_inputBase) {
            InputBase = _inputBase.InputBase;
        }, function (_itemItem) {
            Item = _itemItem.Item;
        }, function (_nativeInput) {
            NativeInput = _nativeInput.NativeInput;
            NextInput = _nativeInput.NextInput;
        }, function (_navNavController) {
            NavController = _navNavController.NavController;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }],
        execute: function () {
            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("TextInput", TextInput = function (_InputBase) {
                _inherits(TextInput, _InputBase);

                function TextInput(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
                    _classCallCheck(this, TextInput);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(TextInput).call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl));
                }
                /**
                 * @private
                 */


                _createClass(TextInput, [{
                    key: "inputBlurred",
                    value: function inputBlurred(ev) {
                        this.blur.emit(ev);
                    }
                }, {
                    key: "inputFocused",
                    value: function inputFocused(ev) {
                        this.focus.emit(ev);
                    }
                }, {
                    key: "clearTextInput",
                    value: function clearTextInput() {
                        console.debug('Should clear input');
                        this._value = '';
                        this.onChange(this._value);
                        this.writeValue(this._value);
                    }
                }]);

                return TextInput;
            }(InputBase));

            _export("TextInput", TextInput);

            _export("TextInput", TextInput = __decorate([Component({
                selector: 'ion-input',
                template: '<input [type]="type" [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input">' + '<input [type]="type" aria-hidden="true" next-input *ngIf="_useAssist">' + '<button clear [hidden]="!clearInput" type="button" class="text-input-clear-icon" (click)="clearTextInput()" (mousedown)="clearTextInput()"></button>' + '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
                directives: [NextInput, NativeInput],
                encapsulation: ViewEncapsulation.None
            }), __param(2, Optional()), __param(6, Optional()), __param(7, Optional()), __param(8, Optional()), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object, typeof (_b = typeof Form !== 'undefined' && Form) === 'function' && _b || Object, typeof (_c = typeof Item !== 'undefined' && Item) === 'function' && _c || Object, typeof (_d = typeof App !== 'undefined' && App) === 'function' && _d || Object, typeof (_e = typeof Platform !== 'undefined' && Platform) === 'function' && _e || Object, typeof (_f = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _f || Object, typeof (_g = typeof Content !== 'undefined' && Content) === 'function' && _g || Object, typeof (_h = typeof NavController !== 'undefined' && NavController) === 'function' && _h || Object, typeof (_j = typeof NgControl !== 'undefined' && NgControl) === 'function' && _j || Object])], TextInput));
            /**
             * @name TextArea
             * @description
             *
             * `ion-textarea` is is used for multi-line text inputs. Ionic still
             * uses an actual `<textarea>` HTML element within the component;
             * however, with Ionic wrapping the native HTML text area element, Ionic
             * is able to better handle the user experience and interactivity.
             *
             * Not that `<ion-textarea>` must load its value from the `value` or
             * `[(ngModel)]` attribute. Unlike the native `<textarea>` element,
             * `<ion-textarea>` does not support loading its value from the
             * textarea's inner content.
             *
             * When requiring only a single-line text input, we recommend using
             * `<ion-input>` instead.
             *
             * @usage
             * ```html
             *  <ion-item>
             *    <ion-label>Comments</ion-label>
             *    <ion-textarea></ion-textarea>
             *  </ion-item>
             *
             *  <ion-item>
             *    <ion-label stacked>Message</ion-label>
             *    <ion-textarea [(ngModel)]="msg"></ion-textarea>
             *  </ion-item>
             *
             *  <ion-item>
             *    <ion-label floating>Description</ion-label>
             *    <ion-textarea></ion-textarea>
             *  </ion-item>
             * ```
             *
             * @demo /docs/v2/demos/textarea/
             */

            _export("TextArea", TextArea = function (_InputBase2) {
                _inherits(TextArea, _InputBase2);

                function TextArea(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
                    _classCallCheck(this, TextArea);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(TextArea).call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl));
                }
                /**
                 * @private
                 */


                _createClass(TextArea, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        _get(Object.getPrototypeOf(TextArea.prototype), "ngOnInit", this).call(this);
                        if (this._item) {
                            this._item.setCssClass('item-textarea', true);
                        }
                    }
                }, {
                    key: "inputBlurred",
                    value: function inputBlurred(ev) {
                        this.blur.emit(ev);
                    }
                }, {
                    key: "inputFocused",
                    value: function inputFocused(ev) {
                        this.focus.emit(ev);
                    }
                }]);

                return TextArea;
            }(InputBase));

            _export("TextArea", TextArea);

            _export("TextArea", TextArea = __decorate([Component({
                selector: 'ion-textarea',
                template: '<textarea [(ngModel)]="_value" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" [placeholder]="placeholder" class="text-input"></textarea>' + '<input type="text" aria-hidden="true" next-input *ngIf="_useAssist">' + '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
                directives: [NextInput, NativeInput],
                encapsulation: ViewEncapsulation.None
            }), __param(2, Optional()), __param(6, Optional()), __param(7, Optional()), __param(8, Optional()), __metadata('design:paramtypes', [typeof (_k = typeof Config !== 'undefined' && Config) === 'function' && _k || Object, typeof (_l = typeof Form !== 'undefined' && Form) === 'function' && _l || Object, typeof (_m = typeof Item !== 'undefined' && Item) === 'function' && _m || Object, typeof (_o = typeof App !== 'undefined' && App) === 'function' && _o || Object, typeof (_p = typeof Platform !== 'undefined' && Platform) === 'function' && _p || Object, typeof (_q = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _q || Object, typeof (_r = typeof Content !== 'undefined' && Content) === 'function' && _r || Object, typeof (_s = typeof NavController !== 'undefined' && NavController) === 'function' && _s || Object, typeof (_t = typeof NgControl !== 'undefined' && NgControl) === 'function' && _t || Object])], TextArea));
        }
    };
});
"use strict";

System.register("ionic-angular/components/input/native-input", ["@angular/core", "@angular/common", "../../config/config", "../../util/dom"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, EventEmitter, HostListener, Output, Renderer, NgControl, Config, CSS, _hasFocus, _createClass, _typeof, __decorate, __metadata, NativeInput, NextInput, _a, _b, _c, _d, _e, _f, _g;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function cloneInput(focusedInputEle, addCssClass) {
        var clonedInputEle = focusedInputEle.cloneNode(true);
        clonedInputEle.classList.add('cloned-input');
        clonedInputEle.classList.add(addCssClass);
        clonedInputEle.setAttribute('aria-hidden', true);
        clonedInputEle.removeAttribute('aria-labelledby');
        clonedInputEle.tabIndex = -1;
        clonedInputEle.style.width = focusedInputEle.offsetWidth + 10 + 'px';
        clonedInputEle.style.height = focusedInputEle.offsetHeight + 'px';
        clonedInputEle.value = focusedInputEle.value;
        return clonedInputEle;
    }
    function removeClone(focusedInputEle, queryCssClass) {
        var clonedInputEle = focusedInputEle.parentElement.querySelector('.' + queryCssClass);
        if (clonedInputEle) {
            clonedInputEle.parentNode.removeChild(clonedInputEle);
        }
    }
    /**
     * @private
     */
    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            HostListener = _angularCore.HostListener;
            Output = _angularCore.Output;
            Renderer = _angularCore.Renderer;
        }, function (_angularCommon) {
            NgControl = _angularCommon.NgControl;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilDom) {
            CSS = _utilDom.CSS;
            _hasFocus = _utilDom.hasFocus;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("NativeInput", NativeInput = function () {
                function NativeInput(_elementRef, _renderer, config, ngControl) {
                    _classCallCheck(this, NativeInput);

                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this.ngControl = ngControl;
                    this.focusChange = new EventEmitter();
                    this.valueChange = new EventEmitter();
                    this._clone = config.getBoolean('inputCloning', false);
                    this._blurring = config.getBoolean('inputBlurring', false);
                }

                _createClass(NativeInput, [{
                    key: "_change",
                    value: function _change(ev) {
                        this.valueChange.emit(ev.target.value);
                    }
                }, {
                    key: "_focus",
                    value: function _focus() {
                        var self = this;
                        self.focusChange.emit(true);
                        function docTouchEnd(ev) {
                            var tapped = ev.target;
                            if (tapped && self.element()) {
                                if (tapped.tagName !== 'INPUT' && tapped.tagName !== 'TEXTAREA' && !tapped.classList.contains('input-cover')) {
                                    self.element().blur();
                                }
                            }
                        }
                        if (self._blurring) {
                            // automatically blur input if:
                            // 1) this input has focus
                            // 2) the newly tapped document element is not an input
                            console.debug('input blurring enabled');
                            document.addEventListener('touchend', docTouchEnd, true);
                            self._unrefBlur = function () {
                                console.debug('input blurring disabled');
                                document.removeEventListener('touchend', docTouchEnd, true);
                            };
                        }
                    }
                }, {
                    key: "_blur",
                    value: function _blur() {
                        this.focusChange.emit(false);
                        this.hideFocus(false);
                        this._unrefBlur && this._unrefBlur();
                        this._unrefBlur = null;
                    }
                }, {
                    key: "labelledBy",
                    value: function labelledBy(val) {
                        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-labelledby', val);
                    }
                }, {
                    key: "isDisabled",
                    value: function isDisabled(val) {
                        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'disabled', val ? '' : null);
                    }
                }, {
                    key: "setFocus",
                    value: function setFocus() {
                        // let's set focus to the element
                        // but only if it does not already have focus
                        if (document.activeElement !== this.element()) {
                            this.element().focus();
                        }
                    }
                }, {
                    key: "beginFocus",
                    value: function beginFocus(shouldFocus, inputRelativeY) {
                        if (this._relocated !== shouldFocus) {
                            var focusedInputEle = this.element();
                            if (shouldFocus) {
                                // we should focus into this element
                                if (this._clone) {
                                    // this platform needs the input to be cloned
                                    // this allows for the actual input to receive the focus from
                                    // the user's touch event, but before it receives focus, it
                                    // moves the actual input to a location that will not screw
                                    // up the app's layout, and does not allow the native browser
                                    // to attempt to scroll the input into place (messing up headers/footers)
                                    // the cloned input fills the area of where native input should be
                                    // while the native input fakes out the browser by relocating itself
                                    // before it receives the actual focus event
                                    var clonedInputEle = cloneInput(focusedInputEle, 'cloned-focus');
                                    focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
                                    // move the native input to a location safe to receive focus
                                    // according to the browser, the native input receives focus in an
                                    // area which doesn't require the browser to scroll the input into place
                                    focusedInputEle.style[CSS.transform] = "translate3d(-9999px," + inputRelativeY + "px,0)";
                                    focusedInputEle.style.opacity = '0';
                                }
                                // let's now set focus to the actual native element
                                // at this point it is safe to assume the browser will not attempt
                                // to scroll the input into view itself (screwing up headers/footers)
                                this.setFocus();
                                if (this._clone) {
                                    focusedInputEle.classList.add('cloned-active');
                                }
                            } else {
                                // should remove the focus
                                if (this._clone) {
                                    // should remove the cloned node
                                    focusedInputEle.classList.remove('cloned-active');
                                    focusedInputEle.style[CSS.transform] = '';
                                    focusedInputEle.style.opacity = '';
                                    removeClone(focusedInputEle, 'cloned-focus');
                                }
                            }
                            this._relocated = shouldFocus;
                        }
                    }
                }, {
                    key: "hideFocus",
                    value: function hideFocus(shouldHideFocus) {
                        var focusedInputEle = this.element();
                        console.debug("native input hideFocus, shouldHideFocus: " + shouldHideFocus + ", input value: " + focusedInputEle.value);
                        if (shouldHideFocus) {
                            var clonedInputEle = cloneInput(focusedInputEle, 'cloned-move');
                            focusedInputEle.classList.add('cloned-active');
                            focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
                        } else {
                            focusedInputEle.classList.remove('cloned-active');
                            removeClone(focusedInputEle, 'cloned-move');
                        }
                    }
                }, {
                    key: "hasFocus",
                    value: function hasFocus() {
                        return _hasFocus(this.element());
                    }
                }, {
                    key: "getValue",
                    value: function getValue() {
                        return this.element().value;
                    }
                }, {
                    key: "setCssClass",
                    value: function setCssClass(cssClass, shouldAdd) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
                    }
                }, {
                    key: "element",
                    value: function element() {
                        return this._elementRef.nativeElement;
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._unrefBlur && this._unrefBlur();
                    }
                }]);

                return NativeInput;
            }());

            _export("NativeInput", NativeInput);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], NativeInput.prototype, "focusChange", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], NativeInput.prototype, "valueChange", void 0);
            __decorate([HostListener('input', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], NativeInput.prototype, "_change", null);
            __decorate([HostListener('focus'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], NativeInput.prototype, "_focus", null);
            __decorate([HostListener('blur'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], NativeInput.prototype, "_blur", null);
            _export("NativeInput", NativeInput = __decorate([Directive({
                selector: '.text-input'
            }), __metadata('design:paramtypes', [typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object, typeof (_d = typeof Renderer !== 'undefined' && Renderer) === 'function' && _d || Object, typeof (_e = typeof Config !== 'undefined' && Config) === 'function' && _e || Object, typeof (_f = typeof NgControl !== 'undefined' && NgControl) === 'function' && _f || Object])], NativeInput));
            _export("NextInput", NextInput = function () {
                function NextInput() {
                    _classCallCheck(this, NextInput);

                    this.focused = new EventEmitter();
                }

                _createClass(NextInput, [{
                    key: "receivedFocus",
                    value: function receivedFocus() {
                        console.debug('native-input, next-input received focus');
                        this.focused.emit(true);
                    }
                }]);

                return NextInput;
            }());

            _export("NextInput", NextInput);

            __decorate([Output(), __metadata('design:type', typeof (_g = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _g || Object)], NextInput.prototype, "focused", void 0);
            __decorate([HostListener('focus'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], NextInput.prototype, "receivedFocus", null);
            _export("NextInput", NextInput = __decorate([Directive({
                selector: '[next-input]'
            }), __metadata('design:paramtypes', [])], NextInput));
        }
    };
});
'use strict';

System.register('ionic-angular/components/item/item-reorder-gesture', ['../../util/ui-event-manager', '../../util/dom'], function (_export, _context) {
    "use strict";

    var UIEventManager, pointerCoord, CSS, _createClass, AUTO_SCROLL_MARGIN, SCROLL_JUMP, ITEM_REORDER_ACTIVE, ItemReorderGesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function itemForPosition(x, y) {
        var element = document.elementFromPoint(x, y);
        if (!element) {
            return null;
        }
        if (element.nodeName !== 'ION-ITEM' && !element.hasAttribute('ion-item')) {
            return null;
        }
        if (indexForItem(element)) {
            return element;
        }
        var parent = element.parentNode;
        if (indexForItem(parent)) {
            return parent;
        }
        return null;
    }
    function indexForItem(element) {
        return element['$ionIndex'];
    }
    return {
        setters: [function (_utilUiEventManager) {
            UIEventManager = _utilUiEventManager.UIEventManager;
        }, function (_utilDom) {
            pointerCoord = _utilDom.pointerCoord;
            CSS = _utilDom.CSS;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            AUTO_SCROLL_MARGIN = 60;
            SCROLL_JUMP = 10;
            ITEM_REORDER_ACTIVE = 'reorder-active';

            _export('ItemReorderGesture', ItemReorderGesture = function () {
                function ItemReorderGesture(list) {
                    _classCallCheck(this, ItemReorderGesture);

                    this.list = list;
                    this.selectedItemEle = null;
                    this.events = new UIEventManager(false);
                    var element = this.list.getNativeElement();
                    this.events.pointerEvents(element, this.onDragStart.bind(this), this.onDragMove.bind(this), this.onDragEnd.bind(this));
                }

                _createClass(ItemReorderGesture, [{
                    key: 'onDragStart',
                    value: function onDragStart(ev) {
                        var reorderElement = ev.target;
                        if (reorderElement.nodeName !== 'ION-REORDER') {
                            return false;
                        }
                        var item = reorderElement['$ionReorderNode'];
                        if (!item) {
                            console.error('item does not contain ion ionReorderNode');
                            return false;
                        }
                        ev.preventDefault();
                        // Preparing state
                        this.selectedItemEle = item;
                        this.selectedItemHeight = item.offsetHeight;
                        this.lastYcoord = this.lastToIndex = -100;
                        this.windowHeight = window.innerHeight - AUTO_SCROLL_MARGIN;
                        this.lastScrollPosition = this.list.scrollContent(0);
                        this.offset = pointerCoord(ev);
                        this.offset.y += this.lastScrollPosition;
                        item.classList.add(ITEM_REORDER_ACTIVE);
                        this.list.reorderStart();
                        return true;
                    }
                }, {
                    key: 'onDragMove',
                    value: function onDragMove(ev) {
                        var selectedItem = this.selectedItemEle;
                        if (!selectedItem) {
                            return;
                        }
                        ev.preventDefault();
                        // Get coordinate
                        var coord = pointerCoord(ev);
                        var posY = coord.y;
                        // Scroll if we reach the scroll margins
                        var scrollPosition = this.scroll(posY);
                        // Only perform hit test if we moved at least 30px from previous position
                        if (Math.abs(posY - this.lastYcoord) > 30) {
                            var overItem = this.itemForCoord(coord);
                            if (overItem) {
                                var toIndex = indexForItem(overItem);
                                if (toIndex && (toIndex !== this.lastToIndex || this.emptyZone)) {
                                    var fromIndex = indexForItem(this.selectedItemEle);
                                    this.lastToIndex = toIndex;
                                    this.lastYcoord = posY;
                                    this.emptyZone = false;
                                    this.list.reorderMove(fromIndex, toIndex, this.selectedItemHeight);
                                }
                            } else {
                                this.emptyZone = true;
                            }
                        }
                        // Update selected item position
                        var ydiff = Math.round(posY - this.offset.y + scrollPosition);
                        selectedItem.style[CSS.transform] = 'translateY(' + ydiff + 'px)';
                    }
                }, {
                    key: 'onDragEnd',
                    value: function onDragEnd() {
                        if (!this.selectedItemEle) {
                            return;
                        }
                        var toIndex = this.lastToIndex;
                        var fromIndex = indexForItem(this.selectedItemEle);
                        this.selectedItemEle.classList.remove(ITEM_REORDER_ACTIVE);
                        this.selectedItemEle = null;
                        this.list.reorderEmit(fromIndex, toIndex);
                    }
                }, {
                    key: 'itemForCoord',
                    value: function itemForCoord(coord) {
                        return itemForPosition(this.offset.x - 100, coord.y);
                    }
                }, {
                    key: 'scroll',
                    value: function scroll(posY) {
                        if (posY < AUTO_SCROLL_MARGIN) {
                            this.lastScrollPosition = this.list.scrollContent(-SCROLL_JUMP);
                        } else if (posY > this.windowHeight) {
                            this.lastScrollPosition = this.list.scrollContent(SCROLL_JUMP);
                        }
                        return this.lastScrollPosition;
                    }
                }, {
                    key: 'destroy',
                    value: function destroy() {
                        this.onDragEnd();
                        this.events.unlistenAll();
                        this.events = null;
                        this.list = null;
                    }
                }]);

                return ItemReorderGesture;
            }());

            _export('ItemReorderGesture', ItemReorderGesture);
        }
    };
});
"use strict";

System.register("ionic-angular/components/item/item-reorder", ["@angular/core", "../content/content", "../../util/dom", "./item", "../item/item-reorder-gesture", "../../util/util"], function (_export, _context) {
    "use strict";

    var Component, Directive, ElementRef, EventEmitter, forwardRef, Input, NgZone, Renderer, Inject, Optional, Output, Content, CSS, Item, ItemReorderGesture, isTrueProperty, _createClass, _typeof, __decorate, __metadata, __param, Reorder, ItemReorder, _a, _b, _c, _d, _e, _f, _g;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            forwardRef = _angularCore.forwardRef;
            Input = _angularCore.Input;
            NgZone = _angularCore.NgZone;
            Renderer = _angularCore.Renderer;
            Inject = _angularCore.Inject;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
        }, function (_contentContent) {
            Content = _contentContent.Content;
        }, function (_utilDom) {
            CSS = _utilDom.CSS;
        }, function (_item) {
            Item = _item.Item;
        }, function (_itemItemReorderGesture) {
            ItemReorderGesture = _itemItemReorderGesture.ItemReorderGesture;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Reorder", Reorder = function () {
                function Reorder(elementRef, _rendered, _zone, _content) {
                    _classCallCheck(this, Reorder);

                    this._rendered = _rendered;
                    this._zone = _zone;
                    this._content = _content;
                    this._enableReorder = false;
                    this._lastToIndex = -1;
                    this.ionItemReorder = new EventEmitter();
                    this._element = elementRef.nativeElement;
                }
                /**
                 * @private
                 */


                _createClass(Reorder, [{
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._element = null;
                        this._reorderGesture && this._reorderGesture.destroy();
                    }
                }, {
                    key: "reorderStart",
                    value: function reorderStart() {
                        var children = this._element.children;
                        var len = children.length;
                        this.setCssClass('reorder-active', true);
                        for (var i = 0; i < len; i++) {
                            children[i]['$ionIndex'] = i;
                        }
                    }
                }, {
                    key: "reorderEmit",
                    value: function reorderEmit(fromIndex, toIndex) {
                        var _this = this;

                        this.reorderReset();
                        if (fromIndex !== toIndex) {
                            this._zone.run(function () {
                                _this.ionItemReorder.emit({
                                    from: fromIndex,
                                    to: toIndex
                                });
                            });
                        }
                    }
                }, {
                    key: "scrollContent",
                    value: function scrollContent(scroll) {
                        var scrollTop = this._content.getScrollTop() + scroll;
                        if (scroll !== 0) {
                            this._content.scrollTo(0, scrollTop, 0);
                        }
                        return scrollTop;
                    }
                }, {
                    key: "reorderReset",
                    value: function reorderReset() {
                        var children = this._element.children;
                        var len = children.length;
                        this.setCssClass('reorder-active', false);
                        var transform = CSS.transform;
                        for (var i = 0; i < len; i++) {
                            children[i].style[transform] = '';
                        }
                        this._lastToIndex = -1;
                    }
                }, {
                    key: "reorderMove",
                    value: function reorderMove(fromIndex, toIndex, itemHeight) {
                        if (this._lastToIndex === -1) {
                            this._lastToIndex = fromIndex;
                        }
                        var lastToIndex = this._lastToIndex;
                        this._lastToIndex = toIndex;
                        // TODO: I think both loops can be merged into a single one
                        // but I had no luck last time I tried
                        /********* DOM READ ********** */
                        var children = this._element.children;
                        /********* DOM WRITE ********* */
                        var transform = CSS.transform;
                        if (toIndex >= lastToIndex) {
                            for (var i = lastToIndex; i <= toIndex; i++) {
                                if (i !== fromIndex) {
                                    children[i].style[transform] = i > fromIndex ? "translateY(" + -itemHeight + "px)" : '';
                                }
                            }
                        }
                        if (toIndex <= lastToIndex) {
                            for (var i = toIndex; i <= lastToIndex; i++) {
                                if (i !== fromIndex) {
                                    children[i].style[transform] = i < fromIndex ? "translateY(" + itemHeight + "px)" : '';
                                }
                            }
                        }
                    }
                }, {
                    key: "setCssClass",
                    value: function setCssClass(classname, add) {
                        this._rendered.setElementClass(this._element, classname, add);
                    }
                }, {
                    key: "getNativeElement",
                    value: function getNativeElement() {
                        return this._element;
                    }
                }, {
                    key: "reorder",
                    get: function get() {
                        return this._enableReorder;
                    },
                    set: function set(val) {
                        this._enableReorder = isTrueProperty(val);
                        if (!this._enableReorder) {
                            this._reorderGesture && this._reorderGesture.destroy();
                            this._reorderGesture = null;
                        } else if (!this._reorderGesture) {
                            console.debug('enableReorderItems');
                            this._reorderGesture = new ItemReorderGesture(this);
                        }
                    }
                }]);

                return Reorder;
            }());

            _export("Reorder", Reorder);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Reorder.prototype, "ionItemReorder", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], Reorder.prototype, "reorder", null);
            _export("Reorder", Reorder = __decorate([Directive({
                selector: '[reorder]',
                host: {
                    '[class.reorder-enabled]': '_enableReorder'
                }
            }), __param(3, Optional()), __metadata('design:paramtypes', [typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object, typeof (_d = typeof NgZone !== 'undefined' && NgZone) === 'function' && _d || Object, typeof (_e = typeof Content !== 'undefined' && Content) === 'function' && _e || Object])], Reorder));
            /**
             * @private
             */

            _export("ItemReorder", ItemReorder = function () {
                function ItemReorder(item, elementRef) {
                    _classCallCheck(this, ItemReorder);

                    this.item = item;
                    this.elementRef = elementRef;
                }

                _createClass(ItemReorder, [{
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        var item = this.item.getNativeElement();
                        if (item.parentNode.nodeName === 'ION-ITEM-SLIDING') {
                            this.elementRef.nativeElement['$ionReorderNode'] = item.parentNode;
                        } else {
                            this.elementRef.nativeElement['$ionReorderNode'] = item;
                        }
                    }
                }]);

                return ItemReorder;
            }());

            _export("ItemReorder", ItemReorder);

            _export("ItemReorder", ItemReorder = __decorate([Component({
                selector: 'ion-reorder',
                template: "<ion-icon name=\"menu\"></ion-icon>"
            }), __param(0, Inject(forwardRef(function () {
                return Item;
            }))), __metadata('design:paramtypes', [typeof (_f = typeof Item !== 'undefined' && Item) === 'function' && _f || Object, typeof (_g = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _g || Object])], ItemReorder));
        }
    };
});
'use strict';

System.register('ionic-angular/components/item/item-sliding-gesture', ['../../gestures/drag-gesture', '../../util/dom'], function (_export, _context) {
    "use strict";

    var DragGesture, closest, _createClass, _get, DRAG_THRESHOLD, MAX_ATTACK_ANGLE, ItemSlidingGesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    function getContainer(ev) {
        var ele = closest(ev.target, 'ion-item-sliding', true);
        if (ele) {
            return ele['$ionComponent'];
        }
        return null;
    }
    function isFromOptionButtons(ele) {
        return !!closest(ele, 'ion-item-options', true);
    }
    return {
        setters: [function (_gesturesDragGesture) {
            DragGesture = _gesturesDragGesture.DragGesture;
        }, function (_utilDom) {
            closest = _utilDom.closest;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            DRAG_THRESHOLD = 20;
            MAX_ATTACK_ANGLE = 20;

            _export('ItemSlidingGesture', ItemSlidingGesture = function (_DragGesture) {
                _inherits(ItemSlidingGesture, _DragGesture);

                function ItemSlidingGesture(list) {
                    _classCallCheck(this, ItemSlidingGesture);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ItemSlidingGesture).call(this, list.getNativeElement(), {
                        direction: 'x',
                        threshold: DRAG_THRESHOLD
                    }));

                    _this.list = list;
                    _this.selectedContainer = null;
                    _this.openContainer = null;
                    _this.listen();
                    return _this;
                }

                _createClass(ItemSlidingGesture, [{
                    key: 'onTapCallback',
                    value: function onTapCallback(ev) {
                        if (isFromOptionButtons(ev.target)) {
                            return;
                        }
                        var didClose = this.closeOpened();
                        if (didClose) {
                            console.debug('tap close sliding item, preventDefault');
                            ev.preventDefault();
                        }
                    }
                }, {
                    key: 'onDragStart',
                    value: function onDragStart(ev) {
                        var angle = Math.abs(ev.angle);
                        if (angle > MAX_ATTACK_ANGLE && Math.abs(angle - 180) > MAX_ATTACK_ANGLE) {
                            this.closeOpened();
                            return false;
                        }
                        if (this.selectedContainer) {
                            console.debug('onDragStart, another container is already selected');
                            return false;
                        }
                        var container = getContainer(ev);
                        if (!container) {
                            console.debug('onDragStart, no itemContainerEle');
                            return false;
                        }
                        // Close open container if it is not the selected one.
                        if (container !== this.openContainer) {
                            this.closeOpened();
                        }
                        this.selectedContainer = container;
                        this.openContainer = container;
                        container.startSliding(ev.center.x);
                        return true;
                    }
                }, {
                    key: 'onDrag',
                    value: function onDrag(ev) {
                        if (this.selectedContainer) {
                            this.selectedContainer.moveSliding(ev.center.x);
                            ev.preventDefault();
                        }
                        return;
                    }
                }, {
                    key: 'onDragEnd',
                    value: function onDragEnd(ev) {
                        var _this2 = this;

                        if (!this.selectedContainer) {
                            return;
                        }
                        ev.preventDefault();
                        var openAmount = this.selectedContainer.endSliding(ev.velocityX);
                        this.selectedContainer = null;
                        // TODO: I am not sure listening for a tap event is the best idea
                        // we should try mousedown/touchstart
                        if (openAmount === 0) {
                            this.openContainer = null;
                            this.off('tap', this.onTap);
                            this.onTap = null;
                        } else if (!this.onTap) {
                            this.onTap = function (event) {
                                return _this2.onTapCallback(event);
                            };
                            this.on('tap', this.onTap);
                        }
                    }
                }, {
                    key: 'closeOpened',
                    value: function closeOpened() {
                        if (!this.openContainer) {
                            return false;
                        }
                        this.openContainer.close();
                        this.openContainer = null;
                        this.selectedContainer = null;
                        this.off('tap', this.onTap);
                        this.onTap = null;
                        return true;
                    }
                }, {
                    key: 'unlisten',
                    value: function unlisten() {
                        this.closeOpened();
                        _get(Object.getPrototypeOf(ItemSlidingGesture.prototype), 'unlisten', this).call(this);
                        this.list = null;
                    }
                }]);

                return ItemSlidingGesture;
            }(DragGesture));

            _export('ItemSlidingGesture', ItemSlidingGesture);
        }
    };
});
"use strict";

System.register("ionic-angular/components/item/item-sliding", ["@angular/core", "../../util/dom", "./item", "../../util/util", "../list/list"], function (_export, _context) {
    "use strict";

    var ChangeDetectionStrategy, Component, ContentChildren, ContentChild, Directive, ElementRef, EventEmitter, Input, Optional, Output, QueryList, Renderer, ViewEncapsulation, CSS, nativeRaf, nativeTimeout, clearNativeTimeout, Item, isPresent, List, _createClass, _typeof, __decorate, __metadata, __param, SWIPE_MARGIN, ELASTIC_FACTOR, ItemSideFlags, ItemOptions, SlidingState, ItemSliding, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function shouldClose(isCloseDirection, isMovingFast, isOnCloseZone) {
        // The logic required to know when the sliding item should close (openAmount=0)
        // depends on three booleans (isCloseDirection, isMovingFast, isOnCloseZone)
        // and it ended up being too complicated to be written manually without errors
        // so the truth table is attached below: (0=false, 1=true)
        // isCloseDirection | isMovingFast | isOnCloseZone || shouldClose
        //         0        |       0      |       0       ||    0
        //         0        |       0      |       1       ||    1
        //         0        |       1      |       0       ||    0
        //         0        |       1      |       1       ||    0
        //         1        |       0      |       0       ||    0
        //         1        |       0      |       1       ||    1
        //         1        |       1      |       0       ||    1
        //         1        |       1      |       1       ||    1
        // The resulting expression was generated by resolving the K-map (Karnaugh map):
        var shouldClose = !isMovingFast && isOnCloseZone || isCloseDirection && isMovingFast;
        return shouldClose;
    }
    return {
        setters: [function (_angularCore) {
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            Component = _angularCore.Component;
            ContentChildren = _angularCore.ContentChildren;
            ContentChild = _angularCore.ContentChild;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
            QueryList = _angularCore.QueryList;
            Renderer = _angularCore.Renderer;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_utilDom) {
            CSS = _utilDom.CSS;
            nativeRaf = _utilDom.nativeRaf;
            nativeTimeout = _utilDom.nativeTimeout;
            clearNativeTimeout = _utilDom.clearNativeTimeout;
        }, function (_item) {
            Item = _item.Item;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_listList) {
            List = _listList.List;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            SWIPE_MARGIN = 20;
            ELASTIC_FACTOR = 0.55;

            _export("ItemSideFlags", ItemSideFlags);

            (function (ItemSideFlags) {
                ItemSideFlags[ItemSideFlags["None"] = 0] = "None";
                ItemSideFlags[ItemSideFlags["Left"] = 1] = "Left";
                ItemSideFlags[ItemSideFlags["Right"] = 2] = "Right";
                ItemSideFlags[ItemSideFlags["Both"] = 3] = "Both";
            })(ItemSideFlags || _export("ItemSideFlags", ItemSideFlags = {}));
            /**
             * @name ItemOptions
             * @description
             * The option buttons for an `ion-item-sliding`. These buttons can be placed either on the left or right side.
             * You can combind the `(ionSiwpe)` event plus the `expandable` directive to create a full swipe action for the item.
             *
             * @usage
             *
             * ```html
             * <ion-item-sliding>
             *   <ion-item>
             *     Item 1
             *   </ion-item>
             *   <ion-item-options side="right" (ionSwipe)="saveItem(item)">
             *     <button expandable (click)="saveItem(item)">
             *       <ion-icon name="star"></ion-icon>
             *     </button>
             *   </ion-item-options>
             * </ion-item-sliding>
             *```
             */

            _export("ItemOptions", ItemOptions = function () {
                function ItemOptions(_elementRef, _renderer) {
                    _classCallCheck(this, ItemOptions);

                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    /**
                     * @output {event} Expression to evaluate when the item has been fully swiped.
                     */
                    this.ionSwipe = new EventEmitter();
                }
                /**
                 * @private
                 */


                _createClass(ItemOptions, [{
                    key: "setCssStyle",
                    value: function setCssStyle(property, value) {
                        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
                    }
                }, {
                    key: "getSides",
                    value: function getSides() {
                        if (isPresent(this.side) && this.side === 'left') {
                            return ItemSideFlags.Left;
                        } else {
                            return ItemSideFlags.Right;
                        }
                    }
                }, {
                    key: "width",
                    value: function width() {
                        return this._elementRef.nativeElement.offsetWidth;
                    }
                }]);

                return ItemOptions;
            }());

            _export("ItemOptions", ItemOptions);

            __decorate([Input(), __metadata('design:type', String)], ItemOptions.prototype, "side", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], ItemOptions.prototype, "ionSwipe", void 0);
            _export("ItemOptions", ItemOptions = __decorate([Directive({
                selector: 'ion-item-options'
            }), __metadata('design:paramtypes', [typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object])], ItemOptions));

            (function (SlidingState) {
                SlidingState[SlidingState["Disabled"] = 2] = "Disabled";
                SlidingState[SlidingState["Enabled"] = 4] = "Enabled";
                SlidingState[SlidingState["Right"] = 8] = "Right";
                SlidingState[SlidingState["Left"] = 16] = "Left";
                SlidingState[SlidingState["SwipeRight"] = 32] = "SwipeRight";
                SlidingState[SlidingState["SwipeLeft"] = 64] = "SwipeLeft";
            })(SlidingState || (SlidingState = {}));
            /**
             * @name ItemSliding
             * @description
             * A sliding item is a list item that can be swiped to reveal buttons. It requires
             * an [Item](../Item) component as a child and a [List](../../list/List) component as
             * a parent. All buttons to reveal can be placed in the `<ion-item-options>` element.
             *
             * @usage
             * ```html
             * <ion-list>
             *   <ion-item-sliding #item>
             *     <ion-item>
             *       Item
             *     </ion-item>
             *     <ion-item-options side="left">
             *       <button (click)="favorite(item)">Favorite</button>
             *       <button danger (click)="share(item)">Share</button>
             *     </ion-item-options>
            
             *     <ion-item-options side="right">
             *       <button (click)="unread(item)">Unread</button>
             *     </ion-item-options>
             *   </ion-item-sliding>
             * </ion-list>
             * ```
             *
             * ### Swipe Direction
             * By default, the buttons are revealed when the sliding item is swiped from right to left,
             * so the buttons are placed in the right side. But it's also possible to reveal them
             * in the right side (sliding from left to right) by setting the `side` attribute
             * on the `ion-item-options` element. Up to 2 `ion-item-options` can used at the same time
             * in order to reveal two different sets of buttons depending the swipping direction.
             *
             * ```html
             * <ion-item-options side="right">
             *   <button (click)="archive(item)">
             *     <ion-icon name="archive"></ion-icon>
             *     Archive
             *   </button>
             * </ion-item-options>
            
             * <ion-item-options side="left">
             *   <button (click)="archive(item)">
             *     <ion-icon name="archive"></ion-icon>
             *     Archive
             *   </button>
             * </ion-item-options>
             * ```
             *
             * ### Listening for events (ionDrag) and (ionSwipe)
             * It's possible to know the current relative position of the sliding item by subscribing
             * to the (ionDrag)` event.
             *
             * ```html
             * <ion-item-sliding (ionDrag)="logDrag($event)">
             *   <ion-item>Item</ion-item>
             *   <ion-item-options>
             *     <button>Favorite</button>
             *   </ion-item-options>
             * </ion-item-sliding>
             * ```
             *
             * ### Button Layout
             * If an icon is placed with text in the option button, by default it will
             * display the icon on top of the text. This can be changed to display the icon
             * to the left of the text by setting `icon-left` as an attribute on the
             * `<ion-item-options>` element.
             *
             * ```html
             * <ion-item-options icon-left>
             *    <button (click)="archive(item)">
             *      <ion-icon name="archive"></ion-icon>
             *      Archive
             *    </button>
             *  </ion-item-options>
             *
             * ```
             *
             *
             * @demo /docs/v2/demos/item-sliding/
             * @see {@link /docs/v2/components#lists List Component Docs}
             * @see {@link ../Item Item API Docs}
             * @see {@link ../../list/List List API Docs}
             */

            _export("ItemSliding", ItemSliding = function () {
                function ItemSliding(list, _renderer, _elementRef) {
                    _classCallCheck(this, ItemSliding);

                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._openAmount = 0;
                    this._startX = 0;
                    this._optsWidthRightSide = 0;
                    this._optsWidthLeftSide = 0;
                    this._timer = null;
                    this._optsDirty = true;
                    this._state = SlidingState.Disabled;
                    /**
                     * @output {event} Expression to evaluate when the sliding position changes.
                     * It reports the relative position.
                     *
                     * ```ts
                     * ondrag(item) {
                     *   let percent = item.getSlidingPercent();
                     *   if (percent > 0) {
                     *     // positive
                     *     console.log('right side');
                     *   } else {
                     *     // negative
                     *     console.log('left side');
                     *   }
                     *   if (Math.abs(percent) > 1) {
                     *     console.log('overscroll');
                     *   }
                     * }
                     * ```
                     *
                     */
                    this.ionDrag = new EventEmitter();
                    list && list.containsSlidingItem(true);
                    _elementRef.nativeElement.$ionComponent = this;
                    this.setCssClass('item-wrapper', true);
                }

                _createClass(ItemSliding, [{
                    key: "getOpenAmount",
                    value: function getOpenAmount() {
                        return this._openAmount;
                    }
                }, {
                    key: "getSlidingPercent",
                    value: function getSlidingPercent() {
                        var openAmount = this._openAmount;
                        if (openAmount > 0) {
                            return openAmount / this._optsWidthRightSide;
                        } else if (openAmount < 0) {
                            return openAmount / this._optsWidthLeftSide;
                        } else {
                            return 0;
                        }
                    }
                }, {
                    key: "startSliding",
                    value: function startSliding(startX) {
                        if (this._timer) {
                            clearNativeTimeout(this._timer);
                            this._timer = null;
                        }
                        if (this._openAmount === 0) {
                            this._optsDirty = true;
                            this._setState(SlidingState.Enabled);
                        }
                        this._startX = startX + this._openAmount;
                        this.item.setCssStyle(CSS.transition, 'none');
                    }
                }, {
                    key: "moveSliding",
                    value: function moveSliding(x) {
                        if (this._optsDirty) {
                            this.calculateOptsWidth();
                            return;
                        }
                        var openAmount = this._startX - x;
                        switch (this._sides) {
                            case ItemSideFlags.Right:
                                openAmount = Math.max(0, openAmount);
                                break;
                            case ItemSideFlags.Left:
                                openAmount = Math.min(0, openAmount);
                                break;
                            case ItemSideFlags.Both:
                                break;
                            default:
                                return;
                        }
                        if (openAmount > this._optsWidthRightSide) {
                            var optsWidth = this._optsWidthRightSide;
                            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
                        } else if (openAmount < -this._optsWidthLeftSide) {
                            var optsWidth = -this._optsWidthLeftSide;
                            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;
                        }
                        this._setOpenAmount(openAmount, false);
                        return openAmount;
                    }
                }, {
                    key: "endSliding",
                    value: function endSliding(velocity) {
                        var restingPoint = this._openAmount > 0 ? this._optsWidthRightSide : -this._optsWidthLeftSide;
                        // Check if the drag didn't clear the buttons mid-point
                        // and we aren't moving fast enough to swipe open
                        var isCloseDirection = this._openAmount > 0 === !(velocity < 0);
                        var isMovingFast = Math.abs(velocity) > 0.3;
                        var isOnCloseZone = Math.abs(this._openAmount) < Math.abs(restingPoint / 2);
                        if (shouldClose(isCloseDirection, isMovingFast, isOnCloseZone)) {
                            restingPoint = 0;
                        }
                        this._setOpenAmount(restingPoint, true);
                        this.fireSwipeEvent();
                        return restingPoint;
                    }
                }, {
                    key: "fireSwipeEvent",
                    value: function fireSwipeEvent() {
                        if (this._state & SlidingState.SwipeRight) {
                            this._rightOptions.ionSwipe.emit(this);
                        } else if (this._state & SlidingState.SwipeLeft) {
                            this._leftOptions.ionSwipe.emit(this);
                        }
                    }
                }, {
                    key: "calculateOptsWidth",
                    value: function calculateOptsWidth() {
                        var _this = this;

                        nativeRaf(function () {
                            if (!_this._optsDirty) {
                                return;
                            }
                            _this._optsWidthRightSide = 0;
                            if (_this._rightOptions) {
                                _this._optsWidthRightSide = _this._rightOptions.width();
                            }
                            _this._optsWidthLeftSide = 0;
                            if (_this._leftOptions) {
                                _this._optsWidthLeftSide = _this._leftOptions.width();
                            }
                            _this._optsDirty = false;
                        });
                    }
                }, {
                    key: "_setOpenAmount",
                    value: function _setOpenAmount(openAmount, isFinal) {
                        var _this2 = this;

                        if (this._timer) {
                            clearNativeTimeout(this._timer);
                            this._timer = null;
                        }
                        this._openAmount = openAmount;
                        if (isFinal) {
                            this.item.setCssStyle(CSS.transition, '');
                        } else {
                            if (openAmount > 0) {
                                var state = openAmount >= this._optsWidthRightSide + SWIPE_MARGIN ? SlidingState.Right | SlidingState.SwipeRight : SlidingState.Right;
                                this._setState(state);
                            } else if (openAmount < 0) {
                                var _state = openAmount <= -this._optsWidthLeftSide - SWIPE_MARGIN ? SlidingState.Left | SlidingState.SwipeLeft : SlidingState.Left;
                                this._setState(_state);
                            }
                        }
                        if (openAmount === 0) {
                            this._timer = nativeTimeout(function () {
                                _this2._setState(SlidingState.Disabled);
                                _this2._timer = null;
                            }, 600);
                            this.item.setCssStyle(CSS.transform, '');
                            return;
                        }
                        this.item.setCssStyle(CSS.transform, "translate3d(" + -openAmount + "px,0,0)");
                        this.ionDrag.emit(this);
                    }
                }, {
                    key: "_setState",
                    value: function _setState(state) {
                        if (state === this._state) {
                            return;
                        }
                        this.setCssClass('active-slide', state !== SlidingState.Disabled);
                        this.setCssClass('active-options-right', !!(state & SlidingState.Right));
                        this.setCssClass('active-options-left', !!(state & SlidingState.Left));
                        this.setCssClass('active-swipe-right', !!(state & SlidingState.SwipeRight));
                        this.setCssClass('active-swipe-left', !!(state & SlidingState.SwipeLeft));
                        this._state = state;
                    }
                }, {
                    key: "close",
                    value: function close() {
                        this._setOpenAmount(0, true);
                    }
                }, {
                    key: "setCssClass",
                    value: function setCssClass(cssClass, shouldAdd) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
                    }
                }, {
                    key: "setCssStyle",
                    value: function setCssStyle(property, value) {
                        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
                    }
                }, {
                    key: "_itemOptions",
                    set: function set(itemOptions) {
                        var sides = 0;
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = itemOptions.toArray()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var item = _step.value;

                                var side = item.getSides();
                                if (side === ItemSideFlags.Left) {
                                    this._leftOptions = item;
                                } else {
                                    this._rightOptions = item;
                                }
                                sides |= item.getSides();
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        this._optsDirty = true;
                        this._sides = sides;
                    }
                }]);

                return ItemSliding;
            }());

            _export("ItemSliding", ItemSliding);

            __decorate([ContentChild(Item), __metadata('design:type', typeof (_d = typeof Item !== 'undefined' && Item) === 'function' && _d || Object)], ItemSliding.prototype, "item", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_e = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _e || Object)], ItemSliding.prototype, "ionDrag", void 0);
            __decorate([ContentChildren(ItemOptions), __metadata('design:type', typeof (_f = typeof QueryList !== 'undefined' && QueryList) === 'function' && _f || Object), __metadata('design:paramtypes', [typeof (_g = typeof QueryList !== 'undefined' && QueryList) === 'function' && _g || Object])], ItemSliding.prototype, "_itemOptions", null);
            _export("ItemSliding", ItemSliding = __decorate([Component({
                selector: 'ion-item-sliding',
                template: '<ng-content select="ion-item,[ion-item]"></ng-content>' + '<ng-content select="ion-item-options"></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __param(0, Optional()), __metadata('design:paramtypes', [typeof (_h = typeof List !== 'undefined' && List) === 'function' && _h || Object, typeof (_j = typeof Renderer !== 'undefined' && Renderer) === 'function' && _j || Object, typeof (_k = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _k || Object])], ItemSliding));
        }
    };
});
"use strict";

System.register("ionic-angular/components/item/item", ["@angular/core", "../button/button", "../../util/form", "../icon/icon", "../item/item-reorder", "../label/label"], function (_export, _context) {
    "use strict";

    var ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, forwardRef, Renderer, ViewChild, ViewEncapsulation, Button, Form, Icon, ItemReorder, Label, _createClass, _typeof, __decorate, __metadata, Item, ItemContent, _a, _b, _c, _d, _e, _f, _g;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            Component = _angularCore.Component;
            ContentChild = _angularCore.ContentChild;
            ContentChildren = _angularCore.ContentChildren;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            forwardRef = _angularCore.forwardRef;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_buttonButton) {
            Button = _buttonButton.Button;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_iconIcon) {
            Icon = _iconIcon.Icon;
        }, function (_itemItemReorder) {
            ItemReorder = _itemItemReorder.ItemReorder;
        }, function (_labelLabel) {
            Label = _labelLabel.Label;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Item", Item = function () {
                function Item(form, _renderer, _elementRef) {
                    _classCallCheck(this, Item);

                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._ids = -1;
                    this._inputs = [];
                    this._viewLabel = true;
                    /**
                     * @private
                     */
                    this.labelId = null;
                    this.id = form.nextId().toString();
                }
                /**
                 * @private
                 */


                _createClass(Item, [{
                    key: "registerInput",
                    value: function registerInput(type) {
                        this._inputs.push(type);
                        return this.id + '-' + ++this._ids;
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        if (this._viewLabel && this._inputs.length) {
                            var labelText = this.getLabelText().trim();
                            this._viewLabel = labelText.length > 0;
                        }
                        if (this._inputs.length > 1) {
                            this.setCssClass('item-multiple-inputs', true);
                        }
                    }
                }, {
                    key: "getLabelText",
                    value: function getLabelText() {
                        return this._label ? this._label.text : '';
                    }
                }, {
                    key: "setCssClass",
                    value: function setCssClass(cssClass, shouldAdd) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
                    }
                }, {
                    key: "setCssStyle",
                    value: function setCssStyle(property, value) {
                        this._renderer.setElementStyle(this._elementRef.nativeElement, property, value);
                    }
                }, {
                    key: "getNativeElement",
                    value: function getNativeElement() {
                        return this._elementRef.nativeElement;
                    }
                }, {
                    key: "contentLabel",
                    set: function set(label) {
                        if (label) {
                            this._label = label;
                            this.labelId = label.id = 'lbl-' + this.id;
                            if (label.type) {
                                this.setCssClass('item-label-' + label.type, true);
                            }
                            this._viewLabel = false;
                        }
                    }
                }, {
                    key: "viewLabel",
                    set: function set(label) {
                        if (!this._label) {
                            this._label = label;
                        }
                    }
                }, {
                    key: "_buttons",
                    set: function set(buttons) {
                        buttons.toArray().forEach(function (button) {
                            // Don't add the item-button class if the user specifies
                            // a different size button
                            if (!button.isItem && !button._size) {
                                button.addClass('item-button');
                            }
                        });
                    }
                }, {
                    key: "_icons",
                    set: function set(icons) {
                        icons.toArray().forEach(function (icon) {
                            icon.addClass('item-icon');
                        });
                    }
                }]);

                return Item;
            }());

            _export("Item", Item);

            __decorate([ContentChild(Label), __metadata('design:type', typeof (_a = typeof Label !== 'undefined' && Label) === 'function' && _a || Object), __metadata('design:paramtypes', [typeof (_b = typeof Label !== 'undefined' && Label) === 'function' && _b || Object])], Item.prototype, "contentLabel", null);
            __decorate([ViewChild(Label), __metadata('design:type', typeof (_c = typeof Label !== 'undefined' && Label) === 'function' && _c || Object), __metadata('design:paramtypes', [typeof (_d = typeof Label !== 'undefined' && Label) === 'function' && _d || Object])], Item.prototype, "viewLabel", null);
            __decorate([ContentChildren(Button), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Item.prototype, "_buttons", null);
            __decorate([ContentChildren(Icon), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], Item.prototype, "_icons", null);
            _export("Item", Item = __decorate([Component({
                selector: 'ion-list-header,ion-item,[ion-item],ion-item-divider',
                template: '<ng-content select="[item-left],ion-checkbox:not([item-right])"></ng-content>' + '<div class="item-inner">' + '<div class="input-wrapper">' + '<ng-content select="ion-label"></ng-content>' + '<ion-label *ngIf="_viewLabel">' + '<ng-content></ng-content>' + '</ion-label>' + '<ng-content select="ion-select,ion-input,ion-textarea,ion-datetime,ion-range,[item-content]"></ng-content>' + '</div>' + '<ng-content select="[item-right],ion-radio,ion-toggle"></ng-content>' + '<ion-reorder></ion-reorder>' + '</div>' + '<ion-button-effect></ion-button-effect>',
                directives: [forwardRef(function () {
                    return ItemReorder;
                })],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_e = typeof Form !== 'undefined' && Form) === 'function' && _e || Object, typeof (_f = typeof Renderer !== 'undefined' && Renderer) === 'function' && _f || Object, typeof (_g = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _g || Object])], Item));
            /**
             * @private
             */

            _export("ItemContent", ItemContent = function ItemContent() {
                _classCallCheck(this, ItemContent);
            });

            _export("ItemContent", ItemContent);

            _export("ItemContent", ItemContent = __decorate([Directive({
                selector: 'ion-item,[ion-item]',
                host: {
                    'class': 'item'
                }
            }), __metadata('design:paramtypes', [])], ItemContent));
        }
    };
});
"use strict";

System.register("ionic-angular/components/label/label", ["@angular/core"], function (_export, _context) {
    "use strict";

    var Attribute, Directive, ElementRef, Renderer, Input, _createClass, _typeof, __decorate, __metadata, __param, Label, _a, _b;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Attribute = _angularCore.Attribute;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Renderer = _angularCore.Renderer;
            Input = _angularCore.Input;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Label", Label = function () {
                function Label(_elementRef, _renderer, isFloating, isStacked, isFixed, isInset) {
                    _classCallCheck(this, Label);

                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this.type = isFloating === '' ? 'floating' : isStacked === '' ? 'stacked' : isFixed === '' ? 'fixed' : isInset === '' ? 'inset' : null;
                }
                /**
                 * @private
                 */


                _createClass(Label, [{
                    key: "addClass",
                    value: function addClass(className) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
                    }
                }, {
                    key: "id",
                    get: function get() {
                        return this._id;
                    },
                    set: function set(val) {
                        this._id = val;
                        if (val) {
                            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
                        }
                    }
                }, {
                    key: "text",
                    get: function get() {
                        return this._elementRef.nativeElement.textContent || '';
                    }
                }]);

                return Label;
            }());

            _export("Label", Label);

            __decorate([Input(), __metadata('design:type', String)], Label.prototype, "id", null);
            _export("Label", Label = __decorate([Directive({
                selector: 'ion-label'
            }), __param(2, Attribute('floating')), __param(3, Attribute('stacked')), __param(4, Attribute('fixed')), __param(5, Attribute('inset')), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object, typeof (_b = typeof Renderer !== 'undefined' && Renderer) === 'function' && _b || Object, String, String, String, String])], Label));
        }
    };
});
"use strict";

System.register("ionic-angular/components/list/list", ["@angular/core", "../ion", "../../util/util", "../item/item-sliding-gesture"], function (_export, _context) {
    "use strict";

    var Attribute, Directive, ElementRef, Input, Renderer, Ion, isTrueProperty, ItemSlidingGesture, _createClass, _typeof, __decorate, __metadata, __param, List, ListHeader, _a, _b, _c, _d;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Attribute = _angularCore.Attribute;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Input = _angularCore.Input;
            Renderer = _angularCore.Renderer;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_itemItemSlidingGesture) {
            ItemSlidingGesture = _itemItemSlidingGesture.ItemSlidingGesture;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("List", List = function (_Ion) {
                _inherits(List, _Ion);

                function List(elementRef, _rendered) {
                    _classCallCheck(this, List);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(List).call(this, elementRef));

                    _this._rendered = _rendered;
                    _this._enableSliding = true;
                    _this._containsSlidingItems = false;
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(List, [{
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._slidingGesture && this._slidingGesture.destroy();
                    }
                }, {
                    key: "containsSlidingItem",
                    value: function containsSlidingItem(contains) {
                        this._containsSlidingItems = contains;
                        this._updateSlidingState();
                    }
                }, {
                    key: "_updateSlidingState",
                    value: function _updateSlidingState() {
                        var shouldSlide = this._enableSliding && this._containsSlidingItems;
                        if (!shouldSlide) {
                            this._slidingGesture && this._slidingGesture.unlisten();
                            this._slidingGesture = null;
                        } else if (!this._slidingGesture) {
                            console.debug('enableSlidingItems');
                            this._slidingGesture = new ItemSlidingGesture(this);
                        }
                    }
                }, {
                    key: "closeSlidingItems",
                    value: function closeSlidingItems() {
                        this._slidingGesture && this._slidingGesture.closeOpened();
                    }
                }, {
                    key: "sliding",
                    get: function get() {
                        return this._enableSliding;
                    },
                    set: function set(val) {
                        this._enableSliding = isTrueProperty(val);
                        this._updateSlidingState();
                    }
                }]);

                return List;
            }(Ion));

            _export("List", List);

            __decorate([Input(), __metadata('design:type', Boolean)], List.prototype, "sliding", null);
            _export("List", List = __decorate([Directive({
                selector: 'ion-list'
            }), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object, typeof (_b = typeof Renderer !== 'undefined' && Renderer) === 'function' && _b || Object])], List));
            /**
             * @private
             */

            _export("ListHeader", ListHeader = function () {
                function ListHeader(_renderer, _elementRef, _id) {
                    _classCallCheck(this, ListHeader);

                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._id = _id;
                }

                _createClass(ListHeader, [{
                    key: "id",
                    get: function get() {
                        return this._id;
                    },
                    set: function set(val) {
                        this._id = val;
                        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
                    }
                }]);

                return ListHeader;
            }());

            _export("ListHeader", ListHeader);

            _export("ListHeader", ListHeader = __decorate([Directive({
                selector: 'ion-list-header'
            }), __param(2, Attribute('id')), __metadata('design:paramtypes', [typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object, typeof (_d = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _d || Object, String])], ListHeader));
        }
    };
});
"use strict";

System.register("ionic-angular/components/loading/loading", ["@angular/core", "../../animations/animation", "../../config/config", "../../util/util", "../nav/nav-params", "../../transitions/transition", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, Renderer, ViewEncapsulation, Animation, Config, isDefined, isPresent, isUndefined, NavParams, Transition, ViewController, _createClass, _typeof, __decorate, __metadata, Loading, LoadingCmp, LoadingPopIn, LoadingPopOut, LoadingMdPopIn, LoadingMdPopOut, LoadingWpPopIn, LoadingWpPopOut, loadingIds, _a, _b, _c, _d, _e;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            Renderer = _angularCore.Renderer;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilUtil) {
            isDefined = _utilUtil.isDefined;
            isPresent = _utilUtil.isPresent;
            isUndefined = _utilUtil.isUndefined;
        }, function (_navNavParams) {
            NavParams = _navNavParams.NavParams;
        }, function (_transitionsTransition) {
            Transition = _transitionsTransition.Transition;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Loading", Loading = function (_ViewController) {
                _inherits(Loading, _ViewController);

                function Loading() {
                    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, Loading);

                    opts.showBackdrop = isPresent(opts.showBackdrop) ? !!opts.showBackdrop : true;
                    opts.dismissOnPageChange = isPresent(opts.dismissOnPageChange) ? !!opts.dismissOnPageChange : false;

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Loading).call(this, LoadingCmp, opts));

                    _this.isOverlay = true;
                    _this.usePortal = true;
                    // by default, loading indicators should not fire lifecycle events of other views
                    // for example, when an loading indicators enters, the current active view should
                    // not fire its lifecycle events because it's not conceptually leaving
                    _this.fireOtherLifecycles = false;
                    return _this;
                }
                /**
                * @private
                */


                _createClass(Loading, [{
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        var key = direction === 'back' ? 'loadingLeave' : 'loadingEnter';
                        return this._nav && this._nav.config.get(key);
                    }
                }], [{
                    key: "create",
                    value: function create() {
                        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        return new Loading(opts);
                    }
                }]);

                return Loading;
            }(ViewController));

            _export("Loading", Loading);

            LoadingCmp = function () {
                function LoadingCmp(_viewCtrl, _config, _elementRef, params, renderer) {
                    _classCallCheck(this, LoadingCmp);

                    this._viewCtrl = _viewCtrl;
                    this._config = _config;
                    this._elementRef = _elementRef;
                    this.d = params.data;
                    if (this.d.cssClass) {
                        renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
                    }
                    this.id = ++loadingIds;
                }

                _createClass(LoadingCmp, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        // If no spinner was passed in loading options we need to fall back
                        // to the loadingSpinner in the app's config, then the mode spinner
                        if (isUndefined(this.d.spinner)) {
                            this.d.spinner = this._config.get('loadingSpinner', this._config.get('spinner', 'ios'));
                        }
                        // If the user passed hide to the spinner we don't want to show it
                        this.showSpinner = isDefined(this.d.spinner) && this.d.spinner !== 'hide';
                    }
                }, {
                    key: "ionViewDidEnter",
                    value: function ionViewDidEnter() {
                        var _this2 = this;

                        var activeElement = document.activeElement;
                        if (document.activeElement) {
                            activeElement.blur();
                        }
                        // If there is a duration, dismiss after that amount of time
                        this.d.duration ? setTimeout(function () {
                            return _this2.dismiss('backdrop');
                        }, this.d.duration) : null;
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(role) {
                        return this._viewCtrl.dismiss(null, role);
                    }
                }]);

                return LoadingCmp;
            }();

            LoadingCmp = __decorate([Component({
                selector: 'ion-loading',
                template: '<ion-backdrop [class.hide-backdrop]="!d.showBackdrop"></ion-backdrop>' + '<div class="loading-wrapper">' + '<div *ngIf="showSpinner" class="loading-spinner">' + '<ion-spinner [name]="d.spinner"></ion-spinner>' + '</div>' + '<div *ngIf="d.content" [innerHTML]="d.content" class="loading-content"></div>' + '</div>',
                host: {
                    'role': 'dialog'
                },
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof ViewController !== 'undefined' && ViewController) === 'function' && _a || Object, typeof (_b = typeof Config !== 'undefined' && Config) === 'function' && _b || Object, typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object, typeof (_d = typeof NavParams !== 'undefined' && NavParams) === 'function' && _d || Object, typeof (_e = typeof Renderer !== 'undefined' && Renderer) === 'function' && _e || Object])], LoadingCmp);
            /**
             * Animations for loading
             */

            LoadingPopIn = function (_Transition) {
                _inherits(LoadingPopIn, _Transition);

                function LoadingPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, LoadingPopIn);

                    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingPopIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.loading-wrapper'));
                    wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
                    backdrop.fromTo('opacity', 0.01, 0.3);
                    _this3.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this3;
                }

                return LoadingPopIn;
            }(Transition);

            Transition.register('loading-pop-in', LoadingPopIn);

            LoadingPopOut = function (_Transition2) {
                _inherits(LoadingPopOut, _Transition2);

                function LoadingPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, LoadingPopOut);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingPopOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.loading-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
                    backdrop.fromTo('opacity', 0.3, 0);
                    _this4.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this4;
                }

                return LoadingPopOut;
            }(Transition);

            Transition.register('loading-pop-out', LoadingPopOut);

            LoadingMdPopIn = function (_Transition3) {
                _inherits(LoadingMdPopIn, _Transition3);

                function LoadingMdPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, LoadingMdPopIn);

                    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingMdPopIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.loading-wrapper'));
                    wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.1, 1);
                    backdrop.fromTo('opacity', 0.01, 0.5);
                    _this5.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this5;
                }

                return LoadingMdPopIn;
            }(Transition);

            Transition.register('loading-md-pop-in', LoadingMdPopIn);

            LoadingMdPopOut = function (_Transition4) {
                _inherits(LoadingMdPopOut, _Transition4);

                function LoadingMdPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, LoadingMdPopOut);

                    var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingMdPopOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.loading-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 0.9);
                    backdrop.fromTo('opacity', 0.5, 0);
                    _this6.easing('ease-in-out').duration(200).add(backdrop).add(wrapper);
                    return _this6;
                }

                return LoadingMdPopOut;
            }(Transition);

            Transition.register('loading-md-pop-out', LoadingMdPopOut);

            LoadingWpPopIn = function (_Transition5) {
                _inherits(LoadingWpPopIn, _Transition5);

                function LoadingWpPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, LoadingWpPopIn);

                    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingWpPopIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.loading-wrapper'));
                    wrapper.fromTo('opacity', 0.01, 1).fromTo('scale', 1.3, 1);
                    backdrop.fromTo('opacity', 0.01, 0.16);
                    _this7.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(backdrop).add(wrapper);
                    return _this7;
                }

                return LoadingWpPopIn;
            }(Transition);

            Transition.register('loading-wp-pop-in', LoadingWpPopIn);

            LoadingWpPopOut = function (_Transition6) {
                _inherits(LoadingWpPopOut, _Transition6);

                function LoadingWpPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, LoadingWpPopOut);

                    var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(LoadingWpPopOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.loading-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0).fromTo('scale', 1, 1.3);
                    backdrop.fromTo('opacity', 0.16, 0);
                    _this8.easing('ease-out').duration(150).add(backdrop).add(wrapper);
                    return _this8;
                }

                return LoadingWpPopOut;
            }(Transition);

            Transition.register('loading-wp-pop-out', LoadingWpPopOut);
            loadingIds = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/modal/modal", ["@angular/core", "../../config/bootstrap", "../../animations/animation", "../../util/util", "../../util/key", "../nav/nav-params", "../../transitions/page-transition", "../nav/view-controller", "../../util/dom"], function (_export, _context) {
    "use strict";

    var Component, ComponentResolver, HostListener, Renderer, ViewChild, ViewContainerRef, addSelector, Animation, isPresent, pascalCaseToDashCase, Key, NavParams, PageTransition, ViewController, windowDimensions, _createClass, _typeof, __decorate, __metadata, Modal, ModalCmp, ModalSlideIn, ModalSlideOut, ModalMDSlideIn, ModalMDSlideOut, _a, _b, _c, _d, _e;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ComponentResolver = _angularCore.ComponentResolver;
            HostListener = _angularCore.HostListener;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewContainerRef = _angularCore.ViewContainerRef;
        }, function (_configBootstrap) {
            addSelector = _configBootstrap.addSelector;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
            pascalCaseToDashCase = _utilUtil.pascalCaseToDashCase;
        }, function (_utilKey) {
            Key = _utilKey.Key;
        }, function (_navNavParams) {
            NavParams = _navNavParams.NavParams;
        }, function (_transitionsPageTransition) {
            PageTransition = _transitionsPageTransition.PageTransition;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }, function (_utilDom) {
            windowDimensions = _utilDom.windowDimensions;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Modal", Modal = function (_ViewController) {
                _inherits(Modal, _ViewController);

                function Modal(componentType) {
                    var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    _classCallCheck(this, Modal);

                    data.componentType = componentType;
                    opts.showBackdrop = isPresent(opts.showBackdrop) ? !!opts.showBackdrop : true;
                    opts.enableBackdropDismiss = isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
                    data.opts = opts;

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Modal).call(this, ModalCmp, data));

                    _this.isOverlay = true;
                    _this.usePortal = true;
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(Modal, [{
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        var key = direction === 'back' ? 'modalLeave' : 'modalEnter';
                        return this._nav && this._nav.config.get(key);
                    }
                }, {
                    key: "loaded",
                    value: function loaded(done) {
                        var _this2 = this;

                        // grab the instance, and proxy the ngAfterViewInit method
                        var originalNgAfterViewInit = this.instance.ngAfterViewInit;
                        this.instance.ngAfterViewInit = function () {
                            if (originalNgAfterViewInit) {
                                originalNgAfterViewInit();
                            }
                            _this2.instance.loadComponent(done);
                        };
                    }
                }], [{
                    key: "create",
                    value: function create(componentType) {
                        var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                        return new Modal(componentType, data, opts);
                    }
                }]);

                return Modal;
            }(ViewController));

            _export("Modal", Modal);

            _export("ModalCmp", ModalCmp = function () {
                function ModalCmp(_compiler, _renderer, _navParams, _viewCtrl) {
                    _classCallCheck(this, ModalCmp);

                    this._compiler = _compiler;
                    this._renderer = _renderer;
                    this._navParams = _navParams;
                    this._viewCtrl = _viewCtrl;
                    this.d = _navParams.data.opts;
                }

                _createClass(ModalCmp, [{
                    key: "loadComponent",
                    value: function loadComponent(done) {
                        var _this3 = this;

                        var componentType = this._navParams.data.componentType;
                        addSelector(componentType, 'ion-page');
                        this._compiler.resolveComponent(componentType).then(function (componentFactory) {
                            var componentRef = _this3.viewport.createComponent(componentFactory, _this3.viewport.length, _this3.viewport.parentInjector);
                            _this3._renderer.setElementClass(componentRef.location.nativeElement, 'show-page', true);
                            // auto-add page css className created from component JS class name
                            var cssClassName = pascalCaseToDashCase(componentType.name);
                            _this3._renderer.setElementClass(componentRef.location.nativeElement, cssClassName, true);
                            _this3._viewCtrl.setInstance(componentRef.instance);
                            _this3.enabled = true;
                            done();
                        });
                    }
                }, {
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        // intentionally kept empty
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(role) {
                        return this._viewCtrl.dismiss(null, role);
                    }
                }, {
                    key: "bdClick",
                    value: function bdClick() {
                        if (this.enabled && this.d.enableBackdropDismiss) {
                            this.dismiss('backdrop');
                        }
                    }
                }, {
                    key: "_keyUp",
                    value: function _keyUp(ev) {
                        if (this.enabled && this._viewCtrl.isLast() && ev.keyCode === Key.ESCAPE) {
                            this.bdClick();
                        }
                    }
                }]);

                return ModalCmp;
            }());

            _export("ModalCmp", ModalCmp);

            __decorate([ViewChild('viewport', { read: ViewContainerRef }), __metadata('design:type', typeof (_a = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _a || Object)], ModalCmp.prototype, "viewport", void 0);
            __decorate([HostListener('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], ModalCmp.prototype, "_keyUp", null);
            _export("ModalCmp", ModalCmp = __decorate([Component({
                selector: 'ion-modal',
                template: '<ion-backdrop disableScroll="false" (click)="bdClick($event)"></ion-backdrop>' + '<div class="modal-wrapper">' + '<div #viewport nav-viewport></div>' + '</div>'
            }), __metadata('design:paramtypes', [typeof (_b = typeof ComponentResolver !== 'undefined' && ComponentResolver) === 'function' && _b || Object, typeof (_c = typeof Renderer !== 'undefined' && Renderer) === 'function' && _c || Object, typeof (_d = typeof NavParams !== 'undefined' && NavParams) === 'function' && _d || Object, typeof (_e = typeof ViewController !== 'undefined' && ViewController) === 'function' && _e || Object])], ModalCmp));
            /**
             * Animations for modals
             */

            ModalSlideIn = function (_PageTransition) {
                _inherits(ModalSlideIn, _PageTransition);

                function ModalSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ModalSlideIn);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalSlideIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdropEle = ele.querySelector('ion-backdrop');
                    var backdrop = new Animation(backdropEle);
                    var wrapper = new Animation(ele.querySelector('.modal-wrapper'));
                    backdrop.fromTo('opacity', 0.01, 0.4);
                    wrapper.fromTo('translateY', '100%', '0%');
                    _this4.element(enteringView.pageRef()).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(400).add(backdrop).add(wrapper);
                    if (enteringView.hasNavbar()) {
                        // entering page has a navbar
                        var enteringNavBar = new Animation(enteringView.navbarRef());
                        enteringNavBar.before.addClass('show-navbar');
                        _this4.add(enteringNavBar);
                    }
                    return _this4;
                }

                return ModalSlideIn;
            }(PageTransition);

            PageTransition.register('modal-slide-in', ModalSlideIn);

            ModalSlideOut = function (_PageTransition2) {
                _inherits(ModalSlideOut, _PageTransition2);

                function ModalSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ModalSlideOut);

                    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapperEle = ele.querySelector('.modal-wrapper');
                    var wrapperEleRect = wrapperEle.getBoundingClientRect();
                    var wrapper = new Animation(wrapperEle);
                    // height of the screen - top of the container tells us how much to scoot it down
                    // so it's off-screen
                    var screenDimensions = windowDimensions();
                    wrapper.fromTo('translateY', '0px', screenDimensions.height - wrapperEleRect.top + "px");
                    backdrop.fromTo('opacity', 0.4, 0.0);
                    _this5.element(leavingView.pageRef()).easing('ease-out').duration(250).add(backdrop).add(wrapper);
                    return _this5;
                }

                return ModalSlideOut;
            }(PageTransition);

            PageTransition.register('modal-slide-out', ModalSlideOut);

            ModalMDSlideIn = function (_PageTransition3) {
                _inherits(ModalMDSlideIn, _PageTransition3);

                function ModalMDSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ModalMDSlideIn);

                    var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalMDSlideIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.modal-wrapper'));
                    backdrop.fromTo('opacity', 0.01, 0.4);
                    wrapper.fromTo('translateY', '40px', '0px');
                    wrapper.fromTo('opacity', 0.01, 1);
                    var DURATION = 280;
                    var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
                    _this6.element(enteringView.pageRef()).easing(EASING).duration(DURATION).add(backdrop).add(wrapper);
                    if (enteringView.hasNavbar()) {
                        // entering page has a navbar
                        var enteringNavBar = new Animation(enteringView.navbarRef());
                        enteringNavBar.before.addClass('show-navbar');
                        _this6.add(enteringNavBar);
                    }
                    return _this6;
                }

                return ModalMDSlideIn;
            }(PageTransition);

            PageTransition.register('modal-md-slide-in', ModalMDSlideIn);

            ModalMDSlideOut = function (_PageTransition4) {
                _inherits(ModalMDSlideOut, _PageTransition4);

                function ModalMDSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ModalMDSlideOut);

                    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(ModalMDSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.modal-wrapper'));
                    backdrop.fromTo('opacity', 0.4, 0.0);
                    wrapper.fromTo('translateY', '0px', '40px');
                    wrapper.fromTo('opacity', 0.99, 0);
                    _this7.element(leavingView.pageRef()).duration(200).easing('cubic-bezier(0.47,0,0.745,0.715)').add(wrapper).add(backdrop);
                    return _this7;
                }

                return ModalMDSlideOut;
            }(PageTransition);

            PageTransition.register('modal-md-slide-out', ModalMDSlideOut);
        }
    };
});
'use strict';

System.register('ionic-angular/components/nav/nav-controller', ['@angular/core', '../../config/bootstrap', '../ion', '../../util/util', '../menu/menu-controller', './nav-params', './swipe-back', '../../transitions/transition', './view-controller'], function (_export, _context) {
    "use strict";

    var EventEmitter, provide, ReflectiveInjector, addSelector, Ion, isBlank, pascalCaseToDashCase, MenuController, NavParams, SwipeBackGesture, Transition, ViewController, _typeof, _createClass, NavController, STATE_ACTIVE, STATE_INACTIVE, STATE_INIT_ENTER, STATE_INIT_LEAVE, STATE_TRANS_ENTER, STATE_TRANS_LEAVE, STATE_REMOVE, STATE_REMOVE_AFTER_TRANS, STATE_FORCE_ACTIVE, INIT_ZINDEX, PORTAL_ZINDEX, ctrlIds;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            EventEmitter = _angularCore.EventEmitter;
            provide = _angularCore.provide;
            ReflectiveInjector = _angularCore.ReflectiveInjector;
        }, function (_configBootstrap) {
            addSelector = _configBootstrap.addSelector;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_utilUtil) {
            isBlank = _utilUtil.isBlank;
            pascalCaseToDashCase = _utilUtil.pascalCaseToDashCase;
        }, function (_menuMenuController) {
            MenuController = _menuMenuController.MenuController;
        }, function (_navParams) {
            NavParams = _navParams.NavParams;
        }, function (_swipeBack) {
            SwipeBackGesture = _swipeBack.SwipeBackGesture;
        }, function (_transitionsTransition) {
            Transition = _transitionsTransition.Transition;
        }, function (_viewController) {
            ViewController = _viewController.ViewController;
        }],
        execute: function () {
            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('NavController', NavController = function (_Ion) {
                _inherits(NavController, _Ion);

                function NavController(parent, _app, config, _keyboard, elementRef, _zone, _renderer, _compiler) {
                    _classCallCheck(this, NavController);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NavController).call(this, elementRef));

                    _this._app = _app;
                    _this._keyboard = _keyboard;
                    _this._zone = _zone;
                    _this._renderer = _renderer;
                    _this._compiler = _compiler;
                    _this._transIds = 0;
                    _this._init = false;
                    _this._children = [];
                    _this._ids = -1;
                    _this._views = [];
                    /**
                     * @private
                     */
                    _this.routers = [];
                    /**
                     * @private
                     */
                    _this.isPortal = false;
                    /**
                     * @private
                     */
                    _this._trnsTime = 0;
                    _this.parent = parent;
                    _this.config = config;
                    _this._trnsDelay = config.get('pageTransitionDelay');
                    _this._sbEnabled = config.getBoolean('swipeBackEnabled');
                    _this._sbThreshold = config.getNumber('swipeBackThreshold', 40);
                    _this.id = (++ctrlIds).toString();
                    _this.viewDidLoad = new EventEmitter();
                    _this.viewWillEnter = new EventEmitter();
                    _this.viewDidEnter = new EventEmitter();
                    _this.viewWillLeave = new EventEmitter();
                    _this.viewDidLeave = new EventEmitter();
                    _this.viewWillUnload = new EventEmitter();
                    _this.viewDidUnload = new EventEmitter();
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(NavController, [{
                    key: 'getPortal',
                    value: function getPortal() {
                        return this._portal;
                    }
                }, {
                    key: 'setPortal',
                    value: function setPortal(val) {
                        this._portal = val;
                    }
                }, {
                    key: 'setViewport',
                    value: function setViewport(val) {
                        this._viewport = val;
                    }
                }, {
                    key: 'setRoot',
                    value: function setRoot(page, params, opts) {
                        return this.setPages([{ page: page, params: params }], opts);
                    }
                }, {
                    key: 'setPages',
                    value: function setPages(pages, opts) {
                        if (!pages || !pages.length) {
                            return Promise.resolve(false);
                        }
                        if (isBlank(opts)) {
                            opts = {};
                        }
                        // remove existing views
                        var leavingView = this._remove(0, this._views.length);
                        // create view controllers out of the pages and insert the new views
                        var views = pages.map(function (p) {
                            return new ViewController(p.page, p.params);
                        });
                        var enteringView = this._insert(0, views);
                        // if animation wasn't set to true then default it to NOT animate
                        if (opts.animate !== true) {
                            opts.animate = false;
                        }
                        // set the nav direction to "back" if it wasn't set
                        opts.direction = opts.direction || 'back';
                        var resolve = void 0;
                        var promise = new Promise(function (res) {
                            resolve = res;
                        });
                        // start the transition, fire resolve when done...
                        this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                            // transition has completed!!
                            resolve(hasCompleted);
                        });
                        return promise;
                    }
                }, {
                    key: 'push',
                    value: function push(page, params, opts) {
                        return this.insertPages(-1, [{ page: page, params: params }], opts);
                    }
                }, {
                    key: 'present',
                    value: function present(enteringView, opts) {
                        var rootNav = this.rootNav;
                        if (rootNav['_tabs']) {
                            // TODO: must have until this goes in
                            // https://github.com/angular/angular/issues/5481
                            console.error('A parent <ion-nav> is required for ActionSheet/Alert/Modal/Loading');
                            return;
                        }
                        if (isBlank(opts)) {
                            opts = {};
                        }
                        if (enteringView.usePortal && rootNav._portal) {
                            return rootNav._portal.present(enteringView, opts);
                        }
                        enteringView.setNav(rootNav);
                        opts.keyboardClose = false;
                        opts.direction = 'forward';
                        if (!opts.animation) {
                            opts.animation = enteringView.getTransitionName('forward');
                        }
                        enteringView.setLeavingOpts({
                            keyboardClose: false,
                            direction: 'back',
                            animation: enteringView.getTransitionName('back'),
                            ev: opts.ev
                        });
                        // present() always uses the root nav
                        // start the transition
                        return rootNav._insertViews(-1, [enteringView], opts);
                    }
                }, {
                    key: 'insert',
                    value: function insert(insertIndex, page, params, opts) {
                        return this.insertPages(insertIndex, [{ page: page, params: params }], opts);
                    }
                }, {
                    key: 'insertPages',
                    value: function insertPages(insertIndex, _insertPages, opts) {
                        var views = _insertPages.map(function (p) {
                            return new ViewController(p.page, p.params);
                        });
                        return this._insertViews(insertIndex, views, opts);
                    }
                }, {
                    key: '_insertViews',
                    value: function _insertViews(insertIndex, insertViews, opts) {
                        if (!insertViews || !insertViews.length) {
                            return Promise.reject('invalid pages');
                        }
                        if (isBlank(opts)) {
                            opts = {};
                        }
                        // insert the new page into the stack
                        // returns the newly created entering view
                        var enteringView = this._insert(insertIndex, insertViews);
                        // set the nav direction to "forward" if it wasn't set
                        opts.direction = opts.direction || 'forward';
                        // set which animation it should use if it wasn't set yet
                        if (!opts.animation) {
                            opts.animation = enteringView.getTransitionName(opts.direction);
                        }
                        var resolve = void 0;
                        var promise = new Promise(function (res) {
                            resolve = res;
                        });
                        // it's possible that the newly added view doesn't need to
                        // transition in, but was simply inserted somewhere in the stack
                        // go backwards through the stack and find the first active view
                        // which could be active or one ready to enter
                        for (var i = this._views.length - 1; i >= 0; i--) {
                            if (this._views[i].state === STATE_ACTIVE || this._views[i].state === STATE_INIT_ENTER) {
                                // found the view at the end of the stack that's either
                                // already active or it is about to enter
                                if (this._views[i] === enteringView) {
                                    // cool, so the last valid view is also our entering view!!
                                    // this means we should animate that bad boy in so it's the active view
                                    // return a promise and resolve when the transition has completed
                                    // get the leaving view which the _insert() already set
                                    var leavingView = this.getByState(STATE_INIT_LEAVE);
                                    // start the transition, fire resolve when done...
                                    this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                                        // transition has completed!!
                                        resolve(hasCompleted);
                                    });
                                    return promise;
                                }
                                break;
                            }
                        }
                        // the page was not pushed onto the end of the stack
                        // but rather inserted somewhere in the middle or beginning
                        // Since there are views after this new one, don't transition in
                        // auto resolve cuz there was is no need for an animation
                        return Promise.resolve(enteringView);
                    }
                }, {
                    key: '_insert',
                    value: function _insert(insertIndex, insertViews) {
                        var _this2 = this;

                        // when this is done, there should only be at most
                        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
                        // there should not be any that are STATE_ACTIVE after this is done
                        // allow -1 to be passed in to auto push it on the end
                        // and clean up the index if it's larger then the size of the stack
                        if (insertIndex < 0 || insertIndex > this._views.length) {
                            insertIndex = this._views.length;
                        }
                        // first see if there's an active view
                        var view = this.getActive();
                        if (view) {
                            // there's an active view, set that it's initialized to leave
                            view.state = STATE_INIT_LEAVE;
                        } else if (view = this.getByState(STATE_INIT_ENTER)) {
                            // oh no, there's already a transition initalized ready to enter!
                            // but it actually hasn't entered yet at all so lets
                            // just keep it in the array, but not render or animate it in
                            view.state = STATE_INACTIVE;
                        }
                        // insert each of the views in the pages array
                        var insertView = null;
                        insertViews.forEach(function (view, i) {
                            insertView = view;
                            // create the new entering view
                            view.setNav(_this2);
                            view.state = STATE_INACTIVE;
                            // give this inserted view an ID
                            _this2._incId(view);
                            // insert the entering view into the correct index in the stack
                            _this2._views.splice(insertIndex + i, 0, view);
                        });
                        if (insertView) {
                            insertView.state = STATE_INIT_ENTER;
                        }
                        return insertView;
                    }
                }, {
                    key: 'pop',
                    value: function pop(opts) {
                        // get the index of the active view
                        // which will become the view to be leaving
                        var activeView = this.getByState(STATE_TRANS_ENTER) || this.getByState(STATE_INIT_ENTER) || this.getActive();
                        if (isBlank(opts)) {
                            opts = {};
                        }
                        // if not set, by default climb up the nav controllers if
                        // there isn't a previous view in this nav controller
                        if (isBlank(opts.climbNav)) {
                            opts.climbNav = true;
                        }
                        return this.remove(this.indexOf(activeView), 1, opts);
                    }
                }, {
                    key: 'popToRoot',
                    value: function popToRoot(opts) {
                        return this.popTo(this.first(), opts);
                    }
                }, {
                    key: 'popTo',
                    value: function popTo(view, opts) {
                        var startIndex = this.indexOf(view);
                        if (startIndex < 0) {
                            return Promise.reject('View not found to pop to');
                        }
                        var activeView = this.getByState(STATE_TRANS_ENTER) || this.getByState(STATE_INIT_ENTER) || this.getActive();
                        var removeCount = this.indexOf(activeView) - startIndex;
                        return this.remove(startIndex + 1, removeCount, opts);
                    }
                }, {
                    key: 'remove',
                    value: function remove() {
                        var startIndex = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

                        var _this3 = this;

                        var removeCount = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
                        var opts = arguments[2];

                        if (startIndex === -1) {
                            startIndex = this._views.length - 1;
                        } else if (startIndex < 0 || startIndex >= this._views.length) {
                            return Promise.reject('remove index out of range');
                        }
                        if (isBlank(opts)) {
                            opts = {};
                        }
                        // default the direction to "back"
                        opts.direction = opts.direction || 'back';
                        // figure out the states of each view in the stack
                        var leavingView = this._remove(startIndex, removeCount);
                        if (!leavingView) {
                            var forcedActive = this.getByState(STATE_FORCE_ACTIVE);
                            if (forcedActive) {
                                // this scenario happens when a remove is going on
                                // during a transition
                                if (this._trans) {
                                    this._trans.stop();
                                    this._trans.destroy();
                                    this._trans = null;
                                    this._cleanup();
                                }
                                return Promise.resolve(false);
                            }
                        }
                        if (leavingView) {
                            var _ret = function () {
                                // there is a view ready to leave, meaning that a transition needs
                                // to happen and the previously active view is going to animate out
                                // get the view thats ready to enter
                                var enteringView = _this3.getByState(STATE_INIT_ENTER);
                                if (!enteringView && !_this3.isPortal) {
                                    // oh nos! no entering view to go to!
                                    // if there is no previous view that would enter in this nav stack
                                    // and the option is set to climb up the nav parent looking
                                    // for the next nav we could transition to instead
                                    if (opts.climbNav) {
                                        var parentNav = _this3.parent;
                                        while (parentNav) {
                                            if (!parentNav['_tabs']) {
                                                // Tabs can be a parent, but it is not a collection of views
                                                // only we're looking for an actual NavController w/ stack of views
                                                leavingView.fireWillLeave();
                                                _this3.viewWillLeave.emit(leavingView);
                                                return {
                                                    v: parentNav.pop(opts).then(function (rtnVal) {
                                                        leavingView.fireDidLeave();
                                                        _this3.viewDidLeave.emit(leavingView);
                                                        return rtnVal;
                                                    })
                                                };
                                            }
                                            parentNav = parentNav.parent;
                                        }
                                    }
                                    // there's no previous view and there's no valid parent nav
                                    // to climb to so this shouldn't actually remove the leaving
                                    // view because there's nothing that would enter, eww
                                    leavingView.state = STATE_ACTIVE;
                                    return {
                                        v: Promise.resolve(false)
                                    };
                                }
                                var resolve = void 0;
                                var promise = new Promise(function (res) {
                                    resolve = res;
                                });
                                if (!opts.animation) {
                                    opts.animation = leavingView.getTransitionName(opts.direction);
                                }
                                // start the transition, fire resolve when done...
                                _this3._transition(enteringView, leavingView, opts, function (hasCompleted) {
                                    // transition has completed!!
                                    resolve(hasCompleted);
                                });
                                return {
                                    v: promise
                                };
                            }();

                            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
                        }
                        // no need to transition when the active view isn't being removed
                        // there's still an active view after _remove() figured out states
                        // so this means views that were only removed before the active
                        // view, so auto-resolve since no transition needs to happen
                        return Promise.resolve(false);
                    }
                }, {
                    key: '_remove',
                    value: function _remove(startIndex, removeCount) {
                        var _this4 = this;

                        // when this is done, there should only be at most
                        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
                        // there should not be any that are STATE_ACTIVE after this is done
                        var view = null;
                        // loop through each view that is set to be removed
                        for (var i = startIndex, ii = removeCount + startIndex; i < ii; i++) {
                            view = this.getByIndex(i);
                            if (!view) break;
                            if (view.state === STATE_TRANS_ENTER || view.state === STATE_TRANS_LEAVE) {
                                // oh no!!! this view should be removed, but it's
                                // actively transitioning in at the moment!!
                                // since it's viewable right now, let's just set that
                                // it should be removed after the transition
                                view.state = STATE_REMOVE_AFTER_TRANS;
                            } else {
                                // if this view is already leaving then no need to immediately
                                // remove it, otherwise set the remove state
                                // this is useful if the view being removed isn't going to
                                // animate out, but just removed from the stack, no transition
                                view.state = STATE_REMOVE;
                            }
                        }
                        if (view = this.getByState(STATE_INIT_LEAVE)) {
                            // looks like there's already an active leaving view
                            // reassign previous entering view to just be inactive
                            var enteringView = this.getByState(STATE_INIT_ENTER);
                            if (enteringView) {
                                enteringView.state = STATE_INACTIVE;
                            }
                            // from the index of the leaving view, go backwards and
                            // find the first view that is inactive
                            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
                                if (this._views[i].state === STATE_INACTIVE) {
                                    this._views[i].state = STATE_INIT_ENTER;
                                    break;
                                }
                            }
                        } else if (view = this.getByState(STATE_TRANS_LEAVE)) {
                            // an active transition is happening, but a new transition
                            // still needs to happen force this view to be the active one
                            view.state = STATE_FORCE_ACTIVE;
                        } else if (view = this.getByState(STATE_REMOVE)) {
                            // there is no active transition about to happen
                            // find the first view that is supposed to be removed and
                            // set that it is the init leaving view
                            // the first view to be removed, it should init leave
                            view.state = STATE_INIT_LEAVE;
                            view.fireWillUnload();
                            this.viewWillUnload.emit(view);
                            // from the index of the leaving view, go backwards and
                            // find the first view that is inactive so it can be the entering
                            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
                                if (this._views[i].state === STATE_INACTIVE) {
                                    this._views[i].state = STATE_INIT_ENTER;
                                    break;
                                }
                            }
                        }
                        // if there is still an active view, then it wasn't one that was
                        // set to be removed, so there actually won't be a transition at all
                        view = this.getActive();
                        if (view) {
                            // the active view remains untouched, so all the removes
                            // must have happened before it, so really no need for transition
                            view = this.getByState(STATE_INIT_ENTER);
                            if (view) {
                                // if it was going to enter, then just make inactive
                                view.state = STATE_INACTIVE;
                            }
                            view = this.getByState(STATE_INIT_LEAVE);
                            if (view) {
                                // this was going to leave, so just remove it completely
                                view.state = STATE_REMOVE;
                            }
                        }
                        // remove views that have been set to be removed, but not
                        // apart of any transitions that will eventually happen
                        this._views.filter(function (v) {
                            return v.state === STATE_REMOVE;
                        }).forEach(function (view) {
                            view.fireWillLeave();
                            _this4.viewWillLeave.emit(view);
                            view.fireDidLeave();
                            _this4.viewDidLeave.emit(view);
                            _this4._views.splice(_this4.indexOf(view), 1);
                            view.destroy();
                        });
                        return this.getByState(STATE_INIT_LEAVE);
                    }
                }, {
                    key: '_transition',
                    value: function _transition(enteringView, leavingView, opts, done) {
                        var _this5 = this;

                        var transId = ++this._transIds;
                        if (enteringView === leavingView) {
                            // if the entering view and leaving view are the same thing don't continue
                            this._transFinish(transId, enteringView, leavingView, null, false);
                            return done(false);
                        }
                        if (isBlank(opts)) {
                            opts = {};
                        }
                        this._setAnimate(opts);
                        if (!leavingView) {
                            // if no leaving view then create a bogus one
                            leavingView = new ViewController();
                        }
                        if (!enteringView) {
                            // if no entering view then create a bogus one
                            enteringView = new ViewController();
                            enteringView.fireLoaded();
                            this.viewDidLoad.emit(enteringView);
                        }
                        /* Async steps to complete a transition
                          1. _render: compile the view and render it in the DOM. Load page if it hasn't loaded already. When done call postRender
                          2. _postRender: Run willEnter/willLeave, then wait a frame (change detection happens), then call beginTransition
                          3. _beforeTrans: Create the transition's animation, play the animation, wait for it to end
                          4. _afterTrans: Run didEnter/didLeave, call _transComplete()
                          5. _transComplete: Cleanup, remove cache views, then call the final callback
                        */
                        // begin the multiple async process of transitioning to the entering view
                        this._render(transId, enteringView, leavingView, opts, function (hasCompleted) {
                            _this5._transFinish(transId, enteringView, leavingView, opts.direction, hasCompleted);
                            done(hasCompleted);
                        });
                    }
                }, {
                    key: '_setAnimate',
                    value: function _setAnimate(opts) {
                        if (this._views.length === 1 && !this._init && !this.isPortal || this.config.get('animate') === false) {
                            opts.animate = false;
                        }
                    }
                }, {
                    key: '_render',
                    value: function _render(transId, enteringView, leavingView, opts, done) {
                        var _this6 = this;

                        // compile/load the view into the DOM
                        if (enteringView.state === STATE_INACTIVE) {
                            // this entering view is already set to inactive, so this
                            // transition must be canceled, so don't continue
                            return done();
                        }
                        enteringView.state = STATE_INIT_ENTER;
                        leavingView.state = STATE_INIT_LEAVE;
                        // remember if this nav is already transitioning or not
                        var isAlreadyTransitioning = this.isTransitioning();
                        if (enteringView.isLoaded()) {
                            // already compiled this view, do not load again and continue
                            this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
                        } else {
                            // view has not been compiled/loaded yet
                            // continue once the view has finished compiling
                            // DOM WRITE
                            this.setTransitioning(true, 500);
                            this.loadPage(enteringView, this._viewport, opts, function () {
                                enteringView.fireLoaded();
                                _this6.viewDidLoad.emit(enteringView);
                                _this6._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
                            });
                        }
                    }
                }, {
                    key: '_postRender',
                    value: function _postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done) {
                        // called after _render has completed and the view is compiled/loaded
                        if (enteringView.state === STATE_INACTIVE) {
                            // this entering view is already set to inactive, so this
                            // transition must be canceled, so don't continue
                            return done();
                        }
                        if (!opts.preload) {
                            // the enteringView will become the active view, and is not being preloaded
                            // set the correct zIndex for the entering and leaving views
                            // if there's already another trans_enter happening then
                            // the zIndex for the entering view should go off of that one
                            // DOM WRITE
                            var lastestLeavingView = this.getByState(STATE_TRANS_ENTER) || leavingView;
                            this._setZIndex(enteringView, lastestLeavingView, opts.direction);
                            // make sure the entering and leaving views are showing
                            // DOM WRITE
                            if (isAlreadyTransitioning) {
                                // the previous transition was still going when this one started
                                // so to be safe, only update showing the entering/leaving
                                // don't hide the others when they could still be transitioning
                                enteringView.domShow(true, this._renderer);
                                leavingView.domShow(true, this._renderer);
                            } else {
                                // there are no other transitions happening but this one
                                // only entering/leaving should show, all others hidden
                                // also if a view is an overlay or the previous view is an
                                // overlay then always show the overlay and the view before it
                                var view;
                                var shouldShow;
                                for (var i = 0, ii = this._views.length; i < ii; i++) {
                                    view = this._views[i];
                                    shouldShow = view === enteringView || view === leavingView || view.isOverlay || (i < ii - 1 ? this._views[i + 1].isOverlay : false);
                                    view.domShow(shouldShow, this._renderer);
                                }
                            }
                            // call each view's lifecycle events
                            if (leavingView.fireOtherLifecycles) {
                                // only fire entering lifecycle if the leaving
                                // view hasn't explicitly set not to
                                enteringView.fireWillEnter();
                                this.viewWillEnter.emit(enteringView);
                            }
                            if (enteringView.fireOtherLifecycles) {
                                // only fire leaving lifecycle if the entering
                                // view hasn't explicitly set not to
                                leavingView.fireWillLeave();
                                this.viewWillLeave.emit(leavingView);
                            }
                        } else {
                            // this view is being preloaded, don't call lifecycle events
                            // transition does not need to animate
                            opts.animate = false;
                        }
                        this._beforeTrans(enteringView, leavingView, opts, done);
                    }
                }, {
                    key: '_beforeTrans',
                    value: function _beforeTrans(enteringView, leavingView, opts, done) {
                        var _this7 = this;

                        // called after one raf from postRender()
                        // create the transitions animation, play the animation
                        // when the transition ends call wait for it to end
                        if (enteringView.state === STATE_INACTIVE) {
                            // this entering view is already set to inactive, so this
                            // transition must be canceled, so don't continue
                            return done();
                        }
                        enteringView.state = STATE_TRANS_ENTER;
                        leavingView.state = STATE_TRANS_LEAVE;
                        // everything during the transition should runOutsideAngular
                        this._zone.runOutsideAngular(function () {
                            // init the transition animation
                            var transitionOpts = {
                                animation: opts.animation,
                                direction: opts.direction,
                                duration: opts.duration,
                                easing: opts.easing,
                                renderDelay: opts.transitionDelay || _this7._trnsDelay,
                                isRTL: _this7.config.platform.isRTL(),
                                ev: opts.ev
                            };
                            var transAnimation = _this7._createTrans(enteringView, leavingView, transitionOpts);
                            _this7._trans && _this7._trans.destroy();
                            _this7._trans = transAnimation;
                            if (opts.animate === false) {
                                // force it to not animate the elements, just apply the "to" styles
                                transAnimation.duration(0);
                            }
                            // check if a parent is transitioning and get the time that it ends
                            var parentTransitionEndTime = _this7._getLongestTrans(Date.now());
                            if (parentTransitionEndTime > 0) {
                                // the parent is already transitioning and has disabled the app
                                // so just update the local transitioning information
                                var duration = parentTransitionEndTime - Date.now();
                                _this7.setTransitioning(true, duration);
                            } else {
                                // this is the only active transition (for now), so disable the app
                                var keyboardDurationPadding = 0;
                                if (_this7._keyboard.isOpen()) {
                                    // add XXms to the duration the app is disabled when the keyboard is open
                                    keyboardDurationPadding = 600;
                                }
                                var _duration = transAnimation.getDuration() + keyboardDurationPadding;
                                var enableApp = _duration < 64;
                                _this7._app.setEnabled(enableApp, _duration);
                                _this7.setTransitioning(!enableApp, _duration);
                            }
                            // create a callback for when the animation is done
                            transAnimation.onFinish(function (trans) {
                                // transition animation has ended
                                // destroy the animation and it's element references
                                trans.destroy();
                                _this7._afterTrans(enteringView, leavingView, opts, trans.hasCompleted, done);
                            });
                            // cool, let's do this, start the transition
                            if (opts.progressAnimation) {
                                // this is a swipe to go back, just get the transition progress ready
                                // kick off the swipe animation start
                                transAnimation.progressStart();
                            } else {
                                // this is a normal animation
                                // kick it off and let it play through
                                transAnimation.play();
                            }
                        });
                    }
                }, {
                    key: '_afterTrans',
                    value: function _afterTrans(enteringView, leavingView, opts, hasCompleted, done) {
                        var _this8 = this;

                        // transition has completed, update each view's state
                        // place back into the zone, run didEnter/didLeave
                        // call the final callback when done
                        // run inside of the zone again
                        this._zone.run(function () {
                            if (!opts.preload && hasCompleted) {
                                if (leavingView.fireOtherLifecycles) {
                                    // only fire entering lifecycle if the leaving
                                    // view hasn't explicitly set not to
                                    enteringView.fireDidEnter();
                                    _this8.viewDidEnter.emit(enteringView);
                                }
                                if (enteringView.fireOtherLifecycles) {
                                    // only fire leaving lifecycle if the entering
                                    // view hasn't explicitly set not to
                                    leavingView.fireDidLeave();
                                    _this8.viewDidLeave.emit(leavingView);
                                }
                            }
                            if (enteringView.state === STATE_INACTIVE) {
                                // this entering view is already set to inactive, so this
                                // transition must be canceled, so don't continue
                                return done(hasCompleted);
                            }
                            if (opts.keyboardClose !== false && _this8._keyboard.isOpen()) {
                                // the keyboard is still open!
                                // no problem, let's just close for them
                                _this8._keyboard.close();
                                _this8._keyboard.onClose(function () {
                                    // keyboard has finished closing, transition complete
                                    done(hasCompleted);
                                }, 32);
                            } else {
                                // all good, transition complete
                                done(hasCompleted);
                            }
                        });
                    }
                }, {
                    key: '_transFinish',
                    value: function _transFinish(transId, enteringView, leavingView, direction, hasCompleted) {
                        var _this9 = this;

                        // a transition has completed, but not sure if it's the last one or not
                        // check if this transition is the most recent one or not
                        if (transId === this._transIds) {
                            // ok, good news, there were no other transitions that kicked
                            // off during the time this transition started and ended
                            if (hasCompleted) {
                                // this transition has completed as normal
                                // so the entering one is now the active view
                                // and the leaving view is now just inactive
                                if (enteringView.state !== STATE_REMOVE_AFTER_TRANS) {
                                    enteringView.state = STATE_ACTIVE;
                                }
                                if (leavingView.state !== STATE_REMOVE_AFTER_TRANS) {
                                    leavingView.state = STATE_INACTIVE;
                                }
                                // only need to do all this clean up if the transition
                                // completed, otherwise nothing actually changed
                                // destroy all of the views that come after the active view
                                this._cleanup();
                                // make sure only this entering view and PREVIOUS view are the
                                // only two views that are not display:none
                                // do not make any changes to the stack's current visibility
                                // if there is an overlay somewhere in the stack
                                leavingView = this.getPrevious(enteringView);
                                if (this.hasOverlay()) {
                                    // ensure the entering view is showing
                                    enteringView.domShow(true, this._renderer);
                                } else {
                                    // only possibly hide a view if there are no overlays in the stack
                                    this._views.forEach(function (view) {
                                        var shouldShow = view === enteringView || view === leavingView;
                                        view.domShow(shouldShow, _this9._renderer);
                                    });
                                }
                                // this check only needs to happen once, which will add the css
                                // class to the nav when it's finished its first transition
                                if (!this._init) {
                                    this._init = true;
                                }
                            } else {
                                // this transition has not completed, meaning the
                                // entering view did not end up as the active view
                                // this would happen when swipe to go back started
                                // but the user did not complete the swipe and the
                                // what was the active view stayed as the active view
                                leavingView.state = STATE_ACTIVE;
                                enteringView.state = STATE_INACTIVE;
                            }
                            // check if there is a parent actively transitioning
                            var transitionEndTime = this._getLongestTrans(Date.now());
                            // if transitionEndTime is greater than 0, there is a parent transition occurring
                            // so delegate enabling the app to the parent.  If it <= 0, go ahead and enable the app
                            if (transitionEndTime <= 0) {
                                this._app && this._app.setEnabled(true);
                            }
                            this.setTransitioning(false);
                            if (direction !== null && hasCompleted && !this.isPortal) {
                                // notify router of the state change if a direction was provided
                                // multiple routers can exist and each should be notified
                                this.routers.forEach(function (router) {
                                    router.stateChange(direction, enteringView);
                                });
                            }
                            // see if we should add the swipe back gesture listeners or not
                            this._sbCheck();
                            if (this._portal) {
                                this._portal._views.forEach(function (view) {
                                    if (view.data && view.data.dismissOnPageChange) {
                                        view.dismiss();
                                    }
                                });
                            }
                        } else {
                            // darn, so this wasn't the most recent transition
                            // so while this one did end, there's another more recent one
                            // still going on. Because a new transition is happening,
                            // then this entering view isn't actually going to be the active
                            // one, so only update the state to active/inactive if the state
                            // wasn't already updated somewhere else during its transition
                            if (enteringView.state === STATE_TRANS_ENTER) {
                                enteringView.state = STATE_INACTIVE;
                            }
                            if (leavingView.state === STATE_TRANS_LEAVE) {
                                leavingView.state = STATE_INACTIVE;
                            }
                        }
                    }
                }, {
                    key: '_createTrans',
                    value: function _createTrans(enteringView, leavingView, transitionOpts) {
                        return Transition.createTransition(enteringView, leavingView, transitionOpts);
                    }
                }, {
                    key: '_cleanup',
                    value: function _cleanup() {
                        var _this10 = this;

                        // ok, cleanup time!! Destroy all of the views that are
                        // INACTIVE and come after the active view
                        var activeViewIndex = this.indexOf(this.getActive());
                        var destroys = this._views.filter(function (v) {
                            return v.state === STATE_REMOVE_AFTER_TRANS;
                        });
                        for (var i = activeViewIndex + 1; i < this._views.length; i++) {
                            if (this._views[i].state === STATE_INACTIVE) {
                                destroys.push(this._views[i]);
                            }
                        }
                        // all pages being destroyed should be removed from the list of
                        // pages and completely removed from the dom
                        destroys.forEach(function (view) {
                            _this10._views.splice(_this10.indexOf(view), 1);
                            view.destroy();
                        });
                        // if any z-index goes under 0, then reset them all
                        var shouldResetZIndex = this._views.some(function (v) {
                            return v.zIndex < 0;
                        });
                        if (shouldResetZIndex) {
                            this._views.forEach(function (view) {
                                view.setZIndex(view.zIndex + INIT_ZINDEX + 1, _this10._renderer);
                            });
                        }
                    }
                }, {
                    key: 'getActiveChildNav',
                    value: function getActiveChildNav() {
                        return this._children[this._children.length - 1];
                    }
                }, {
                    key: 'registerChildNav',
                    value: function registerChildNav(nav) {
                        this._children.push(nav);
                    }
                }, {
                    key: 'unregisterChildNav',
                    value: function unregisterChildNav(nav) {
                        var index = this._children.indexOf(nav);
                        if (index > -1) {
                            this._children.splice(index, 1);
                        }
                    }
                }, {
                    key: 'ngOnDestroy',
                    value: function ngOnDestroy() {
                        for (var i = this._views.length - 1; i >= 0; i--) {
                            this._views[i].destroy();
                        }
                        this._views.length = 0;
                        if (this.parent && this.parent.unregisterChildNav) {
                            this.parent.unregisterChildNav(this);
                        }
                    }
                }, {
                    key: 'loadPage',
                    value: function loadPage(view, viewport, opts, done) {
                        var _this11 = this;

                        if (!viewport || !view.componentType) {
                            return;
                        }
                        // TEMPORARY: automatically set selector w/ dah reflector
                        // TODO: use componentFactory.create once fixed
                        addSelector(view.componentType, 'ion-page');
                        this._compiler.resolveComponent(view.componentType).then(function (componentFactory) {
                            // add more providers to just this page
                            var componentProviders = ReflectiveInjector.resolve([provide(NavController, { useValue: _this11 }), provide(ViewController, { useValue: view }), provide(NavParams, { useValue: view.getNavParams() })]);
                            var childInjector = ReflectiveInjector.fromResolvedProviders(componentProviders, _this11._viewport.parentInjector);
                            var componentRef = componentFactory.create(childInjector, null, null);
                            viewport.insert(componentRef.hostView, viewport.length);
                            // a new ComponentRef has been created
                            // set the ComponentRef's instance to its ViewController
                            view.setInstance(componentRef.instance);
                            // the component has been loaded, so call the view controller's loaded method to load any dependencies into the dom
                            view.loaded(function () {
                                // the ElementRef of the actual ion-page created
                                var pageElementRef = componentRef.location;
                                // remember the ChangeDetectorRef for this ViewController
                                view.setChangeDetector(componentRef.changeDetectorRef);
                                // remember the ElementRef to the ion-page elementRef that was just created
                                view.setPageRef(pageElementRef);
                                // auto-add page css className created from component JS class name
                                var cssClassName = pascalCaseToDashCase(view.componentType.name);
                                _this11._renderer.setElementClass(pageElementRef.nativeElement, cssClassName, true);
                                view.onDestroy(function () {
                                    // ensure the element is cleaned up for when the view pool reuses this element
                                    _this11._renderer.setElementAttribute(pageElementRef.nativeElement, 'class', null);
                                    _this11._renderer.setElementAttribute(pageElementRef.nativeElement, 'style', null);
                                    componentRef.destroy();
                                });
                                // our job is done here
                                done(view);
                            });
                        });
                    }
                }, {
                    key: 'swipeBackStart',
                    value: function swipeBackStart() {
                        // default the direction to "back"
                        var opts = {
                            direction: 'back',
                            progressAnimation: true
                        };
                        // figure out the states of each view in the stack
                        var leavingView = this._remove(this._views.length - 1, 1);
                        if (leavingView) {
                            opts.animation = leavingView.getTransitionName(opts.direction);
                            // get the view thats ready to enter
                            var enteringView = this.getByState(STATE_INIT_ENTER);
                            // start the transition, fire callback when done...
                            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
                                // swipe back has finished!!
                                console.debug('swipeBack, hasCompleted', hasCompleted);
                            });
                        }
                    }
                }, {
                    key: 'swipeBackProgress',
                    value: function swipeBackProgress(stepValue) {
                        if (this._trans && this._sbGesture) {
                            // continue to disable the app while actively dragging
                            this._app.setEnabled(false, 4000);
                            this.setTransitioning(true, 4000);
                            // set the transition animation's progress
                            this._trans.progressStep(stepValue);
                        }
                    }
                }, {
                    key: 'swipeBackEnd',
                    value: function swipeBackEnd(shouldComplete, currentStepValue) {
                        if (this._trans && this._sbGesture) {
                            // the swipe back gesture has ended
                            this._trans.progressEnd(shouldComplete, currentStepValue);
                        }
                    }
                }, {
                    key: '_sbCheck',
                    value: function _sbCheck() {
                        var _this12 = this;

                        if (this._sbEnabled) {
                            // this nav controller can have swipe to go back
                            if (!this._sbGesture) {
                                // create the swipe back gesture if we haven't already
                                var opts = {
                                    edge: 'left',
                                    threshold: this._sbThreshold
                                };
                                var menuCtrl = this._app.getAppInjector().get(MenuController);
                                this._sbGesture = new SwipeBackGesture(this.getNativeElement(), opts, this, menuCtrl);
                            }
                            if (this.canSwipeBack()) {
                                // it is be possible to swipe back
                                if (!this._sbGesture.isListening) {
                                    this._zone.runOutsideAngular(function () {
                                        // start listening if it's not already
                                        console.debug('swipeBack gesture, listen');
                                        _this12._sbGesture.listen();
                                    });
                                }
                            } else if (this._sbGesture.isListening) {
                                // it should not be possible to swipe back
                                // but the gesture is still listening
                                console.debug('swipeBack gesture, unlisten');
                                this._sbGesture.unlisten();
                            }
                        }
                    }
                }, {
                    key: 'canSwipeBack',
                    value: function canSwipeBack() {
                        return this._sbEnabled && !this.isTransitioning() && this._app.isEnabled() && this.canGoBack();
                    }
                }, {
                    key: 'canGoBack',
                    value: function canGoBack() {
                        var activeView = this.getActive();
                        if (activeView) {
                            return activeView.enableBack();
                        }
                        return false;
                    }
                }, {
                    key: 'isTransitioning',
                    value: function isTransitioning() {
                        return this._trnsTime > Date.now();
                    }
                }, {
                    key: 'setTransitioning',
                    value: function setTransitioning(isTransitioning) {
                        var fallback = arguments.length <= 1 || arguments[1] === undefined ? 700 : arguments[1];

                        this._trnsTime = isTransitioning ? Date.now() + fallback : 0;
                    }
                }, {
                    key: '_getLongestTrans',
                    value: function _getLongestTrans(now) {
                        var parentNav = this.parent;
                        var transitionEndTime = -1;
                        while (parentNav) {
                            if (parentNav._trnsTime > transitionEndTime) {
                                transitionEndTime = parentNav._trnsTime;
                            }
                            parentNav = parentNav.parent;
                        }
                        // only check if the transitionTime is greater than the current time once
                        return transitionEndTime > 0 && transitionEndTime > now ? transitionEndTime : 0;
                    }
                }, {
                    key: 'hasOverlay',
                    value: function hasOverlay() {
                        for (var i = this._views.length - 1; i >= 0; i--) {
                            if (this._views[i].isOverlay) {
                                return true;
                            }
                        }
                        return false;
                    }
                }, {
                    key: 'getByState',
                    value: function getByState(state) {
                        for (var i = this._views.length - 1; i >= 0; i--) {
                            if (this._views[i].state === state) {
                                return this._views[i];
                            }
                        }
                        return null;
                    }
                }, {
                    key: 'getByIndex',
                    value: function getByIndex(index) {
                        return index < this._views.length && index > -1 ? this._views[index] : null;
                    }
                }, {
                    key: 'getActive',
                    value: function getActive() {
                        return this.getByState(STATE_ACTIVE);
                    }
                }, {
                    key: 'isActive',
                    value: function isActive(view) {
                        return !!(view && view.state === STATE_ACTIVE);
                    }
                }, {
                    key: 'getPrevious',
                    value: function getPrevious(view) {
                        return this.getByIndex(this.indexOf(view) - 1);
                    }
                }, {
                    key: 'first',
                    value: function first() {
                        return this._views.length ? this._views[0] : null;
                    }
                }, {
                    key: 'last',
                    value: function last() {
                        return this._views.length ? this._views[this._views.length - 1] : null;
                    }
                }, {
                    key: 'indexOf',
                    value: function indexOf(view) {
                        return this._views.indexOf(view);
                    }
                }, {
                    key: 'length',
                    value: function length() {
                        return this._views.length;
                    }
                }, {
                    key: 'isSwipeBackEnabled',
                    value: function isSwipeBackEnabled() {
                        return this._sbEnabled;
                    }
                }, {
                    key: 'registerRouter',
                    value: function registerRouter(router) {
                        this.routers.push(router);
                    }
                }, {
                    key: '_incId',
                    value: function _incId(view) {
                        view.id = this.id + '-' + ++this._ids;
                    }
                }, {
                    key: '_setZIndex',
                    value: function _setZIndex(enteringView, leavingView, direction) {
                        if (enteringView) {
                            // get the leaving view, which could be in various states
                            if (!leavingView || !leavingView.isLoaded()) {
                                // the leavingView is a mocked view, either we're
                                // actively transitioning or it's the initial load
                                var previousView = this.getPrevious(enteringView);
                                if (previousView && previousView.isLoaded()) {
                                    // we found a better previous view to reference
                                    // use this one instead
                                    enteringView.setZIndex(previousView.zIndex + 1, this._renderer);
                                } else {
                                    // this is the initial view
                                    enteringView.setZIndex(this.isPortal ? PORTAL_ZINDEX : INIT_ZINDEX, this._renderer);
                                }
                            } else if (direction === 'back') {
                                // moving back
                                enteringView.setZIndex(leavingView.zIndex - 1, this._renderer);
                            } else {
                                // moving forward
                                enteringView.setZIndex(leavingView.zIndex + 1, this._renderer);
                            }
                        }
                    }
                }, {
                    key: 'rootNav',
                    get: function get() {
                        var nav = this;
                        while (nav.parent) {
                            nav = nav.parent;
                        }
                        return nav;
                    }
                }]);

                return NavController;
            }(Ion));

            _export('NavController', NavController);

            STATE_ACTIVE = 'active';
            STATE_INACTIVE = 'inactive';
            STATE_INIT_ENTER = 'init_enter';
            STATE_INIT_LEAVE = 'init_leave';
            STATE_TRANS_ENTER = 'trans_enter';
            STATE_TRANS_LEAVE = 'trans_leave';
            STATE_REMOVE = 'remove';
            STATE_REMOVE_AFTER_TRANS = 'remove_after_trans';
            STATE_FORCE_ACTIVE = 'force_active';
            INIT_ZINDEX = 100;
            PORTAL_ZINDEX = 9999;
            ctrlIds = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/nav/nav-params", [], function (_export, _context) {
  "use strict";

  var _createClass, NavParams;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  return {
    setters: [],
    execute: function () {
      _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      _export("NavParams", NavParams = function () {
        /**
         * @private
         * @param {TODO} data  TODO
         */

        function NavParams() {
          var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          _classCallCheck(this, NavParams);

          this.data = data;
        }
        /**
         * Get the value of a nav-parameter for the current view
         *
         * ```ts
         * export class MyClass{
         *  constructor(private params: NavParams){
         *    // userParams is an object we have in our nav-parameters
         *    this.params.get('userParams');
         *  }
         * }
         * ```
         *
         *
         * @param {string} parameter Which param you want to look up
         */


        _createClass(NavParams, [{
          key: "get",
          value: function get(param) {
            return this.data[param];
          }
        }]);

        return NavParams;
      }());

      _export("NavParams", NavParams);
    }
  };
});
"use strict";

System.register("ionic-angular/components/nav/nav-pop", ["@angular/core", "./nav-controller"], function (_export, _context) {
    "use strict";

    var Directive, Optional, NavController, _createClass, _typeof, __decorate, __metadata, __param, NavPop, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            Optional = _angularCore.Optional;
        }, function (_navController) {
            NavController = _navController.NavController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("NavPop", NavPop = function () {
                function NavPop(_nav) {
                    _classCallCheck(this, NavPop);

                    this._nav = _nav;
                    if (!_nav) {
                        console.error('nav-pop must be within a NavController');
                    }
                }
                /**
                 * @private
                 */


                _createClass(NavPop, [{
                    key: "onClick",
                    value: function onClick() {
                        this._nav && this._nav.pop();
                    }
                }]);

                return NavPop;
            }());

            _export("NavPop", NavPop);

            _export("NavPop", NavPop = __decorate([Directive({
                selector: '[nav-pop]',
                host: {
                    '(click)': 'onClick()',
                    'role': 'link'
                }
            }), __param(0, Optional()), __metadata('design:paramtypes', [typeof (_a = typeof NavController !== 'undefined' && NavController) === 'function' && _a || Object])], NavPop));
        }
    };
});
"use strict";

System.register("ionic-angular/components/nav/nav-portal", ["@angular/core", "../app/app", "../../config/config", "../../util/keyboard", "./nav-controller", "./view-controller"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, Optional, NgZone, Renderer, ComponentResolver, ViewContainerRef, App, Config, Keyboard, NavController, ViewController, _typeof, __decorate, __metadata, __param, NavPortal, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Optional = _angularCore.Optional;
            NgZone = _angularCore.NgZone;
            Renderer = _angularCore.Renderer;
            ComponentResolver = _angularCore.ComponentResolver;
            ViewContainerRef = _angularCore.ViewContainerRef;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilKeyboard) {
            Keyboard = _utilKeyboard.Keyboard;
        }, function (_navController) {
            NavController = _navController.NavController;
        }, function (_viewController) {
            ViewController = _viewController.ViewController;
        }],
        execute: function () {
            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("NavPortal", NavPortal = function (_NavController) {
                _inherits(NavPortal, _NavController);

                function NavPortal(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler, viewPort) {
                    _classCallCheck(this, NavPortal);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NavPortal).call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler));

                    _this.isPortal = true;
                    _this.setViewport(viewPort);
                    return _this;
                }

                return NavPortal;
            }(NavController));

            _export("NavPortal", NavPortal);

            _export("NavPortal", NavPortal = __decorate([Directive({
                selector: '[nav-portal]'
            }), __param(0, Optional()), __param(1, Optional()), __metadata('design:paramtypes', [typeof (_a = typeof ViewController !== 'undefined' && ViewController) === 'function' && _a || Object, typeof (_b = typeof NavController !== 'undefined' && NavController) === 'function' && _b || Object, typeof (_c = typeof App !== 'undefined' && App) === 'function' && _c || Object, typeof (_d = typeof Config !== 'undefined' && Config) === 'function' && _d || Object, typeof (_e = typeof Keyboard !== 'undefined' && Keyboard) === 'function' && _e || Object, typeof (_f = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _f || Object, typeof (_g = typeof NgZone !== 'undefined' && NgZone) === 'function' && _g || Object, typeof (_h = typeof Renderer !== 'undefined' && Renderer) === 'function' && _h || Object, typeof (_j = typeof ComponentResolver !== 'undefined' && ComponentResolver) === 'function' && _j || Object, typeof (_k = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _k || Object])], NavPortal));
        }
    };
});
"use strict";

System.register("ionic-angular/components/nav/nav-push", ["@angular/core", "./nav-controller"], function (_export, _context) {
    "use strict";

    var Directive, Input, Optional, NavController, _createClass, _typeof, __decorate, __metadata, __param, NavPush, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
        }, function (_navController) {
            NavController = _navController.NavController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("NavPush", NavPush = function () {
                function NavPush(_nav) {
                    _classCallCheck(this, NavPush);

                    this._nav = _nav;
                    if (!_nav) {
                        console.error('nav-push must be within a NavController');
                    }
                }
                /**
                 * @private
                 */


                _createClass(NavPush, [{
                    key: "onClick",
                    value: function onClick() {
                        var destination = void 0,
                            params = void 0;
                        if (this.navPush instanceof Array) {
                            if (this.navPush.length > 2) {
                                throw 'Too many [navPush] arguments, expects [View, { params }]';
                            }
                            destination = this.navPush[0];
                            params = this.navPush[1] || this.navParams;
                        } else {
                            destination = this.navPush;
                            params = this.navParams;
                        }
                        this._nav && this._nav.push(destination, params);
                    }
                }]);

                return NavPush;
            }());

            _export("NavPush", NavPush);

            __decorate([Input(), __metadata('design:type', Object)], NavPush.prototype, "navPush", void 0);
            __decorate([Input(), __metadata('design:type', Object)], NavPush.prototype, "navParams", void 0);
            _export("NavPush", NavPush = __decorate([Directive({
                selector: '[navPush]',
                host: {
                    '(click)': 'onClick()',
                    'role': 'link'
                }
            }), __param(0, Optional()), __metadata('design:paramtypes', [typeof (_a = typeof NavController !== 'undefined' && NavController) === 'function' && _a || Object])], NavPush));
        }
    };
});
"use strict";

System.register("ionic-angular/components/nav/nav-router", ["@angular/core"], function (_export, _context) {
    "use strict";

    var Directive, _typeof, __decorate, __metadata, NavRouter;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
        }],
        execute: function () {
            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("NavRouter", NavRouter = function NavRouter() {
                _classCallCheck(this, NavRouter);
            });

            _export("NavRouter", NavRouter);

            _export("NavRouter", NavRouter = __decorate([Directive({
                selector: 'ion-nav'
            }), __metadata('design:paramtypes', [])], NavRouter));
        }
    };
});
"use strict";

System.register("ionic-angular/components/nav/nav", ["@angular/core", "../app/app", "../../config/config", "../../util/keyboard", "../../util/util", "./nav-controller", "./nav-portal", "./view-controller"], function (_export, _context) {
    "use strict";

    var Component, ComponentResolver, ElementRef, Input, Optional, NgZone, Renderer, ViewChild, ViewContainerRef, ViewEncapsulation, App, Config, Keyboard, isTrueProperty, NavController, NavPortal, ViewController, _createClass, _typeof, __decorate, __metadata, __param, Nav, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ComponentResolver = _angularCore.ComponentResolver;
            ElementRef = _angularCore.ElementRef;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
            NgZone = _angularCore.NgZone;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewContainerRef = _angularCore.ViewContainerRef;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilKeyboard) {
            Keyboard = _utilKeyboard.Keyboard;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_navController) {
            NavController = _navController.NavController;
        }, function (_navPortal) {
            NavPortal = _navPortal.NavPortal;
        }, function (_viewController) {
            ViewController = _viewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Nav", Nav = function (_NavController) {
                _inherits(Nav, _NavController);

                function Nav(viewCtrl, parent, app, config, keyboard, elementRef, zone, renderer, compiler) {
                    _classCallCheck(this, Nav);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Nav).call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler));

                    _this._hasInit = false;
                    if (viewCtrl) {
                        // an ion-nav can also act as an ion-page within a parent ion-nav
                        // this would happen when an ion-nav nests a child ion-nav.
                        viewCtrl.setContent(_this);
                        viewCtrl.setContentRef(elementRef);
                    }
                    if (parent) {
                        // this Nav has a parent Nav
                        parent.registerChildNav(_this);
                    } else if (app) {
                        // this is the root navcontroller for the entire app
                        _this._app.setRootNav(_this);
                    }
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(Nav, [{
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        this._hasInit = true;
                        if (this._root) {
                            if (typeof this._root !== 'function') {
                                throw 'The [root] property in <ion-nav> must be given a reference to a component class from within the constructor.';
                            }
                            this.push(this._root);
                        }
                    }
                }, {
                    key: "_vp",
                    set: function set(val) {
                        this.setViewport(val);
                    }
                }, {
                    key: "root",
                    get: function get() {
                        return this._root;
                    },
                    set: function set(page) {
                        this._root = page;
                        if (this._hasInit) {
                            this.setRoot(page);
                        }
                    }
                }, {
                    key: "swipeBackEnabled",
                    get: function get() {
                        return this._sbEnabled;
                    },
                    set: function set(val) {
                        this._sbEnabled = isTrueProperty(val);
                    }
                }, {
                    key: "_np",
                    set: function set(val) {
                        this.setPortal(val);
                    }
                }]);

                return Nav;
            }(NavController));

            _export("Nav", Nav);

            __decorate([ViewChild('viewport', { read: ViewContainerRef }), __metadata('design:type', typeof (_a = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _a || Object), __metadata('design:paramtypes', [typeof (_b = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _b || Object])], Nav.prototype, "_vp", null);
            __decorate([Input(), __metadata('design:type', Object)], Nav.prototype, "root", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Nav.prototype, "swipeBackEnabled", null);
            __decorate([ViewChild(NavPortal), __metadata('design:type', typeof (_c = typeof NavPortal !== 'undefined' && NavPortal) === 'function' && _c || Object), __metadata('design:paramtypes', [typeof (_d = typeof NavPortal !== 'undefined' && NavPortal) === 'function' && _d || Object])], Nav.prototype, "_np", null);
            _export("Nav", Nav = __decorate([Component({
                selector: 'ion-nav',
                template: '<div #viewport nav-viewport></div><div class="nav-decor"></div><div nav-portal></div>',
                directives: [NavPortal],
                encapsulation: ViewEncapsulation.None
            }), __param(0, Optional()), __param(1, Optional()), __metadata('design:paramtypes', [typeof (_e = typeof ViewController !== 'undefined' && ViewController) === 'function' && _e || Object, typeof (_f = typeof NavController !== 'undefined' && NavController) === 'function' && _f || Object, typeof (_g = typeof App !== 'undefined' && App) === 'function' && _g || Object, typeof (_h = typeof Config !== 'undefined' && Config) === 'function' && _h || Object, typeof (_j = typeof Keyboard !== 'undefined' && Keyboard) === 'function' && _j || Object, typeof (_k = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _k || Object, typeof (_l = typeof NgZone !== 'undefined' && NgZone) === 'function' && _l || Object, typeof (_m = typeof Renderer !== 'undefined' && Renderer) === 'function' && _m || Object, typeof (_o = typeof ComponentResolver !== 'undefined' && ComponentResolver) === 'function' && _o || Object])], Nav));
        }
    };
});
'use strict';

System.register('ionic-angular/components/nav/swipe-back', ['../../util/util', '../../gestures/slide-edge-gesture'], function (_export, _context) {
    "use strict";

    var assign, SlideEdgeGesture, _createClass, _get, SwipeBackGesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_utilUtil) {
            assign = _utilUtil.assign;
        }, function (_gesturesSlideEdgeGesture) {
            SlideEdgeGesture = _gesturesSlideEdgeGesture.SlideEdgeGesture;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _export('SwipeBackGesture', SwipeBackGesture = function (_SlideEdgeGesture) {
                _inherits(SwipeBackGesture, _SlideEdgeGesture);

                function SwipeBackGesture(element, options, _nav, _menuCtrl) {
                    _classCallCheck(this, SwipeBackGesture);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SwipeBackGesture).call(this, element, assign({
                        direction: 'x',
                        maxEdgeStart: 75
                    }, options)));

                    _this._nav = _nav;
                    _this._menuCtrl = _menuCtrl;
                    return _this;
                }

                _createClass(SwipeBackGesture, [{
                    key: 'canStart',
                    value: function canStart(ev) {
                        // the gesture swipe angle must be mainly horizontal and the
                        // gesture distance would be relatively short for a swipe back
                        // and swipe back must be possible on this nav controller
                        if (ev.angle > -40 && ev.angle < 40 && ev.distance < 50 && this._nav.canSwipeBack()) {
                            // passed the tests, now see if the super says it's cool or not
                            return _get(Object.getPrototypeOf(SwipeBackGesture.prototype), 'canStart', this).call(this, ev);
                        }
                        // nerp, not today
                        return false;
                    }
                }, {
                    key: 'onSlideBeforeStart',
                    value: function onSlideBeforeStart(slideData, ev) {
                        console.debug('swipeBack, onSlideBeforeStart', ev.srcEvent.type);
                        this._nav.swipeBackStart();
                        this._menuCtrl.tempDisable(true);
                    }
                }, {
                    key: 'onSlide',
                    value: function onSlide(slide) {
                        var stepValue = slide.distance / slide.max;
                        console.debug('swipeBack, onSlide, distance', slide.distance, 'max', slide.max, 'stepValue', stepValue);
                        this._nav.swipeBackProgress(stepValue);
                    }
                }, {
                    key: 'onSlideEnd',
                    value: function onSlideEnd(slide, ev) {
                        var shouldComplete = Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5;
                        var currentStepValue = slide.distance / slide.max;
                        console.debug('swipeBack, onSlideEnd, shouldComplete', shouldComplete, 'currentStepValue', currentStepValue);
                        this._nav.swipeBackEnd(shouldComplete, currentStepValue);
                        this._menuCtrl.tempDisable(false);
                    }
                }]);

                return SwipeBackGesture;
            }(SlideEdgeGesture));

            _export('SwipeBackGesture', SwipeBackGesture);
        }
    };
});
"use strict";

System.register("ionic-angular/components/nav/view-controller", ["@angular/core", "../../util/util", "./nav-params"], function (_export, _context) {
    "use strict";

    var EventEmitter, Output, isPresent, merge, NavParams, _createClass, _typeof, __decorate, __metadata, ViewController, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function ctrlFn(viewCtrl, fnName) {
        if (viewCtrl.instance) {
            // deprecated warning: added 2016-06-01, beta.8
            if (viewCtrl.instance['onPage' + fnName]) {
                try {
                    console.warn('onPage' + fnName + '() has been deprecated. Please rename to ionView' + fnName + '()');
                    viewCtrl.instance['onPage' + fnName]();
                } catch (e) {
                    console.error(viewCtrl.name + ' onPage' + fnName + ': ' + e.message);
                }
            }
            // fire off ionView lifecycle instance method
            if (viewCtrl.instance['ionView' + fnName]) {
                try {
                    viewCtrl.instance['ionView' + fnName]();
                } catch (e) {
                    console.error(viewCtrl.name + ' ionView' + fnName + ': ' + e.message);
                }
            }
        }
    }
    return {
        setters: [function (_angularCore) {
            EventEmitter = _angularCore.EventEmitter;
            Output = _angularCore.Output;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
            merge = _utilUtil.merge;
        }, function (_navParams) {
            NavParams = _navParams.NavParams;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("ViewController", ViewController = function () {
                function ViewController(componentType, data) {
                    _classCallCheck(this, ViewController);

                    this.componentType = componentType;
                    this._tbRefs = [];
                    this._hdAttr = null;
                    this._leavingOpts = null;
                    this._loaded = false;
                    this._onDismiss = null;
                    /**
                     * @private
                     */
                    this.instance = {};
                    /**
                     * @private
                     */
                    this.state = '';
                    /**
                     * @private
                     * If this is currently the active view, then set to false
                     * if it does not want the other views to fire their own lifecycles.
                     */
                    this.fireOtherLifecycles = true;
                    /**
                     * @private
                     */
                    this.isOverlay = false;
                    /**
                     * @private
                     */
                    this.usePortal = false;
                    /**
                     * @private
                     */
                    this._emitter = new EventEmitter();
                    // passed in data could be NavParams, but all we care about is its data object
                    this.data = data instanceof NavParams ? data.data : isPresent(data) ? data : {};
                    this.willEnter = new EventEmitter();
                    this.didEnter = new EventEmitter();
                    this.willLeave = new EventEmitter();
                    this.didLeave = new EventEmitter();
                    this.willUnload = new EventEmitter();
                    this.didUnload = new EventEmitter();
                }
                /**
                 * @private
                 */


                _createClass(ViewController, [{
                    key: "subscribe",
                    value: function subscribe(generatorOrNext) {
                        return this._emitter.subscribe(generatorOrNext);
                    }
                }, {
                    key: "emit",
                    value: function emit(data) {
                        this._emitter.emit(data);
                    }
                }, {
                    key: "onDismiss",
                    value: function onDismiss(callback) {
                        this._onDismiss = callback;
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(data, role) {
                        var _this = this;

                        var navOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                        var options = merge({}, this._leavingOpts, navOptions);
                        return this._nav.remove(this._nav.indexOf(this), 1, options).then(function () {
                            _this._onDismiss && _this._onDismiss(data, role);
                            return data;
                        });
                    }
                }, {
                    key: "setNav",
                    value: function setNav(navCtrl) {
                        this._nav = navCtrl;
                    }
                }, {
                    key: "getNav",
                    value: function getNav() {
                        return this._nav;
                    }
                }, {
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        return this._nav && this._nav.config.get('pageTransition');
                    }
                }, {
                    key: "getNavParams",
                    value: function getNavParams() {
                        return new NavParams(this.data);
                    }
                }, {
                    key: "setLeavingOpts",
                    value: function setLeavingOpts(opts) {
                        this._leavingOpts = opts;
                    }
                }, {
                    key: "enableBack",
                    value: function enableBack() {
                        // update if it's possible to go back from this nav item
                        if (this._nav) {
                            var previousItem = this._nav.getPrevious(this);
                            // the previous view may exist, but if it's about to be destroyed
                            // it shouldn't be able to go back to
                            return !!previousItem;
                        }
                        return false;
                    }
                }, {
                    key: "setChangeDetector",
                    value: function setChangeDetector(cd) {
                        this._cd = cd;
                    }
                }, {
                    key: "setInstance",
                    value: function setInstance(instance) {
                        this.instance = instance;
                    }
                }, {
                    key: "isFirst",
                    value: function isFirst() {
                        return this._nav ? this._nav.first() === this : false;
                    }
                }, {
                    key: "isLast",
                    value: function isLast() {
                        return this._nav ? this._nav.last() === this : false;
                    }
                }, {
                    key: "domShow",
                    value: function domShow(shouldShow, renderer) {
                        // using hidden element attribute to display:none and not render views
                        // renderAttr of '' means the hidden attribute will be added
                        // renderAttr of null means the hidden attribute will be removed
                        // doing checks to make sure we only make an update to the element when needed
                        if (this._pgRef && (shouldShow && this._hdAttr === '' || !shouldShow && this._hdAttr !== '')) {
                            this._hdAttr = shouldShow ? null : '';
                            renderer.setElementAttribute(this._pgRef.nativeElement, 'hidden', this._hdAttr);
                        }
                    }
                }, {
                    key: "setZIndex",
                    value: function setZIndex(zIndex, renderer) {
                        if (this._pgRef && zIndex !== this.zIndex) {
                            this.zIndex = zIndex;
                            renderer.setElementStyle(this._pgRef.nativeElement, 'z-index', zIndex.toString());
                        }
                    }
                }, {
                    key: "setPageRef",
                    value: function setPageRef(elementRef) {
                        this._pgRef = elementRef;
                    }
                }, {
                    key: "pageRef",
                    value: function pageRef() {
                        return this._pgRef;
                    }
                }, {
                    key: "setContentRef",
                    value: function setContentRef(elementRef) {
                        this._cntRef = elementRef;
                    }
                }, {
                    key: "contentRef",
                    value: function contentRef() {
                        return this._cntRef;
                    }
                }, {
                    key: "setContent",
                    value: function setContent(directive) {
                        this._cntDir = directive;
                    }
                }, {
                    key: "setToolbarRef",
                    value: function setToolbarRef(elementRef) {
                        this._tbRefs.push(elementRef);
                    }
                }, {
                    key: "toolbarRefs",
                    value: function toolbarRefs() {
                        return this._tbRefs;
                    }
                }, {
                    key: "setHeader",
                    value: function setHeader(directive) {
                        this._hdrDir = directive;
                    }
                }, {
                    key: "getHeader",
                    value: function getHeader() {
                        return this._hdrDir;
                    }
                }, {
                    key: "setFooter",
                    value: function setFooter(directive) {
                        this._ftrDir = directive;
                    }
                }, {
                    key: "getFooter",
                    value: function getFooter() {
                        return this._ftrDir;
                    }
                }, {
                    key: "getContent",
                    value: function getContent() {
                        return this._cntDir;
                    }
                }, {
                    key: "setNavbar",
                    value: function setNavbar(directive) {
                        this._nbDir = directive;
                    }
                }, {
                    key: "getNavbar",
                    value: function getNavbar() {
                        return this._nbDir;
                    }
                }, {
                    key: "hasNavbar",
                    value: function hasNavbar() {
                        return !!this.getNavbar();
                    }
                }, {
                    key: "navbarRef",
                    value: function navbarRef() {
                        var navbar = this.getNavbar();
                        return navbar && navbar.getElementRef();
                    }
                }, {
                    key: "titleRef",
                    value: function titleRef() {
                        var navbar = this.getNavbar();
                        return navbar && navbar.getTitleRef();
                    }
                }, {
                    key: "navbarItemRefs",
                    value: function navbarItemRefs() {
                        var navbar = this.getNavbar();
                        return navbar && navbar.getItemRefs();
                    }
                }, {
                    key: "backBtnRef",
                    value: function backBtnRef() {
                        var navbar = this.getNavbar();
                        return navbar && navbar.getBackButtonRef();
                    }
                }, {
                    key: "backBtnTextRef",
                    value: function backBtnTextRef() {
                        var navbar = this.getNavbar();
                        return navbar && navbar.getBackButtonTextRef();
                    }
                }, {
                    key: "navbarBgRef",
                    value: function navbarBgRef() {
                        var navbar = this.getNavbar();
                        return navbar && navbar.getBackgroundRef();
                    }
                }, {
                    key: "setBackButtonText",
                    value: function setBackButtonText(val) {
                        var navbar = this.getNavbar();
                        if (navbar) {
                            navbar.setBackButtonText(val);
                        }
                    }
                }, {
                    key: "showBackButton",
                    value: function showBackButton(shouldShow) {
                        var navbar = this.getNavbar();
                        if (navbar) {
                            navbar.hideBackButton = !shouldShow;
                        }
                    }
                }, {
                    key: "isLoaded",
                    value: function isLoaded() {
                        return this._loaded;
                    }
                }, {
                    key: "loaded",
                    value: function loaded(done) {
                        done();
                    }
                }, {
                    key: "fireLoaded",
                    value: function fireLoaded() {
                        this._loaded = true;
                        ctrlFn(this, 'Loaded');
                    }
                }, {
                    key: "fireWillEnter",
                    value: function fireWillEnter() {
                        if (this._cd) {
                            // ensure this has been re-attached to the change detector
                            this._cd.reattach();
                            // detect changes before we run any user code
                            this._cd.detectChanges();
                        }
                        this.willEnter.emit(null);
                        ctrlFn(this, 'WillEnter');
                    }
                }, {
                    key: "fireDidEnter",
                    value: function fireDidEnter() {
                        var navbar = this.getNavbar();
                        navbar && navbar.didEnter();
                        this.didEnter.emit(null);
                        ctrlFn(this, 'DidEnter');
                    }
                }, {
                    key: "fireWillLeave",
                    value: function fireWillLeave() {
                        this.willLeave.emit(null);
                        ctrlFn(this, 'WillLeave');
                    }
                }, {
                    key: "fireDidLeave",
                    value: function fireDidLeave() {
                        this.didLeave.emit(null);
                        ctrlFn(this, 'DidLeave');
                        // when this is not the active page
                        // we no longer need to detect changes
                        this._cd && this._cd.detach();
                    }
                }, {
                    key: "fireWillUnload",
                    value: function fireWillUnload() {
                        this.willUnload.emit(null);
                        ctrlFn(this, 'WillUnload');
                    }
                }, {
                    key: "onDestroy",
                    value: function onDestroy(destroyFn) {
                        this._destroyFn = destroyFn;
                    }
                }, {
                    key: "destroy",
                    value: function destroy() {
                        this.didUnload.emit(null);
                        ctrlFn(this, 'DidUnload');
                        this._destroyFn && this._destroyFn();
                        this._destroyFn = null;
                    }
                }, {
                    key: "name",
                    get: function get() {
                        return this.componentType ? this.componentType['name'] : '';
                    }
                }, {
                    key: "index",
                    get: function get() {
                        return this._nav ? this._nav.indexOf(this) : -1;
                    }
                }]);

                return ViewController;
            }());

            _export("ViewController", ViewController);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], ViewController.prototype, "_emitter", void 0);
        }
    };
});
"use strict";

System.register("ionic-angular/components/navbar/navbar", ["@angular/core", "../app/app", "../../config/config", "../ion", "../../util/util", "../nav/nav-controller", "../toolbar/toolbar", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, Directive, ElementRef, forwardRef, Inject, Input, Optional, App, Config, Ion, isTrueProperty, NavController, ToolbarBase, ViewController, _createClass, _typeof, __decorate, __metadata, __param, BackButton, BackButtonText, ToolbarBackground, Navbar, NavbarTemplate, _a, _b, _c, _d, _e, _f, _g, _h;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            forwardRef = _angularCore.forwardRef;
            Inject = _angularCore.Inject;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_navNavController) {
            NavController = _navNavController.NavController;
        }, function (_toolbarToolbar) {
            ToolbarBase = _toolbarToolbar.ToolbarBase;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            BackButton = function (_Ion) {
                _inherits(BackButton, _Ion);

                function BackButton(_nav, elementRef, navbar) {
                    _classCallCheck(this, BackButton);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BackButton).call(this, elementRef));

                    _this._nav = _nav;
                    navbar && navbar.setBackButtonRef(elementRef);
                    return _this;
                }

                _createClass(BackButton, [{
                    key: "goBack",
                    value: function goBack(ev) {
                        ev.stopPropagation();
                        ev.preventDefault();
                        this._nav && this._nav.pop();
                    }
                }]);

                return BackButton;
            }(Ion);

            BackButton = __decorate([Directive({
                selector: '.back-button',
                host: {
                    '(click)': 'goBack($event)'
                }
            }), __param(0, Optional()), __param(2, Optional()), __param(2, Inject(forwardRef(function () {
                return Navbar;
            }))), __metadata('design:paramtypes', [typeof (_a = typeof NavController !== 'undefined' && NavController) === 'function' && _a || Object, typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, Navbar])], BackButton);

            BackButtonText = function BackButtonText(elementRef, navbar) {
                _classCallCheck(this, BackButtonText);

                navbar.setBackButtonTextRef(elementRef);
            };

            BackButtonText = __decorate([Directive({
                selector: '.back-button-text'
            }), __param(1, Inject(forwardRef(function () {
                return Navbar;
            }))), __metadata('design:paramtypes', [typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object, Navbar])], BackButtonText);

            ToolbarBackground = function ToolbarBackground(elementRef, navbar) {
                _classCallCheck(this, ToolbarBackground);

                navbar.setBackgroundRef(elementRef);
            };

            ToolbarBackground = __decorate([Directive({
                selector: '.toolbar-background'
            }), __param(1, Inject(forwardRef(function () {
                return Navbar;
            }))), __metadata('design:paramtypes', [typeof (_d = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _d || Object, Navbar])], ToolbarBackground);
            /**
             * @name Navbar
             * @description
             * Navbar acts as the navigational toolbar, which also comes with a back
             * button. A navbar can contain a `ion-title`, any number of buttons,
             * a segment, or a searchbar. Navbars must be placed within an
             * `<ion-header>` in order for them to be placed above the content.
             *
             * @usage
             * ```html
             * <ion-header>
             *
             *   <ion-navbar>
             *     <button menuToggle>
             *       <ion-icon name="menu"></ion-icon>
             *     </button>
             *
             *     <ion-title>
             *       Page Title
             *     </ion-title>
             *
             *     <ion-buttons end>
             *       <button (click)="openModal()">
             *         <ion-icon name="options"></ion-icon>
             *       </button>
             *     </ion-buttons>
             *   </ion-navbar>
             *
             * </ion-header>
             * ```
             *
             * @demo /docs/v2/demos/navbar/
             * @see {@link ../../toolbar/Toolbar/ Toolbar API Docs}
             */

            _export("Navbar", Navbar = function (_ToolbarBase) {
                _inherits(Navbar, _ToolbarBase);

                function Navbar(_app, viewCtrl, elementRef, config) {
                    _classCallCheck(this, Navbar);

                    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Navbar).call(this, elementRef));

                    _this2._app = _app;
                    _this2._hidden = false;
                    _this2._hideBb = false;
                    viewCtrl && viewCtrl.setNavbar(_this2);
                    _this2._bbIcon = config.get('backButtonIcon');
                    _this2._bbText = config.get('backButtonText');
                    _this2._sbPadding = config.getBoolean('statusbarPadding', false);
                    return _this2;
                }
                /**
                 * @input {boolean} whether the back button should be shown or not
                 */


                _createClass(Navbar, [{
                    key: "setBackButtonText",
                    value: function setBackButtonText(text) {
                        this._bbText = text;
                    }
                }, {
                    key: "getBackButtonRef",
                    value: function getBackButtonRef() {
                        return this._bbRef;
                    }
                }, {
                    key: "setBackButtonRef",
                    value: function setBackButtonRef(backButtonElementRef) {
                        this._bbRef = backButtonElementRef;
                    }
                }, {
                    key: "getBackButtonTextRef",
                    value: function getBackButtonTextRef() {
                        return this._bbtRef;
                    }
                }, {
                    key: "setBackButtonTextRef",
                    value: function setBackButtonTextRef(backButtonTextElementRef) {
                        this._bbtRef = backButtonTextElementRef;
                    }
                }, {
                    key: "setBackgroundRef",
                    value: function setBackgroundRef(backgrouneElementRef) {
                        this._bgRef = backgrouneElementRef;
                    }
                }, {
                    key: "getBackgroundRef",
                    value: function getBackgroundRef() {
                        return this._bgRef;
                    }
                }, {
                    key: "didEnter",
                    value: function didEnter() {
                        try {
                            this._app.setTitle(this.getTitleText());
                        } catch (e) {
                            console.error(e);
                        }
                    }
                }, {
                    key: "setHidden",
                    value: function setHidden(isHidden) {
                        // used to display none/block the navbar
                        this._hidden = isHidden;
                    }
                }, {
                    key: "hideBackButton",
                    get: function get() {
                        return this._hideBb;
                    },
                    set: function set(val) {
                        this._hideBb = isTrueProperty(val);
                    }
                }]);

                return Navbar;
            }(ToolbarBase));

            _export("Navbar", Navbar);

            __decorate([Input(), __metadata('design:type', Boolean)], Navbar.prototype, "hideBackButton", null);
            _export("Navbar", Navbar = __decorate([Component({
                selector: 'ion-navbar',
                template: '<div class="toolbar-background"></div>' + '<button category="bar-button" class="back-button" [hidden]="_hideBb">' + '<span class="button-inner">' + '<ion-icon class="back-button-icon" [name]="_bbIcon"></ion-icon>' + '<span class="back-button-text">' + '<span class="back-default">{{_bbText}}</span>' + '</span>' + '</span>' + '</button>' + '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' + '<ng-content select="ion-buttons[start]"></ng-content>' + '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' + '<div class="toolbar-content">' + '<ng-content></ng-content>' + '</div>',
                host: {
                    '[hidden]': '_hidden',
                    'class': 'toolbar',
                    '[class.statusbar-padding]': '_sbPadding'
                },
                directives: [BackButton, BackButtonText, ToolbarBackground]
            }), __param(1, Optional()), __metadata('design:paramtypes', [typeof (_e = typeof App !== 'undefined' && App) === 'function' && _e || Object, typeof (_f = typeof ViewController !== 'undefined' && ViewController) === 'function' && _f || Object, typeof (_g = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _g || Object, typeof (_h = typeof Config !== 'undefined' && Config) === 'function' && _h || Object])], Navbar));
            /**
             * @private
            */

            _export("NavbarTemplate", NavbarTemplate = function NavbarTemplate() {
                _classCallCheck(this, NavbarTemplate);

                // deprecated warning: added 2016-06-14, beta.10
                console.warn('ion-navbar no longer requires *navbar attribute. Please restructure header to:\n' + '<ion-header>\n' + '  <ion-navbar>\n' + '    ...\n' + '  </ion-navbar>\n' + '</ion-header>');
            });

            _export("NavbarTemplate", NavbarTemplate);

            _export("NavbarTemplate", NavbarTemplate = __decorate([Directive({
                selector: 'template[navbar]'
            }), __metadata('design:paramtypes', [])], NavbarTemplate));
        }
    };
});
"use strict";

System.register("ionic-angular/components/option/option", ["@angular/core", "../../util/util"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, EventEmitter, Input, Output, isPresent, isTrueProperty, _createClass, _typeof, __decorate, __metadata, Option, _a, _b;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            Input = _angularCore.Input;
            Output = _angularCore.Output;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
            isTrueProperty = _utilUtil.isTrueProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Option", Option = function () {
                function Option(_elementRef) {
                    _classCallCheck(this, Option);

                    this._elementRef = _elementRef;
                    this._checked = false;
                    /**
                     * @input {any} Event to evaluate when option is selected
                     */
                    this.ionSelect = new EventEmitter();
                }
                /**
                 * @input {boolean} Whether or not the option is already checked and selected
                 */


                _createClass(Option, [{
                    key: "checked",
                    get: function get() {
                        return this._checked;
                    },
                    set: function set(val) {
                        this._checked = isTrueProperty(val);
                    }
                }, {
                    key: "value",
                    get: function get() {
                        if (isPresent(this._value)) {
                            return this._value;
                        }
                        return this.text;
                    },
                    set: function set(val) {
                        this._value = val;
                    }
                }, {
                    key: "text",
                    get: function get() {
                        return this._elementRef.nativeElement.textContent;
                    }
                }]);

                return Option;
            }());

            _export("Option", Option);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Option.prototype, "ionSelect", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Option.prototype, "checked", null);
            __decorate([Input(), __metadata('design:type', Object)], Option.prototype, "value", null);
            _export("Option", Option = __decorate([Directive({
                selector: 'ion-option'
            }), __metadata('design:paramtypes', [typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object])], Option));
        }
    };
});
"use strict";

System.register("ionic-angular/components/picker/picker", ["@angular/core", "@angular/platform-browser", "../../animations/animation", "../../util/dom", "../../util/util", "../../config/config", "../../util/key", "../nav/nav-params", "../../transitions/transition", "../../util/ui-event-manager", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, EventEmitter, Input, HostListener, Output, QueryList, Renderer, ViewChild, ViewChildren, ViewEncapsulation, DomSanitizationService, Animation, cancelRaf, pointerCoord, raf, clamp, isNumber, isPresent, isString, Config, Key, NavParams, Transition, UIEventManager, ViewController, _createClass, _typeof, __decorate, __metadata, Picker, PickerColumnCmp, PickerDisplayCmp, PickerSlideIn, PickerSlideOut, pickerIds, DECELERATION_FRICTION, FRAME_MS, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            Input = _angularCore.Input;
            HostListener = _angularCore.HostListener;
            Output = _angularCore.Output;
            QueryList = _angularCore.QueryList;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewChildren = _angularCore.ViewChildren;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularPlatformBrowser) {
            DomSanitizationService = _angularPlatformBrowser.DomSanitizationService;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_utilDom) {
            cancelRaf = _utilDom.cancelRaf;
            pointerCoord = _utilDom.pointerCoord;
            raf = _utilDom.raf;
        }, function (_utilUtil) {
            clamp = _utilUtil.clamp;
            isNumber = _utilUtil.isNumber;
            isPresent = _utilUtil.isPresent;
            isString = _utilUtil.isString;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilKey) {
            Key = _utilKey.Key;
        }, function (_navNavParams) {
            NavParams = _navNavParams.NavParams;
        }, function (_transitionsTransition) {
            Transition = _transitionsTransition.Transition;
        }, function (_utilUiEventManager) {
            UIEventManager = _utilUiEventManager.UIEventManager;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Picker", Picker = function (_ViewController) {
                _inherits(Picker, _ViewController);

                function Picker() {
                    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, Picker);

                    opts.columns = opts.columns || [];
                    opts.buttons = opts.buttons || [];
                    opts.enableBackdropDismiss = isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Picker).call(this, PickerDisplayCmp, opts));

                    _this.isOverlay = true;
                    _this.ionChange = new EventEmitter();
                    // by default, pickers should not fire lifecycle events of other views
                    // for example, when an picker enters, the current active view should
                    // not fire its lifecycle events because it's not conceptually leaving
                    _this.fireOtherLifecycles = false;
                    _this.usePortal = true;
                    return _this;
                }
                /**
                * @private
                */


                _createClass(Picker, [{
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        var key = direction === 'back' ? 'pickerLeave' : 'pickerEnter';
                        return this._nav && this._nav.config.get(key);
                    }
                }, {
                    key: "addButton",
                    value: function addButton(button) {
                        this.data.buttons.push(button);
                    }
                }, {
                    key: "addColumn",
                    value: function addColumn(column) {
                        this.data.columns.push(column);
                    }
                }, {
                    key: "getColumns",
                    value: function getColumns() {
                        return this.data.columns;
                    }
                }, {
                    key: "refresh",
                    value: function refresh() {
                        this.instance.refresh && this.instance.refresh();
                    }
                }, {
                    key: "setCssClass",
                    value: function setCssClass(cssClass) {
                        this.data.cssClass = cssClass;
                    }
                }], [{
                    key: "create",
                    value: function create() {
                        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        return new Picker(opts);
                    }
                }]);

                return Picker;
            }(ViewController));

            _export("Picker", Picker);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Picker.prototype, "ionChange", void 0);
            /**
             * @private
             */

            PickerColumnCmp = function () {
                function PickerColumnCmp(config, elementRef, _sanitizer) {
                    _classCallCheck(this, PickerColumnCmp);

                    this.elementRef = elementRef;
                    this._sanitizer = _sanitizer;
                    this.y = 0;
                    this.pos = [];
                    this.startY = null;
                    this.receivingEvents = false;
                    this.events = new UIEventManager();
                    this.ionChange = new EventEmitter();
                    this.rotateFactor = config.getNumber('pickerRotateFactor', 0);
                }

                _createClass(PickerColumnCmp, [{
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        var _this2 = this;

                        // get the scrollable element within the column
                        var colEle = this.colEle.nativeElement;
                        this.colHeight = colEle.clientHeight;
                        // get the height of one option
                        this.optHeight = colEle.firstElementChild ? colEle.firstElementChild.clientHeight : 0;
                        // set the scroll position for the selected option
                        this.setSelected(this.col.selectedIndex, 0);
                        // Listening for pointer events
                        this.events.pointerEventsRef(this.elementRef, function (ev) {
                            return _this2.pointerStart(ev);
                        }, function (ev) {
                            return _this2.pointerMove(ev);
                        }, function (ev) {
                            return _this2.pointerEnd(ev);
                        });
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this.events.unlistenAll();
                    }
                }, {
                    key: "pointerStart",
                    value: function pointerStart(ev) {
                        console.debug('picker, pointerStart', ev.type, this.startY);
                        // cancel any previous raf's that haven't fired yet
                        cancelRaf(this.rafId);
                        // remember where the pointer started from`
                        this.startY = pointerCoord(ev).y;
                        // reset everything
                        this.receivingEvents = true;
                        this.velocity = 0;
                        this.pos.length = 0;
                        this.pos.push(this.startY, Date.now());
                        var minY = this.col.options.length - 1;
                        var maxY = 0;
                        for (var i = 0; i < this.col.options.length; i++) {
                            if (!this.col.options[i].disabled) {
                                minY = Math.min(minY, i);
                                maxY = Math.max(maxY, i);
                            }
                        }
                        this.minY = minY * this.optHeight * -1;
                        this.maxY = maxY * this.optHeight * -1;
                        return true;
                    }
                }, {
                    key: "pointerMove",
                    value: function pointerMove(ev) {
                        ev.preventDefault();
                        ev.stopPropagation();
                        if (this.startY === null) {
                            return;
                        }
                        var currentY = pointerCoord(ev).y;
                        this.pos.push(currentY, Date.now());
                        // update the scroll position relative to pointer start position
                        var y = this.y + (currentY - this.startY);
                        if (y > this.minY) {
                            // scrolling up higher than scroll area
                            y = Math.pow(y, 0.8);
                            this.bounceFrom = y;
                        } else if (y < this.maxY) {
                            // scrolling down below scroll area
                            y += Math.pow(this.maxY - y, 0.9);
                            this.bounceFrom = y;
                        } else {
                            this.bounceFrom = 0;
                        }
                        this.update(y, 0, false, false);
                    }
                }, {
                    key: "pointerEnd",
                    value: function pointerEnd(ev) {
                        if (!this.receivingEvents) {
                            return;
                        }
                        this.receivingEvents = false;
                        this.velocity = 0;
                        if (this.bounceFrom > 0) {
                            // bounce back up
                            this.update(this.minY, 100, true, true);
                        } else if (this.bounceFrom < 0) {
                            // bounce back down
                            this.update(this.maxY, 100, true, true);
                        } else if (this.startY !== null) {
                            var endY = pointerCoord(ev).y;
                            console.debug('picker, pointerEnd', ev.type, endY);
                            this.pos.push(endY, Date.now());
                            var endPos = this.pos.length - 1;
                            var startPos = endPos;
                            var timeRange = Date.now() - 100;
                            // move pointer to position measured 100ms ago
                            for (var i = endPos; i > 0 && this.pos[i] > timeRange; i -= 2) {
                                startPos = i;
                            }
                            if (startPos !== endPos) {
                                // compute relative movement between these two points
                                var timeOffset = this.pos[endPos] - this.pos[startPos];
                                var movedTop = this.pos[startPos - 1] - this.pos[endPos - 1];
                                // based on XXms compute the movement to apply for each render step
                                this.velocity = movedTop / timeOffset * FRAME_MS;
                            }
                            if (Math.abs(endY - this.startY) > 3) {
                                ev.preventDefault();
                                ev.stopPropagation();
                                var y = this.y + (endY - this.startY);
                                this.update(y, 0, true, true);
                            }
                        }
                        this.startY = null;
                        this.decelerate();
                    }
                }, {
                    key: "decelerate",
                    value: function decelerate() {
                        var y = 0;
                        cancelRaf(this.rafId);
                        if (isNaN(this.y) || !this.optHeight) {
                            // fallback in case numbers get outta wack
                            this.update(y, 0, true, true);
                        } else if (Math.abs(this.velocity) > 0) {
                            // still decelerating
                            this.velocity *= DECELERATION_FRICTION;
                            // do not let it go slower than a velocity of 1
                            this.velocity = this.velocity > 0 ? Math.max(this.velocity, 1) : Math.min(this.velocity, -1);
                            y = Math.round(this.y - this.velocity);
                            if (y > this.minY) {
                                // whoops, it's trying to scroll up farther than the options we have!
                                y = this.minY;
                                this.velocity = 0;
                            } else if (y < this.maxY) {
                                // gahh, it's trying to scroll down farther than we can!
                                y = this.maxY;
                                this.velocity = 0;
                            }
                            console.log("decelerate y: " + y + ", velocity: " + this.velocity + ", optHeight: " + this.optHeight);
                            var notLockedIn = y % this.optHeight !== 0 || Math.abs(this.velocity) > 1;
                            this.update(y, 0, true, !notLockedIn);
                            if (notLockedIn) {
                                // isn't locked in yet, keep decelerating until it is
                                this.rafId = raf(this.decelerate.bind(this));
                            }
                        } else if (this.y % this.optHeight !== 0) {
                            // needs to still get locked into a position so options line up
                            var currentPos = Math.abs(this.y % this.optHeight);
                            // create a velocity in the direction it needs to scroll
                            this.velocity = currentPos > this.optHeight / 2 ? 1 : -1;
                            this.decelerate();
                        }
                    }
                }, {
                    key: "optClick",
                    value: function optClick(ev, index) {
                        if (!this.velocity) {
                            ev.preventDefault();
                            ev.stopPropagation();
                            this.setSelected(index, 150);
                        }
                    }
                }, {
                    key: "setSelected",
                    value: function setSelected(selectedIndex, duration) {
                        // if there is a selected index, then figure out it's y position
                        // if there isn't a selected index, then just use the top y position
                        var y = selectedIndex > -1 ? selectedIndex * this.optHeight * -1 : 0;
                        cancelRaf(this.rafId);
                        this.velocity = 0;
                        // so what y position we're at
                        this.update(y, duration, true, true);
                    }
                }, {
                    key: "update",
                    value: function update(y, duration, saveY, emitChange) {
                        // ensure we've got a good round number :)
                        y = Math.round(y);
                        this.col.selectedIndex = Math.max(Math.abs(Math.round(y / this.optHeight)), 0);
                        for (var i = 0; i < this.col.options.length; i++) {
                            var opt = this.col.options[i];
                            var optTop = i * this.optHeight;
                            var optOffset = optTop + y;
                            var rotateX = optOffset * this.rotateFactor;
                            var translateX = 0;
                            var translateY = 0;
                            var translateZ = 0;
                            if (this.rotateFactor !== 0) {
                                translateX = 0;
                                translateZ = 90;
                                if (rotateX > 90 || rotateX < -90) {
                                    translateX = -9999;
                                    rotateX = 0;
                                }
                            } else {
                                translateY = optOffset;
                            }
                            opt._trans = this._sanitizer.bypassSecurityTrustStyle("rotateX(" + rotateX + "deg) translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)");
                            opt._dur = duration > 0 ? duration + 'ms' : '';
                        }
                        if (saveY) {
                            this.y = y;
                        }
                        if (emitChange) {
                            if (this.lastIndex === undefined) {
                                // have not set a last index yet
                                this.lastIndex = this.col.selectedIndex;
                            } else if (this.lastIndex !== this.col.selectedIndex) {
                                // new selected index has changed from the last index
                                // update the lastIndex and emit that it has changed
                                this.lastIndex = this.col.selectedIndex;
                                this.ionChange.emit(this.col.options[this.col.selectedIndex]);
                            }
                        }
                    }
                }, {
                    key: "refresh",
                    value: function refresh() {
                        var min = this.col.options.length - 1;
                        var max = 0;
                        for (var i = 0; i < this.col.options.length; i++) {
                            if (!this.col.options[i].disabled) {
                                min = Math.min(min, i);
                                max = Math.max(max, i);
                            }
                        }
                        var selectedIndex = clamp(min, this.col.selectedIndex, max);
                        if (selectedIndex !== this.col.selectedIndex) {
                            var y = selectedIndex * this.optHeight * -1;
                            this.update(y, 150, true, true);
                        }
                    }
                }]);

                return PickerColumnCmp;
            }();

            __decorate([ViewChild('colEle'), __metadata('design:type', typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object)], PickerColumnCmp.prototype, "colEle", void 0);
            __decorate([Input(), __metadata('design:type', Object)], PickerColumnCmp.prototype, "col", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_c = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _c || Object)], PickerColumnCmp.prototype, "ionChange", void 0);
            PickerColumnCmp = __decorate([Component({
                selector: '.picker-col',
                template: '<div *ngIf="col.prefix" class="picker-prefix" [style.width]="col.prefixWidth">{{col.prefix}}</div>' + '<div class="picker-opts" #colEle [style.width]="col.optionsWidth">' + '<button *ngFor="let o of col.options; let i=index" [style.transform]="o._trans" [style.transitionDuration]="o._dur" [class.picker-opt-selected]="col.selectedIndex === i" [class.picker-opt-disabled]="o.disabled" (click)="optClick($event, i)" type="button" category="picker-opt">' + '{{o.text}}' + '</button>' + '</div>' + '<div *ngIf="col.suffix" class="picker-suffix" [style.width]="col.suffixWidth">{{col.suffix}}</div>',
                host: {
                    '[style.min-width]': 'col.columnWidth',
                    '[class.picker-opts-left]': 'col.align=="left"',
                    '[class.picker-opts-right]': 'col.align=="right"'
                }
            }), __metadata('design:paramtypes', [typeof (_d = typeof Config !== 'undefined' && Config) === 'function' && _d || Object, typeof (_e = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _e || Object, typeof (_f = typeof DomSanitizationService !== 'undefined' && DomSanitizationService) === 'function' && _f || Object])], PickerColumnCmp);
            /**
             * @private
             */

            PickerDisplayCmp = function () {
                function PickerDisplayCmp(_viewCtrl, _elementRef, _config, params, renderer) {
                    _classCallCheck(this, PickerDisplayCmp);

                    this._viewCtrl = _viewCtrl;
                    this._elementRef = _elementRef;
                    this._config = _config;
                    this.d = params.data;
                    if (this.d.cssClass) {
                        this.d.cssClass.split(' ').forEach(function (cssClass) {
                            renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
                        });
                    }
                    this.id = ++pickerIds;
                    this.lastClick = 0;
                }

                _createClass(PickerDisplayCmp, [{
                    key: "ionViewLoaded",
                    value: function ionViewLoaded() {
                        // normalize the data
                        var data = this.d;
                        data.buttons = data.buttons.map(function (button) {
                            if (isString(button)) {
                                return { text: button };
                            }
                            if (button.role) {
                                button.cssRole = "picker-toolbar-" + button.role;
                            }
                            return button;
                        });
                        // clean up dat data
                        data.columns = data.columns.map(function (column) {
                            if (!isPresent(column.columnWidth)) {
                                column.columnWidth = 100 / data.columns.length + '%';
                            }
                            if (!isPresent(column.options)) {
                                column.options = [];
                            }
                            column.options = column.options.map(function (inputOpt) {
                                var opt = {
                                    text: '',
                                    value: '',
                                    disabled: inputOpt.disabled
                                };
                                if (isPresent(inputOpt)) {
                                    if (isString(inputOpt) || isNumber(inputOpt)) {
                                        opt.text = inputOpt.toString();
                                        opt.value = inputOpt;
                                    } else {
                                        opt.text = isPresent(inputOpt.text) ? inputOpt.text : inputOpt.value;
                                        opt.value = isPresent(inputOpt.value) ? inputOpt.value : inputOpt.text;
                                    }
                                }
                                return opt;
                            });
                            return column;
                        });
                    }
                }, {
                    key: "refresh",
                    value: function refresh() {
                        this._cols.forEach(function (column) {
                            column.refresh();
                        });
                    }
                }, {
                    key: "_colChange",
                    value: function _colChange(selectedOption) {
                        // one of the columns has changed its selected index
                        var picker = this._viewCtrl;
                        picker.ionChange.emit(this.getSelected());
                    }
                }, {
                    key: "_keyUp",
                    value: function _keyUp(ev) {
                        if (this.enabled && this._viewCtrl.isLast()) {
                            if (ev.keyCode === Key.ENTER) {
                                if (this.lastClick + 1000 < Date.now()) {
                                    // do not fire this click if there recently was already a click
                                    // this can happen when the button has focus and used the enter
                                    // key to click the button. However, both the click handler and
                                    // this keyup event will fire, so only allow one of them to go.
                                    console.debug('picker, enter button');
                                    var button = this.d.buttons[this.d.buttons.length - 1];
                                    this.btnClick(button);
                                }
                            } else if (ev.keyCode === Key.ESCAPE) {
                                console.debug('picker, escape button');
                                this.bdClick();
                            }
                        }
                    }
                }, {
                    key: "ionViewDidEnter",
                    value: function ionViewDidEnter() {
                        var activeElement = document.activeElement;
                        if (activeElement) {
                            activeElement.blur();
                        }
                        var focusableEle = this._elementRef.nativeElement.querySelector('button');
                        if (focusableEle) {
                            focusableEle.focus();
                        }
                        this.enabled = true;
                    }
                }, {
                    key: "btnClick",
                    value: function btnClick(button, dismissDelay) {
                        var _this3 = this;

                        if (!this.enabled) {
                            return;
                        }
                        // keep the time of the most recent button click
                        this.lastClick = Date.now();
                        var shouldDismiss = true;
                        if (button.handler) {
                            // a handler has been provided, execute it
                            // pass the handler the values from the inputs
                            if (button.handler(this.getSelected()) === false) {
                                // if the return value of the handler is false then do not dismiss
                                shouldDismiss = false;
                            }
                        }
                        if (shouldDismiss) {
                            setTimeout(function () {
                                _this3.dismiss(button.role);
                            }, dismissDelay || this._config.get('pageTransitionDelay'));
                        }
                    }
                }, {
                    key: "bdClick",
                    value: function bdClick() {
                        if (this.enabled && this.d.enableBackdropDismiss) {
                            this.dismiss('backdrop');
                        }
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(role) {
                        return this._viewCtrl.dismiss(this.getSelected(), role);
                    }
                }, {
                    key: "getSelected",
                    value: function getSelected() {
                        var selected = {};
                        this.d.columns.forEach(function (col, index) {
                            var selectedColumn = col.options[col.selectedIndex];
                            selected[col.name] = {
                                text: selectedColumn ? selectedColumn.text : null,
                                value: selectedColumn ? selectedColumn.value : null,
                                columnIndex: index
                            };
                        });
                        return selected;
                    }
                }]);

                return PickerDisplayCmp;
            }();

            __decorate([ViewChildren(PickerColumnCmp), __metadata('design:type', typeof (_g = typeof QueryList !== 'undefined' && QueryList) === 'function' && _g || Object)], PickerDisplayCmp.prototype, "_cols", void 0);
            __decorate([HostListener('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], PickerDisplayCmp.prototype, "_keyUp", null);
            PickerDisplayCmp = __decorate([Component({
                selector: 'ion-picker-cmp',
                template: '<ion-backdrop (click)="bdClick()"></ion-backdrop>' + '<div class="picker-wrapper">' + '<div class="picker-toolbar">' + '<div *ngFor="let b of d.buttons" class="picker-toolbar-button" [ngClass]="b.cssRole">' + '<button (click)="btnClick(b)" [ngClass]="b.cssClass" class="picker-button" clear>' + '{{b.text}}' + '</button>' + '</div>' + '</div>' + '<div class="picker-columns">' + '<div class="picker-above-highlight"></div>' + '<div *ngFor="let c of d.columns" [col]="c" class="picker-col" (ionChange)="_colChange($event)"></div>' + '<div class="picker-below-highlight"></div>' + '</div>' + '</div>',
                host: {
                    'role': 'dialog'
                },
                directives: [PickerColumnCmp],
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_h = typeof ViewController !== 'undefined' && ViewController) === 'function' && _h || Object, typeof (_j = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _j || Object, typeof (_k = typeof Config !== 'undefined' && Config) === 'function' && _k || Object, typeof (_l = typeof NavParams !== 'undefined' && NavParams) === 'function' && _l || Object, typeof (_m = typeof Renderer !== 'undefined' && Renderer) === 'function' && _m || Object])], PickerDisplayCmp);
            /**
             * Animations for pickers
             */

            PickerSlideIn = function (_Transition) {
                _inherits(PickerSlideIn, _Transition);

                function PickerSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, PickerSlideIn);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(PickerSlideIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.picker-wrapper'));
                    backdrop.fromTo('opacity', 0.01, 0.26);
                    wrapper.fromTo('translateY', '100%', '0%');
                    _this4.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
                    return _this4;
                }

                return PickerSlideIn;
            }(Transition);

            Transition.register('picker-slide-in', PickerSlideIn);

            PickerSlideOut = function (_Transition2) {
                _inherits(PickerSlideOut, _Transition2);

                function PickerSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, PickerSlideOut);

                    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(PickerSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.picker-wrapper'));
                    backdrop.fromTo('opacity', 0.26, 0);
                    wrapper.fromTo('translateY', '0%', '100%');
                    _this5.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
                    return _this5;
                }

                return PickerSlideOut;
            }(Transition);

            Transition.register('picker-slide-out', PickerSlideOut);
            pickerIds = -1;
            DECELERATION_FRICTION = 0.97;
            FRAME_MS = 1000 / 60;
        }
    };
});
"use strict";

System.register("ionic-angular/components/popover/popover", ["@angular/core", "../../config/bootstrap", "../../animations/animation", "../../config/config", "../../util/dom", "../../util/util", "../../util/key", "../nav/nav-params", "../../transitions/page-transition", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, ComponentResolver, ElementRef, HostListener, Renderer, ViewChild, ViewContainerRef, addSelector, Animation, Config, CSS, nativeRaf, isPresent, Key, NavParams, PageTransition, ViewController, _get, _createClass, _typeof, __decorate, __metadata, POPOVER_IOS_BODY_PADDING, POPOVER_MD_BODY_PADDING, Popover, PopoverCmp, PopoverTransition, PopoverPopIn, PopoverPopOut, PopoverMdPopIn, PopoverMdPopOut, popoverIds, _a, _b, _c, _d, _e, _f, _g;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ComponentResolver = _angularCore.ComponentResolver;
            ElementRef = _angularCore.ElementRef;
            HostListener = _angularCore.HostListener;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewContainerRef = _angularCore.ViewContainerRef;
        }, function (_configBootstrap) {
            addSelector = _configBootstrap.addSelector;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilDom) {
            CSS = _utilDom.CSS;
            nativeRaf = _utilDom.nativeRaf;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_utilKey) {
            Key = _utilKey.Key;
        }, function (_navNavParams) {
            NavParams = _navNavParams.NavParams;
        }, function (_transitionsPageTransition) {
            PageTransition = _transitionsPageTransition.PageTransition;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            POPOVER_IOS_BODY_PADDING = 2;
            POPOVER_MD_BODY_PADDING = 12;

            _export("Popover", Popover = function (_ViewController) {
                _inherits(Popover, _ViewController);

                function Popover(componentType) {
                    var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    _classCallCheck(this, Popover);

                    opts.showBackdrop = isPresent(opts.showBackdrop) ? !!opts.showBackdrop : true;
                    opts.enableBackdropDismiss = isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
                    data.componentType = componentType;
                    data.opts = opts;

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Popover).call(this, PopoverCmp, data));

                    _this.isOverlay = true;
                    // by default, popovers should not fire lifecycle events of other views
                    // for example, when a popover enters, the current active view should
                    // not fire its lifecycle events because it's not conceptually leaving
                    _this.fireOtherLifecycles = false;
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(Popover, [{
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        var key = direction === 'back' ? 'popoverLeave' : 'popoverEnter';
                        return this._nav && this._nav.config.get(key);
                    }
                }], [{
                    key: "create",
                    value: function create(componentType) {
                        var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                        return new Popover(componentType, data, opts);
                    }
                }]);

                return Popover;
            }(ViewController));

            _export("Popover", Popover);

            PopoverCmp = function () {
                function PopoverCmp(_compiler, _elementRef, _renderer, _config, _navParams, _viewCtrl) {
                    _classCallCheck(this, PopoverCmp);

                    this._compiler = _compiler;
                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this._config = _config;
                    this._navParams = _navParams;
                    this._viewCtrl = _viewCtrl;
                    this.d = _navParams.data.opts;
                    if (this.d.cssClass) {
                        _renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
                    }
                    this.id = ++popoverIds;
                }

                _createClass(PopoverCmp, [{
                    key: "ionViewWillEnter",
                    value: function ionViewWillEnter() {
                        var _this2 = this;

                        addSelector(this._navParams.data.componentType, 'ion-popover-inner');
                        this._compiler.resolveComponent(this._navParams.data.componentType).then(function (componentFactory) {
                            var componentRef = _this2.viewport.createComponent(componentFactory, _this2.viewport.length, _this2.viewport.parentInjector);
                            _this2._viewCtrl.setInstance(componentRef.instance);
                            // manually fire ionViewWillEnter() since PopoverCmp's ionViewWillEnter already happened
                            _this2._viewCtrl.fireWillEnter();
                        });
                    }
                }, {
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        var activeElement = document.activeElement;
                        if (document.activeElement) {
                            activeElement.blur();
                        }
                        this.enabled = true;
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(role) {
                        return this._viewCtrl.dismiss(null, role);
                    }
                }, {
                    key: "bdTouch",
                    value: function bdTouch(ev) {
                        ev.preventDefault();
                        ev.stopPropagation();
                    }
                }, {
                    key: "bdClick",
                    value: function bdClick() {
                        if (this.enabled && this.d.enableBackdropDismiss) {
                            this.dismiss('backdrop');
                        }
                    }
                }, {
                    key: "_keyUp",
                    value: function _keyUp(ev) {
                        if (this.enabled && ev.keyCode === Key.ESCAPE && this._viewCtrl.isLast()) {
                            this.bdClick();
                        }
                    }
                }]);

                return PopoverCmp;
            }();

            __decorate([ViewChild('viewport', { read: ViewContainerRef }), __metadata('design:type', typeof (_a = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _a || Object)], PopoverCmp.prototype, "viewport", void 0);
            __decorate([HostListener('body:keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], PopoverCmp.prototype, "_keyUp", null);
            PopoverCmp = __decorate([Component({
                selector: 'ion-popover',
                template: '<ion-backdrop (click)="bdClick($event)" [class.hide-backdrop]="!d.showBackdrop"></ion-backdrop>' + '<div class="popover-wrapper">' + '<div class="popover-arrow"></div>' + '<div class="popover-content">' + '<div class="popover-viewport">' + '<div #viewport nav-viewport></div>' + '</div>' + '</div>' + '</div>'
            }), __metadata('design:paramtypes', [typeof (_b = typeof ComponentResolver !== 'undefined' && ComponentResolver) === 'function' && _b || Object, typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object, typeof (_d = typeof Renderer !== 'undefined' && Renderer) === 'function' && _d || Object, typeof (_e = typeof Config !== 'undefined' && Config) === 'function' && _e || Object, typeof (_f = typeof NavParams !== 'undefined' && NavParams) === 'function' && _f || Object, typeof (_g = typeof ViewController !== 'undefined' && ViewController) === 'function' && _g || Object])], PopoverCmp);
            /**
             * Animations for popover
             */

            PopoverTransition = function (_PageTransition) {
                _inherits(PopoverTransition, _PageTransition);

                function PopoverTransition(enteringView, leavingView, opts) {
                    _classCallCheck(this, PopoverTransition);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverTransition).call(this, enteringView, leavingView, opts));
                }

                _createClass(PopoverTransition, [{
                    key: "mdPositionView",
                    value: function mdPositionView(nativeEle, ev) {
                        var originY = 'top';
                        var originX = 'left';
                        var popoverWrapperEle = nativeEle.querySelector('.popover-wrapper');
                        // Popover content width and height
                        var popoverEle = nativeEle.querySelector('.popover-content');
                        var popoverDim = popoverEle.getBoundingClientRect();
                        var popoverWidth = popoverDim.width;
                        var popoverHeight = popoverDim.height;
                        // Window body width and height
                        var bodyWidth = window.innerWidth;
                        var bodyHeight = window.innerHeight;
                        // If ev was passed, use that for target element
                        var targetDim = ev && ev.target && ev.target.getBoundingClientRect();
                        var targetTop = targetDim && 'top' in targetDim ? targetDim.top : bodyHeight / 2 - popoverHeight / 2;
                        var targetLeft = targetDim && 'left' in targetDim ? targetDim.left : bodyWidth / 2 - popoverWidth / 2;
                        var targetWidth = targetDim && targetDim.width || 0;
                        var targetHeight = targetDim && targetDim.height || 0;
                        var popoverCSS = {
                            top: targetTop,
                            left: targetLeft
                        };
                        // If the popover left is less than the padding it is off screen
                        // to the left so adjust it, else if the width of the popover
                        // exceeds the body width it is off screen to the right so adjust
                        if (popoverCSS.left < POPOVER_MD_BODY_PADDING) {
                            popoverCSS.left = POPOVER_MD_BODY_PADDING;
                        } else if (popoverWidth + POPOVER_MD_BODY_PADDING + popoverCSS.left > bodyWidth) {
                            popoverCSS.left = bodyWidth - popoverWidth - POPOVER_MD_BODY_PADDING;
                            originX = 'right';
                        }
                        // If the popover when popped down stretches past bottom of screen,
                        // make it pop up if there's room above
                        if (targetTop + targetHeight + popoverHeight > bodyHeight && targetTop - popoverHeight > 0) {
                            popoverCSS.top = targetTop - popoverHeight;
                            nativeEle.className = nativeEle.className + ' popover-bottom';
                            originY = 'bottom';
                        } else if (targetTop + targetHeight + popoverHeight > bodyHeight) {
                            popoverEle.style.bottom = POPOVER_MD_BODY_PADDING + 'px';
                        }
                        popoverEle.style.top = popoverCSS.top + 'px';
                        popoverEle.style.left = popoverCSS.left + 'px';
                        popoverEle.style[CSS.transformOrigin] = originY + ' ' + originX;
                        // Since the transition starts before styling is done we
                        // want to wait for the styles to apply before showing the wrapper
                        popoverWrapperEle.style.opacity = '1';
                    }
                }, {
                    key: "iosPositionView",
                    value: function iosPositionView(nativeEle, ev) {
                        var originY = 'top';
                        var originX = 'left';
                        var popoverWrapperEle = nativeEle.querySelector('.popover-wrapper');
                        // Popover content width and height
                        var popoverEle = nativeEle.querySelector('.popover-content');
                        var popoverDim = popoverEle.getBoundingClientRect();
                        var popoverWidth = popoverDim.width;
                        var popoverHeight = popoverDim.height;
                        // Window body width and height
                        var bodyWidth = window.innerWidth;
                        var bodyHeight = window.innerHeight;
                        // If ev was passed, use that for target element
                        var targetDim = ev && ev.target && ev.target.getBoundingClientRect();
                        var targetTop = targetDim && 'top' in targetDim ? targetDim.top : bodyHeight / 2 - popoverHeight / 2;
                        var targetLeft = targetDim && 'left' in targetDim ? targetDim.left : bodyWidth / 2;
                        var targetWidth = targetDim && targetDim.width || 0;
                        var targetHeight = targetDim && targetDim.height || 0;
                        // The arrow that shows above the popover on iOS
                        var arrowEle = nativeEle.querySelector('.popover-arrow');
                        var arrowDim = arrowEle.getBoundingClientRect();
                        var arrowWidth = arrowDim.width;
                        var arrowHeight = arrowDim.height;
                        // If no ev was passed, hide the arrow
                        if (!targetDim) {
                            arrowEle.style.display = 'none';
                        }
                        var arrowCSS = {
                            top: targetTop + targetHeight,
                            left: targetLeft + targetWidth / 2 - arrowWidth / 2
                        };
                        var popoverCSS = {
                            top: targetTop + targetHeight + (arrowHeight - 1),
                            left: targetLeft + targetWidth / 2 - popoverWidth / 2
                        };
                        // If the popover left is less than the padding it is off screen
                        // to the left so adjust it, else if the width of the popover
                        // exceeds the body width it is off screen to the right so adjust
                        if (popoverCSS.left < POPOVER_IOS_BODY_PADDING) {
                            popoverCSS.left = POPOVER_IOS_BODY_PADDING;
                        } else if (popoverWidth + POPOVER_IOS_BODY_PADDING + popoverCSS.left > bodyWidth) {
                            popoverCSS.left = bodyWidth - popoverWidth - POPOVER_IOS_BODY_PADDING;
                            originX = 'right';
                        }
                        // If the popover when popped down stretches past bottom of screen,
                        // make it pop up if there's room above
                        if (targetTop + targetHeight + popoverHeight > bodyHeight && targetTop - popoverHeight > 0) {
                            arrowCSS.top = targetTop - (arrowHeight + 1);
                            popoverCSS.top = targetTop - popoverHeight - (arrowHeight - 1);
                            nativeEle.className = nativeEle.className + ' popover-bottom';
                            originY = 'bottom';
                        } else if (targetTop + targetHeight + popoverHeight > bodyHeight) {
                            popoverEle.style.bottom = POPOVER_IOS_BODY_PADDING + '%';
                        }
                        arrowEle.style.top = arrowCSS.top + 'px';
                        arrowEle.style.left = arrowCSS.left + 'px';
                        popoverEle.style.top = popoverCSS.top + 'px';
                        popoverEle.style.left = popoverCSS.left + 'px';
                        popoverEle.style[CSS.transformOrigin] = originY + ' ' + originX;
                        // Since the transition starts before styling is done we
                        // want to wait for the styles to apply before showing the wrapper
                        popoverWrapperEle.style.opacity = '1';
                    }
                }]);

                return PopoverTransition;
            }(PageTransition);

            PopoverPopIn = function (_PopoverTransition) {
                _inherits(PopoverPopIn, _PopoverTransition);

                function PopoverPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, PopoverPopIn);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverPopIn).call(this, enteringView, leavingView, opts));

                    _this4.opts = opts;
                    var ele = enteringView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.popover-wrapper'));
                    wrapper.fromTo('opacity', 0.01, 1);
                    backdrop.fromTo('opacity', 0.01, 0.08);
                    _this4.easing('ease').duration(100).add(backdrop).add(wrapper);
                    return _this4;
                }

                _createClass(PopoverPopIn, [{
                    key: "play",
                    value: function play() {
                        var _this5 = this;

                        nativeRaf(function () {
                            _this5.iosPositionView(_this5.enteringView.pageRef().nativeElement, _this5.opts.ev);
                            _get(Object.getPrototypeOf(PopoverPopIn.prototype), "play", _this5).call(_this5);
                        });
                    }
                }]);

                return PopoverPopIn;
            }(PopoverTransition);

            PageTransition.register('popover-pop-in', PopoverPopIn);

            PopoverPopOut = function (_PopoverTransition2) {
                _inherits(PopoverPopOut, _PopoverTransition2);

                function PopoverPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, PopoverPopOut);

                    var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverPopOut).call(this, enteringView, leavingView, opts));

                    _this6.opts = opts;
                    var ele = leavingView.pageRef().nativeElement;
                    var backdrop = new Animation(ele.querySelector('ion-backdrop'));
                    var wrapper = new Animation(ele.querySelector('.popover-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0);
                    backdrop.fromTo('opacity', 0.08, 0);
                    _this6.easing('ease').duration(500).add(backdrop).add(wrapper);
                    return _this6;
                }

                return PopoverPopOut;
            }(PopoverTransition);

            PageTransition.register('popover-pop-out', PopoverPopOut);

            PopoverMdPopIn = function (_PopoverTransition3) {
                _inherits(PopoverMdPopIn, _PopoverTransition3);

                function PopoverMdPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, PopoverMdPopIn);

                    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverMdPopIn).call(this, enteringView, leavingView, opts));

                    _this7.opts = opts;
                    var ele = enteringView.pageRef().nativeElement;
                    var content = new Animation(ele.querySelector('.popover-content'));
                    var viewport = new Animation(ele.querySelector('.popover-viewport'));
                    content.fromTo('scale', 0.001, 1);
                    viewport.fromTo('opacity', 0.01, 1);
                    _this7.easing('cubic-bezier(0.36,0.66,0.04,1)').duration(300).add(content).add(viewport);
                    return _this7;
                }

                _createClass(PopoverMdPopIn, [{
                    key: "play",
                    value: function play() {
                        var _this8 = this;

                        nativeRaf(function () {
                            _this8.mdPositionView(_this8.enteringView.pageRef().nativeElement, _this8.opts.ev);
                            _get(Object.getPrototypeOf(PopoverMdPopIn.prototype), "play", _this8).call(_this8);
                        });
                    }
                }]);

                return PopoverMdPopIn;
            }(PopoverTransition);

            PageTransition.register('popover-md-pop-in', PopoverMdPopIn);

            PopoverMdPopOut = function (_PopoverTransition4) {
                _inherits(PopoverMdPopOut, _PopoverTransition4);

                function PopoverMdPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, PopoverMdPopOut);

                    var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverMdPopOut).call(this, enteringView, leavingView, opts));

                    _this9.opts = opts;
                    var ele = leavingView.pageRef().nativeElement;
                    var wrapper = new Animation(ele.querySelector('.popover-wrapper'));
                    wrapper.fromTo('opacity', 0.99, 0);
                    _this9.easing('ease').duration(500).fromTo('opacity', 0.01, 1).add(wrapper);
                    return _this9;
                }

                return PopoverMdPopOut;
            }(PopoverTransition);

            PageTransition.register('popover-md-pop-out', PopoverMdPopOut);
            popoverIds = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/radio/radio-button", ["@angular/core", "../../util/form", "../../util/util", "../item/item", "./radio-group"], function (_export, _context) {
    "use strict";

    var Component, EventEmitter, HostListener, Input, Optional, Output, ViewEncapsulation, Form, isBlank, isCheckedProperty, isPresent, isTrueProperty, Item, RadioGroup, _createClass, _typeof, __decorate, __metadata, __param, RadioButton, _a, _b, _c, _d;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            EventEmitter = _angularCore.EventEmitter;
            HostListener = _angularCore.HostListener;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_utilUtil) {
            isBlank = _utilUtil.isBlank;
            isCheckedProperty = _utilUtil.isCheckedProperty;
            isPresent = _utilUtil.isPresent;
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_itemItem) {
            Item = _itemItem.Item;
        }, function (_radioGroup) {
            RadioGroup = _radioGroup.RadioGroup;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("RadioButton", RadioButton = function () {
                function RadioButton(_form, _item, _group) {
                    _classCallCheck(this, RadioButton);

                    this._form = _form;
                    this._item = _item;
                    this._group = _group;
                    this._checked = false;
                    this._disabled = false;
                    this._value = null;
                    /**
                     * @output {any} expression to be evaluated when selected
                     */
                    this.ionSelect = new EventEmitter();
                    _form.register(this);
                    if (_group) {
                        // register with the radiogroup
                        this.id = 'rb-' + _group.add(this);
                    }
                    if (_item) {
                        // register the input inside of the item
                        // reset to the item's id instead of the radiogroup id
                        this.id = 'rb-' + _item.registerInput('radio');
                        this._labelId = 'lbl-' + _item.id;
                        this._item.setCssClass('item-radio', true);
                    }
                }
                /**
                 * @input {any} The value of the radio button. Defaults to the generated id.
                 */


                _createClass(RadioButton, [{
                    key: "_click",
                    value: function _click(ev) {
                        console.debug('radio, select', this.id);
                        ev.preventDefault();
                        ev.stopPropagation();
                        this.checked = true;
                        this.ionSelect.emit(this.value);
                    }
                }, {
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        if (this._group && isPresent(this._group.value)) {
                            this.checked = isCheckedProperty(this._group.value, this.value);
                        }
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._form.deregister(this);
                        this._group && this._group.remove(this);
                    }
                }, {
                    key: "value",
                    get: function get() {
                        // if the value is not defined then use it's unique id
                        return isBlank(this._value) ? this.id : this._value;
                    },
                    set: function set(val) {
                        this._value = val;
                    }
                }, {
                    key: "checked",
                    get: function get() {
                        return this._checked;
                    },
                    set: function set(isChecked) {
                        this._checked = isTrueProperty(isChecked);
                        if (this._item) {
                            this._item.setCssClass('item-radio-checked', this._checked);
                        }
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this._item && this._item.setCssClass('item-radio-disabled', this._disabled);
                    }
                }]);

                return RadioButton;
            }());

            _export("RadioButton", RadioButton);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], RadioButton.prototype, "ionSelect", void 0);
            __decorate([Input(), __metadata('design:type', Object)], RadioButton.prototype, "value", null);
            __decorate([Input(), __metadata('design:type', Boolean)], RadioButton.prototype, "checked", null);
            __decorate([Input(), __metadata('design:type', Boolean)], RadioButton.prototype, "disabled", null);
            __decorate([HostListener('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], RadioButton.prototype, "_click", null);
            _export("RadioButton", RadioButton = __decorate([Component({
                selector: 'ion-radio',
                template: '<div class="radio-icon" [class.radio-checked]="_checked">' + '<div class="radio-inner"></div>' + '</div>' + '<button role="radio" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
                host: {
                    '[class.radio-disabled]': '_disabled'
                },
                encapsulation: ViewEncapsulation.None
            }), __param(1, Optional()), __param(2, Optional()), __metadata('design:paramtypes', [typeof (_b = typeof Form !== 'undefined' && Form) === 'function' && _b || Object, typeof (_c = typeof Item !== 'undefined' && Item) === 'function' && _c || Object, typeof (_d = typeof RadioGroup !== 'undefined' && RadioGroup) === 'function' && _d || Object])], RadioButton));
        }
    };
});
"use strict";

System.register("ionic-angular/components/radio/radio-group", ["@angular/core", "@angular/common", "../list/list", "../../util/util"], function (_export, _context) {
    "use strict";

    var ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Output, Provider, Renderer, NG_VALUE_ACCESSOR, ListHeader, isCheckedProperty, _createClass, _typeof, __decorate, __metadata, RADIO_VALUE_ACCESSOR, RadioGroup, radioGroupIds, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            ContentChild = _angularCore.ContentChild;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            forwardRef = _angularCore.forwardRef;
            Output = _angularCore.Output;
            Provider = _angularCore.Provider;
            Renderer = _angularCore.Renderer;
        }, function (_angularCommon) {
            NG_VALUE_ACCESSOR = _angularCommon.NG_VALUE_ACCESSOR;
        }, function (_listList) {
            ListHeader = _listList.ListHeader;
        }, function (_utilUtil) {
            isCheckedProperty = _utilUtil.isCheckedProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            RADIO_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, { useExisting: forwardRef(function () {
                    return RadioGroup;
                }), multi: true });

            _export("RadioGroup", RadioGroup = function () {
                function RadioGroup(_renderer, _elementRef) {
                    _classCallCheck(this, RadioGroup);

                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._btns = [];
                    this._ids = -1;
                    this._init = false;
                    /**
                     * @output {any} expression to be evaluated when selection has been changed
                     */
                    this.ionChange = new EventEmitter();
                    this.id = ++radioGroupIds;
                }
                /**
                 * @private
                 */


                _createClass(RadioGroup, [{
                    key: "writeValue",
                    value: function writeValue(val) {
                        console.debug('radio group, writeValue', val);
                        this.value = val;
                        if (this._init) {
                            this._update();
                            this.onTouched();
                            this.ionChange.emit(val);
                        }
                        this._init = true;
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        var activeButton = this._btns.find(function (b) {
                            return b.checked;
                        });
                        if (activeButton) {
                            this._setActive(activeButton);
                        }
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        var _this = this;

                        this._fn = fn;
                        this.onChange = function (val) {
                            // onChange used when there's an ngControl
                            console.debug('radio group, onChange', val);
                            fn(val);
                            _this.value = val;
                            _this._update();
                            _this.onTouched();
                            _this.ionChange.emit(val);
                        };
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "_update",
                    value: function _update() {
                        var _this2 = this;

                        // loop through each of the radiobuttons
                        var hasChecked = false;
                        this._btns.forEach(function (radioButton) {
                            // check this radiobutton if its value is
                            // the same as the radiogroups value
                            radioButton.checked = isCheckedProperty(_this2.value, radioButton.value) && !hasChecked;
                            if (radioButton.checked) {
                                // if this button is checked, then set it as
                                // the radiogroup's active descendant
                                _this2._setActive(radioButton);
                                hasChecked = true;
                            }
                        });
                    }
                }, {
                    key: "_setActive",
                    value: function _setActive(radioButton) {
                        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-activedescendant', radioButton.id);
                    }
                }, {
                    key: "add",
                    value: function add(button) {
                        var _this3 = this;

                        this._btns.push(button);
                        // listen for radiobutton select events
                        button.ionSelect.subscribe(function (val) {
                            // this radiobutton has been selected
                            _this3.onChange(val);
                        });
                        return this.id + '-' + ++this._ids;
                    }
                }, {
                    key: "remove",
                    value: function remove(button) {
                        var index = this._btns.indexOf(button);
                        if (index > -1) {
                            if (button.value === this.value) {
                                this.value = null;
                            }
                            this._btns.splice(index, 1);
                        }
                    }
                }, {
                    key: "onChange",
                    value: function onChange(val) {
                        // onChange used when there is not an ngControl
                        console.debug('radio group, onChange w/out ngControl', val);
                        this.value = val;
                        this._update();
                        this.onTouched();
                        this.ionChange.emit(val);
                    }
                }, {
                    key: "onTouched",
                    value: function onTouched() {}
                }, {
                    key: "_header",
                    set: function set(header) {
                        if (header) {
                            if (!header.id) {
                                header.id = 'rg-hdr-' + this.id;
                            }
                            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-describedby', header.id);
                        }
                    }
                }]);

                return RadioGroup;
            }());

            _export("RadioGroup", RadioGroup);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], RadioGroup.prototype, "ionChange", void 0);
            __decorate([ContentChild(ListHeader), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], RadioGroup.prototype, "_header", null);
            _export("RadioGroup", RadioGroup = __decorate([Directive({
                selector: '[radio-group]',
                host: {
                    '[attr.aria-activedescendant]': 'activeId',
                    'role': 'radiogroup'
                },
                providers: [RADIO_VALUE_ACCESSOR]
            }), __metadata('design:paramtypes', [typeof (_b = typeof Renderer !== 'undefined' && Renderer) === 'function' && _b || Object, typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object])], RadioGroup));
            radioGroupIds = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/range/range", ["@angular/core", "@angular/common", "../../util/util", "../../util/dom", "../../util/debouncer", "../../util/form", "../item/item", "../../util/ui-event-manager"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, EventEmitter, forwardRef, Input, Inject, Optional, Output, Provider, QueryList, Renderer, ViewChild, ViewChildren, ViewEncapsulation, NG_VALUE_ACCESSOR, clamp, isNumber, isPresent, isString, isTrueProperty, pointerCoord, raf, Debouncer, Form, Item, UIEventManager, _createClass, _typeof, __decorate, __metadata, __param, RANGE_VALUE_ACCESSOR, RangeKnob, Range, _a, _b, _c, _d, _e, _f, _g;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            forwardRef = _angularCore.forwardRef;
            Input = _angularCore.Input;
            Inject = _angularCore.Inject;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
            Provider = _angularCore.Provider;
            QueryList = _angularCore.QueryList;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewChildren = _angularCore.ViewChildren;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NG_VALUE_ACCESSOR = _angularCommon.NG_VALUE_ACCESSOR;
        }, function (_utilUtil) {
            clamp = _utilUtil.clamp;
            isNumber = _utilUtil.isNumber;
            isPresent = _utilUtil.isPresent;
            isString = _utilUtil.isString;
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_utilDom) {
            pointerCoord = _utilDom.pointerCoord;
            raf = _utilDom.raf;
        }, function (_utilDebouncer) {
            Debouncer = _utilDebouncer.Debouncer;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_itemItem) {
            Item = _itemItem.Item;
        }, function (_utilUiEventManager) {
            UIEventManager = _utilUiEventManager.UIEventManager;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            RANGE_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, { useExisting: forwardRef(function () {
                    return Range;
                }), multi: true });

            _export("RangeKnob", RangeKnob = function () {
                function RangeKnob(range) {
                    _classCallCheck(this, RangeKnob);

                    this.range = range;
                }

                _createClass(RangeKnob, [{
                    key: "position",
                    value: function position() {
                        this._x = this._ratio * 100 + "%";
                    }
                }, {
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        if (isPresent(this.range.value)) {
                            // we already have a value
                            if (this.range.dualKnobs) {
                                // we have a value and there are two knobs
                                if (this.upper) {
                                    // this is the upper knob
                                    this.value = this.range.value.upper;
                                } else {
                                    // this is the lower knob
                                    this.value = this.range.value.lower;
                                }
                            } else {
                                // we have a value and there is only one knob
                                this.value = this.range.value;
                            }
                        } else {
                            // we do not have a value so set defaults
                            this.ratio = this.range.dualKnobs && this.upper ? 1 : 0;
                        }
                        this.position();
                    }
                }, {
                    key: "ratio",
                    get: function get() {
                        return this._ratio;
                    },
                    set: function set(ratio) {
                        this._ratio = clamp(0, ratio, 1);
                        this._val = this.range.ratioToValue(this._ratio);
                        if (this.range.snaps) {
                            this._ratio = this.range.valueToRatio(this._val);
                        }
                    }
                }, {
                    key: "value",
                    get: function get() {
                        return this._val;
                    },
                    set: function set(val) {
                        if (isString(val)) {
                            val = Math.round(val);
                        }
                        if (isNumber(val) && !isNaN(val)) {
                            this._ratio = this.range.valueToRatio(val);
                            this._val = this.range.ratioToValue(this._ratio);
                        }
                    }
                }]);

                return RangeKnob;
            }());

            _export("RangeKnob", RangeKnob);

            __decorate([Input(), __metadata('design:type', Boolean)], RangeKnob.prototype, "upper", void 0);
            _export("RangeKnob", RangeKnob = __decorate([Component({
                selector: '.range-knob-handle',
                template: '<div class="range-pin" *ngIf="range.pin">{{_val}}</div>' + '<div class="range-knob"></div>',
                host: {
                    '[class.range-knob-pressed]': 'pressed',
                    '[class.range-knob-min]': '_val===range.min',
                    '[class.range-knob-max]': '_val===range.max',
                    '[style.left]': '_x',
                    '[style.top]': '_y',
                    '[style.transform]': '_trns',
                    '[attr.aria-valuenow]': '_val',
                    '[attr.aria-valuemin]': 'range.min',
                    '[attr.aria-valuemax]': 'range.max',
                    'role': 'slider',
                    'tabindex': '0'
                }
            }), __param(0, Inject(forwardRef(function () {
                return Range;
            }))), __metadata('design:paramtypes', [Range])], RangeKnob));
            /**
             * @name Range
             * @description
             * The Range slider lets users select from a range of values by moving
             * the slider knob. It can accept dual knobs, but by default one knob
             * controls the value of the range.
             *
             * ### Range Labels
             * Labels can be placed on either side of the range by adding the
             * `range-left` or `range-right` property to the element. The element
             * doesn't have to be an `ion-label`, it can be added to any element
             * to place it to the left or right of the range. See [usage](#usage)
             * below for examples.
             *
             *
             * ### Minimum and Maximum Values
             * Minimum and maximum values can be passed to the range through the `min`
             * and `max` properties, respectively. By default, the range sets the `min`
             * to `0` and the `max` to `100`.
             *
             *
             * ### Steps and Snaps
             * The `step` property specifies the value granularity of the range's value.
             * It can be useful to set the `step` when the value isn't in increments of `1`.
             * Setting the `step` property will show tick marks on the range for each step.
             * The `snaps` property can be set to automatically move the knob to the nearest
             * tick mark based on the step property value.
             *
             *
             * ### Dual Knobs
             * Setting the `dualKnobs` property to `true` on the range component will
             * enable two knobs on the range. If the range has two knobs, the value will
             * be an object containing two properties: `lower` and `upper`.
             *
             *
             * @usage
             * ```html
             * <ion-list>
             *   <ion-item>
             *     <ion-range [(ngModel)]="singleValue" danger pin="true"></ion-range>
             *   </ion-item>
             *
             *   <ion-item>
             *     <ion-range min="-200" max="200" [(ngModel)]="saturation" secondary>
             *       <ion-label range-left>-200</ion-label>
             *       <ion-label range-right>200</ion-label>
             *     </ion-range>
             *   </ion-item>
             *
             *  <ion-item>
             *    <ion-range min="20" max="80" step="2" [(ngModel)]="brightness">
             *      <ion-icon small range-left name="sunny"></ion-icon>
             *      <ion-icon range-right name="sunny"></ion-icon>
             *    </ion-range>
             *  </ion-item>
             *
             *   <ion-item>
             *     <ion-label>step=100, snaps, {{singleValue4}}</ion-label>
             *     <ion-range min="1000" max="2000" step="100" snaps="true" secondary [(ngModel)]="singleValue4"></ion-range>
             *   </ion-item>
             *
             *   <ion-item>
             *     <ion-label>dual, step=3, snaps, {{dualValue2 | json}}</ion-label>
             *     <ion-range dualKnobs="true" [(ngModel)]="dualValue2" min="21" max="72" step="3" snaps="true"></ion-range>
             *   </ion-item>
             * </ion-list>
             * ```
             *
             *
             * @demo /docs/v2/demos/range/
             */

            _export("Range", Range = function () {
                function Range(_form, _item, _renderer) {
                    _classCallCheck(this, Range);

                    this._form = _form;
                    this._item = _item;
                    this._renderer = _renderer;
                    this._dual = false;
                    this._disabled = false;
                    this._start = null;
                    this._min = 0;
                    this._max = 100;
                    this._step = 1;
                    this._snaps = false;
                    this._debouncer = new Debouncer(0);
                    this._events = new UIEventManager();
                    /**
                     * @output {Range} Expression to evaluate when the range value changes.
                     */
                    this.ionChange = new EventEmitter();
                    _form.register(this);
                    if (_item) {
                        this.id = 'rng-' + _item.registerInput('range');
                        this._labelId = 'lbl-' + _item.id;
                        _item.setCssClass('item-range', true);
                    }
                }
                /**
                 * @input {number} Minimum integer value of the range. Defaults to `0`.
                 */


                _createClass(Range, [{
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        var barL = '';
                        var barR = '';
                        var firstRatio = this._knobs.first.ratio;
                        if (this._dual) {
                            var lastRatio = this._knobs.last.ratio;
                            barL = Math.min(firstRatio, lastRatio) * 100 + "%";
                            barR = 100 - Math.max(firstRatio, lastRatio) * 100 + "%";
                        } else {
                            barR = 100 - firstRatio * 100 + "%";
                        }
                        this._renderer.setElementStyle(this._bar.nativeElement, 'left', barL);
                        this._renderer.setElementStyle(this._bar.nativeElement, 'right', barR);
                        // add touchstart/mousedown listeners
                        this._events.pointerEventsRef(this._slider, this.pointerDown.bind(this), this.pointerMove.bind(this), this.pointerUp.bind(this));
                        this.createTicks();
                    }
                }, {
                    key: "pointerDown",
                    value: function pointerDown(ev) {
                        // TODO: we could stop listening for events instead of checking this._disabled.
                        // since there are a lot of events involved, this solution is
                        // enough for the moment
                        if (this._disabled) {
                            return false;
                        }
                        console.debug("range, " + ev.type);
                        // prevent default so scrolling does not happen
                        ev.preventDefault();
                        ev.stopPropagation();
                        // get the start coordinates
                        this._start = pointerCoord(ev);
                        // get the full dimensions of the slider element
                        var rect = this._rect = this._slider.nativeElement.getBoundingClientRect();
                        // figure out the offset
                        // the start of the pointer could actually
                        // have been left or right of the slider bar
                        if (this._start.x < rect.left) {
                            rect.xOffset = this._start.x - rect.left;
                        } else if (this._start.x > rect.right) {
                            rect.xOffset = this._start.x - rect.right;
                        } else {
                            rect.xOffset = 0;
                        }
                        // figure out which knob we're interacting with
                        this.setActiveKnob(this._start, rect);
                        // update the ratio for the active knob
                        this.updateKnob(this._start, rect);
                        // update the active knob's position
                        this._active.position();
                        this._pressed = this._active.pressed = true;
                        return true;
                    }
                }, {
                    key: "pointerMove",
                    value: function pointerMove(ev) {
                        console.debug("range, " + ev.type);
                        // prevent default so scrolling does not happen
                        ev.preventDefault();
                        ev.stopPropagation();
                        if (this._start !== null && this._active !== null) {
                            // only use pointer move if it's a valid pointer
                            // and we already have start coordinates
                            // update the ratio for the active knob
                            this.updateKnob(pointerCoord(ev), this._rect);
                            // update the active knob's position
                            this._active.position();
                            this._pressed = this._active.pressed = true;
                        }
                    }
                }, {
                    key: "pointerUp",
                    value: function pointerUp(ev) {
                        console.debug("range, " + ev.type);
                        // prevent default so scrolling does not happen
                        ev.preventDefault();
                        ev.stopPropagation();
                        // update the ratio for the active knob
                        this.updateKnob(pointerCoord(ev), this._rect);
                        // update the active knob's position
                        this._active.position();
                        // clear the start coordinates and active knob
                        this._start = this._active = null;
                        this._pressed = this._knobs.first.pressed = this._knobs.last.pressed = false;
                    }
                }, {
                    key: "setActiveKnob",
                    value: function setActiveKnob(current, rect) {
                        // figure out which knob is the closest one to the pointer
                        var ratio = (current.x - rect.left) / rect.width;
                        if (this._dual && Math.abs(ratio - this._knobs.first.ratio) > Math.abs(ratio - this._knobs.last.ratio)) {
                            this._active = this._knobs.last;
                        } else {
                            this._active = this._knobs.first;
                        }
                    }
                }, {
                    key: "updateKnob",
                    value: function updateKnob(current, rect) {
                        var _this = this;

                        // figure out where the pointer is currently at
                        // update the knob being interacted with
                        if (this._active) {
                            var oldVal = this._active.value;
                            this._active.ratio = (current.x - rect.left) / rect.width;
                            var newVal = this._active.value;
                            if (oldVal !== newVal) {
                                // value has been updated
                                if (this._dual) {
                                    this.value = {
                                        lower: Math.min(this._knobs.first.value, this._knobs.last.value),
                                        upper: Math.max(this._knobs.first.value, this._knobs.last.value)
                                    };
                                } else {
                                    this.value = newVal;
                                }
                                this._debouncer.debounce(function () {
                                    _this.onChange(_this.value);
                                    _this.ionChange.emit(_this);
                                });
                            }
                            this.updateBar();
                        }
                    }
                }, {
                    key: "updateBar",
                    value: function updateBar() {
                        var firstRatio = this._knobs.first.ratio;
                        if (this._dual) {
                            var lastRatio = this._knobs.last.ratio;
                            this._barL = Math.min(firstRatio, lastRatio) * 100 + "%";
                            this._barR = 100 - Math.max(firstRatio, lastRatio) * 100 + "%";
                        } else {
                            this._barL = '';
                            this._barR = 100 - firstRatio * 100 + "%";
                        }
                        this.updateTicks();
                    }
                }, {
                    key: "createTicks",
                    value: function createTicks() {
                        var _this2 = this;

                        if (this._snaps) {
                            raf(function () {
                                // TODO: Fix to not use RAF
                                _this2._ticks = [];
                                for (var value = _this2._min; value <= _this2._max; value += _this2._step) {
                                    var ratio = _this2.valueToRatio(value);
                                    _this2._ticks.push({
                                        ratio: ratio,
                                        left: ratio * 100 + "%"
                                    });
                                }
                                _this2.updateTicks();
                            });
                        }
                    }
                }, {
                    key: "updateTicks",
                    value: function updateTicks() {
                        var _this3 = this;

                        if (this._snaps) {
                            (function () {
                                var ratio = _this3.ratio;
                                if (_this3._dual) {
                                    (function () {
                                        var upperRatio = _this3.ratioUpper;
                                        _this3._ticks.forEach(function (t) {
                                            t.active = t.ratio >= ratio && t.ratio <= upperRatio;
                                        });
                                    })();
                                } else {
                                    _this3._ticks.forEach(function (t) {
                                        t.active = t.ratio <= ratio;
                                    });
                                }
                            })();
                        }
                    }
                }, {
                    key: "ratioToValue",
                    value: function ratioToValue(ratio) {
                        ratio = Math.round((this._max - this._min) * ratio + this._min);
                        return Math.round(ratio / this._step) * this._step;
                    }
                }, {
                    key: "valueToRatio",
                    value: function valueToRatio(value) {
                        value = Math.round(clamp(this._min, value, this._max) / this._step) * this._step;
                        return (value - this._min) / (this._max - this._min);
                    }
                }, {
                    key: "writeValue",
                    value: function writeValue(val) {
                        if (isPresent(val)) {
                            var knobs = this._knobs;
                            this.value = val;
                            if (this._knobs) {
                                if (this._dual) {
                                    knobs.first.value = val.lower;
                                    knobs.last.value = val.upper;
                                    knobs.last.position();
                                } else {
                                    knobs.first.value = val;
                                }
                                knobs.first.position();
                                this.updateBar();
                            }
                        }
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        var _this4 = this;

                        this._fn = fn;
                        this.onChange = function (val) {
                            fn(val);
                            _this4.onTouched();
                        };
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "onChange",
                    value: function onChange(val) {
                        // used when this input does not have an ngModel or ngControl
                        this.onTouched();
                    }
                }, {
                    key: "onTouched",
                    value: function onTouched() {}
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._form.deregister(this);
                        this._events.unlistenAll();
                    }
                }, {
                    key: "min",
                    get: function get() {
                        return this._min;
                    },
                    set: function set(val) {
                        val = Math.round(val);
                        if (!isNaN(val)) {
                            this._min = val;
                        }
                    }
                }, {
                    key: "max",
                    get: function get() {
                        return this._max;
                    },
                    set: function set(val) {
                        val = Math.round(val);
                        if (!isNaN(val)) {
                            this._max = val;
                        }
                    }
                }, {
                    key: "step",
                    get: function get() {
                        return this._step;
                    },
                    set: function set(val) {
                        val = Math.round(val);
                        if (!isNaN(val) && val > 0) {
                            this._step = val;
                        }
                    }
                }, {
                    key: "snaps",
                    get: function get() {
                        return this._snaps;
                    },
                    set: function set(val) {
                        this._snaps = isTrueProperty(val);
                    }
                }, {
                    key: "pin",
                    get: function get() {
                        return this._pin;
                    },
                    set: function set(val) {
                        this._pin = isTrueProperty(val);
                    }
                }, {
                    key: "debounce",
                    get: function get() {
                        return this._debouncer.wait;
                    },
                    set: function set(val) {
                        this._debouncer.wait = val;
                    }
                }, {
                    key: "dualKnobs",
                    get: function get() {
                        return this._dual;
                    },
                    set: function set(val) {
                        this._dual = isTrueProperty(val);
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this._item && this._item.setCssClass('item-range-disabled', this._disabled);
                    }
                }, {
                    key: "ratio",
                    get: function get() {
                        if (this._dual) {
                            return Math.min(this._knobs.first.ratio, this._knobs.last.ratio);
                        }
                        return this._knobs.first.ratio;
                    }
                }, {
                    key: "ratioUpper",
                    get: function get() {
                        if (this._dual) {
                            return Math.max(this._knobs.first.ratio, this._knobs.last.ratio);
                        }
                        return null;
                    }
                }]);

                return Range;
            }());

            _export("Range", Range);

            __decorate([ViewChild('bar'), __metadata('design:type', typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object)], Range.prototype, "_bar", void 0);
            __decorate([ViewChild('slider'), __metadata('design:type', typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object)], Range.prototype, "_slider", void 0);
            __decorate([ViewChildren(RangeKnob), __metadata('design:type', typeof (_c = typeof QueryList !== 'undefined' && QueryList) === 'function' && _c || Object)], Range.prototype, "_knobs", void 0);
            __decorate([Input(), __metadata('design:type', Number)], Range.prototype, "min", null);
            __decorate([Input(), __metadata('design:type', Number)], Range.prototype, "max", null);
            __decorate([Input(), __metadata('design:type', Number)], Range.prototype, "step", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Range.prototype, "snaps", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Range.prototype, "pin", null);
            __decorate([Input(), __metadata('design:type', Number)], Range.prototype, "debounce", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Range.prototype, "dualKnobs", null);
            __decorate([Output(), __metadata('design:type', typeof (_d = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _d || Object)], Range.prototype, "ionChange", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], Range.prototype, "disabled", null);
            _export("Range", Range = __decorate([Component({
                selector: 'ion-range',
                template: '<ng-content select="[range-left]"></ng-content>' + '<div class="range-slider" #slider>' + '<div class="range-tick" *ngFor="let t of _ticks" [style.left]="t.left" [class.range-tick-active]="t.active"></div>' + '<div class="range-bar"></div>' + '<div class="range-bar range-bar-active" [style.left]="_barL" [style.right]="_barR" #bar></div>' + '<div class="range-knob-handle"></div>' + '<div class="range-knob-handle" [upper]="true" *ngIf="_dual"></div>' + '</div>' + '<ng-content select="[range-right]"></ng-content>',
                host: {
                    '[class.range-disabled]': '_disabled',
                    '[class.range-pressed]': '_pressed',
                    '[class.range-has-pin]': '_pin'
                },
                directives: [RangeKnob],
                providers: [RANGE_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            }), __param(1, Optional()), __metadata('design:paramtypes', [typeof (_e = typeof Form !== 'undefined' && Form) === 'function' && _e || Object, typeof (_f = typeof Item !== 'undefined' && Item) === 'function' && _f || Object, typeof (_g = typeof Renderer !== 'undefined' && Renderer) === 'function' && _g || Object])], Range));
        }
    };
});
"use strict";

System.register("ionic-angular/components/refresher/refresher-content", ["@angular/core", "../../config/config", "./refresher"], function (_export, _context) {
    "use strict";

    var Component, Input, ViewEncapsulation, Config, Refresher, _createClass, _typeof, __decorate, __metadata, RefresherContent, _a, _b;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            Input = _angularCore.Input;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_refresher) {
            Refresher = _refresher.Refresher;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("RefresherContent", RefresherContent = function () {
                function RefresherContent(r, _config) {
                    _classCallCheck(this, RefresherContent);

                    this.r = r;
                    this._config = _config;
                }
                /**
                 * @private
                 */


                _createClass(RefresherContent, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        if (!this.pullingIcon) {
                            this.pullingIcon = this._config.get('ionPullIcon', 'arrow-down');
                        }
                        if (!this.refreshingSpinner) {
                            this.refreshingSpinner = this._config.get('ionRefreshingSpinner', this._config.get('spinner', 'ios'));
                        }
                    }
                }]);

                return RefresherContent;
            }());

            _export("RefresherContent", RefresherContent);

            __decorate([Input(), __metadata('design:type', String)], RefresherContent.prototype, "pullingIcon", void 0);
            __decorate([Input(), __metadata('design:type', String)], RefresherContent.prototype, "pullingText", void 0);
            __decorate([Input(), __metadata('design:type', String)], RefresherContent.prototype, "refreshingSpinner", void 0);
            __decorate([Input(), __metadata('design:type', String)], RefresherContent.prototype, "refreshingText", void 0);
            _export("RefresherContent", RefresherContent = __decorate([Component({
                selector: 'ion-refresher-content',
                template: '<div class="refresher-pulling">' + '<div class="refresher-pulling-icon" *ngIf="pullingIcon">' + '<ion-icon [name]="pullingIcon"></ion-icon>' + '</div>' + '<div class="refresher-pulling-text" [innerHTML]="pullingText" *ngIf="pullingText"></div>' + '</div>' + '<div class="refresher-refreshing">' + '<div class="refresher-refreshing-icon">' + '<ion-spinner [name]="refreshingSpinner"></ion-spinner>' + '</div>' + '<div class="refresher-refreshing-text" [innerHTML]="refreshingText" *ngIf="refreshingText"></div>' + '</div>',
                host: {
                    '[attr.state]': 'r.state'
                },
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof Refresher !== 'undefined' && Refresher) === 'function' && _a || Object, typeof (_b = typeof Config !== 'undefined' && Config) === 'function' && _b || Object])], RefresherContent));
        }
    };
});
"use strict";

System.register("ionic-angular/components/refresher/refresher", ["@angular/core", "../content/content", "../../util/dom", "../../util/util", "../../util/ui-event-manager"], function (_export, _context) {
    "use strict";

    var Directive, EventEmitter, Host, Input, Output, NgZone, Content, CSS, pointerCoord, isTrueProperty, UIEventManager, _createClass, _typeof, __decorate, __metadata, __param, Refresher, STATE_INACTIVE, STATE_PULLING, STATE_READY, STATE_REFRESHING, STATE_CANCELLING, STATE_COMPLETING, _a, _b, _c, _d, _e;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            EventEmitter = _angularCore.EventEmitter;
            Host = _angularCore.Host;
            Input = _angularCore.Input;
            Output = _angularCore.Output;
            NgZone = _angularCore.NgZone;
        }, function (_contentContent) {
            Content = _contentContent.Content;
        }, function (_utilDom) {
            CSS = _utilDom.CSS;
            pointerCoord = _utilDom.pointerCoord;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_utilUiEventManager) {
            UIEventManager = _utilUiEventManager.UIEventManager;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Refresher", Refresher = function () {
                function Refresher(_content, _zone) {
                    _classCallCheck(this, Refresher);

                    this._content = _content;
                    this._zone = _zone;
                    this._appliedStyles = false;
                    this._lastCheck = 0;
                    this._isEnabled = true;
                    this._events = new UIEventManager(false);
                    this._top = '';
                    /**
                     * The current state which the refresher is in. The refresher's states include:
                     *
                     * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.
                     * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.
                     * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.
                     * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.
                     * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.
                     * - `completing` - The `refreshing` state has finished and the refresher is in the process of closing itself. Once closed, the refresher will go back to the `inactive` state.
                     */
                    this.state = STATE_INACTIVE;
                    /**
                     * The Y coordinate of where the user started to the pull down the content.
                     */
                    this.startY = null;
                    /**
                     * The current touch or mouse event's Y coordinate.
                     */
                    this.currentY = null;
                    /**
                     * The distance between the start of the pull and the current touch or
                     * mouse event's Y coordinate.
                     */
                    this.deltaY = null;
                    /**
                     * A number representing how far down the user has pulled.
                     * The number `0` represents the user hasn't pulled down at all. The
                     * number `1`, and anything greater than `1`, represents that the user
                     * has pulled far enough down that when they let go then the refresh will
                     * happen. If they let go and the number is less than `1`, then the
                     * refresh will not happen, and the content will return to it's original
                     * position.
                     */
                    this.progress = 0;
                    /**
                     * @input {number} The min distance the user must pull down until the
                     * refresher can go into the `refreshing` state. Default is `60`.
                     */
                    this.pullMin = 60;
                    /**
                     * @input {number} The maximum distance of the pull until the refresher
                     * will automatically go into the `refreshing` state. By default, the pull
                     * maximum will be the result of `pullMin + 60`.
                     */
                    this.pullMax = this.pullMin + 60;
                    /**
                     * @input {number} How many milliseconds it takes to close the refresher. Default is `280`.
                     */
                    this.closeDuration = 280;
                    /**
                     * @input {number} How many milliseconds it takes the refresher to to snap back to the `refreshing` state. Default is `280`.
                     */
                    this.snapbackDuration = 280;
                    /**
                     * @output {event} When the user lets go and has pulled down far enough, which would be
                     * farther than the `pullMin`, then your refresh hander if fired and the state is
                     * updated to `refreshing`. From within your refresh handler, you must call the
                     * `complete()` method when your async operation has completed.
                     */
                    this.ionRefresh = new EventEmitter();
                    /**
                     * @output {event} While the user is pulling down the content and exposing the refresher.
                     */
                    this.ionPull = new EventEmitter();
                    /**
                     * @output {event} When the user begins to start pulling down.
                     */
                    this.ionStart = new EventEmitter();
                    _content.addCssClass('has-refresher');
                }
                /**
                 * @input {boolean} If the refresher is enabled or not. This should be used in place of an `ngIf`. Default is `true`.
                 */


                _createClass(Refresher, [{
                    key: "_onStart",
                    value: function _onStart(ev) {
                        // if multitouch then get out immediately
                        if (ev.touches && ev.touches.length > 1) {
                            return false;
                        }
                        if (this.state !== STATE_INACTIVE) {
                            return false;
                        }
                        var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
                        // if the scrollTop is greater than zero then it's
                        // not possible to pull the content down yet
                        if (scrollHostScrollTop > 0) {
                            return false;
                        }
                        var coord = pointerCoord(ev);
                        console.debug('Pull-to-refresh, onStart', ev.type, 'y:', coord.y);
                        if (this._content.adjustedTop > 0) {
                            var newTop = this._content.adjustedTop + 'px';
                            if (this._top !== newTop) {
                                this._top = newTop;
                            }
                        }
                        this.startY = this.currentY = coord.y;
                        this.progress = 0;
                        this.state = STATE_PULLING;
                        return true;
                    }
                }, {
                    key: "_onMove",
                    value: function _onMove(ev) {
                        var _this = this;

                        // this method can get called like a bazillion times per second,
                        // so it's built to be as efficient as possible, and does its
                        // best to do any DOM read/writes only when absolutely necessary
                        // if multitouch then get out immediately
                        if (ev.touches && ev.touches.length > 1) {
                            return 1;
                        }
                        // do nothing if it's actively refreshing
                        // or it's in the process of closing
                        // or this was never a startY
                        if (this.startY === null || this.state === STATE_REFRESHING || this.state === STATE_CANCELLING || this.state === STATE_COMPLETING) {
                            return 2;
                        }
                        // if we just updated stuff less than 16ms ago
                        // then don't check again, just chillout plz
                        var now = Date.now();
                        if (this._lastCheck + 16 > now) {
                            return 3;
                        }
                        // remember the last time we checked all this
                        this._lastCheck = now;
                        // get the current pointer coordinates
                        var coord = pointerCoord(ev);
                        this.currentY = coord.y;
                        // it's now possible they could be pulling down the content
                        // how far have they pulled so far?
                        this.deltaY = coord.y - this.startY;
                        // don't bother if they're scrolling up
                        // and have not already started dragging
                        if (this.deltaY <= 0) {
                            // the current Y is higher than the starting Y
                            // so they scrolled up enough to be ignored
                            this.progress = 0;
                            if (this.state !== STATE_INACTIVE) {
                                this._zone.run(function () {
                                    _this.state = STATE_INACTIVE;
                                });
                            }
                            if (this._appliedStyles) {
                                // reset the styles only if they were applied
                                this._setCss(0, '', false, '');
                                return 5;
                            }
                            return 6;
                        }
                        if (this.state === STATE_INACTIVE) {
                            // this refresh is not already actively pulling down
                            // get the content's scrollTop
                            var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
                            // if the scrollTop is greater than zero then it's
                            // not possible to pull the content down yet
                            if (scrollHostScrollTop > 0) {
                                this.progress = 0;
                                this.startY = null;
                                return 7;
                            }
                            // content scrolled all the way to the top, and dragging down
                            this.state = STATE_PULLING;
                        }
                        // prevent native scroll events
                        ev.preventDefault();
                        // the refresher is actively pulling at this point
                        // move the scroll element within the content element
                        this._setCss(this.deltaY, '0ms', true, '');
                        if (!this.deltaY) {
                            // don't continue if there's no delta yet
                            this.progress = 0;
                            return 8;
                        }
                        // so far so good, let's run this all back within zone now
                        this._zone.run(function () {
                            _this._onMoveInZone();
                        });
                    }
                }, {
                    key: "_onMoveInZone",
                    value: function _onMoveInZone() {
                        // set pull progress
                        this.progress = this.deltaY / this.pullMin;
                        // emit "start" if it hasn't started yet
                        if (!this._didStart) {
                            this._didStart = true;
                            this.ionStart.emit(this);
                        }
                        // emit "pulling" on every move
                        this.ionPull.emit(this);
                        // do nothing if the delta is less than the pull threshold
                        if (this.deltaY < this.pullMin) {
                            // ensure it stays in the pulling state, cuz its not ready yet
                            this.state = STATE_PULLING;
                            return 2;
                        }
                        if (this.deltaY > this.pullMax) {
                            // they pulled farther than the max, so kick off the refresh
                            this._beginRefresh();
                            return 3;
                        }
                        // pulled farther than the pull min!!
                        // it is now in the `ready` state!!
                        // if they let go then it'll refresh, kerpow!!
                        this.state = STATE_READY;
                        return 4;
                    }
                }, {
                    key: "_onEnd",
                    value: function _onEnd(ev) {
                        var _this2 = this;

                        // only run in a zone when absolutely necessary
                        if (this.state === STATE_READY) {
                            this._zone.run(function () {
                                // they pulled down far enough, so it's ready to refresh
                                _this2._beginRefresh();
                            });
                        } else if (this.state === STATE_PULLING) {
                            this._zone.run(function () {
                                // they were pulling down, but didn't pull down far enough
                                // set the content back to it's original location
                                // and close the refresher
                                // set that the refresh is actively cancelling
                                _this2.cancel();
                            });
                        }
                        // reset on any touchend/mouseup
                        this.startY = null;
                    }
                }, {
                    key: "_beginRefresh",
                    value: function _beginRefresh() {
                        // assumes we're already back in a zone
                        // they pulled down far enough, so it's ready to refresh
                        this.state = STATE_REFRESHING;
                        // place the content in a hangout position while it thinks
                        this._setCss(this.pullMin, this.snapbackDuration + 'ms', true, '');
                        // emit "refresh" because it was pulled down far enough
                        // and they let go to begin refreshing
                        this.ionRefresh.emit(this);
                    }
                }, {
                    key: "complete",
                    value: function complete() {
                        this._close(STATE_COMPLETING, '120ms');
                    }
                }, {
                    key: "cancel",
                    value: function cancel() {
                        this._close(STATE_CANCELLING, '');
                    }
                }, {
                    key: "_close",
                    value: function _close(state, delay) {
                        var timer;
                        function close(ev) {
                            // closing is done, return to inactive state
                            if (ev) {
                                clearTimeout(timer);
                            }
                            this.state = STATE_INACTIVE;
                            this.progress = 0;
                            this._didStart = this.startY = this.currentY = this.deltaY = null;
                            this._setCss(0, '0ms', false, '');
                        }
                        // create fallback timer incase something goes wrong with transitionEnd event
                        timer = setTimeout(close.bind(this), 600);
                        // create transition end event on the content's scroll element
                        this._content.onScrollElementTransitionEnd(close.bind(this));
                        // reset set the styles on the scroll element
                        // set that the refresh is actively cancelling/completing
                        this.state = state;
                        this._setCss(0, '', true, delay);
                        if (this._pointerEvents) {
                            this._pointerEvents.stop();
                        }
                    }
                }, {
                    key: "_setCss",
                    value: function _setCss(y, duration, overflowVisible, delay) {
                        this._appliedStyles = y > 0;
                        var content = this._content;
                        content.setScrollElementStyle(CSS.transform, y > 0 ? 'translateY(' + y + 'px) translateZ(0px)' : 'translateZ(0px)');
                        content.setScrollElementStyle(CSS.transitionDuration, duration);
                        content.setScrollElementStyle(CSS.transitionDelay, delay);
                        content.setScrollElementStyle('overflow', overflowVisible ? 'hidden' : '');
                    }
                }, {
                    key: "_setListeners",
                    value: function _setListeners(shouldListen) {
                        this._events.unlistenAll();
                        this._pointerEvents = null;
                        if (shouldListen) {
                            this._pointerEvents = this._events.pointerEvents(this._content.getScrollElement(), this._onStart.bind(this), this._onMove.bind(this), this._onEnd.bind(this));
                        }
                    }
                }, {
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        // bind event listeners
                        // save the unregister listener functions to use onDestroy
                        this._setListeners(this._isEnabled);
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._setListeners(false);
                    }
                }, {
                    key: "enabled",
                    get: function get() {
                        return this._isEnabled;
                    },
                    set: function set(val) {
                        this._isEnabled = isTrueProperty(val);
                        this._setListeners(this._isEnabled);
                    }
                }]);

                return Refresher;
            }());

            _export("Refresher", Refresher);

            __decorate([Input(), __metadata('design:type', Number)], Refresher.prototype, "pullMin", void 0);
            __decorate([Input(), __metadata('design:type', Number)], Refresher.prototype, "pullMax", void 0);
            __decorate([Input(), __metadata('design:type', Number)], Refresher.prototype, "closeDuration", void 0);
            __decorate([Input(), __metadata('design:type', Number)], Refresher.prototype, "snapbackDuration", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], Refresher.prototype, "enabled", null);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Refresher.prototype, "ionRefresh", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], Refresher.prototype, "ionPull", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_c = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _c || Object)], Refresher.prototype, "ionStart", void 0);
            _export("Refresher", Refresher = __decorate([Directive({
                selector: 'ion-refresher',
                host: {
                    '[class.refresher-active]': 'state !== "inactive"',
                    '[style.top]': '_top'
                }
            }), __param(0, Host()), __metadata('design:paramtypes', [typeof (_d = typeof Content !== 'undefined' && Content) === 'function' && _d || Object, typeof (_e = typeof NgZone !== 'undefined' && NgZone) === 'function' && _e || Object])], Refresher));
            STATE_INACTIVE = 'inactive';
            STATE_PULLING = 'pulling';
            STATE_READY = 'ready';
            STATE_REFRESHING = 'refreshing';
            STATE_CANCELLING = 'cancelling';
            STATE_COMPLETING = 'completing';
        }
    };
});
"use strict";

System.register("ionic-angular/components/scroll/scroll", ["@angular/core", "../ion"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, Ion, _createClass, _typeof, __decorate, __metadata, Scroll, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_ion) {
            Ion = _ion.Ion;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Scroll", Scroll = function (_Ion) {
                _inherits(Scroll, _Ion);

                function Scroll(elementRef) {
                    _classCallCheck(this, Scroll);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Scroll).call(this, elementRef));

                    /**
                     * @private
                     */
                    _this.maxScale = 3;
                    /**
                     * @private
                     */
                    _this.zoomDuration = 250;
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(Scroll, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        this.scrollElement = this.getNativeElement().children[0];
                    }
                }, {
                    key: "addScrollEventListener",
                    value: function addScrollEventListener(handler) {
                        var _this2 = this;

                        if (!this.scrollElement) {
                            return;
                        }
                        this.scrollElement.addEventListener('scroll', handler);
                        return function () {
                            _this2.scrollElement.removeEventListener('scroll', handler);
                        };
                    }
                }]);

                return Scroll;
            }(Ion));

            _export("Scroll", Scroll);

            _export("Scroll", Scroll = __decorate([Component({
                selector: 'ion-scroll',
                inputs: ['scrollX', 'scrollY', 'zoom', 'maxZoom'],
                host: {
                    '[class.scroll-x]': 'scrollX',
                    '[class.scroll-y]': 'scrollY'
                },
                template: '<scroll-content>' + '<div class="scroll-zoom-wrapper">' + '<ng-content></ng-content>' + '</div>' + '</scroll-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object])], Scroll));
        }
    };
});
"use strict";

System.register("ionic-angular/components/searchbar/searchbar", ["@angular/core", "@angular/common", "../../config/config", "../../util/util", "../../util/debouncer"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, EventEmitter, HostBinding, Input, Optional, Output, ViewChild, ViewEncapsulation, NgControl, Config, isPresent, Debouncer, _createClass, _typeof, __decorate, __metadata, __param, Searchbar, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            HostBinding = _angularCore.HostBinding;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
            ViewChild = _angularCore.ViewChild;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NgControl = _angularCommon.NgControl;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_utilDebouncer) {
            Debouncer = _utilDebouncer.Debouncer;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Searchbar", Searchbar = function () {
                function Searchbar(_elementRef, _config, ngControl) {
                    _classCallCheck(this, Searchbar);

                    this._elementRef = _elementRef;
                    this._config = _config;
                    this._value = '';
                    this._shouldBlur = true;
                    this._isActive = false;
                    this._debouncer = new Debouncer(250);
                    /**
                     * @input {string} Set the the cancel button text. Default: `"Cancel"`.
                     */
                    this.cancelButtonText = 'Cancel';
                    /**
                     * @input {boolean} Whether to show the cancel button or not. Default: `"false"`.
                     */
                    this.showCancelButton = false;
                    /**
                     * @input {string} Set the input's placeholder. Default `"Search"`.
                     */
                    this.placeholder = 'Search';
                    /**
                     * @input {string} Set the type of the input. Values: `"text"`, `"password"`, `"email"`, `"number"`, `"search"`, `"tel"`, `"url"`. Default `"search"`.
                     */
                    this.type = 'search';
                    /**
                     * @output {event} When the Searchbar input has changed including cleared.
                     */
                    this.ionInput = new EventEmitter();
                    /**
                     * @output {event} When the Searchbar input has blurred.
                     */
                    this.ionBlur = new EventEmitter();
                    /**
                     * @output {event} When the Searchbar input has focused.
                     */
                    this.ionFocus = new EventEmitter();
                    /**
                     * @output {event} When the cancel button is clicked.
                     */
                    this.ionCancel = new EventEmitter();
                    /**
                     * @output {event} When the clear input button is clicked.
                     */
                    this.ionClear = new EventEmitter();
                    /**
                     * @private
                     */
                    this.onChange = function (_) {};
                    /**
                     * @private
                     */
                    this.onTouched = function () {};
                    // If the user passed a ngControl we need to set the valueAccessor
                    if (ngControl) {
                        ngControl.valueAccessor = this;
                    }
                }
                /**
                 * @input {number} How long, in milliseconds, to wait to trigger the `input` event after each keystroke. Default `250`.
                 */


                _createClass(Searchbar, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        var showCancelButton = this.showCancelButton;
                        if (typeof showCancelButton === 'string') {
                            this.showCancelButton = showCancelButton === '' || showCancelButton === 'true';
                        }
                    }
                }, {
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        this.positionElements();
                    }
                }, {
                    key: "positionElements",
                    value: function positionElements() {
                        if (this._config.get('mode') !== 'ios') return;
                        // Position the input placeholder & search icon
                        if (this._searchbarInput && this._searchbarIcon) {
                            this.positionInputPlaceholder(this._searchbarInput.nativeElement, this._searchbarIcon.nativeElement);
                        }
                        // Position the cancel button
                        if (this._cancelButton && this._cancelButton.nativeElement) {
                            this.positionCancelButton(this._cancelButton.nativeElement);
                        }
                    }
                }, {
                    key: "positionInputPlaceholder",
                    value: function positionInputPlaceholder(inputEle, iconEle) {
                        if (this.shouldAlignLeft()) {
                            inputEle.removeAttribute('style');
                            iconEle.removeAttribute('style');
                        } else {
                            // Create a dummy span to get the placeholder width
                            var tempSpan = document.createElement('span');
                            tempSpan.innerHTML = this.placeholder;
                            document.body.appendChild(tempSpan);
                            // Get the width of the span then remove it
                            var textWidth = tempSpan.offsetWidth;
                            tempSpan.remove();
                            // Set the input padding left
                            var inputLeft = 'calc(50% - ' + textWidth / 2 + 'px)';
                            inputEle.style.paddingLeft = inputLeft;
                            // Set the icon margin left
                            var iconLeft = 'calc(50% - ' + (textWidth / 2 + 30) + 'px)';
                            iconEle.style.marginLeft = iconLeft;
                        }
                    }
                }, {
                    key: "positionCancelButton",
                    value: function positionCancelButton(cancelButtonEle) {
                        if (cancelButtonEle.offsetWidth > 0) {
                            if (this._sbHasFocus) {
                                cancelButtonEle.style.marginRight = '0';
                            } else {
                                cancelButtonEle.style.marginRight = -cancelButtonEle.offsetWidth + 'px';
                            }
                        }
                    }
                }, {
                    key: "shouldAlignLeft",
                    value: function shouldAlignLeft() {
                        return this._value && this._value.toString().trim() !== '' || this._sbHasFocus === true;
                    }
                }, {
                    key: "inputChanged",
                    value: function inputChanged(ev) {
                        var _this = this;

                        var value = ev.target.value;
                        this._debouncer.debounce(function () {
                            _this._value = value;
                            _this.onChange(_this._value);
                            _this.ionInput.emit(ev);
                        });
                    }
                }, {
                    key: "inputFocused",
                    value: function inputFocused(ev) {
                        this.ionFocus.emit(ev);
                        this._sbHasFocus = true;
                        this._isActive = true;
                        this.positionElements();
                    }
                }, {
                    key: "inputBlurred",
                    value: function inputBlurred(ev) {
                        // _shouldBlur determines if it should blur
                        // if we are clearing the input we still want to stay focused in the input
                        if (this._shouldBlur === false) {
                            this._searchbarInput.nativeElement.focus();
                            this._shouldBlur = true;
                            return;
                        }
                        this.ionBlur.emit(ev);
                        this._sbHasFocus = false;
                        this.positionElements();
                    }
                }, {
                    key: "clearInput",
                    value: function clearInput(ev) {
                        this.ionClear.emit(ev);
                        if (isPresent(this._value) && this._value !== '') {
                            this._value = '';
                            this.onChange(this._value);
                            this.ionInput.emit(ev);
                        }
                        this._shouldBlur = false;
                    }
                }, {
                    key: "cancelSearchbar",
                    value: function cancelSearchbar(ev) {
                        this.ionCancel.emit(ev);
                        this.clearInput(ev);
                        this._shouldBlur = true;
                        this._isActive = false;
                    }
                }, {
                    key: "writeValue",
                    value: function writeValue(val) {
                        this._value = val;
                        this.positionElements();
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        this.onChange = fn;
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "debounce",
                    get: function get() {
                        return this._debouncer.wait;
                    },
                    set: function set(val) {
                        this._debouncer.wait = val;
                    }
                }, {
                    key: "searchbarInput",
                    set: function set(searchbarInput) {
                        this._searchbarInput = searchbarInput;
                        var inputEle = searchbarInput.nativeElement;
                        // By defalt set autocomplete="off" unless specified by the input
                        var autoComplete = this.autocomplete === '' || this.autocomplete === 'on' ? 'on' : this._config.get('autocomplete', 'off');
                        inputEle.setAttribute('autocomplete', autoComplete);
                        // by default set autocorrect="off" unless specified by the input
                        var autoCorrect = this.autocorrect === '' || this.autocorrect === 'on' ? 'on' : this._config.get('autocorrect', 'off');
                        inputEle.setAttribute('autocorrect', autoCorrect);
                        // by default set spellcheck="false" unless specified by the input
                        var spellCheck = this.spellcheck === '' || this.spellcheck === 'true' || this.spellcheck === true ? true : this._config.getBoolean('spellcheck', false);
                        inputEle.setAttribute('spellcheck', spellCheck);
                        // by default set type="search" unless specified by the input
                        inputEle.setAttribute('type', this.type);
                    }
                }, {
                    key: "value",
                    get: function get() {
                        return this._value;
                    },
                    set: function set(val) {
                        this._value = val;
                    }
                }]);

                return Searchbar;
            }());

            _export("Searchbar", Searchbar);

            __decorate([Input(), __metadata('design:type', String)], Searchbar.prototype, "cancelButtonText", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Searchbar.prototype, "showCancelButton", void 0);
            __decorate([Input(), __metadata('design:type', Number)], Searchbar.prototype, "debounce", null);
            __decorate([Input(), __metadata('design:type', String)], Searchbar.prototype, "placeholder", void 0);
            __decorate([Input(), __metadata('design:type', String)], Searchbar.prototype, "autocomplete", void 0);
            __decorate([Input(), __metadata('design:type', String)], Searchbar.prototype, "autocorrect", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Searchbar.prototype, "spellcheck", void 0);
            __decorate([Input(), __metadata('design:type', String)], Searchbar.prototype, "type", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Searchbar.prototype, "ionInput", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], Searchbar.prototype, "ionBlur", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_c = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _c || Object)], Searchbar.prototype, "ionFocus", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_d = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _d || Object)], Searchbar.prototype, "ionCancel", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_e = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _e || Object)], Searchbar.prototype, "ionClear", void 0);
            __decorate([HostBinding('class.searchbar-has-focus'), __metadata('design:type', Boolean)], Searchbar.prototype, "_sbHasFocus", void 0);
            __decorate([ViewChild('searchbarInput'), __metadata('design:type', typeof (_f = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _f || Object), __metadata('design:paramtypes', [typeof (_g = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _g || Object])], Searchbar.prototype, "searchbarInput", null);
            __decorate([ViewChild('searchbarIcon'), __metadata('design:type', typeof (_h = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _h || Object)], Searchbar.prototype, "_searchbarIcon", void 0);
            __decorate([ViewChild('cancelButton', { read: ElementRef }), __metadata('design:type', typeof (_j = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _j || Object)], Searchbar.prototype, "_cancelButton", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Searchbar.prototype, "value", null);
            _export("Searchbar", Searchbar = __decorate([Component({
                selector: 'ion-searchbar',
                host: {
                    '[class.searchbar-has-value]': '_value',
                    '[class.searchbar-active]': '_isActive',
                    '[class.searchbar-show-cancel]': 'showCancelButton',
                    '[class.searchbar-left-aligned]': 'shouldAlignLeft()'
                },
                template: '<div class="searchbar-input-container">' + '<button (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" clear dark class="searchbar-md-cancel">' + '<ion-icon name="arrow-back"></ion-icon>' + '</button>' + '<div #searchbarIcon class="searchbar-search-icon"></div>' + '<input #searchbarInput [(ngModel)]="_value" [attr.placeholder]="placeholder" (input)="inputChanged($event)" (blur)="inputBlurred($event)" (focus)="inputFocused($event)" class="searchbar-input">' + '<button clear class="searchbar-clear-icon" (click)="clearInput($event)" (mousedown)="clearInput($event)"></button>' + '</div>' + '<button #cancelButton [tabindex]="_isActive ? 1 : -1" clear (click)="cancelSearchbar($event)" (mousedown)="cancelSearchbar($event)" class="searchbar-ios-cancel">{{cancelButtonText}}</button>',
                encapsulation: ViewEncapsulation.None
            }), __param(2, Optional()), __metadata('design:paramtypes', [typeof (_k = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _k || Object, typeof (_l = typeof Config !== 'undefined' && Config) === 'function' && _l || Object, typeof (_m = typeof NgControl !== 'undefined' && NgControl) === 'function' && _m || Object])], Searchbar));
        }
    };
});
"use strict";

System.register("ionic-angular/components/segment/segment", ["@angular/core", "@angular/common", "../../util/util"], function (_export, _context) {
    "use strict";

    var Component, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Input, Output, Optional, QueryList, Renderer, ViewEncapsulation, NgControl, isPresent, isTrueProperty, _createClass, _typeof, __decorate, __metadata, __param, SegmentButton, Segment, _a, _b, _c, _d, _e, _f;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ContentChildren = _angularCore.ContentChildren;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            HostListener = _angularCore.HostListener;
            Input = _angularCore.Input;
            Output = _angularCore.Output;
            Optional = _angularCore.Optional;
            QueryList = _angularCore.QueryList;
            Renderer = _angularCore.Renderer;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NgControl = _angularCommon.NgControl;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
            isTrueProperty = _utilUtil.isTrueProperty;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("SegmentButton", SegmentButton = function () {
                function SegmentButton(_renderer, _elementRef) {
                    _classCallCheck(this, SegmentButton);

                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._disabled = false;
                    /**
                     * @output {SegmentButton} expression to evaluate when a segment button has been clicked
                     */
                    this.ionSelect = new EventEmitter();
                }
                /**
                 * @private
                 */


                _createClass(SegmentButton, [{
                    key: "setCssClass",
                    value: function setCssClass(cssClass, shouldAdd) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
                    }
                }, {
                    key: "onClick",
                    value: function onClick() {
                        console.debug('SegmentButton, select', this.value);
                        this.ionSelect.emit(this);
                    }
                }, {
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        if (!isPresent(this.value)) {
                            console.warn('<ion-segment-button> requires a "value" attribute');
                        }
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this.setCssClass('segment-button-disabled', this._disabled);
                    }
                }, {
                    key: "isActive",
                    set: function set(isActive) {
                        this._renderer.setElementClass(this._elementRef.nativeElement, 'segment-activated', isActive);
                        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-pressed', isActive);
                    }
                }]);

                return SegmentButton;
            }());

            _export("SegmentButton", SegmentButton);

            __decorate([Input(), __metadata('design:type', String)], SegmentButton.prototype, "value", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], SegmentButton.prototype, "ionSelect", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], SegmentButton.prototype, "disabled", null);
            __decorate([HostListener('click'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], SegmentButton.prototype, "onClick", null);
            _export("SegmentButton", SegmentButton = __decorate([Component({
                selector: 'ion-segment-button',
                template: '<ng-content></ng-content>' + '<ion-button-effect></ion-button-effect>',
                host: {
                    'tappable': '',
                    'class': 'segment-button',
                    'role': 'button'
                },
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_b = typeof Renderer !== 'undefined' && Renderer) === 'function' && _b || Object, typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object])], SegmentButton));
            /**
             * @name Segment
             * @description
             * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.
             * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.
             * You could use Angular 2's `ngModel` or `FormBuilder` API. For an overview on how `FormBuilder` works, checkout [Angular 2 Forms](http://learnangular2.com/forms/), or [Angular FormBuilder](https://angular.io/docs/ts/latest/api/common/FormBuilder-class.html)
             *
             *
             * @usage
             * ```html
             * <ion-segment [(ngModel)]="relationship" (ionChange)="onSegmentChanged($event)" danger>
             *   <ion-segment-button value="friends">
             *     Friends
             *   </ion-segment-button>
             *   <ion-segment-button value="enemies">
             *     Enemies
             *   </ion-segment-button>
             * </ion-segment>
             *```
             *
             * Or with `FormBuilder`
             *
             *```html
             * <form [ngFormModel]="myForm">
             *   <ion-segment ngControl="mapStyle" danger>
             *     <ion-segment-button value="standard">
             *       Standard
             *     </ion-segment-button>
             *     <ion-segment-button value="hybrid">
             *       Hybrid
             *     </ion-segment-button>
             *     <ion-segment-button value="sat">
             *       Satellite
             *     </ion-segment-button>
             *   </ion-segment>
             * </form>
             * ```
             *
             *
             * @demo /docs/v2/demos/segment/
             * @see {@link /docs/v2/components#segment Segment Component Docs}
             * @see [Angular 2 Forms](http://learnangular2.com/forms/)
             */

            _export("Segment", Segment = function () {
                function Segment(ngControl) {
                    _classCallCheck(this, Segment);

                    this._disabled = false;
                    /**
                     * @output {Any}  expression to evaluate when a segment button has been changed
                     */
                    this.ionChange = new EventEmitter();
                    /**
                     * @private
                     */
                    this.onChange = function (_) {};
                    /**
                     * @private
                     */
                    this.onTouched = function (_) {};
                    if (ngControl) {
                        ngControl.valueAccessor = this;
                    }
                }
                /**
                 * @private
                 */


                _createClass(Segment, [{
                    key: "writeValue",
                    value: function writeValue(value) {
                        this.value = isPresent(value) ? value : '';
                        if (this._buttons) {
                            var buttons = this._buttons.toArray();
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;

                            try {
                                for (var _iterator = buttons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var button = _step.value;

                                    button.isActive = button.value === this.value;
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return) {
                                        _iterator.return();
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        }
                    }
                }, {
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        var _this = this;

                        var buttons = this._buttons.toArray();
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = buttons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var button = _step2.value;

                                button.ionSelect.subscribe(function (selectedButton) {
                                    _this.writeValue(selectedButton.value);
                                    _this.onChange(selectedButton.value);
                                    _this.ionChange.emit(selectedButton);
                                });
                                if (isPresent(this.value)) {
                                    button.isActive = button.value === this.value;
                                }
                                if (isTrueProperty(this._disabled)) {
                                    button.setCssClass('segment-button-disabled', this._disabled);
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        this.onChange = fn;
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        if (this._buttons) {
                            var buttons = this._buttons.toArray();
                            var _iteratorNormalCompletion3 = true;
                            var _didIteratorError3 = false;
                            var _iteratorError3 = undefined;

                            try {
                                for (var _iterator3 = buttons[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                    var button = _step3.value;

                                    button.setCssClass('segment-button-disabled', this._disabled);
                                }
                            } catch (err) {
                                _didIteratorError3 = true;
                                _iteratorError3 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                        _iterator3.return();
                                    }
                                } finally {
                                    if (_didIteratorError3) {
                                        throw _iteratorError3;
                                    }
                                }
                            }
                        }
                    }
                }]);

                return Segment;
            }());

            _export("Segment", Segment);

            __decorate([Output(), __metadata('design:type', typeof (_d = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _d || Object)], Segment.prototype, "ionChange", void 0);
            __decorate([ContentChildren(SegmentButton), __metadata('design:type', typeof (_e = typeof QueryList !== 'undefined' && QueryList) === 'function' && _e || Object)], Segment.prototype, "_buttons", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], Segment.prototype, "disabled", null);
            _export("Segment", Segment = __decorate([Directive({
                selector: 'ion-segment'
            }), __param(0, Optional()), __metadata('design:paramtypes', [typeof (_f = typeof NgControl !== 'undefined' && NgControl) === 'function' && _f || Object])], Segment));
        }
    };
});
"use strict";

System.register("ionic-angular/components/select/select", ["@angular/core", "@angular/common", "../action-sheet/action-sheet", "../alert/alert", "../../util/form", "../../util/util", "../item/item", "../nav/nav-controller", "../option/option"], function (_export, _context) {
    "use strict";

    var Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, HostListener, Optional, Output, Provider, Renderer, QueryList, ViewEncapsulation, NG_VALUE_ACCESSOR, ActionSheet, Alert, Form, isBlank, isCheckedProperty, isTrueProperty, merge, Item, NavController, Option, _createClass, _typeof, __decorate, __metadata, __param, SELECT_VALUE_ACCESSOR, Select, _a, _b, _c, _d, _e, _f, _g, _h, _j;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ContentChildren = _angularCore.ContentChildren;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            forwardRef = _angularCore.forwardRef;
            Input = _angularCore.Input;
            HostListener = _angularCore.HostListener;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
            Provider = _angularCore.Provider;
            Renderer = _angularCore.Renderer;
            QueryList = _angularCore.QueryList;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NG_VALUE_ACCESSOR = _angularCommon.NG_VALUE_ACCESSOR;
        }, function (_actionSheetActionSheet) {
            ActionSheet = _actionSheetActionSheet.ActionSheet;
        }, function (_alertAlert) {
            Alert = _alertAlert.Alert;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_utilUtil) {
            isBlank = _utilUtil.isBlank;
            isCheckedProperty = _utilUtil.isCheckedProperty;
            isTrueProperty = _utilUtil.isTrueProperty;
            merge = _utilUtil.merge;
        }, function (_itemItem) {
            Item = _itemItem.Item;
        }, function (_navNavController) {
            NavController = _navNavController.NavController;
        }, function (_optionOption) {
            Option = _optionOption.Option;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            SELECT_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, { useExisting: forwardRef(function () {
                    return Select;
                }), multi: true });

            _export("Select", Select = function () {
                function Select(_form, _elementRef, _renderer, _item, _nav) {
                    _classCallCheck(this, Select);

                    this._form = _form;
                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this._item = _item;
                    this._nav = _nav;
                    this._disabled = false;
                    this._multi = false;
                    this._values = [];
                    this._texts = [];
                    this._text = '';
                    this._isOpen = false;
                    /**
                     * @input {string} The text to display on the cancel button. Default: `Cancel`.
                     */
                    this.cancelText = 'Cancel';
                    /**
                     * @input {string} The text to display on the ok button. Default: `OK`.
                     */
                    this.okText = 'OK';
                    /**
                     * @input {any} Any addition options that the alert interface can take.
                     * See the [Alert API docs](../../alert/Alert) for the create options.
                     */
                    this.alertOptions = {};
                    /**
                     * @private
                     */
                    this.checked = false;
                    /**
                     * @input {string} The interface the select should use: `action-sheet` or `alert`. Default: `alert`.
                     */
                    this.interface = '';
                    /**
                     * @output {any} Any expression you want to evaluate when the selection has changed.
                     */
                    this.ionChange = new EventEmitter();
                    /**
                     * @output {any} Any expression you want to evaluate when the selection was cancelled.
                     */
                    this.ionCancel = new EventEmitter();
                    this._form.register(this);
                    if (_item) {
                        this.id = 'sel-' + _item.registerInput('select');
                        this._labelId = 'lbl-' + _item.id;
                        this._item.setCssClass('item-select', true);
                    }
                    if (!_nav) {
                        console.error('parent <ion-nav> required for <ion-select>');
                    }
                }

                _createClass(Select, [{
                    key: "_click",
                    value: function _click(ev) {
                        if (ev.detail === 0) {
                            // do not continue if the click event came from a form submit
                            return;
                        }
                        ev.preventDefault();
                        ev.stopPropagation();
                        this._open();
                    }
                }, {
                    key: "_keyup",
                    value: function _keyup() {
                        if (!this._isOpen) {
                            this._open();
                        }
                    }
                }, {
                    key: "_open",
                    value: function _open() {
                        var _this = this;

                        if (this._disabled) {
                            return;
                        }
                        console.debug('select, open alert');
                        // the user may have assigned some options specifically for the alert
                        var alertOptions = merge({}, this.alertOptions);
                        // make sure their buttons array is removed from the options
                        // and we create a new array for the alert's two buttons
                        alertOptions.buttons = [{
                            text: this.cancelText,
                            role: 'cancel',
                            handler: function handler() {
                                _this.ionCancel.emit(null);
                            }
                        }];
                        // if the alertOptions didn't provide an title then use the label's text
                        if (!alertOptions.title && this._item) {
                            alertOptions.title = this._item.getLabelText();
                        }
                        var options = this._options.toArray();
                        if (this.interface === 'action-sheet' && options.length > 6) {
                            console.warn('Interface cannot be "action-sheet" with more than 6 options. Using the "alert" interface.');
                            this.interface = 'alert';
                        }
                        if (this.interface === 'action-sheet' && this._multi) {
                            console.warn('Interface cannot be "action-sheet" with a multi-value select. Using the "alert" interface.');
                            this.interface = 'alert';
                        }
                        var overlay = void 0;
                        if (this.interface === 'action-sheet') {
                            alertOptions.buttons = alertOptions.buttons.concat(options.map(function (input) {
                                return {
                                    role: input.checked ? 'selected' : '',
                                    text: input.text,
                                    handler: function handler() {
                                        _this.onChange(input.value);
                                        _this.ionChange.emit(input.value);
                                    }
                                };
                            }));
                            alertOptions.cssClass = 'select-action-sheet';
                            overlay = ActionSheet.create(alertOptions);
                        } else {
                            // default to use the alert interface
                            this.interface = 'alert';
                            // user cannot provide inputs from alertOptions
                            // alert inputs must be created by ionic from ion-options
                            alertOptions.inputs = this._options.map(function (input) {
                                return {
                                    type: _this._multi ? 'checkbox' : 'radio',
                                    label: input.text,
                                    value: input.value,
                                    checked: input.checked
                                };
                            });
                            // create the alert instance from our built up alertOptions
                            overlay = Alert.create(alertOptions);
                            if (this._multi) {
                                // use checkboxes
                                overlay.setCssClass('select-alert multiple-select-alert');
                            } else {
                                // use radio buttons
                                overlay.setCssClass('select-alert single-select-alert');
                            }
                            overlay.addButton({
                                text: this.okText,
                                handler: function handler(selectedValues) {
                                    _this.onChange(selectedValues);
                                    _this.ionChange.emit(selectedValues);
                                }
                            });
                        }
                        this._nav.present(overlay, alertOptions);
                        this._isOpen = true;
                        overlay.onDismiss(function () {
                            _this._isOpen = false;
                        });
                    }
                }, {
                    key: "_updOpts",
                    value: function _updOpts() {
                        var _this2 = this;

                        this._texts = [];
                        if (this._options) {
                            this._options.forEach(function (option) {
                                // check this option if the option's value is in the values array
                                option.checked = _this2._values.some(function (selectValue) {
                                    return isCheckedProperty(selectValue, option.value);
                                });
                                if (option.checked) {
                                    _this2._texts.push(option.text);
                                }
                            });
                        }
                        this._text = this._texts.join(', ');
                    }
                }, {
                    key: "writeValue",
                    value: function writeValue(val) {
                        console.debug('select, writeValue', val);
                        this._values = Array.isArray(val) ? val : isBlank(val) ? [] : [val];
                        this._updOpts();
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        this._updOpts();
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        var _this3 = this;

                        this._fn = fn;
                        this.onChange = function (val) {
                            console.debug('select, onChange', val);
                            fn(val);
                            _this3._values = Array.isArray(val) ? val : isBlank(val) ? [] : [val];
                            _this3._updOpts();
                            _this3.onTouched();
                        };
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "onChange",
                    value: function onChange(val) {
                        // onChange used when there is not an ngControl
                        console.debug('select, onChange w/out ngControl', val);
                        this._values = Array.isArray(val) ? val : isBlank(val) ? [] : [val];
                        this._updOpts();
                        this.onTouched();
                    }
                }, {
                    key: "onTouched",
                    value: function onTouched() {}
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._form.deregister(this);
                    }
                }, {
                    key: "multiple",
                    get: function get() {
                        return this._multi;
                    },
                    set: function set(val) {
                        this._multi = isTrueProperty(val);
                    }
                }, {
                    key: "text",
                    get: function get() {
                        return this._multi ? this._texts : this._texts.join();
                    }
                }, {
                    key: "options",
                    set: function set(val) {
                        this._options = val;
                        if (!this._values.length) {
                            // there are no values set at this point
                            // so check to see who should be checked
                            this._values = val.filter(function (o) {
                                return o.checked;
                            }).map(function (o) {
                                return o.value;
                            });
                        }
                        this._updOpts();
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this._item && this._item.setCssClass('item-select-disabled', this._disabled);
                    }
                }]);

                return Select;
            }());

            _export("Select", Select);

            __decorate([Input(), __metadata('design:type', String)], Select.prototype, "cancelText", void 0);
            __decorate([Input(), __metadata('design:type', String)], Select.prototype, "okText", void 0);
            __decorate([Input(), __metadata('design:type', String)], Select.prototype, "placeholder", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Select.prototype, "alertOptions", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Select.prototype, "checked", void 0);
            __decorate([Input(), __metadata('design:type', String)], Select.prototype, "interface", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Select.prototype, "ionChange", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], Select.prototype, "ionCancel", void 0);
            __decorate([HostListener('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Select.prototype, "_click", null);
            __decorate([HostListener('keyup.space'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], Select.prototype, "_keyup", null);
            __decorate([Input(), __metadata('design:type', Object)], Select.prototype, "multiple", null);
            __decorate([ContentChildren(Option), __metadata('design:type', typeof (_c = typeof QueryList !== 'undefined' && QueryList) === 'function' && _c || Object), __metadata('design:paramtypes', [typeof (_d = typeof QueryList !== 'undefined' && QueryList) === 'function' && _d || Object])], Select.prototype, "options", null);
            __decorate([Input(), __metadata('design:type', Object)], Select.prototype, "disabled", null);
            _export("Select", Select = __decorate([Component({
                selector: 'ion-select',
                template: '<div *ngIf="!_text" class="select-placeholder select-text">{{placeholder}}</div>' + '<div *ngIf="_text" class="select-text">{{_text}}</div>' + '<div class="select-icon">' + '<div class="select-icon-inner"></div>' + '</div>' + '<button aria-haspopup="true" ' + '[id]="id" ' + 'category="item-cover" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
                host: {
                    '[class.select-disabled]': '_disabled'
                },
                providers: [SELECT_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            }), __param(3, Optional()), __param(4, Optional()), __metadata('design:paramtypes', [typeof (_e = typeof Form !== 'undefined' && Form) === 'function' && _e || Object, typeof (_f = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _f || Object, typeof (_g = typeof Renderer !== 'undefined' && Renderer) === 'function' && _g || Object, typeof (_h = typeof Item !== 'undefined' && Item) === 'function' && _h || Object, typeof (_j = typeof NavController !== 'undefined' && NavController) === 'function' && _j || Object])], Select));
        }
    };
});
"use strict";

System.register("ionic-angular/components/show-hide-when/show-hide-when", ["@angular/core", "../../platform/platform"], function (_export, _context) {
    "use strict";

    var Attribute, Directive, NgZone, Platform, _createClass, _typeof, __decorate, __metadata, __param, DisplayWhen, ShowWhen, HideWhen, _a, _b, _c, _d;

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Attribute = _angularCore.Attribute;
            Directive = _angularCore.Directive;
            NgZone = _angularCore.NgZone;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("DisplayWhen", DisplayWhen = function () {
                function DisplayWhen(conditions, platform, ngZone) {
                    var _this = this;

                    _classCallCheck(this, DisplayWhen);

                    this.isMatch = false;
                    this.platform = platform;
                    if (!conditions) return;
                    this.conditions = conditions.split(',');
                    // check if its one of the matching platforms first
                    // a platform does not change during the life of an app
                    for (var i = 0; i < this.conditions.length; i++) {
                        if (this.conditions[i] && platform.is(this.conditions[i])) {
                            this.isMatch = true;
                            return;
                        }
                    }
                    if (this.orientation()) {
                        // add window resize listener
                        platform.onResize(function () {
                            ngZone.run(function () {
                                _this.orientation();
                            });
                        });
                        return;
                    }
                }

                _createClass(DisplayWhen, [{
                    key: "orientation",
                    value: function orientation() {
                        for (var i = 0; i < this.conditions.length; i++) {
                            if (this.conditions[i] === 'portrait') {
                                this.isMatch = this.platform.isPortrait();
                                return true;
                            }
                            if (this.conditions[i] === 'landscape') {
                                this.isMatch = this.platform.isLandscape();
                                return true;
                            }
                        }
                    }
                }]);

                return DisplayWhen;
            }());

            _export("DisplayWhen", DisplayWhen);

            _export("ShowWhen", ShowWhen = function (_DisplayWhen) {
                _inherits(ShowWhen, _DisplayWhen);

                function ShowWhen(showWhen, platform, ngZone) {
                    _classCallCheck(this, ShowWhen);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(ShowWhen).call(this, showWhen, platform, ngZone));
                }

                return ShowWhen;
            }(DisplayWhen));

            _export("ShowWhen", ShowWhen);

            _export("ShowWhen", ShowWhen = __decorate([Directive({
                selector: '[showWhen]',
                host: {
                    '[class.hidden-show-when]': '!isMatch'
                }
            }), __param(0, Attribute('showWhen')), __metadata('design:paramtypes', [String, typeof (_a = typeof Platform !== 'undefined' && Platform) === 'function' && _a || Object, typeof (_b = typeof NgZone !== 'undefined' && NgZone) === 'function' && _b || Object])], ShowWhen));
            /**
             * @name HideWhen
             * @description
             * The `hideWhen` attribute takes a string that represents a plaform or screen orientation.
             * The element the attribute is added to will only be hidden when that platform or screen orientation is active.
             *
             * Complements the [showWhen attribute](../ShowWhen). If the `hideWhen` attribute is used on an
             * element that also has the `showWhen` attribute, the element will not show if `hideWhen` evaluates
             * to `true` or `showWhen` evaluates to `false`. If the `hidden` attribute is also added, the element
             * will not show if `hidden` evaluates to `true`.
             *
             * View the [Platform API docs](../../../platform/Platform) for more information on the different
             * platforms you can use.
             *
             * @usage
             * ```html
             * <div hideWhen="android">
             *  I am hidden on Android!
             * </div>
             *
             * <div hideWhen="ios">
             *  I am hidden on iOS!
             * </div>
             *
             * <div hideWhen="android,ios">
             *  I am hidden on Android and iOS!
             * </div>
             *
             * <div hideWhen="portrait">
             *  I am hidden on Portrait!
             * </div>
             *
             * <div hideWhen="landscape">
             *  I am hidden on Landscape!
             * </div>
             * ```
             *
             * @demo /docs/v2/demos/hide-when/
             * @see {@link ../ShowWhen ShowWhen API Docs}
             * @see {@link ../../../platform/Platform Platform API Docs}
            */

            _export("HideWhen", HideWhen = function (_DisplayWhen2) {
                _inherits(HideWhen, _DisplayWhen2);

                function HideWhen(hideWhen, platform, ngZone) {
                    _classCallCheck(this, HideWhen);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(HideWhen).call(this, hideWhen, platform, ngZone));
                }

                return HideWhen;
            }(DisplayWhen));

            _export("HideWhen", HideWhen);

            _export("HideWhen", HideWhen = __decorate([Directive({
                selector: '[hideWhen]',
                host: {
                    '[class.hidden-hide-when]': 'isMatch'
                }
            }), __param(0, Attribute('hideWhen')), __metadata('design:paramtypes', [String, typeof (_c = typeof Platform !== 'undefined' && Platform) === 'function' && _c || Object, typeof (_d = typeof NgZone !== 'undefined' && NgZone) === 'function' && _d || Object])], HideWhen));
        }
    };
});
"use strict";

System.register("ionic-angular/components/spinner/spinner", ["@angular/core", "../../config/config"], function (_export, _context) {
    "use strict";

    var ChangeDetectionStrategy, Component, Input, ViewEncapsulation, Config, _createClass, _typeof, __decorate, __metadata, Spinner, SPINNERS, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            Component = _angularCore.Component;
            Input = _angularCore.Input;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Spinner", Spinner = function () {
                function Spinner(_config) {
                    _classCallCheck(this, Spinner);

                    this._config = _config;
                    this._dur = null;
                    /**
                     * @input {string} If the animation is paused or not. Defaults to `false`.
                     */
                    this.paused = false;
                }
                /**
                 * @input {string} SVG spinner name.
                 */


                _createClass(Spinner, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        this._init = true;
                        this.load();
                    }
                }, {
                    key: "load",
                    value: function load() {
                        if (this._init) {
                            this._l = [];
                            this._c = [];
                            var name = this._name || this._config.get('spinner', 'ios');
                            var spinner = SPINNERS[name];
                            if (spinner) {
                                this._applied = 'spinner-' + name;
                                if (spinner.lines) {
                                    for (var i = 0, l = spinner.lines; i < l; i++) {
                                        this._l.push(this._loadEle(spinner, i, l));
                                    }
                                } else if (spinner.circles) {
                                    for (var i = 0, l = spinner.circles; i < l; i++) {
                                        this._c.push(this._loadEle(spinner, i, l));
                                    }
                                }
                            }
                        }
                    }
                }, {
                    key: "_loadEle",
                    value: function _loadEle(spinner, index, total) {
                        var duration = this._dur || spinner.dur;
                        var data = spinner.fn(duration, index, total);
                        data.style.animationDuration = duration + 'ms';
                        return data;
                    }
                }, {
                    key: "name",
                    get: function get() {
                        return this._name;
                    },
                    set: function set(val) {
                        this._name = val;
                        this.load();
                    }
                }, {
                    key: "duration",
                    get: function get() {
                        return this._dur;
                    },
                    set: function set(val) {
                        this._dur = val;
                        this.load();
                    }
                }]);

                return Spinner;
            }());

            _export("Spinner", Spinner);

            __decorate([Input(), __metadata('design:type', String)], Spinner.prototype, "name", null);
            __decorate([Input(), __metadata('design:type', Number)], Spinner.prototype, "duration", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Spinner.prototype, "paused", void 0);
            _export("Spinner", Spinner = __decorate([Component({
                selector: 'ion-spinner',
                template: '<svg viewBox="0 0 64 64" *ngFor="let i of _c" [ngStyle]="i.style">' + '<circle [attr.r]="i.r" transform="translate(32,32)"></circle>' + '</svg>' + '<svg viewBox="0 0 64 64" *ngFor="let i of _l" [ngStyle]="i.style">' + '<line [attr.y1]="i.y1" [attr.y2]="i.y2" transform="translate(32,32)"></line>' + '</svg>',
                host: {
                    '[class]': '_applied',
                    '[class.spinner-paused]': 'paused'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object])], Spinner));
            SPINNERS = {
                ios: {
                    dur: 1000,
                    lines: 12,
                    fn: function fn(dur, index, total) {
                        return {
                            y1: 17,
                            y2: 29,
                            style: {
                                transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
                                animationDelay: -(dur - dur / total * index) + 'ms'
                            }
                        };
                    }
                },
                'ios-small': {
                    dur: 1000,
                    lines: 12,
                    fn: function fn(dur, index, total) {
                        return {
                            y1: 12,
                            y2: 20,
                            style: {
                                transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
                                animationDelay: -(dur - dur / total * index) + 'ms'
                            }
                        };
                    }
                },
                bubbles: {
                    dur: 1000,
                    circles: 9,
                    fn: function fn(dur, index, total) {
                        return {
                            r: 5,
                            style: {
                                top: 9 * Math.sin(2 * Math.PI * index / total),
                                left: 9 * Math.cos(2 * Math.PI * index / total),
                                animationDelay: -(dur - dur / total * index) + 'ms'
                            }
                        };
                    }
                },
                circles: {
                    dur: 1000,
                    circles: 8,
                    fn: function fn(dur, index, total) {
                        return {
                            r: 5,
                            style: {
                                top: 9 * Math.sin(2 * Math.PI * index / total),
                                left: 9 * Math.cos(2 * Math.PI * index / total),
                                animationDelay: -(dur - dur / total * index) + 'ms'
                            }
                        };
                    }
                },
                crescent: {
                    dur: 750,
                    circles: 1,
                    fn: function fn(dur) {
                        return {
                            r: 26,
                            style: {}
                        };
                    }
                },
                dots: {
                    dur: 750,
                    circles: 3,
                    fn: function fn(dur, index, total) {
                        return {
                            r: 6,
                            style: {
                                left: 9 - 9 * index,
                                animationDelay: -(110 * index) + 'ms'
                            }
                        };
                    }
                }
            };
        }
    };
});
"use strict";

System.register("ionic-angular/components/slides/slides", ["@angular/core", "../../animations/animation", "../../gestures/gesture", "../../util/dom", "../../util/util", "../../util", "../ion", "./swiper-widget"], function (_export, _context) {
    "use strict";

    var ChangeDetectionStrategy, Component, Directive, ElementRef, EventEmitter, Input, Host, Output, Renderer, ViewEncapsulation, Animation, Gesture, CSS, debounce, defaults, isTrueProperty, isPresent, dom, Ion, Swiper, _createClass, _typeof, __decorate, __metadata, __param, Slides, Slide, SlideLazy, slidesId, _a, _b, _c, _d, _e, _f;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            Component = _angularCore.Component;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            Input = _angularCore.Input;
            Host = _angularCore.Host;
            Output = _angularCore.Output;
            Renderer = _angularCore.Renderer;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_gesturesGesture) {
            Gesture = _gesturesGesture.Gesture;
        }, function (_utilDom) {
            CSS = _utilDom.CSS;
        }, function (_utilUtil) {
            debounce = _utilUtil.debounce;
            defaults = _utilUtil.defaults;
            isTrueProperty = _utilUtil.isTrueProperty;
            isPresent = _utilUtil.isPresent;
        }, function (_util) {
            dom = _util.dom;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_swiperWidget) {
            Swiper = _swiperWidget.Swiper;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Slides", Slides = function (_Ion) {
                _inherits(Slides, _Ion);

                function Slides(elementRef, renderer) {
                    _classCallCheck(this, Slides);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Slides).call(this, elementRef));

                    /**
                     * @output {any} Expression to evaluate when a slide change starts.
                     */
                    _this.ionWillChange = new EventEmitter();
                    /**
                     * @output {any} Expression to evaluate when a slide change ends.
                     */
                    _this.ionDidChange = new EventEmitter();
                    /**
                     * @output {any} Expression to evaluate when a slide moves.
                     */
                    _this.ionDrag = new EventEmitter();
                    _this.rapidUpdate = debounce(function () {
                        _this.update();
                    }, 10);
                    _this.id = ++slidesId;
                    _this.slideId = 'slides-' + _this.id;
                    renderer.setElementClass(elementRef.nativeElement, _this.slideId, true);
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(Slides, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        var _this2 = this;

                        if (!this.options) {
                            this.options = {};
                        }
                        if (isPresent(this.pager)) {
                            // beta.5 2016-04-18 deprecated warning
                            // Pager should be passed as an option
                            console.warn('The "pager" attribute has been deprecated. Please pass it in options.');
                            // Remove this with the deprecation warning
                            this.showPager = isTrueProperty(this.pager);
                        }
                        if (isPresent(this.zoom)) {
                            // beta.5 2016-04-18 deprecated warning
                            // Zoom should be passed as an option
                            console.warn('The "zoom" attribute has been deprecated. Please pass it in options.');
                        }
                        if (isPresent(this.options.pager)) {
                            this.showPager = isTrueProperty(this.options.pager);
                        }
                        var paginationId = '.' + this.slideId + ' .swiper-pagination';
                        var options = defaults({
                            pagination: paginationId
                        }, this.options);
                        options.onTap = function (swiper, e) {
                            _this2.onTap(swiper, e);
                            return _this2.options.onTap && _this2.options.onTap(swiper, e);
                        };
                        options.onClick = function (swiper, e) {
                            _this2.onClick(swiper, e);
                            return _this2.options.onClick && _this2.options.onClick(swiper, e);
                        };
                        options.onDoubleTap = function (swiper, e) {
                            _this2.onDoubleTap(swiper, e);
                            return _this2.options.onDoubleTap && _this2.options.onDoubleTap(swiper, e);
                        };
                        options.onTransitionStart = function (swiper, e) {
                            _this2.onTransitionStart(swiper, e);
                            return _this2.options.onTransitionStart && _this2.options.onTransitionStart(swiper, e);
                        };
                        options.onTransitionEnd = function (swiper, e) {
                            _this2.onTransitionEnd(swiper, e);
                            return _this2.options.onTransitionEnd && _this2.options.onTransitionEnd(swiper, e);
                        };
                        options.onSlideChangeStart = function (swiper) {
                            _this2.ionWillChange.emit(swiper);
                            return _this2.options.onSlideChangeStart && _this2.options.onSlideChangeStart(swiper);
                        };
                        options.onSlideChangeEnd = function (swiper) {
                            _this2.ionDidChange.emit(swiper);
                            return _this2.options.onSlideChangeEnd && _this2.options.onSlideChangeEnd(swiper);
                        };
                        options.onLazyImageLoad = function (swiper, slide, img) {
                            return _this2.options.onLazyImageLoad && _this2.options.onLazyImageLoad(swiper, slide, img);
                        };
                        options.onLazyImageReady = function (swiper, slide, img) {
                            return _this2.options.onLazyImageReady && _this2.options.onLazyImageReady(swiper, slide, img);
                        };
                        options.onSliderMove = function (swiper, e) {
                            _this2.ionDrag.emit(swiper);
                            return _this2.options.onSliderMove && _this2.options.onSliderMove(swiper, e);
                        };
                        setTimeout(function () {
                            var swiper = new Swiper(_this2.getNativeElement().children[0], options);
                            _this2.slider = swiper;
                        });
                        /*
                        * TODO: Finish this
                        if (isTrueProperty(this.zoom)) {
                          this.enableZoom = true;
                          setTimeout(() => {
                            this.initZoom();
                          })
                        }
                        */
                    }
                }, {
                    key: "onTap",
                    value: function onTap(swiper, e) {}
                }, {
                    key: "onClick",
                    value: function onClick(swiper, e) {}
                }, {
                    key: "onDoubleTap",
                    value: function onDoubleTap(swiper, e) {
                        this.toggleZoom(swiper, e);
                    }
                }, {
                    key: "onLazyImageLoad",
                    value: function onLazyImageLoad(swiper, slide, img) {}
                }, {
                    key: "onLazyImageReady",
                    value: function onLazyImageReady(swiper, slide, img) {}
                }, {
                    key: "initZoom",
                    value: function initZoom() {
                        var _this3 = this;

                        this.zoomDuration = this.zoomDuration || 230;
                        this.maxScale = this.zoomMax || 3;
                        this.zoomElement = this.getNativeElement().children[0].children[0];
                        this.zoomElement && this.zoomElement.classList.add('ion-scroll-zoom');
                        this.zoomGesture = new Gesture(this.zoomElement);
                        this.zoomGesture.listen();
                        this.scale = 1;
                        this.zoomLastPosX = 0;
                        this.zoomLastPosY = 0;
                        var lastScale = void 0,
                            startX = void 0,
                            startY = void 0,
                            posX = 0,
                            posY = 0,
                            zoomRect = void 0;
                        this.viewportWidth = this.getNativeElement().offsetWidth;
                        this.viewportHeight = this.getNativeElement().offsetHeight;
                        this.zoomElement.addEventListener('touchstart', function (e) {
                            _this3.onTouchStart(e);
                        });
                        this.zoomElement.addEventListener('touchmove', function (e) {
                            _this3.onTouchMove(e);
                        });
                        this.zoomElement.addEventListener('touchend', function (e) {
                            _this3.onTouchEnd(e);
                        });
                        this.zoomGesture.on('pinchstart', function (e) {
                            lastScale = _this3.scale;
                            console.debug('Last scale', e.scale);
                        });
                        this.zoomGesture.on('pinch', function (e) {
                            _this3.scale = Math.max(1, Math.min(lastScale * e.scale, 10));
                            console.debug('Scaling', _this3.scale);
                            _this3.zoomElement.style[CSS.transform] = 'scale(' + _this3.scale + ')';
                            zoomRect = _this3.zoomElement.getBoundingClientRect();
                        });
                        this.zoomGesture.on('pinchend', function () {
                            // last_scale = Math.max(1, Math.min(last_scale * e.scale, 10));
                            if (_this3.scale > _this3.maxScale) {
                                var za = new Animation(_this3.zoomElement).duration(_this3.zoomDuration).easing('linear').from('scale', _this3.scale).to('scale', _this3.maxScale);
                                za.play();
                                _this3.scale = _this3.maxScale;
                            }
                        });
                    }
                }, {
                    key: "resetZoom",
                    value: function resetZoom() {
                        if (this.zoomElement) {
                            this.zoomElement.parentElement.style[CSS.transform] = '';
                            this.zoomElement.style[CSS.transform] = 'scale(1)';
                        }
                        this.scale = 1;
                        this.zoomLastPosX = 0;
                        this.zoomLastPosY = 0;
                    }
                }, {
                    key: "toggleZoom",
                    value: function toggleZoom(swiper, e) {
                        console.debug('Try toggle zoom');
                        if (!this.enableZoom) {
                            return;
                        }
                        console.debug('Toggling zoom', e);
                        /*
                        let x = e.pointers[0].clientX;
                        let y = e.pointers[0].clientY;
                             let mx = this.viewportWidth / 2;
                        let my = this.viewportHeight / 2;
                             let tx, ty;
                             if (x > mx) {
                          // Greater than half
                          tx = -x;
                        } else {
                          // Less than or equal to half
                          tx = (this.viewportWidth - x);
                        }
                        if (y > my) {
                          ty = -y;
                        } else {
                          ty = y-my;
                        }
                             console.debug(y);
                        */
                        var zi = new Animation(this.touch.target.children[0]).duration(this.zoomDuration).easing('linear');
                        var zw = new Animation(this.touch.target.children[0]).duration(this.zoomDuration).easing('linear');
                        var za = new Animation();
                        za.add(zi);
                        if (this.scale > 1) {
                            // zoom out
                            // zw.fromTo('translateX', posX + 'px', '0px');
                            // zw.fromTo('translateY', posY + 'px', '0px');
                            zi.from('scale', this.scale);
                            zi.to('scale', 1);
                            za.play();
                            // posX = 0;
                            // posY = 0;
                            this.scale = 1;
                        } else {
                            // zoom in
                            // zw.fromTo('translateX', posX + 'px', tx + 'px');
                            // zw.fromTo('translateY', posY + 'px', ty + 'px');
                            zi.from('scale', this.scale);
                            zi.to('scale', this.maxScale);
                            za.play();
                            // posX = tx;
                            // posY = ty;
                            this.scale = this.maxScale;
                        }
                    }
                }, {
                    key: "onTransitionStart",
                    value: function onTransitionStart(swiper, e) {}
                }, {
                    key: "onTransitionEnd",
                    value: function onTransitionEnd(swiper, e) {}
                }, {
                    key: "onTouchStart",
                    value: function onTouchStart(e) {
                        console.debug('Touch start', e);
                        // TODO: Support mice as well
                        var target = dom.closest(e.target, '.slide').children[0].children[0];
                        this.touch = {
                            x: null,
                            y: null,
                            startX: e.touches[0].clientX,
                            startY: e.touches[0].clientY,
                            deltaX: 0,
                            deltaY: 0,
                            lastX: 0,
                            lastY: 0,
                            target: target.parentElement,
                            zoomable: target,
                            zoomableWidth: target.offsetWidth,
                            zoomableHeight: target.offsetHeight
                        };
                        console.debug('Target', this.touch.target);
                        // TODO: android prevent default
                    }
                }, {
                    key: "onTouchMove",
                    value: function onTouchMove(e) {
                        this.touch.deltaX = e.touches[0].clientX - this.touch.startX;
                        this.touch.deltaY = e.touches[0].clientY - this.touch.startY;
                        // TODO: Make sure we need to transform (image is bigger than viewport)
                        var zoomableScaledWidth = this.touch.zoomableWidth * this.scale;
                        var zoomableScaledHeight = this.touch.zoomableHeight * this.scale;
                        var x1 = Math.min(this.viewportWidth / 2 - zoomableScaledWidth / 2, 0);
                        var x2 = -x1;
                        var y1 = Math.min(this.viewportHeight / 2 - zoomableScaledHeight / 2, 0);
                        var y2 = -y1;
                        console.debug('BOUNDS', x1, x2, y1, y2);
                        if (this.scale <= 1) {
                            return;
                        }
                        console.debug('PAN', e);
                        // move image
                        this.touch.x = this.touch.deltaX + this.touch.lastX;
                        this.touch.y = this.touch.deltaY + this.touch.lastY;
                        if (this.touch.x < x1) {
                            console.debug('OUT ON LEFT');
                        }
                        if (this.touch.x > x2) {
                            console.debug('OUT ON RIGHT');
                        }
                        if (this.touch.x > this.viewportWidth) {} else if (-this.touch.x > this.viewportWidth) {} else {
                            console.debug('TRANSFORM', this.touch.x, this.touch.y, this.touch.target);
                            // this.touch.target.style[CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
                            this.touch.target.style[CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
                            e.preventDefault();
                            e.stopPropagation();
                            return false;
                        }
                    }
                }, {
                    key: "onTouchEnd",
                    value: function onTouchEnd(e) {
                        console.debug('PANEND', e);
                        if (this.scale > 1) {
                            if (Math.abs(this.touch.x) > this.viewportWidth) {
                                // TODO what is posX?
                                var posX = posX > 0 ? this.viewportWidth - 1 : -(this.viewportWidth - 1);
                                console.debug('Setting on posx', this.touch.x);
                            }
                            /*
                            if (posY > this.viewportHeight/2) {
                              let z = new Animation(this.zoomElement.parentElement);
                              z.fromTo('translateY', posY + 'px', Math.min(this.viewportHeight/2 + 30, posY));
                              z.play();
                            } else {
                              let z = new Animation(this.zoomElement.parentElement);
                              z.fromTo('translateY', posY + 'px', Math.max(this.viewportHeight/2 - 30, posY));
                              z.play();
                            }
                            */
                            this.touch.lastX = this.touch.x;
                            this.touch.lastY = this.touch.y;
                        }
                    }
                }, {
                    key: "update",
                    value: function update() {
                        var _this4 = this;

                        setTimeout(function () {
                            _this4.slider.update();
                            // Don't allow pager to show with > 10 slides
                            if (_this4.length() > 10) {
                                _this4.showPager = false;
                            }
                        });
                    }
                }, {
                    key: "slideTo",
                    value: function slideTo(index, speed, runCallbacks) {
                        this.slider.slideTo(index, speed, runCallbacks);
                    }
                }, {
                    key: "slideNext",
                    value: function slideNext(speed, runCallbacks) {
                        this.slider.slideNext(runCallbacks, speed);
                    }
                }, {
                    key: "slidePrev",
                    value: function slidePrev(speed, runCallbacks) {
                        this.slider.slidePrev(runCallbacks, speed);
                    }
                }, {
                    key: "getActiveIndex",
                    value: function getActiveIndex() {
                        return this.slider.activeIndex;
                    }
                }, {
                    key: "getPreviousIndex",
                    value: function getPreviousIndex() {
                        return this.slider.previousIndex;
                    }
                }, {
                    key: "length",
                    value: function length() {
                        return this.slider.slides.length;
                    }
                }, {
                    key: "isEnd",
                    value: function isEnd() {
                        return this.slider.isEnd;
                    }
                }, {
                    key: "isBeginning",
                    value: function isBeginning() {
                        return this.slider.isBeginning;
                    }
                }, {
                    key: "getSlider",
                    value: function getSlider() {
                        return this.slider;
                    }
                }]);

                return Slides;
            }(Ion));

            _export("Slides", Slides);

            __decorate([Input(), __metadata('design:type', Object)], Slides.prototype, "options", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Slides.prototype, "pager", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Slides.prototype, "zoom", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Slides.prototype, "zoomDuration", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Slides.prototype, "zoomMax", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Slides.prototype, "ionWillChange", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], Slides.prototype, "ionDidChange", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_c = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _c || Object)], Slides.prototype, "ionDrag", void 0);
            _export("Slides", Slides = __decorate([Component({
                selector: 'ion-slides',
                template: '<div class="swiper-container">' + '<div class="swiper-wrapper">' + '<ng-content></ng-content>' + '</div>' + '<div [class.hide]="!showPager" class="swiper-pagination"></div>' + '</div>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_d = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _d || Object, typeof (_e = typeof Renderer !== 'undefined' && Renderer) === 'function' && _e || Object])], Slides));
            /**
             * @name Slide
             * @description
             * The Slide component is a child component of [Slides](../Slides). The template
             * should be written as `ion-slide`. Any slide content should be written
             * in this component and it should be used in conjunction with [Slides](../Slides).
             *
             * See the [Slides API Docs](../Slides) for more usage information.
             *
             * @demo /docs/v2/demos/slides/
             * @see {@link /docs/v2/api/components/slides/Slides/ Slides API Docs}
             */

            _export("Slide", Slide = function () {
                function Slide(elementRef, slides) {
                    _classCallCheck(this, Slide);

                    this.slides = slides;
                    this.ele = elementRef.nativeElement;
                    this.ele.classList.add('swiper-slide');
                    slides.rapidUpdate();
                }

                _createClass(Slide, [{
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this.slides.rapidUpdate();
                    }
                }]);

                return Slide;
            }());

            _export("Slide", Slide);

            __decorate([Input(), __metadata('design:type', Object)], Slide.prototype, "zoom", void 0);
            _export("Slide", Slide = __decorate([Component({
                selector: 'ion-slide',
                template: '<div class="slide-zoom"><ng-content></ng-content></div>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __param(1, Host()), __metadata('design:paramtypes', [typeof (_f = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _f || Object, Slides])], Slide));
            /**
             * @private
             */

            _export("SlideLazy", SlideLazy = function SlideLazy() {
                _classCallCheck(this, SlideLazy);
            });

            _export("SlideLazy", SlideLazy);

            _export("SlideLazy", SlideLazy = __decorate([Directive({
                selector: 'slide-lazy',
                host: {
                    'class': 'swiper-lazy'
                }
            }), __metadata('design:paramtypes', [])], SlideLazy));
            slidesId = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/tabs/tab-button", ["@angular/core", "../../config/config", "../ion", "./tab"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, EventEmitter, HostListener, Input, Output, Config, Ion, Tab, _createClass, _typeof, __decorate, __metadata, TabButton, _a, _b, _c, _d;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            HostListener = _angularCore.HostListener;
            Input = _angularCore.Input;
            Output = _angularCore.Output;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_tab) {
            Tab = _tab.Tab;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("TabButton", TabButton = function (_Ion) {
                _inherits(TabButton, _Ion);

                function TabButton(config, elementRef) {
                    _classCallCheck(this, TabButton);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabButton).call(this, elementRef));

                    _this.ionSelect = new EventEmitter();
                    _this.disHover = config.get('hoverCSS') === false;
                    _this.layout = config.get('tabbarLayout');
                    return _this;
                }

                _createClass(TabButton, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        this.tab.btn = this;
                        this.layout = this.tab.parent.tabbarLayout || this.layout;
                        this.hasTitle = !!this.tab.tabTitle;
                        this.hasIcon = !!this.tab.tabIcon && this.layout !== 'icon-hide';
                        this.hasTitleOnly = this.hasTitle && !this.hasIcon;
                        this.hasIconOnly = this.hasIcon && !this.hasTitle;
                        this.hasBadge = !!this.tab.tabBadge;
                    }
                }, {
                    key: "onClick",
                    value: function onClick(ev) {
                        this.ionSelect.emit(this.tab);
                        ev.preventDefault();
                    }
                }]);

                return TabButton;
            }(Ion));

            _export("TabButton", TabButton);

            __decorate([Input(), __metadata('design:type', typeof (_a = typeof Tab !== 'undefined' && Tab) === 'function' && _a || Object)], TabButton.prototype, "tab", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], TabButton.prototype, "ionSelect", void 0);
            __decorate([HostListener('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], TabButton.prototype, "onClick", null);
            _export("TabButton", TabButton = __decorate([Directive({
                selector: '.tab-button',
                host: {
                    '[attr.id]': 'tab._btnId',
                    '[attr.aria-controls]': 'tab._panelId',
                    '[attr.aria-selected]': 'tab.isSelected',
                    '[class.has-title]': 'hasTitle',
                    '[class.has-icon]': 'hasIcon',
                    '[class.has-title-only]': 'hasTitleOnly',
                    '[class.icon-only]': 'hasIconOnly',
                    '[class.has-badge]': 'hasBadge',
                    '[class.disable-hover]': 'disHover'
                }
            }), __metadata('design:paramtypes', [typeof (_c = typeof Config !== 'undefined' && Config) === 'function' && _c || Object, typeof (_d = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _d || Object])], TabButton));
        }
    };
});
"use strict";

System.register("ionic-angular/components/tabs/tab-highlight", ["@angular/core", "../../util/dom"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, rafFrames, _createClass, _typeof, __decorate, __metadata, TabHighlight, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
        }, function (_utilDom) {
            rafFrames = _utilDom.rafFrames;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("TabHighlight", TabHighlight = function () {
                function TabHighlight(_elementRef) {
                    _classCallCheck(this, TabHighlight);

                    this._elementRef = _elementRef;
                }

                _createClass(TabHighlight, [{
                    key: "select",
                    value: function select(tab) {
                        var _this = this;

                        rafFrames(3, function () {
                            var d = tab.btn.getDimensions();
                            var ele = _this._elementRef.nativeElement;
                            ele.style.transform = 'translate3d(' + d.left + 'px,0,0) scaleX(' + d.width + ')';
                            if (!_this._init) {
                                _this._init = true;
                                rafFrames(6, function () {
                                    ele.classList.add('animate');
                                });
                            }
                        });
                    }
                }]);

                return TabHighlight;
            }());

            _export("TabHighlight", TabHighlight);

            _export("TabHighlight", TabHighlight = __decorate([Directive({
                selector: 'tab-highlight'
            }), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object])], TabHighlight));
        }
    };
});
"use strict";

System.register("ionic-angular/components/tabs/tab", ["@angular/core", "../app/app", "../../config/config", "../../util/util", "../../util/keyboard", "../nav/nav-controller", "./tabs"], function (_export, _context) {
    "use strict";

    var ChangeDetectorRef, Component, ComponentResolver, ElementRef, EventEmitter, forwardRef, Input, Inject, NgZone, Output, Renderer, ViewChild, ViewEncapsulation, ViewContainerRef, App, Config, isTrueProperty, Keyboard, NavController, Tabs, _createClass, _get, _typeof, __decorate, __metadata, __param, Tab, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            ChangeDetectorRef = _angularCore.ChangeDetectorRef;
            Component = _angularCore.Component;
            ComponentResolver = _angularCore.ComponentResolver;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            forwardRef = _angularCore.forwardRef;
            Input = _angularCore.Input;
            Inject = _angularCore.Inject;
            NgZone = _angularCore.NgZone;
            Output = _angularCore.Output;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
            ViewContainerRef = _angularCore.ViewContainerRef;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_utilKeyboard) {
            Keyboard = _utilKeyboard.Keyboard;
        }, function (_navNavController) {
            NavController = _navNavController.NavController;
        }, function (_tabs) {
            Tabs = _tabs.Tabs;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Tab", Tab = function (_NavController) {
                _inherits(Tab, _NavController);

                function Tab(parent, app, config, keyboard, elementRef, zone, renderer, compiler, _cd) {
                    _classCallCheck(this, Tab);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tab).call(this, parent, app, config, keyboard, elementRef, zone, renderer, compiler));

                    _this.parent = parent;
                    _this._cd = _cd;
                    _this._isEnabled = true;
                    _this._isShown = true;
                    /**
                     * @output {Tab} Method to call when the current tab is selected
                     */
                    _this.ionSelect = new EventEmitter();
                    parent.add(_this);
                    if (parent.rootNav) {
                        _this._sbEnabled = parent.rootNav.isSwipeBackEnabled();
                    }
                    _this._panelId = 'tabpanel-' + _this.id;
                    _this._btnId = 'tab-' + _this.id;
                    return _this;
                }
                /**
                 * @input {boolean} If the tab is enabled or not. If the tab
                 * is not enabled then the tab button will still show, however,
                 * the button will appear grayed out and will not be clickable.
                 * Defaults to `true`.
                 */


                _createClass(Tab, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        this.tabBadgeStyle = this.tabBadgeStyle ? this.tabBadgeStyle : 'default';
                    }
                }, {
                    key: "load",
                    value: function load(opts, done) {
                        if (!this._loaded && this.root) {
                            this.push(this.root, this.rootParams, opts).then(function () {
                                done(true);
                            });
                            this._loaded = true;
                        } else {
                            done(false);
                        }
                    }
                }, {
                    key: "preload",
                    value: function preload(wait) {
                        var _this2 = this;

                        this._loadTmr = setTimeout(function () {
                            if (!_this2._loaded) {
                                console.debug('Tabs, preload', _this2.id);
                                _this2.load({
                                    animate: false,
                                    preload: true
                                }, function () {});
                            }
                        }, wait);
                    }
                }, {
                    key: "loadPage",
                    value: function loadPage(viewCtrl, viewport, opts, done) {
                        var _this3 = this;

                        var isTabSubPage = this.parent.subPages && viewCtrl.index > 0;
                        if (isTabSubPage) {
                            viewport = this.parent.portal;
                        }
                        _get(Object.getPrototypeOf(Tab.prototype), "loadPage", this).call(this, viewCtrl, viewport, opts, function () {
                            if (isTabSubPage) {
                                // add the .tab-subpage css class to tabs pages that should act like subpages
                                var pageEleRef = viewCtrl.pageRef();
                                if (pageEleRef) {
                                    _this3._renderer.setElementClass(pageEleRef.nativeElement, 'tab-subpage', true);
                                }
                            }
                            done();
                        });
                    }
                }, {
                    key: "setSelected",
                    value: function setSelected(isSelected) {
                        this.isSelected = isSelected;
                        if (isSelected) {
                            // this is the selected tab, detect changes
                            this._cd.reattach();
                        } else {
                            // this tab is not selected, do not detect changes
                            this._cd.detach();
                        }
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        clearTimeout(this._loadTmr);
                        _get(Object.getPrototypeOf(Tab.prototype), "ngOnDestroy", this).call(this);
                    }
                }, {
                    key: "enabled",
                    get: function get() {
                        return this._isEnabled;
                    },
                    set: function set(val) {
                        this._isEnabled = isTrueProperty(val);
                    }
                }, {
                    key: "show",
                    get: function get() {
                        return this._isShown;
                    },
                    set: function set(val) {
                        this._isShown = isTrueProperty(val);
                    }
                }, {
                    key: "swipeBackEnabled",
                    get: function get() {
                        return this._sbEnabled;
                    },
                    set: function set(val) {
                        this._sbEnabled = isTrueProperty(val);
                    }
                }, {
                    key: "_vp",
                    set: function set(val) {
                        this.setViewport(val);
                    }
                }, {
                    key: "index",
                    get: function get() {
                        return this.parent.getIndex(this);
                    }
                }]);

                return Tab;
            }(NavController));

            _export("Tab", Tab);

            __decorate([Input(), __metadata('design:type', Object)], Tab.prototype, "root", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Tab.prototype, "rootParams", void 0);
            __decorate([Input(), __metadata('design:type', String)], Tab.prototype, "tabTitle", void 0);
            __decorate([Input(), __metadata('design:type', String)], Tab.prototype, "tabIcon", void 0);
            __decorate([Input(), __metadata('design:type', String)], Tab.prototype, "tabBadge", void 0);
            __decorate([Input(), __metadata('design:type', String)], Tab.prototype, "tabBadgeStyle", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], Tab.prototype, "enabled", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Tab.prototype, "show", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Tab.prototype, "swipeBackEnabled", null);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Tab.prototype, "ionSelect", void 0);
            __decorate([ViewChild('viewport', { read: ViewContainerRef }), __metadata('design:type', typeof (_b = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _b || Object), __metadata('design:paramtypes', [typeof (_c = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _c || Object])], Tab.prototype, "_vp", null);
            _export("Tab", Tab = __decorate([Component({
                selector: 'ion-tab',
                host: {
                    '[class.show-tab]': 'isSelected',
                    '[attr.id]': '_panelId',
                    '[attr.aria-labelledby]': '_btnId',
                    'role': 'tabpanel'
                },
                template: '<div #viewport></div><div class="nav-decor"></div>',
                encapsulation: ViewEncapsulation.None
            }), __param(0, Inject(forwardRef(function () {
                return Tabs;
            }))), __metadata('design:paramtypes', [typeof (_d = typeof Tabs !== 'undefined' && Tabs) === 'function' && _d || Object, typeof (_e = typeof App !== 'undefined' && App) === 'function' && _e || Object, typeof (_f = typeof Config !== 'undefined' && Config) === 'function' && _f || Object, typeof (_g = typeof Keyboard !== 'undefined' && Keyboard) === 'function' && _g || Object, typeof (_h = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _h || Object, typeof (_j = typeof NgZone !== 'undefined' && NgZone) === 'function' && _j || Object, typeof (_k = typeof Renderer !== 'undefined' && Renderer) === 'function' && _k || Object, typeof (_l = typeof ComponentResolver !== 'undefined' && ComponentResolver) === 'function' && _l || Object, typeof (_m = typeof ChangeDetectorRef !== 'undefined' && ChangeDetectorRef) === 'function' && _m || Object])], Tab));
        }
    };
});
"use strict";

System.register("ionic-angular/components/tabs/tabs", ["@angular/core", "../app/app", "../../config/config", "../content/content", "../ion", "../../util/util", "../../util/dom", "../nav/nav-controller", "../../platform/platform", "./tab-button", "./tab-highlight", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, EventEmitter, Input, Output, Optional, Renderer, ViewChild, ViewContainerRef, ViewEncapsulation, App, Config, Content, Ion, isBlank, isTrueProperty, nativeRaf, NavController, Platform, TabButton, TabHighlight, ViewController, _createClass, _typeof, __decorate, __metadata, __param, Tabs, tabIds, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            Input = _angularCore.Input;
            Output = _angularCore.Output;
            Optional = _angularCore.Optional;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewContainerRef = _angularCore.ViewContainerRef;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_contentContent) {
            Content = _contentContent.Content;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_utilUtil) {
            isBlank = _utilUtil.isBlank;
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_utilDom) {
            nativeRaf = _utilDom.nativeRaf;
        }, function (_navNavController) {
            NavController = _navNavController.NavController;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }, function (_tabButton) {
            TabButton = _tabButton.TabButton;
        }, function (_tabHighlight) {
            TabHighlight = _tabHighlight.TabHighlight;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Tabs", Tabs = function (_Ion) {
                _inherits(Tabs, _Ion);

                function Tabs(parent, viewCtrl, _app, _config, _elementRef, _platform, _renderer) {
                    _classCallCheck(this, Tabs);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tabs).call(this, _elementRef));

                    _this._app = _app;
                    _this._config = _config;
                    _this._elementRef = _elementRef;
                    _this._platform = _platform;
                    _this._renderer = _renderer;
                    _this._ids = -1;
                    _this._tabs = [];
                    _this._onReady = null;
                    /**
                     * @private
                     */
                    _this.selectHistory = [];
                    /**
                     * @input {any} Expression to evaluate when the tab changes.
                     */
                    _this.ionChange = new EventEmitter();
                    _this.parent = parent;
                    _this.id = ++tabIds;
                    _this.subPages = _config.getBoolean('tabSubPages');
                    _this._useHighlight = _config.getBoolean('tabbarHighlight');
                    _this._sbPadding = _config.getBoolean('statusbarPadding');
                    if (parent) {
                        // this Tabs has a parent Nav
                        parent.registerChildNav(_this);
                    } else if (_this._app) {
                        // this is the root navcontroller for the entire app
                        _this._app.setRootNav(_this);
                    }
                    // Tabs may also be an actual ViewController which was navigated to
                    // if Tabs is static and not navigated to within a NavController
                    // then skip this and don't treat it as it's own ViewController
                    if (viewCtrl) {
                        viewCtrl.setContent(_this);
                        viewCtrl.setContentRef(_elementRef);
                        viewCtrl.loaded = function (done) {
                            _this._onReady = done;
                        };
                    }
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(Tabs, [{
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        var _this2 = this;

                        this._setConfig('tabbarPlacement', 'bottom');
                        this._setConfig('tabbarLayout', 'icon-top');
                        if (this._useHighlight) {
                            this._platform.onResize(function () {
                                _this2._highlight.select(_this2.getSelected());
                            });
                        }
                        var preloadTabs = isBlank(this.preloadTabs) ? this._config.getBoolean('preloadTabs') : isTrueProperty(this.preloadTabs);
                        // get the selected index
                        var selectedIndex = this.selectedIndex ? parseInt(this.selectedIndex, 10) : 0;
                        // ensure the selectedIndex isn't a hidden or disabled tab
                        // also find the first available index incase we need it later
                        var availableIndex = -1;
                        this._tabs.forEach(function (tab, index) {
                            if (tab.enabled && tab.show && availableIndex < 0) {
                                // we know this tab index is safe to show
                                availableIndex = index;
                            }
                            if (index === selectedIndex && (!tab.enabled || !tab.show)) {
                                // the selectedIndex is not safe to show
                                selectedIndex = -1;
                            }
                        });
                        if (selectedIndex < 0) {
                            // the selected index wasn't safe to show
                            // instead use an available index found to be safe to show
                            selectedIndex = availableIndex;
                        }
                        this._tabs.forEach(function (tab, index) {
                            if (index === selectedIndex) {
                                _this2.select(tab);
                            } else if (preloadTabs) {
                                tab.preload(1000 * index);
                            }
                        });
                    }
                }, {
                    key: "_setConfig",
                    value: function _setConfig(attrKey, fallback) {
                        var val = this[attrKey];
                        if (isBlank(val)) {
                            val = this._config.get(attrKey, fallback);
                        }
                        this._renderer.setElementAttribute(this._elementRef.nativeElement, attrKey, val);
                    }
                }, {
                    key: "add",
                    value: function add(tab) {
                        tab.id = this.id + '-' + ++this._ids;
                        this._tabs.push(tab);
                    }
                }, {
                    key: "select",
                    value: function select(tabOrIndex) {
                        var _this3 = this;

                        var selectedTab = typeof tabOrIndex === 'number' ? this.getByIndex(tabOrIndex) : tabOrIndex;
                        if (isBlank(selectedTab)) {
                            return;
                        }
                        var deselectedTab = this.getSelected();
                        if (selectedTab === deselectedTab) {
                            // no change
                            return this._touchActive(selectedTab);
                        }
                        console.debug('Tabs, select', selectedTab.id);
                        var opts = {
                            animate: false
                        };
                        var deselectedPage = void 0;
                        if (deselectedTab) {
                            deselectedPage = deselectedTab.getActive();
                            deselectedPage && deselectedPage.fireWillLeave();
                        }
                        var selectedPage = selectedTab.getActive();
                        selectedPage && selectedPage.fireWillEnter();
                        selectedTab.load(opts, function (initialLoad) {
                            selectedTab.ionSelect.emit(selectedTab);
                            _this3.ionChange.emit(selectedTab);
                            if (selectedTab.root) {
                                // only show the selectedTab if it has a root
                                // it's possible the tab is only for opening modal's or signing out
                                // and doesn't actually have content. In the case there's no content
                                // for a tab then do nothing and leave the current view as is
                                _this3._tabs.forEach(function (tab) {
                                    tab.setSelected(tab === selectedTab);
                                });
                                if (_this3._useHighlight) {
                                    _this3._highlight.select(selectedTab);
                                }
                            }
                            selectedPage && selectedPage.fireDidEnter();
                            deselectedPage && deselectedPage.fireDidLeave();
                            if (_this3._onReady) {
                                _this3._onReady();
                                _this3._onReady = null;
                            }
                            // track the order of which tabs have been selected, by their index
                            // do not track if the tab index is the same as the previous
                            if (_this3.selectHistory[_this3.selectHistory.length - 1] !== selectedTab.id) {
                                _this3.selectHistory.push(selectedTab.id);
                            }
                            // if this is not the Tab's initial load then we need
                            // to refresh the tabbar and content dimensions to be sure
                            // they're lined up correctly
                            if (!initialLoad && selectedPage) {
                                var content = selectedPage.getContent();
                                if (content && content instanceof Content) {
                                    nativeRaf(function () {
                                        content.readDimensions();
                                        content.writeDimensions();
                                    });
                                }
                            }
                        });
                    }
                }, {
                    key: "previousTab",
                    value: function previousTab() {
                        var _this4 = this;

                        var trimHistory = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

                        // walk backwards through the tab selection history
                        // and find the first previous tab that is enabled and shown
                        console.debug('run previousTab', this.selectHistory);
                        for (var i = this.selectHistory.length - 2; i >= 0; i--) {
                            var tab = this._tabs.find(function (t) {
                                return t.id === _this4.selectHistory[i];
                            });
                            if (tab && tab.enabled && tab.show) {
                                if (trimHistory) {
                                    this.selectHistory.splice(i + 1);
                                }
                                return tab;
                            }
                        }
                        return null;
                    }
                }, {
                    key: "getByIndex",
                    value: function getByIndex(index) {
                        if (index < this._tabs.length && index > -1) {
                            return this._tabs[index];
                        }
                        return null;
                    }
                }, {
                    key: "getSelected",
                    value: function getSelected() {
                        for (var i = 0; i < this._tabs.length; i++) {
                            if (this._tabs[i].isSelected) {
                                return this._tabs[i];
                            }
                        }
                        return null;
                    }
                }, {
                    key: "getActiveChildNav",
                    value: function getActiveChildNav() {
                        return this.getSelected();
                    }
                }, {
                    key: "getIndex",
                    value: function getIndex(tab) {
                        return this._tabs.indexOf(tab);
                    }
                }, {
                    key: "_touchActive",
                    value: function _touchActive(tab) {
                        var active = tab.getActive();
                        if (!active) {
                            return Promise.resolve();
                        }
                        var instance = active.instance;
                        // If they have a custom tab selected handler, call it
                        if (instance.ionSelected) {
                            return instance.ionSelected();
                        }
                        // If we're a few pages deep, pop to root
                        if (tab.length() > 1) {
                            // Pop to the root view
                            return tab.popToRoot();
                        }
                        // Otherwise, if the page we're on is not our real root, reset it to our
                        // default root type
                        if (tab.root !== active.componentType) {
                            return tab.setRoot(tab.root);
                        }
                        // And failing all of that, we do something safe and secure
                        return Promise.resolve();
                    }
                }, {
                    key: "setTabbarPosition",
                    value: function setTabbarPosition(top, bottom) {
                        if (this._top !== top || this._bottom !== bottom) {
                            var tabbarEle = this._tabbar.nativeElement;
                            tabbarEle.style.top = top > -1 ? top + 'px' : '';
                            tabbarEle.style.bottom = bottom > -1 ? bottom + 'px' : '';
                            tabbarEle.classList.add('show-tabbar');
                            this._top = top;
                            this._bottom = bottom;
                        }
                    }
                }, {
                    key: "rootNav",
                    get: function get() {
                        var nav = this.parent;
                        while (nav && nav.parent) {
                            nav = nav.parent;
                        }
                        return nav;
                    }
                }]);

                return Tabs;
            }(Ion));

            _export("Tabs", Tabs);

            __decorate([Input(), __metadata('design:type', Object)], Tabs.prototype, "selectedIndex", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Tabs.prototype, "preloadTabs", void 0);
            __decorate([Input(), __metadata('design:type', String)], Tabs.prototype, "tabbarLayout", void 0);
            __decorate([Input(), __metadata('design:type', String)], Tabs.prototype, "tabbarPlacement", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Tabs.prototype, "ionChange", void 0);
            __decorate([ViewChild(TabHighlight), __metadata('design:type', typeof (_b = typeof TabHighlight !== 'undefined' && TabHighlight) === 'function' && _b || Object)], Tabs.prototype, "_highlight", void 0);
            __decorate([ViewChild('tabbar'), __metadata('design:type', typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object)], Tabs.prototype, "_tabbar", void 0);
            __decorate([ViewChild('portal', { read: ViewContainerRef }), __metadata('design:type', typeof (_d = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _d || Object)], Tabs.prototype, "portal", void 0);
            _export("Tabs", Tabs = __decorate([Component({
                selector: 'ion-tabs',
                template: '<ion-tabbar role="tablist" #tabbar>' + '<a *ngFor="let t of _tabs" [tab]="t" class="tab-button" [class.tab-disabled]="!t.enabled" [class.tab-hidden]="!t.show" role="tab" href="#" (ionSelect)="select($event)">' + '<ion-icon *ngIf="t.tabIcon" [name]="t.tabIcon" [isActive]="t.isSelected" class="tab-button-icon"></ion-icon>' + '<span *ngIf="t.tabTitle" class="tab-button-text">{{t.tabTitle}}</span>' + '<ion-badge *ngIf="t.tabBadge" class="tab-badge" [ngClass]="\'badge-\' + t.tabBadgeStyle">{{t.tabBadge}}</ion-badge>' + '<ion-button-effect></ion-button-effect>' + '</a>' + '<tab-highlight></tab-highlight>' + '</ion-tabbar>' + '<ng-content></ng-content>' + '<div #portal tab-portal></div>',
                directives: [TabButton, TabHighlight],
                encapsulation: ViewEncapsulation.None
            }), __param(0, Optional()), __param(1, Optional()), __metadata('design:paramtypes', [typeof (_e = typeof NavController !== 'undefined' && NavController) === 'function' && _e || Object, typeof (_f = typeof ViewController !== 'undefined' && ViewController) === 'function' && _f || Object, typeof (_g = typeof App !== 'undefined' && App) === 'function' && _g || Object, typeof (_h = typeof Config !== 'undefined' && Config) === 'function' && _h || Object, typeof (_j = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _j || Object, typeof (_k = typeof Platform !== 'undefined' && Platform) === 'function' && _k || Object, typeof (_l = typeof Renderer !== 'undefined' && Renderer) === 'function' && _l || Object])], Tabs));
            tabIds = -1;
        }
    };
});
'use strict';

System.register('ionic-angular/components/tap-click/activator', ['../../util/dom'], function (_export, _context) {
    "use strict";

    var nativeTimeout, rafFrames, _createClass, Activator, CLEAR_STATE_DEFERS;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_utilDom) {
            nativeTimeout = _utilDom.nativeTimeout;
            rafFrames = _utilDom.rafFrames;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Activator', Activator = function () {
                function Activator(app, config) {
                    _classCallCheck(this, Activator);

                    this.app = app;
                    this._queue = [];
                    this._active = [];
                    this._css = config.get('activatedClass') || 'activated';
                }

                _createClass(Activator, [{
                    key: 'downAction',
                    value: function downAction(ev, activatableEle, startCoord) {
                        // the user just pressed down
                        var self = this;
                        if (self.disableActivated(ev)) {
                            return;
                        }
                        // queue to have this element activated
                        self._queue.push(activatableEle);
                        rafFrames(2, function () {
                            var activatableEle = void 0;
                            for (var i = 0; i < self._queue.length; i++) {
                                activatableEle = self._queue[i];
                                if (activatableEle && activatableEle.parentNode) {
                                    self._active.push(activatableEle);
                                    activatableEle.classList.add(self._css);
                                }
                            }
                            self._queue = [];
                        });
                    }
                }, {
                    key: 'upAction',
                    value: function upAction(ev, activatableEle, startCoord) {
                        var _this = this;

                        // the user was pressing down, then just let up
                        rafFrames(CLEAR_STATE_DEFERS, function () {
                            _this.clearState();
                        });
                    }
                }, {
                    key: 'clearState',
                    value: function clearState() {
                        var _this2 = this;

                        // all states should return to normal
                        if (!this.app.isEnabled()) {
                            // the app is actively disabled, so don't bother deactivating anything.
                            // this makes it easier on the GPU so it doesn't have to redraw any
                            // buttons during a transition. This will retry in XX milliseconds.
                            nativeTimeout(function () {
                                _this2.clearState();
                            }, 600);
                        } else {
                            // not actively transitioning, good to deactivate any elements
                            this.deactivate();
                        }
                    }
                }, {
                    key: 'deactivate',
                    value: function deactivate() {
                        // remove the active class from all active elements
                        var self = this;
                        self._queue = [];
                        rafFrames(2, function () {
                            for (var i = 0; i < self._active.length; i++) {
                                self._active[i].classList.remove(self._css);
                            }
                            self._active = [];
                        });
                    }
                }, {
                    key: 'disableActivated',
                    value: function disableActivated(ev) {
                        if (ev.defaultPrevented) return true;
                        var targetEle = ev.target;
                        for (var x = 0; x < 4; x++) {
                            if (!targetEle) break;
                            if (targetEle.hasAttribute('disable-activated')) return true;
                            targetEle = targetEle.parentElement;
                        }
                        return false;
                    }
                }]);

                return Activator;
            }());

            _export('Activator', Activator);

            CLEAR_STATE_DEFERS = 5;
        }
    };
});
'use strict';

System.register('ionic-angular/components/tap-click/ripple', ['./activator', '../../util/dom'], function (_export, _context) {
    "use strict";

    var Activator, CSS, hasPointerMoved, nativeRaf, pointerCoord, rafFrames, _createClass, _get, RippleActivator, TOUCH_DOWN_ACCEL;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_activator) {
            Activator = _activator.Activator;
        }, function (_utilDom) {
            CSS = _utilDom.CSS;
            hasPointerMoved = _utilDom.hasPointerMoved;
            nativeRaf = _utilDom.nativeRaf;
            pointerCoord = _utilDom.pointerCoord;
            rafFrames = _utilDom.rafFrames;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _export('RippleActivator', RippleActivator = function (_Activator) {
                _inherits(RippleActivator, _Activator);

                function RippleActivator(app, config) {
                    _classCallCheck(this, RippleActivator);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(RippleActivator).call(this, app, config));
                }

                _createClass(RippleActivator, [{
                    key: 'downAction',
                    value: function downAction(ev, activatableEle, startCoord) {
                        var self = this;
                        if (self.disableActivated(ev)) {
                            return;
                        }
                        // queue to have this element activated
                        self._queue.push(activatableEle);
                        nativeRaf(function () {
                            for (var i = 0; i < self._queue.length; i++) {
                                var queuedEle = self._queue[i];
                                if (queuedEle && queuedEle.parentNode) {
                                    self._active.push(queuedEle);
                                    // DOM WRITE
                                    queuedEle.classList.add(self._css);
                                    var j = queuedEle.childElementCount;
                                    while (j--) {
                                        var rippleEle = queuedEle.children[j];
                                        if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
                                            // DOM WRITE
                                            rippleEle.style.left = '-9999px';
                                            rippleEle.style.opacity = '';
                                            rippleEle.style[CSS.transform] = 'scale(0.001) translateZ(0px)';
                                            rippleEle.style[CSS.transition] = '';
                                            // DOM READ
                                            var clientRect = activatableEle.getBoundingClientRect();
                                            rippleEle.$top = clientRect.top;
                                            rippleEle.$left = clientRect.left;
                                            rippleEle.$width = clientRect.width;
                                            rippleEle.$height = clientRect.height;
                                            break;
                                        }
                                    }
                                }
                            }
                            self._queue = [];
                        });
                    }
                }, {
                    key: 'upAction',
                    value: function upAction(ev, activatableEle, startCoord) {
                        var self = this;
                        if (!hasPointerMoved(6, startCoord, pointerCoord(ev))) {
                            var i = activatableEle.childElementCount;
                            while (i--) {
                                var rippleEle = activatableEle.children[i];
                                if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
                                    var clientPointerX = startCoord.x - rippleEle.$left;
                                    var clientPointerY = startCoord.y - rippleEle.$top;
                                    var x = Math.max(Math.abs(rippleEle.$width - clientPointerX), clientPointerX) * 2;
                                    var y = Math.max(Math.abs(rippleEle.$height - clientPointerY), clientPointerY) * 2;
                                    var diameter = Math.min(Math.max(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), 64), 240);
                                    if (activatableEle.hasAttribute('ion-item')) {
                                        diameter = Math.min(diameter, 140);
                                    }
                                    var radius = Math.sqrt(rippleEle.$width + rippleEle.$height);
                                    var scaleTransitionDuration = Math.max(1600 * Math.sqrt(radius / TOUCH_DOWN_ACCEL) + 0.5, 260);
                                    var opacityTransitionDuration = scaleTransitionDuration * 0.7;
                                    var opacityTransitionDelay = scaleTransitionDuration - opacityTransitionDuration;
                                    // DOM WRITE
                                    rippleEle.style.width = rippleEle.style.height = diameter + 'px';
                                    rippleEle.style.marginTop = rippleEle.style.marginLeft = -(diameter / 2) + 'px';
                                    rippleEle.style.left = clientPointerX + 'px';
                                    rippleEle.style.top = clientPointerY + 'px';
                                    rippleEle.style.opacity = '0';
                                    rippleEle.style[CSS.transform] = 'scale(1) translateZ(0px)';
                                    rippleEle.style[CSS.transition] = 'transform ' + scaleTransitionDuration + 'ms,opacity ' + opacityTransitionDuration + 'ms ' + opacityTransitionDelay + 'ms';
                                }
                            }
                        }
                        _get(Object.getPrototypeOf(RippleActivator.prototype), 'upAction', this).call(this, ev, activatableEle, startCoord);
                    }
                }, {
                    key: 'deactivate',
                    value: function deactivate() {
                        // remove the active class from all active elements
                        var self = this;
                        self._queue = [];
                        rafFrames(2, function () {
                            for (var i = 0; i < self._active.length; i++) {
                                self._active[i].classList.remove(self._css);
                            }
                            self._active = [];
                        });
                    }
                }]);

                return RippleActivator;
            }(Activator));

            _export('RippleActivator', RippleActivator);

            TOUCH_DOWN_ACCEL = 300;
        }
    };
});
"use strict";

System.register("ionic-angular/components/tap-click/tap-click", ["@angular/core", "./activator", "../app/app", "../../config/config", "../../util/dom", "./ripple"], function (_export, _context) {
    "use strict";

    var Injectable, NgZone, Activator, App, Config, hasPointerMoved, pointerCoord, RippleActivator, _createClass, _typeof, __decorate, __metadata, TapClick, isActivatable, ACTIVATABLE_ELEMENTS, ACTIVATABLE_ATTRIBUTES, POINTER_TOLERANCE, POINTER_MOVE_UNTIL_CANCEL, DISABLE_NATIVE_CLICK_AMOUNT, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function getActivatableTarget(ele) {
        var targetEle = ele;
        for (var x = 0; x < 4; x++) {
            if (!targetEle) break;
            if (isActivatable(targetEle)) return targetEle;
            targetEle = targetEle.parentElement;
        }
        return null;
    }
    /**
     * @private
     */

    function addListener(type, listener, useCapture) {
        document.addEventListener(type, listener, useCapture);
    }
    function removeListener(type, listener) {
        document.removeEventListener(type, listener);
    }
    return {
        setters: [function (_angularCore) {
            Injectable = _angularCore.Injectable;
            NgZone = _angularCore.NgZone;
        }, function (_activator) {
            Activator = _activator.Activator;
        }, function (_appApp) {
            App = _appApp.App;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilDom) {
            hasPointerMoved = _utilDom.hasPointerMoved;
            pointerCoord = _utilDom.pointerCoord;
        }, function (_ripple) {
            RippleActivator = _ripple.RippleActivator;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("TapClick", TapClick = function () {
                function TapClick(config, app, zone) {
                    _classCallCheck(this, TapClick);

                    this.app = app;
                    this.lastTouch = 0;
                    this.disableClick = 0;
                    this.lastActivated = 0;
                    var self = this;
                    if (config.get('activator') === 'ripple') {
                        self.activator = new RippleActivator(app, config);
                    } else if (config.get('activator') === 'highlight') {
                        self.activator = new Activator(app, config);
                    }
                    self.usePolyfill = config.get('tapPolyfill') === true;
                    zone.runOutsideAngular(function () {
                        addListener('click', self.click.bind(self), true);
                        addListener('touchstart', self.touchStart.bind(self));
                        addListener('touchend', self.touchEnd.bind(self));
                        addListener('touchcancel', self.pointerCancel.bind(self));
                        addListener('mousedown', self.mouseDown.bind(self), true);
                        addListener('mouseup', self.mouseUp.bind(self), true);
                    });
                    self.pointerMove = function (ev) {
                        if (hasPointerMoved(POINTER_MOVE_UNTIL_CANCEL, self.startCoord, pointerCoord(ev))) {
                            self.pointerCancel(ev);
                        }
                    };
                }

                _createClass(TapClick, [{
                    key: "touchStart",
                    value: function touchStart(ev) {
                        this.lastTouch = Date.now();
                        this.pointerStart(ev);
                    }
                }, {
                    key: "touchEnd",
                    value: function touchEnd(ev) {
                        this.lastTouch = Date.now();
                        if (this.usePolyfill && this.startCoord && this.app.isEnabled()) {
                            // only dispatch mouse click events from a touchend event
                            // when tapPolyfill config is true, and the startCoordand endCoord
                            // are not too far off from each other
                            var endCoord = pointerCoord(ev);
                            if (!hasPointerMoved(POINTER_TOLERANCE, this.startCoord, endCoord)) {
                                // prevent native mouse click events for XX amount of time
                                this.disableClick = this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT;
                                if (this.app.isScrolling()) {
                                    // do not fire off a click event while the app was scrolling
                                    console.debug('click from touch prevented by scrolling ' + Date.now());
                                } else {
                                    // dispatch a mouse click event
                                    console.debug('create click from touch ' + Date.now());
                                    var clickEvent = document.createEvent('MouseEvents');
                                    clickEvent.initMouseEvent('click', true, true, window, 1, 0, 0, endCoord.x, endCoord.y, false, false, false, false, 0, null);
                                    clickEvent.isIonicTap = true;
                                    ev.target.dispatchEvent(clickEvent);
                                }
                            }
                        }
                        this.pointerEnd(ev);
                    }
                }, {
                    key: "mouseDown",
                    value: function mouseDown(ev) {
                        if (this.isDisabledNativeClick()) {
                            console.debug('mouseDown prevent ' + ev.target.tagName + ' ' + Date.now());
                            // does not prevent default on purpose
                            // so native blur events from inputs can happen
                            ev.stopPropagation();
                        } else if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
                            this.pointerStart(ev);
                        }
                    }
                }, {
                    key: "mouseUp",
                    value: function mouseUp(ev) {
                        if (this.isDisabledNativeClick()) {
                            console.debug('mouseUp prevent ' + ev.target.tagName + ' ' + Date.now());
                            ev.preventDefault();
                            ev.stopPropagation();
                        }
                        if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
                            this.pointerEnd(ev);
                        }
                    }
                }, {
                    key: "pointerStart",
                    value: function pointerStart(ev) {
                        var activatableEle = getActivatableTarget(ev.target);
                        if (activatableEle) {
                            this.startCoord = pointerCoord(ev);
                            var now = Date.now();
                            if (this.lastActivated + 150 < now) {
                                this.activator && this.activator.downAction(ev, activatableEle, this.startCoord);
                                this.lastActivated = now;
                            }
                            this.moveListeners(true);
                        } else {
                            this.startCoord = null;
                        }
                    }
                }, {
                    key: "pointerEnd",
                    value: function pointerEnd(ev) {
                        if (this.startCoord && this.activator) {
                            var activatableEle = getActivatableTarget(ev.target);
                            if (activatableEle) {
                                this.activator.upAction(ev, activatableEle, this.startCoord);
                            }
                        }
                        this.moveListeners(false);
                    }
                }, {
                    key: "pointerCancel",
                    value: function pointerCancel(ev) {
                        console.debug('pointerCancel from ' + ev.type + ' ' + Date.now());
                        this.activator && this.activator.clearState();
                        this.moveListeners(false);
                    }
                }, {
                    key: "moveListeners",
                    value: function moveListeners(shouldAdd) {
                        removeListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
                        if (shouldAdd) {
                            addListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
                        }
                    }
                }, {
                    key: "click",
                    value: function click(ev) {
                        var preventReason = null;
                        if (!this.app.isEnabled()) {
                            preventReason = 'appDisabled';
                        } else if (!ev.isIonicTap && this.isDisabledNativeClick()) {
                            preventReason = 'nativeClick';
                        }
                        if (preventReason !== null) {
                            console.debug('click prevent ' + preventReason + ' ' + Date.now());
                            ev.preventDefault();
                            ev.stopPropagation();
                        }
                    }
                }, {
                    key: "isDisabledNativeClick",
                    value: function isDisabledNativeClick() {
                        return this.disableClick > Date.now();
                    }
                }]);

                return TapClick;
            }());

            _export("TapClick", TapClick);

            _export("TapClick", TapClick = __decorate([Injectable(), __metadata('design:paramtypes', [typeof (_a = typeof Config !== 'undefined' && Config) === 'function' && _a || Object, typeof (_b = typeof App !== 'undefined' && App) === 'function' && _b || Object, typeof (_c = typeof NgZone !== 'undefined' && NgZone) === 'function' && _c || Object])], TapClick));
            _export("isActivatable", isActivatable = function isActivatable(ele) {
                if (ACTIVATABLE_ELEMENTS.test(ele.tagName)) {
                    return true;
                }
                var attributes = ele.attributes;
                for (var i = 0, l = attributes.length; i < l; i++) {
                    if (ACTIVATABLE_ATTRIBUTES.test(attributes[i].name)) {
                        return true;
                    }
                }
                return false;
            });

            _export("isActivatable", isActivatable);

            ACTIVATABLE_ELEMENTS = /^(A|BUTTON)$/;
            ACTIVATABLE_ATTRIBUTES = /tappable|button/i;
            POINTER_TOLERANCE = 4;
            POINTER_MOVE_UNTIL_CANCEL = 10;
            DISABLE_NATIVE_CLICK_AMOUNT = 2500;
        }
    };
});
"use strict";

System.register("ionic-angular/components/toast/toast", ["@angular/core", "../../animations/animation", "../../config/config", "../../util/util", "../nav/nav-controller", "../nav/nav-params", "../../transitions/transition", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, Renderer, Animation, Config, isPresent, NavController, NavParams, Transition, ViewController, _createClass, _typeof, __decorate, __metadata, Toast, TOAST_POSITION_TOP, TOAST_POSITION_MIDDLE, TOAST_POSITION_BOTTOM, ToastCmp, ToastSlideIn, ToastSlideOut, ToastMdSlideIn, ToastMdSlideOut, ToastWpPopIn, ToastWpPopOut, toastIds, _a, _b, _c, _d, _e, _f;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            Renderer = _angularCore.Renderer;
        }, function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_utilUtil) {
            isPresent = _utilUtil.isPresent;
        }, function (_navNavController) {
            NavController = _navNavController.NavController;
        }, function (_navNavParams) {
            NavParams = _navNavParams.NavParams;
        }, function (_transitionsTransition) {
            Transition = _transitionsTransition.Transition;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Toast", Toast = function (_ViewController) {
                _inherits(Toast, _ViewController);

                function Toast() {
                    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, Toast);

                    opts.dismissOnPageChange = isPresent(opts.dismissOnPageChange) ? !!opts.dismissOnPageChange : false;

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Toast).call(this, ToastCmp, opts));

                    // set the position to the bottom if not provided
                    if (!opts.position || !_this.isValidPosition(opts.position)) {
                        opts.position = TOAST_POSITION_BOTTOM;
                    }
                    _this.isOverlay = true;
                    _this.usePortal = true;
                    // by default, toasts should not fire lifecycle events of other views
                    // for example, when an toast enters, the current active view should
                    // not fire its lifecycle events because it's not conceptually leaving
                    _this.fireOtherLifecycles = false;
                    return _this;
                }
                /**
                * @private
                */


                _createClass(Toast, [{
                    key: "getTransitionName",
                    value: function getTransitionName(direction) {
                        var key = 'toast' + (direction === 'back' ? 'Leave' : 'Enter');
                        return this._nav && this._nav.config.get(key);
                    }
                }, {
                    key: "isValidPosition",
                    value: function isValidPosition(position) {
                        return position === TOAST_POSITION_TOP || position === TOAST_POSITION_MIDDLE || position === TOAST_POSITION_BOTTOM;
                    }
                }, {
                    key: "setMessage",
                    value: function setMessage(message) {
                        this.data.message = message;
                    }
                }], [{
                    key: "create",
                    value: function create() {
                        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        return new Toast(opts);
                    }
                }]);

                return Toast;
            }(ViewController));

            _export("Toast", Toast);

            TOAST_POSITION_TOP = 'top';
            TOAST_POSITION_MIDDLE = 'middle';
            TOAST_POSITION_BOTTOM = 'bottom';

            ToastCmp = function () {
                function ToastCmp(_nav, _viewCtrl, _config, _elementRef, params, renderer) {
                    _classCallCheck(this, ToastCmp);

                    this._nav = _nav;
                    this._viewCtrl = _viewCtrl;
                    this._config = _config;
                    this._elementRef = _elementRef;
                    this.dismissTimeout = undefined;
                    this.d = params.data;
                    if (this.d.cssClass) {
                        renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
                    }
                    this.id = ++toastIds;
                    if (this.d.message) {
                        this.hdrId = 'toast-hdr-' + this.id;
                    }
                }

                _createClass(ToastCmp, [{
                    key: "ngAfterViewInit",
                    value: function ngAfterViewInit() {
                        var _this2 = this;

                        // if there's a `duration` set, automatically dismiss.
                        if (this.d.duration) {
                            this.dismissTimeout = setTimeout(function () {
                                _this2.dismiss('backdrop');
                            }, this.d.duration);
                        }
                        this.enabled = true;
                    }
                }, {
                    key: "ionViewDidEnter",
                    value: function ionViewDidEnter() {
                        var _document = document;
                        var activeElement = _document.activeElement;

                        if (activeElement) {
                            activeElement.blur();
                        }
                        var focusableEle = this._elementRef.nativeElement.querySelector('button');
                        if (focusableEle) {
                            focusableEle.focus();
                        }
                    }
                }, {
                    key: "cbClick",
                    value: function cbClick() {
                        if (this.enabled) {
                            this.dismiss('close');
                        }
                    }
                }, {
                    key: "dismiss",
                    value: function dismiss(role) {
                        clearTimeout(this.dismissTimeout);
                        this.dismissTimeout = undefined;
                        return this._viewCtrl.dismiss(null, role);
                    }
                }]);

                return ToastCmp;
            }();

            ToastCmp = __decorate([Component({
                selector: 'ion-toast',
                template: "\n    <div class=\"toast-wrapper\"\n      [class.toast-bottom]=\"d.position === 'bottom'\"\n      [class.toast-middle]=\"d.position === 'middle'\"\n      [class.toast-top]=\"d.position === 'top'\"\n      >\n      <div class=\"toast-container\">\n        <div class=\"toast-message\" id=\"{{hdrId}}\" *ngIf=\"d.message\">{{d.message}}</div>\n        <button clear class=\"toast-button\" *ngIf=\"d.showCloseButton\" (click)=\"cbClick()\">\n          {{ d.closeButtonText || 'Close' }}\n         </button>\n      </div>\n    </div>\n  ",
                host: {
                    'role': 'dialog',
                    '[attr.aria-labelledby]': 'hdrId',
                    '[attr.aria-describedby]': 'descId'
                }
            }), __metadata('design:paramtypes', [typeof (_a = typeof NavController !== 'undefined' && NavController) === 'function' && _a || Object, typeof (_b = typeof ViewController !== 'undefined' && ViewController) === 'function' && _b || Object, typeof (_c = typeof Config !== 'undefined' && Config) === 'function' && _c || Object, typeof (_d = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _d || Object, typeof (_e = typeof NavParams !== 'undefined' && NavParams) === 'function' && _e || Object, typeof (_f = typeof Renderer !== 'undefined' && Renderer) === 'function' && _f || Object])], ToastCmp);

            ToastSlideIn = function (_Transition) {
                _inherits(ToastSlideIn, _Transition);

                function ToastSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ToastSlideIn);

                    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastSlideIn).call(this, enteringView, leavingView, opts));

                    // DOM READS
                    var ele = enteringView.pageRef().nativeElement;
                    var wrapperEle = ele.querySelector('.toast-wrapper');
                    var wrapper = new Animation(wrapperEle);
                    if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
                        // top
                        // by default, it is -100% hidden (above the screen)
                        // so move from that to 10px below top: 0px;
                        wrapper.fromTo('translateY', '-100%', 10 + "px");
                    } else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
                        // Middle
                        // just center it and fade it in
                        var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
                        // DOM WRITE
                        wrapperEle.style.top = topPosition + "px";
                        wrapper.fromTo('opacity', 0.01, 1);
                    } else {
                        // bottom
                        // by default, it is 100% hidden (below the screen),
                        // so move from that to 10 px above bottom: 0px
                        wrapper.fromTo('translateY', '100%', 0 - 10 + "px");
                    }
                    _this3.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(wrapper);
                    return _this3;
                }

                return ToastSlideIn;
            }(Transition);

            ToastSlideOut = function (_Transition2) {
                _inherits(ToastSlideOut, _Transition2);

                function ToastSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ToastSlideOut);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var wrapperEle = ele.querySelector('.toast-wrapper');
                    var wrapper = new Animation(wrapperEle);
                    if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
                        // top
                        // reverse arguments from enter transition
                        wrapper.fromTo('translateY', 10 + "px", '-100%');
                    } else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
                        // Middle
                        // just fade it out
                        wrapper.fromTo('opacity', 0.99, 0);
                    } else {
                        // bottom
                        // reverse arguments from enter transition
                        wrapper.fromTo('translateY', 0 - 10 + "px", '100%');
                    }
                    _this4.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(wrapper);
                    return _this4;
                }

                return ToastSlideOut;
            }(Transition);

            ToastMdSlideIn = function (_Transition3) {
                _inherits(ToastMdSlideIn, _Transition3);

                function ToastMdSlideIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ToastMdSlideIn);

                    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastMdSlideIn).call(this, enteringView, leavingView, opts));

                    // DOM reads
                    var ele = enteringView.pageRef().nativeElement;
                    var wrapperEle = ele.querySelector('.toast-wrapper');
                    var wrapper = new Animation(wrapperEle);
                    if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
                        // top
                        // by default, it is -100% hidden (above the screen)
                        // so move from that to top: 0px;
                        wrapper.fromTo('translateY', '-100%', "0%");
                    } else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
                        // Middle
                        // just center it and fade it in
                        var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
                        // DOM WRITE
                        wrapperEle.style.top = topPosition + "px";
                        wrapper.fromTo('opacity', 0.01, 1);
                    } else {
                        // bottom
                        // by default, it is 100% hidden (below the screen),
                        // so move from that to bottom: 0px
                        wrapper.fromTo('translateY', '100%', "0%");
                    }
                    _this5.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(wrapper);
                    return _this5;
                }

                return ToastMdSlideIn;
            }(Transition);

            ToastMdSlideOut = function (_Transition4) {
                _inherits(ToastMdSlideOut, _Transition4);

                function ToastMdSlideOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ToastMdSlideOut);

                    var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastMdSlideOut).call(this, enteringView, leavingView, opts));

                    var ele = leavingView.pageRef().nativeElement;
                    var wrapperEle = ele.querySelector('.toast-wrapper');
                    var wrapper = new Animation(wrapperEle);
                    if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
                        // top
                        // reverse arguments from enter transition
                        wrapper.fromTo('translateY', 0 + "%", '-100%');
                    } else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
                        // Middle
                        // just fade it out
                        wrapper.fromTo('opacity', 0.99, 0);
                    } else {
                        // bottom
                        // reverse arguments from enter transition
                        wrapper.fromTo('translateY', 0 + "%", '100%');
                    }
                    _this6.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(wrapper);
                    return _this6;
                }

                return ToastMdSlideOut;
            }(Transition);

            ToastWpPopIn = function (_Transition5) {
                _inherits(ToastWpPopIn, _Transition5);

                function ToastWpPopIn(enteringView, leavingView, opts) {
                    _classCallCheck(this, ToastWpPopIn);

                    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastWpPopIn).call(this, enteringView, leavingView, opts));

                    var ele = enteringView.pageRef().nativeElement;
                    var wrapperEle = ele.querySelector('.toast-wrapper');
                    var wrapper = new Animation(wrapperEle);
                    if (enteringView.data && enteringView.data.position === TOAST_POSITION_TOP) {
                        // top
                        wrapper.fromTo('opacity', 0.01, 1);
                        wrapper.fromTo('scale', 1.3, 1);
                    } else if (enteringView.data && enteringView.data.position === TOAST_POSITION_MIDDLE) {
                        // Middle
                        // just center it and fade it in
                        var topPosition = Math.floor(ele.clientHeight / 2 - wrapperEle.clientHeight / 2);
                        // DOM WRITE
                        wrapperEle.style.top = topPosition + "px";
                        wrapper.fromTo('opacity', 0.01, 1);
                        wrapper.fromTo('scale', 1.3, 1);
                    } else {
                        // bottom
                        wrapper.fromTo('opacity', 0.01, 1);
                        wrapper.fromTo('scale', 1.3, 1);
                    }
                    _this7.easing('cubic-bezier(0,0 0.05,1)').duration(200).add(wrapper);
                    return _this7;
                }

                return ToastWpPopIn;
            }(Transition);

            ToastWpPopOut = function (_Transition6) {
                _inherits(ToastWpPopOut, _Transition6);

                function ToastWpPopOut(enteringView, leavingView, opts) {
                    _classCallCheck(this, ToastWpPopOut);

                    var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToastWpPopOut).call(this, enteringView, leavingView, opts));

                    // DOM reads
                    var ele = leavingView.pageRef().nativeElement;
                    var wrapperEle = ele.querySelector('.toast-wrapper');
                    var wrapper = new Animation(wrapperEle);
                    if (leavingView.data && leavingView.data.position === TOAST_POSITION_TOP) {
                        // top
                        // reverse arguments from enter transition
                        wrapper.fromTo('opacity', 0.99, 0);
                        wrapper.fromTo('scale', 1, 1.3);
                    } else if (leavingView.data && leavingView.data.position === TOAST_POSITION_MIDDLE) {
                        // Middle
                        // just fade it out
                        wrapper.fromTo('opacity', 0.99, 0);
                        wrapper.fromTo('scale', 1, 1.3);
                    } else {
                        // bottom
                        // reverse arguments from enter transition
                        wrapper.fromTo('opacity', 0.99, 0);
                        wrapper.fromTo('scale', 1, 1.3);
                    }
                    // DOM writes
                    var EASE = 'ease-out';
                    var DURATION = 150;
                    _this8.easing(EASE).duration(DURATION).add(wrapper);
                    return _this8;
                }

                return ToastWpPopOut;
            }(Transition);

            Transition.register('toast-slide-in', ToastSlideIn);
            Transition.register('toast-slide-out', ToastSlideOut);
            Transition.register('toast-md-slide-in', ToastMdSlideIn);
            Transition.register('toast-md-slide-out', ToastMdSlideOut);
            Transition.register('toast-wp-slide-out', ToastWpPopOut);
            Transition.register('toast-wp-slide-in', ToastWpPopIn);
            toastIds = -1;
        }
    };
});
"use strict";

System.register("ionic-angular/components/menu/menu-close", ["@angular/core", "./menu-controller"], function (_export, _context) {
    "use strict";

    var Directive, HostListener, Input, MenuController, _createClass, _typeof, __decorate, __metadata, MenuClose, _a;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            HostListener = _angularCore.HostListener;
            Input = _angularCore.Input;
        }, function (_menuController) {
            MenuController = _menuController.MenuController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("MenuClose", MenuClose = function () {
                function MenuClose(_menu) {
                    _classCallCheck(this, MenuClose);

                    this._menu = _menu;
                }
                /**
                * @private
                */


                _createClass(MenuClose, [{
                    key: "close",
                    value: function close() {
                        var menu = this._menu.get(this.menuClose);
                        menu && menu.close();
                    }
                }]);

                return MenuClose;
            }());

            _export("MenuClose", MenuClose);

            __decorate([Input(), __metadata('design:type', String)], MenuClose.prototype, "menuClose", void 0);
            __decorate([HostListener('click'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], MenuClose.prototype, "close", null);
            _export("MenuClose", MenuClose = __decorate([Directive({
                selector: '[menuClose]'
            }), __metadata('design:paramtypes', [typeof (_a = typeof MenuController !== 'undefined' && MenuController) === 'function' && _a || Object])], MenuClose));
        }
    };
});
'use strict';

System.register('ionic-angular/components/menu/menu-controller', [], function (_export, _context) {
    "use strict";

    var _createClass, MenuController, menuTypes;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('MenuController', MenuController = function () {
                function MenuController() {
                    _classCallCheck(this, MenuController);

                    this._menus = [];
                }
                /**
                 * Progamatically open the Menu.
                 * @return {Promise} returns a promise when the menu is fully opened
                 */


                _createClass(MenuController, [{
                    key: 'open',
                    value: function open(menuId) {
                        var menu = this.get(menuId);
                        if (menu) {
                            return menu.open();
                        }
                        return Promise.resolve(false);
                    }
                }, {
                    key: 'close',
                    value: function close(menuId) {
                        var menu = void 0;
                        if (menuId) {
                            // find the menu by its id
                            menu = this.get(menuId);
                        } else {
                            // find the menu that is open
                            menu = this._menus.find(function (m) {
                                return m.isOpen;
                            });
                        }
                        if (menu) {
                            // close the menu
                            return menu.close();
                        }
                        return Promise.resolve(false);
                    }
                }, {
                    key: 'tempDisable',
                    value: function tempDisable(temporarilyDisable) {
                        this._menus.forEach(function (menu) {
                            menu.tempDisable(temporarilyDisable);
                        });
                    }
                }, {
                    key: 'toggle',
                    value: function toggle(menuId) {
                        var menu = this.get(menuId);
                        if (menu) {
                            return menu.toggle();
                        }
                        return Promise.resolve(false);
                    }
                }, {
                    key: 'enable',
                    value: function enable(shouldEnable, menuId) {
                        var menu = this.get(menuId);
                        if (menu) {
                            return menu.enable(shouldEnable);
                        }
                    }
                }, {
                    key: 'swipeEnable',
                    value: function swipeEnable(shouldEnable, menuId) {
                        var menu = this.get(menuId);
                        if (menu) {
                            return menu.swipeEnable(shouldEnable);
                        }
                    }
                }, {
                    key: 'isOpen',
                    value: function isOpen(menuId) {
                        var menu = this.get(menuId);
                        return menu && menu.isOpen || false;
                    }
                }, {
                    key: 'isEnabled',
                    value: function isEnabled(menuId) {
                        var menu = this.get(menuId);
                        return menu && menu.enabled || false;
                    }
                }, {
                    key: 'get',
                    value: function get(menuId) {
                        var menu;
                        if (menuId === 'left' || menuId === 'right') {
                            // there could be more than one menu on the same side
                            // so first try to get the enabled one
                            menu = this._menus.find(function (m) {
                                return m.side === menuId && m.enabled;
                            });
                            if (menu) return menu;
                            // didn't find a menu side that is enabled
                            // so try to get the first menu side found
                            return this._menus.find(function (m) {
                                return m.side === menuId;
                            }) || null;
                        } else if (menuId) {
                            // the menuId was not left or right
                            // so try to get the menu by its "id"
                            return this._menus.find(function (m) {
                                return m.id === menuId;
                            }) || null;
                        }
                        // return the first enabled menu
                        menu = this._menus.find(function (m) {
                            return m.enabled;
                        });
                        if (menu) return menu;
                        // get the first menu in the array, if one exists
                        return this._menus.length ? this._menus[0] : null;
                    }
                }, {
                    key: 'getMenus',
                    value: function getMenus() {
                        return this._menus;
                    }
                }, {
                    key: 'register',
                    value: function register(menu) {
                        this._menus.push(menu);
                    }
                }, {
                    key: 'unregister',
                    value: function unregister(menu) {
                        var index = this._menus.indexOf(menu);
                        if (index > -1) {
                            this._menus.splice(index, 1);
                        }
                    }
                }], [{
                    key: 'registerType',
                    value: function registerType(name, cls) {
                        menuTypes[name] = cls;
                    }
                }, {
                    key: 'create',
                    value: function create(type, menuCmp, platform) {
                        return new menuTypes[type](menuCmp, platform);
                    }
                }]);

                return MenuController;
            }());

            _export('MenuController', MenuController);

            menuTypes = {};
        }
    };
});
'use strict';

System.register('ionic-angular/components/menu/menu-gestures', ['../../gestures/slide-edge-gesture', '../../util/util'], function (_export, _context) {
    "use strict";

    var SlideEdgeGesture, assign, _createClass, _get, MenuContentGesture, MenuTargetGesture;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_gesturesSlideEdgeGesture) {
            SlideEdgeGesture = _gesturesSlideEdgeGesture.SlideEdgeGesture;
        }, function (_utilUtil) {
            assign = _utilUtil.assign;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            _export('MenuContentGesture', MenuContentGesture = function (_SlideEdgeGesture) {
                _inherits(MenuContentGesture, _SlideEdgeGesture);

                function MenuContentGesture(menu, contentEle) {
                    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    _classCallCheck(this, MenuContentGesture);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuContentGesture).call(this, contentEle, assign({
                        direction: 'x',
                        edge: menu.side,
                        threshold: 0,
                        maxEdgeStart: menu.maxEdgeStart || 75
                    }, options)));

                    _this.menu = menu;
                    return _this;
                }

                _createClass(MenuContentGesture, [{
                    key: 'canStart',
                    value: function canStart(ev) {
                        var menu = this.menu;
                        if (!menu.enabled || !menu.swipeEnabled) {
                            console.debug('menu can not start, isEnabled:', menu.enabled, 'isSwipeEnabled:', menu.swipeEnabled, 'side:', menu.side);
                            return false;
                        }
                        if (ev.distance > 50) {
                            // the distance is longer than you'd expect a side menu swipe to be
                            console.debug('menu can not start, distance too far:', ev.distance, 'side:', menu.side);
                            return false;
                        }
                        console.debug('menu canStart,', menu.side, 'isOpen', menu.isOpen, 'angle', ev.angle, 'distance', ev.distance);
                        if (menu.side === 'right') {
                            // right side
                            if (menu.isOpen) {
                                // right side, opened
                                return true;
                            } else {
                                // right side, closed
                                if (ev.angle > 140 && ev.angle <= 180 || ev.angle > -140 && ev.angle <= -180) {
                                    return _get(Object.getPrototypeOf(MenuContentGesture.prototype), 'canStart', this).call(this, ev);
                                }
                            }
                        } else {
                            // left side
                            if (menu.isOpen) {
                                // left side, opened
                                return true;
                            } else {
                                // left side, closed
                                if (ev.angle > -40 && ev.angle < 40) {
                                    return _get(Object.getPrototypeOf(MenuContentGesture.prototype), 'canStart', this).call(this, ev);
                                }
                            }
                        }
                        // didn't pass the test, don't open this menu
                        return false;
                    }
                }, {
                    key: 'onSlideBeforeStart',
                    value: function onSlideBeforeStart(slide, ev) {
                        console.debug('menu gesture, onSlideBeforeStart', this.menu.side);
                        this.menu.swipeStart();
                    }
                }, {
                    key: 'onSlide',
                    value: function onSlide(slide, ev) {
                        var z = this.menu.side === 'right' ? slide.min : slide.max;
                        var stepValue = slide.distance / z;
                        console.debug('menu gesture, onSlide', this.menu.side, 'distance', slide.distance, 'min', slide.min, 'max', slide.max, 'z', z, 'stepValue', stepValue);
                        ev.srcEvent.preventDefault();
                        ev.preventDefault();
                        this.menu.swipeProgress(stepValue);
                    }
                }, {
                    key: 'onSlideEnd',
                    value: function onSlideEnd(slide, ev) {
                        var z = this.menu.side === 'right' ? slide.min : slide.max;
                        var currentStepValue = slide.distance / z;
                        z = Math.abs(z * 0.5);
                        var shouldCompleteRight = ev.velocityX >= 0 && (ev.velocityX > 0.2 || slide.delta > z);
                        var shouldCompleteLeft = ev.velocityX <= 0 && (ev.velocityX < -0.2 || slide.delta < -z);
                        console.debug('menu gesture, onSlide', this.menu.side, 'distance', slide.distance, 'delta', slide.delta, 'velocityX', ev.velocityX, 'min', slide.min, 'max', slide.max, 'shouldCompleteLeft', shouldCompleteLeft, 'shouldCompleteRight', shouldCompleteRight, 'currentStepValue', currentStepValue);
                        this.menu.swipeEnd(shouldCompleteLeft, shouldCompleteRight, currentStepValue);
                    }
                }, {
                    key: 'getElementStartPos',
                    value: function getElementStartPos(slide, ev) {
                        if (this.menu.side === 'right') {
                            // right menu
                            return this.menu.isOpen ? slide.min : slide.max;
                        }
                        // left menu
                        return this.menu.isOpen ? slide.max : slide.min;
                    }
                }, {
                    key: 'getSlideBoundaries',
                    value: function getSlideBoundaries() {
                        if (this.menu.side === 'right') {
                            // right menu
                            return {
                                min: -this.menu.width(),
                                max: 0
                            };
                        }
                        // left menu
                        return {
                            min: 0,
                            max: this.menu.width()
                        };
                    }
                }]);

                return MenuContentGesture;
            }(SlideEdgeGesture));

            _export('MenuContentGesture', MenuContentGesture);

            _export('MenuTargetGesture', MenuTargetGesture = function (_MenuContentGesture) {
                _inherits(MenuTargetGesture, _MenuContentGesture);

                function MenuTargetGesture(menu, menuEle) {
                    _classCallCheck(this, MenuTargetGesture);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(MenuTargetGesture).call(this, menu, menuEle, {
                        maxEdgeStart: 0
                    }));
                }

                return MenuTargetGesture;
            }(MenuContentGesture));

            _export('MenuTargetGesture', MenuTargetGesture);
        }
    };
});
"use strict";

System.register("ionic-angular/components/menu/menu-toggle", ["@angular/core", "./menu-controller", "../navbar/navbar", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, Input, HostListener, Optional, MenuController, Navbar, ViewController, _createClass, _typeof, __decorate, __metadata, __param, MenuToggle, _a, _b, _c, _d;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Input = _angularCore.Input;
            HostListener = _angularCore.HostListener;
            Optional = _angularCore.Optional;
        }, function (_menuController) {
            MenuController = _menuController.MenuController;
        }, function (_navbarNavbar) {
            Navbar = _navbarNavbar.Navbar;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("MenuToggle", MenuToggle = function () {
                function MenuToggle(_menu, elementRef, _viewCtrl, _navbar) {
                    _classCallCheck(this, MenuToggle);

                    this._menu = _menu;
                    this._viewCtrl = _viewCtrl;
                    this._navbar = _navbar;
                    this._inNavbar = !!_navbar;
                }
                /**
                * @private
                */


                _createClass(MenuToggle, [{
                    key: "toggle",
                    value: function toggle() {
                        var menu = this._menu.get(this.menuToggle);
                        menu && menu.toggle();
                    }
                }, {
                    key: "isHidden",
                    get: function get() {
                        if (this._inNavbar && this._viewCtrl) {
                            if (this._viewCtrl.isFirst()) {
                                // this is the first view, so it should always show
                                return false;
                            }
                            var menu = this._menu.get(this.menuToggle);
                            if (menu) {
                                // this is not the root view, so see if this menu
                                // is configured to still be enabled if it's not the root view
                                return !menu.persistent;
                            }
                        }
                        return false;
                    }
                }]);

                return MenuToggle;
            }());

            _export("MenuToggle", MenuToggle);

            __decorate([Input(), __metadata('design:type', String)], MenuToggle.prototype, "menuToggle", void 0);
            __decorate([HostListener('click'), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], MenuToggle.prototype, "toggle", null);
            _export("MenuToggle", MenuToggle = __decorate([Directive({
                selector: '[menuToggle]',
                host: {
                    '[hidden]': 'isHidden',
                    'menuToggle': '' // ensures the attr is there for css when using [menuToggle]
                }
            }), __param(2, Optional()), __param(3, Optional()), __metadata('design:paramtypes', [typeof (_a = typeof MenuController !== 'undefined' && MenuController) === 'function' && _a || Object, typeof (_b = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _b || Object, typeof (_c = typeof ViewController !== 'undefined' && ViewController) === 'function' && _c || Object, typeof (_d = typeof Navbar !== 'undefined' && Navbar) === 'function' && _d || Object])], MenuToggle));
        }
    };
});
'use strict';

System.register('ionic-angular/components/menu/menu-types', ['../../animations/animation', './menu-controller'], function (_export, _context) {
    "use strict";

    var Animation, MenuController, _createClass, MenuType, MenuRevealType, MenuPushType, MenuOverlayType;

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_animationsAnimation) {
            Animation = _animationsAnimation.Animation;
        }, function (_menuController) {
            MenuController = _menuController.MenuController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('MenuType', MenuType = function () {
                function MenuType() {
                    _classCallCheck(this, MenuType);

                    this.ani = new Animation();
                }

                _createClass(MenuType, [{
                    key: 'setOpen',
                    value: function setOpen(shouldOpen, done) {
                        this.ani.onFinish(done, true).reverse(!shouldOpen).play();
                    }
                }, {
                    key: 'setProgressStart',
                    value: function setProgressStart(isOpen) {
                        this.isOpening = !isOpen;
                        // the cloned animation should not use an easing curve during seek
                        this.ani.reverse(isOpen).progressStart();
                    }
                }, {
                    key: 'setProgessStep',
                    value: function setProgessStep(stepValue) {
                        // adjust progress value depending if it opening or closing
                        this.ani.progressStep(stepValue);
                    }
                }, {
                    key: 'setProgressEnd',
                    value: function setProgressEnd(shouldComplete, currentStepValue, done) {
                        var _this = this;

                        var isOpen = this.isOpening && shouldComplete;
                        if (!this.isOpening && !shouldComplete) {
                            isOpen = true;
                        }
                        this.ani.onFinish(function () {
                            _this.isOpening = false;
                            done(isOpen);
                        }, true);
                        this.ani.progressEnd(shouldComplete, currentStepValue);
                    }
                }, {
                    key: 'destroy',
                    value: function destroy() {
                        this.ani && this.ani.destroy();
                    }
                }]);

                return MenuType;
            }());

            _export('MenuType', MenuType);

            MenuRevealType = function (_MenuType) {
                _inherits(MenuRevealType, _MenuType);

                function MenuRevealType(menu, platform) {
                    _classCallCheck(this, MenuRevealType);

                    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuRevealType).call(this));

                    var openedX = menu.width() * (menu.side === 'right' ? -1 : 1) + 'px';
                    _this2.ani.easing('ease').duration(250);
                    var contentOpen = new Animation(menu.getContentElement());
                    contentOpen.fromTo('translateX', '0px', openedX);
                    _this2.ani.add(contentOpen);
                    return _this2;
                }

                return MenuRevealType;
            }(MenuType);

            MenuController.registerType('reveal', MenuRevealType);
            /**
             * @private
             * Menu Push Type
             * The content slides over to reveal the menu underneath.
             * The menu itself also slides over to reveal its bad self.
             */

            MenuPushType = function (_MenuType2) {
                _inherits(MenuPushType, _MenuType2);

                function MenuPushType(menu, platform) {
                    _classCallCheck(this, MenuPushType);

                    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuPushType).call(this));

                    _this3.ani.easing('ease').duration(250);
                    var contentOpenedX = void 0,
                        menuClosedX = void 0,
                        menuOpenedX = void 0;
                    if (menu.side === 'right') {
                        // right side
                        contentOpenedX = -menu.width() + 'px';
                        menuClosedX = menu.width() + 'px';
                        menuOpenedX = '0px';
                    } else {
                        contentOpenedX = menu.width() + 'px';
                        menuOpenedX = '0px';
                        menuClosedX = -menu.width() + 'px';
                    }
                    var menuAni = new Animation(menu.getMenuElement());
                    menuAni.fromTo('translateX', menuClosedX, menuOpenedX);
                    _this3.ani.add(menuAni);
                    var contentApi = new Animation(menu.getContentElement());
                    contentApi.fromTo('translateX', '0px', contentOpenedX);
                    _this3.ani.add(contentApi);
                    return _this3;
                }

                return MenuPushType;
            }(MenuType);

            MenuController.registerType('push', MenuPushType);
            /**
             * @private
             * Menu Overlay Type
             * The menu slides over the content. The content
             * itself, which is under the menu, does not move.
             */

            MenuOverlayType = function (_MenuType3) {
                _inherits(MenuOverlayType, _MenuType3);

                function MenuOverlayType(menu, platform) {
                    _classCallCheck(this, MenuOverlayType);

                    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuOverlayType).call(this));

                    _this4.ani.easing('ease').duration(250);
                    var closedX = void 0,
                        openedX = void 0;
                    if (menu.side === 'right') {
                        // right side
                        closedX = 8 + menu.width() + 'px';
                        openedX = '0px';
                    } else {
                        // left side
                        closedX = -(8 + menu.width()) + 'px';
                        openedX = '0px';
                    }
                    var menuAni = new Animation(menu.getMenuElement());
                    menuAni.fromTo('translateX', closedX, openedX);
                    _this4.ani.add(menuAni);
                    var backdropApi = new Animation(menu.getBackdropElement());
                    backdropApi.fromTo('opacity', 0.01, 0.35);
                    _this4.ani.add(backdropApi);
                    return _this4;
                }

                return MenuOverlayType;
            }(MenuType);

            MenuController.registerType('overlay', MenuOverlayType);
        }
    };
});
"use strict";

System.register("ionic-angular/components/menu/menu", ["@angular/core", "../backdrop/backdrop", "../../config/config", "../ion", "../../util/util", "../../util/keyboard", "./menu-gestures", "./menu-controller", "../../platform/platform"], function (_export, _context) {
    "use strict";

    var ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, NgZone, Output, Renderer, ViewChild, ViewEncapsulation, Backdrop, Config, Ion, isTrueProperty, Keyboard, MenuContentGesture, MenuTargetGesture, MenuController, Platform, _createClass, _typeof, __decorate, __metadata, Menu, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            Input = _angularCore.Input;
            NgZone = _angularCore.NgZone;
            Output = _angularCore.Output;
            Renderer = _angularCore.Renderer;
            ViewChild = _angularCore.ViewChild;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_backdropBackdrop) {
            Backdrop = _backdropBackdrop.Backdrop;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_utilKeyboard) {
            Keyboard = _utilKeyboard.Keyboard;
        }, function (_menuGestures) {
            MenuContentGesture = _menuGestures.MenuContentGesture;
            MenuTargetGesture = _menuGestures.MenuTargetGesture;
        }, function (_menuController) {
            MenuController = _menuController.MenuController;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("Menu", Menu = function (_Ion) {
                _inherits(Menu, _Ion);

                function Menu(_menuCtrl, _elementRef, _config, _platform, _renderer, _keyboard, _zone) {
                    _classCallCheck(this, Menu);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Menu).call(this, _elementRef));

                    _this._menuCtrl = _menuCtrl;
                    _this._elementRef = _elementRef;
                    _this._config = _config;
                    _this._platform = _platform;
                    _this._renderer = _renderer;
                    _this._keyboard = _keyboard;
                    _this._zone = _zone;
                    _this._preventTime = 0;
                    _this._isEnabled = true;
                    _this._isSwipeEnabled = true;
                    _this._isPers = false;
                    _this._init = false;
                    /**
                     * @private
                     */
                    _this.isOpen = false;
                    /**
                     * @output {event} When the menu is being dragged open.
                     */
                    _this.ionDrag = new EventEmitter();
                    /**
                     * @output {event} When the menu has been opened.
                     */
                    _this.ionOpen = new EventEmitter();
                    /**
                     * @output {event} When the menu has been closed.
                     */
                    _this.ionClose = new EventEmitter();
                    return _this;
                }
                /**
                 * @input {boolean} Whether or not the menu should be enabled. Default `true`.
                 */


                _createClass(Menu, [{
                    key: "ngOnInit",
                    value: function ngOnInit() {
                        var self = this;
                        self._init = true;
                        var content = self.content;
                        self._cntEle = content instanceof Node ? content : content && content.getNativeElement && content.getNativeElement();
                        // requires content element
                        if (!self._cntEle) {
                            return console.error('Menu: must have a [content] element to listen for drag events on. Example:\n\n<ion-menu [content]="content"></ion-menu>\n\n<ion-nav #content></ion-nav>');
                        }
                        // normalize the "side"
                        if (self.side !== 'left' && self.side !== 'right') {
                            self.side = 'left';
                        }
                        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'side', self.side);
                        // normalize the "type"
                        if (!self.type) {
                            self.type = self._config.get('menuType');
                        }
                        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'type', self.type);
                        // add the gestures
                        self._cntGesture = new MenuContentGesture(self, self.getContentElement());
                        self._menuGesture = new MenuTargetGesture(self, self.getNativeElement());
                        // register listeners if this menu is enabled
                        // check if more than one menu is on the same side
                        var hasEnabledSameSideMenu = self._menuCtrl.getMenus().some(function (m) {
                            return m.side === self.side && m.enabled;
                        });
                        if (hasEnabledSameSideMenu) {
                            // auto-disable if another menu on the same side is already enabled
                            self._isEnabled = false;
                        }
                        self._setListeners();
                        // create a reusable click handler on this instance, but don't assign yet
                        self.onContentClick = function (ev) {
                            if (self._isEnabled) {
                                ev.preventDefault();
                                ev.stopPropagation();
                                self.close();
                            }
                        };
                        self._cntEle.classList.add('menu-content');
                        self._cntEle.classList.add('menu-content-' + self.type);
                        // register this menu with the app's menu controller
                        self._menuCtrl.register(self);
                    }
                }, {
                    key: "bdClick",
                    value: function bdClick(ev) {
                        console.debug('backdrop clicked');
                        ev.preventDefault();
                        ev.stopPropagation();
                        this._menuCtrl.close();
                    }
                }, {
                    key: "_setListeners",
                    value: function _setListeners() {
                        var self = this;
                        if (self._init) {
                            // only listen/unlisten if the menu has initialized
                            if (self._isEnabled && self._isSwipeEnabled && !self._cntGesture.isListening) {
                                // should listen, but is not currently listening
                                console.debug('menu, gesture listen', self.side);
                                self._zone.runOutsideAngular(function () {
                                    self._cntGesture.listen();
                                    self._menuGesture.listen();
                                });
                            } else if (self._cntGesture.isListening && (!self._isEnabled || !self._isSwipeEnabled)) {
                                // should not listen, but is currently listening
                                console.debug('menu, gesture unlisten', self.side);
                                self._cntGesture.unlisten();
                                self._menuGesture.unlisten();
                            }
                        }
                    }
                }, {
                    key: "_getType",
                    value: function _getType() {
                        if (!this._type) {
                            this._type = MenuController.create(this.type, this, this._platform);
                            if (this._config.get('animate') === false) {
                                this._type.ani.duration(0);
                            }
                        }
                        return this._type;
                    }
                }, {
                    key: "setOpen",
                    value: function setOpen(shouldOpen) {
                        var _this2 = this;

                        // _isPrevented is used to prevent unwanted opening/closing after swiping open/close
                        // or swiping open the menu while pressing down on the MenuToggle button
                        if (shouldOpen && this.isOpen || this._isPrevented()) {
                            return Promise.resolve(this.isOpen);
                        }
                        this._before();
                        return new Promise(function (resolve) {
                            _this2._getType().setOpen(shouldOpen, function () {
                                _this2._after(shouldOpen);
                                resolve(_this2.isOpen);
                            });
                        });
                    }
                }, {
                    key: "swipeStart",
                    value: function swipeStart() {
                        // user started swiping the menu open/close
                        if (this._isEnabled && this._isSwipeEnabled && !this._isPrevented()) {
                            this._before();
                            this._getType().setProgressStart(this.isOpen);
                        }
                    }
                }, {
                    key: "swipeProgress",
                    value: function swipeProgress(stepValue) {
                        // user actively dragging the menu
                        if (this._isEnabled && this._isSwipeEnabled) {
                            this._prevent();
                            this._getType().setProgessStep(stepValue);
                            this.ionDrag.emit(stepValue);
                        }
                    }
                }, {
                    key: "swipeEnd",
                    value: function swipeEnd(shouldCompleteLeft, shouldCompleteRight, stepValue) {
                        var _this3 = this;

                        // user has finished dragging the menu
                        if (this._isEnabled && this._isSwipeEnabled) {
                            this._prevent();
                            var opening = !this.isOpen;
                            var shouldComplete = false;
                            if (opening) {
                                shouldComplete = this.side === 'right' ? shouldCompleteLeft : shouldCompleteRight;
                            } else {
                                shouldComplete = this.side === 'right' ? shouldCompleteRight : shouldCompleteLeft;
                            }
                            this._getType().setProgressEnd(shouldComplete, stepValue, function (isOpen) {
                                console.debug('menu, swipeEnd', _this3.side);
                                _this3._after(isOpen);
                            });
                        }
                    }
                }, {
                    key: "_before",
                    value: function _before() {
                        // this places the menu into the correct location before it animates in
                        // this css class doesn't actually kick off any animations
                        if (this._isEnabled) {
                            this.getNativeElement().classList.add('show-menu');
                            this.getBackdropElement().classList.add('show-backdrop');
                            this._prevent();
                            this._keyboard.close();
                        }
                    }
                }, {
                    key: "_after",
                    value: function _after(isOpen) {
                        // keep opening/closing the menu disabled for a touch more yet
                        // only add listeners/css if it's enabled and isOpen
                        // and only remove listeners/css if it's not open
                        // emit opened/closed events
                        if (this._isEnabled && isOpen || !isOpen) {
                            this._prevent();
                            this.isOpen = isOpen;
                            this._cntEle.classList[isOpen ? 'add' : 'remove']('menu-content-open');
                            this._cntEle.removeEventListener('click', this.onContentClick);
                            if (isOpen) {
                                this._cntEle.addEventListener('click', this.onContentClick);
                                this.ionOpen.emit(true);
                            } else {
                                this.getNativeElement().classList.remove('show-menu');
                                this.getBackdropElement().classList.remove('show-backdrop');
                                this.ionClose.emit(true);
                            }
                        }
                    }
                }, {
                    key: "tempDisable",
                    value: function tempDisable(temporarilyDisable) {
                        if (temporarilyDisable) {
                            this._prevEnabled = this._isEnabled;
                            this._getType().setProgessStep(0);
                            this.enable(false);
                        } else {
                            this.enable(this._prevEnabled);
                            this._after(false);
                        }
                    }
                }, {
                    key: "_prevent",
                    value: function _prevent() {
                        // used to prevent unwanted opening/closing after swiping open/close
                        // or swiping open the menu while pressing down on the MenuToggle
                        this._preventTime = Date.now() + 20;
                    }
                }, {
                    key: "_isPrevented",
                    value: function _isPrevented() {
                        return this._preventTime > Date.now();
                    }
                }, {
                    key: "open",
                    value: function open() {
                        return this.setOpen(true);
                    }
                }, {
                    key: "close",
                    value: function close() {
                        return this.setOpen(false);
                    }
                }, {
                    key: "toggle",
                    value: function toggle() {
                        return this.setOpen(!this.isOpen);
                    }
                }, {
                    key: "enable",
                    value: function enable(shouldEnable) {
                        var _this4 = this;

                        this.enabled = shouldEnable;
                        if (!shouldEnable && this.isOpen) {
                            // close if this menu is open, and should not be enabled
                            this.close();
                        }
                        if (shouldEnable) {
                            // if this menu should be enabled
                            // then find all the other menus on this same side
                            // and automatically disable other same side menus
                            var sameSideMenus = this._menuCtrl.getMenus().filter(function (m) {
                                return m.side === _this4.side && m !== _this4;
                            }).map(function (m) {
                                return m.enabled = false;
                            });
                        }
                        return this;
                    }
                }, {
                    key: "swipeEnable",
                    value: function swipeEnable(shouldEnable) {
                        this.swipeEnabled = shouldEnable;
                        return this;
                    }
                }, {
                    key: "getMenuElement",
                    value: function getMenuElement() {
                        return this.getNativeElement();
                    }
                }, {
                    key: "getContentElement",
                    value: function getContentElement() {
                        return this._cntEle;
                    }
                }, {
                    key: "getBackdropElement",
                    value: function getBackdropElement() {
                        return this.backdrop.elementRef.nativeElement;
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._menuCtrl.unregister(this);
                        this._cntGesture && this._cntGesture.destroy();
                        this._menuGesture && this._menuGesture.destroy();
                        this._type && this._type.destroy();
                        this._resizeUnreg && this._resizeUnreg();
                        this._cntEle = null;
                    }
                }, {
                    key: "enabled",
                    get: function get() {
                        return this._isEnabled;
                    },
                    set: function set(val) {
                        this._isEnabled = isTrueProperty(val);
                        this._setListeners();
                    }
                }, {
                    key: "swipeEnabled",
                    get: function get() {
                        return this._isSwipeEnabled;
                    },
                    set: function set(val) {
                        this._isSwipeEnabled = isTrueProperty(val);
                        this._setListeners();
                    }
                }, {
                    key: "persistent",
                    get: function get() {
                        return this._isPers;
                    },
                    set: function set(val) {
                        this._isPers = isTrueProperty(val);
                    }
                }]);

                return Menu;
            }(Ion));

            _export("Menu", Menu);

            __decorate([ViewChild(Backdrop), __metadata('design:type', typeof (_a = typeof Backdrop !== 'undefined' && Backdrop) === 'function' && _a || Object)], Menu.prototype, "backdrop", void 0);
            __decorate([Input(), __metadata('design:type', Object)], Menu.prototype, "content", void 0);
            __decorate([Input(), __metadata('design:type', String)], Menu.prototype, "id", void 0);
            __decorate([Input(), __metadata('design:type', String)], Menu.prototype, "side", void 0);
            __decorate([Input(), __metadata('design:type', String)], Menu.prototype, "type", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], Menu.prototype, "enabled", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Menu.prototype, "swipeEnabled", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Menu.prototype, "persistent", null);
            __decorate([Input(), __metadata('design:type', Number)], Menu.prototype, "maxEdgeStart", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_b = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _b || Object)], Menu.prototype, "ionDrag", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_c = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _c || Object)], Menu.prototype, "ionOpen", void 0);
            __decorate([Output(), __metadata('design:type', typeof (_d = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _d || Object)], Menu.prototype, "ionClose", void 0);
            _export("Menu", Menu = __decorate([Component({
                selector: 'ion-menu',
                host: {
                    'role': 'navigation'
                },
                template: '<ng-content></ng-content>' + '<ion-backdrop (click)="bdClick($event)" disableScroll="false"></ion-backdrop>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __metadata('design:paramtypes', [typeof (_e = typeof MenuController !== 'undefined' && MenuController) === 'function' && _e || Object, typeof (_f = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _f || Object, typeof (_g = typeof Config !== 'undefined' && Config) === 'function' && _g || Object, typeof (_h = typeof Platform !== 'undefined' && Platform) === 'function' && _h || Object, typeof (_j = typeof Renderer !== 'undefined' && Renderer) === 'function' && _j || Object, typeof (_k = typeof Keyboard !== 'undefined' && Keyboard) === 'function' && _k || Object, typeof (_l = typeof NgZone !== 'undefined' && NgZone) === 'function' && _l || Object])], Menu));
        }
    };
});
"use strict";

System.register("ionic-angular/components/toggle/toggle", ["@angular/core", "@angular/common", "../../util/form", "../../util/util", "../item/item", "../../util/dom", "../../util/ui-event-manager"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, Provider, Renderer, ViewEncapsulation, NG_VALUE_ACCESSOR, Form, isTrueProperty, Item, pointerCoord, UIEventManager, _createClass, _typeof, __decorate, __metadata, __param, TOGGLE_VALUE_ACCESSOR, Toggle, _a, _b, _c, _d, _e;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            EventEmitter = _angularCore.EventEmitter;
            forwardRef = _angularCore.forwardRef;
            Input = _angularCore.Input;
            Optional = _angularCore.Optional;
            Output = _angularCore.Output;
            Provider = _angularCore.Provider;
            Renderer = _angularCore.Renderer;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularCommon) {
            NG_VALUE_ACCESSOR = _angularCommon.NG_VALUE_ACCESSOR;
        }, function (_utilForm) {
            Form = _utilForm.Form;
        }, function (_utilUtil) {
            isTrueProperty = _utilUtil.isTrueProperty;
        }, function (_itemItem) {
            Item = _itemItem.Item;
        }, function (_utilDom) {
            pointerCoord = _utilDom.pointerCoord;
        }, function (_utilUiEventManager) {
            UIEventManager = _utilUiEventManager.UIEventManager;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            TOGGLE_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, { useExisting: forwardRef(function () {
                    return Toggle;
                }), multi: true });

            _export("Toggle", Toggle = function () {
                function Toggle(_form, _elementRef, _renderer, _item) {
                    _classCallCheck(this, Toggle);

                    this._form = _form;
                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this._item = _item;
                    this._checked = false;
                    this._disabled = false;
                    this._activated = false;
                    this._msPrv = 0;
                    this._events = new UIEventManager();
                    /**
                     * @output {Toggle} expression to evaluate when the toggle value changes
                     */
                    this.ionChange = new EventEmitter();
                    this._form.register(this);
                    if (_item) {
                        this.id = 'tgl-' + _item.registerInput('toggle');
                        this._labelId = 'lbl-' + _item.id;
                        this._item.setCssClass('item-toggle', true);
                    }
                }
                /**
                 * @private
                 */


                _createClass(Toggle, [{
                    key: "pointerDown",
                    value: function pointerDown(ev) {
                        this._startX = pointerCoord(ev).x;
                        this._activated = true;
                        return true;
                    }
                }, {
                    key: "pointerMove",
                    value: function pointerMove(ev) {
                        if (this._startX) {
                            var currentX = pointerCoord(ev).x;
                            console.debug('toggle, pointerMove', ev.type, currentX);
                            if (this._checked) {
                                if (currentX + 15 < this._startX) {
                                    this.onChange(false);
                                    this._startX = currentX;
                                    this._activated = true;
                                }
                            } else if (currentX - 15 > this._startX) {
                                this.onChange(true);
                                this._startX = currentX;
                                this._activated = currentX < this._startX + 5;
                            }
                        }
                    }
                }, {
                    key: "pointerUp",
                    value: function pointerUp(ev) {
                        if (this._startX) {
                            var endX = pointerCoord(ev).x;
                            if (this.checked) {
                                if (this._startX + 4 > endX) {
                                    this.onChange(false);
                                }
                            } else if (this._startX - 4 < endX) {
                                this.onChange(true);
                            }
                            this._activated = false;
                            this._startX = null;
                        }
                    }
                }, {
                    key: "_setChecked",
                    value: function _setChecked(isChecked) {
                        if (isChecked !== this._checked) {
                            this._checked = isChecked;
                            if (this._init) {
                                this.ionChange.emit(this);
                            }
                            this._item && this._item.setCssClass('item-toggle-checked', isChecked);
                        }
                    }
                }, {
                    key: "writeValue",
                    value: function writeValue(val) {
                        this._setChecked(isTrueProperty(val));
                    }
                }, {
                    key: "registerOnChange",
                    value: function registerOnChange(fn) {
                        var _this = this;

                        this._fn = fn;
                        this.onChange = function (isChecked) {
                            console.debug('toggle, onChange', isChecked);
                            fn(isChecked);
                            _this._setChecked(isChecked);
                            _this.onTouched();
                        };
                    }
                }, {
                    key: "registerOnTouched",
                    value: function registerOnTouched(fn) {
                        this.onTouched = fn;
                    }
                }, {
                    key: "onChange",
                    value: function onChange(isChecked) {
                        // used when this input does not have an ngModel or ngControl
                        console.debug('toggle, onChange (no ngModel)', isChecked);
                        this._setChecked(isChecked);
                        this.onTouched();
                    }
                }, {
                    key: "onTouched",
                    value: function onTouched() {}
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        var _this2 = this;

                        this._init = true;
                        this._events.pointerEventsRef(this._elementRef, function (ev) {
                            return _this2.pointerDown(ev);
                        }, function (ev) {
                            return _this2.pointerMove(ev);
                        }, function (ev) {
                            return _this2.pointerUp(ev);
                        });
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._form.deregister(this);
                        this._events.unlistenAll();
                    }
                }, {
                    key: "checked",
                    get: function get() {
                        return this._checked;
                    },
                    set: function set(val) {
                        this._setChecked(isTrueProperty(val));
                        this.onChange(this._checked);
                    }
                }, {
                    key: "disabled",
                    get: function get() {
                        return this._disabled;
                    },
                    set: function set(val) {
                        this._disabled = isTrueProperty(val);
                        this._item && this._item.setCssClass('item-toggle-disabled', this._disabled);
                    }
                }]);

                return Toggle;
            }());

            _export("Toggle", Toggle);

            __decorate([Output(), __metadata('design:type', typeof (_a = typeof EventEmitter !== 'undefined' && EventEmitter) === 'function' && _a || Object)], Toggle.prototype, "ionChange", void 0);
            __decorate([Input(), __metadata('design:type', Boolean)], Toggle.prototype, "checked", null);
            __decorate([Input(), __metadata('design:type', Boolean)], Toggle.prototype, "disabled", null);
            _export("Toggle", Toggle = __decorate([Component({
                selector: 'ion-toggle',
                template: '<div class="toggle-icon" [class.toggle-checked]="_checked" [class.toggle-activated]="_activated">' + '<div class="toggle-inner"></div>' + '</div>' + '<button role="checkbox" ' + 'type="button" ' + 'category="item-cover" ' + '[id]="id" ' + '[attr.aria-checked]="_checked" ' + '[attr.aria-labelledby]="_labelId" ' + '[attr.aria-disabled]="_disabled" ' + 'class="item-cover">' + '</button>',
                host: {
                    '[class.toggle-disabled]': '_disabled'
                },
                providers: [TOGGLE_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            }), __param(3, Optional()), __metadata('design:paramtypes', [typeof (_b = typeof Form !== 'undefined' && Form) === 'function' && _b || Object, typeof (_c = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _c || Object, typeof (_d = typeof Renderer !== 'undefined' && Renderer) === 'function' && _d || Object, typeof (_e = typeof Item !== 'undefined' && Item) === 'function' && _e || Object])], Toggle));
        }
    };
});
"use strict";

System.register("ionic-angular/components/toolbar/toolbar-item", ["@angular/core", "../button/button", "../navbar/navbar", "./toolbar"], function (_export, _context) {
    "use strict";

    var Directive, ElementRef, Optional, forwardRef, Inject, ContentChildren, Button, Navbar, Toolbar, _createClass, _typeof, __decorate, __metadata, __param, ToolbarItem, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Optional = _angularCore.Optional;
            forwardRef = _angularCore.forwardRef;
            Inject = _angularCore.Inject;
            ContentChildren = _angularCore.ContentChildren;
        }, function (_buttonButton) {
            Button = _buttonButton.Button;
        }, function (_navbarNavbar) {
            Navbar = _navbarNavbar.Navbar;
        }, function (_toolbar) {
            Toolbar = _toolbar.Toolbar;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("ToolbarItem", ToolbarItem = function () {
                function ToolbarItem(elementRef, toolbar, navbar) {
                    _classCallCheck(this, ToolbarItem);

                    toolbar && toolbar.addItemRef(elementRef);
                    navbar && navbar.addItemRef(elementRef);
                    this.inToolbar = !!(toolbar || navbar);
                }

                _createClass(ToolbarItem, [{
                    key: "_buttons",
                    set: function set(buttons) {
                        if (this.inToolbar) {
                            Button.setRoles(buttons, 'bar-button');
                        }
                    }
                }]);

                return ToolbarItem;
            }());

            _export("ToolbarItem", ToolbarItem);

            __decorate([ContentChildren(Button), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], ToolbarItem.prototype, "_buttons", null);
            _export("ToolbarItem", ToolbarItem = __decorate([Directive({
                selector: 'ion-buttons,[menuToggle]'
            }), __param(1, Optional()), __param(2, Optional()), __param(2, Inject(forwardRef(function () {
                return Navbar;
            }))), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object, typeof (_b = typeof Toolbar !== 'undefined' && Toolbar) === 'function' && _b || Object, typeof (_c = typeof Navbar !== 'undefined' && Navbar) === 'function' && _c || Object])], ToolbarItem));
        }
    };
});
"use strict";

System.register("ionic-angular/components/toolbar/toolbar-title", ["@angular/core", "../ion", "../navbar/navbar", "./toolbar"], function (_export, _context) {
    "use strict";

    var Component, ElementRef, Optional, forwardRef, Inject, ChangeDetectionStrategy, ViewEncapsulation, Ion, Navbar, Toolbar, _createClass, _typeof, __decorate, __metadata, __param, ToolbarTitle, _a, _b, _c;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_angularCore) {
            Component = _angularCore.Component;
            ElementRef = _angularCore.ElementRef;
            Optional = _angularCore.Optional;
            forwardRef = _angularCore.forwardRef;
            Inject = _angularCore.Inject;
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_navbarNavbar) {
            Navbar = _navbarNavbar.Navbar;
        }, function (_toolbar) {
            Toolbar = _toolbar.Toolbar;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("ToolbarTitle", ToolbarTitle = function (_Ion) {
                _inherits(ToolbarTitle, _Ion);

                function ToolbarTitle(_elementRef, toolbar, navbar) {
                    _classCallCheck(this, ToolbarTitle);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolbarTitle).call(this, _elementRef));

                    _this._elementRef = _elementRef;
                    toolbar && toolbar.setTitleCmp(_this);
                    navbar && navbar.setTitleCmp(_this);
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(ToolbarTitle, [{
                    key: "getTitleText",
                    value: function getTitleText() {
                        return this._elementRef.nativeElement.textContent;
                    }
                }]);

                return ToolbarTitle;
            }(Ion));

            _export("ToolbarTitle", ToolbarTitle);

            _export("ToolbarTitle", ToolbarTitle = __decorate([Component({
                selector: 'ion-title',
                template: '<div class="toolbar-title">' + '<ng-content></ng-content>' + '</div>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }), __param(1, Optional()), __param(2, Optional()), __param(2, Inject(forwardRef(function () {
                return Navbar;
            }))), __metadata('design:paramtypes', [typeof (_a = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _a || Object, typeof (_b = typeof Toolbar !== 'undefined' && Toolbar) === 'function' && _b || Object, typeof (_c = typeof Navbar !== 'undefined' && Navbar) === 'function' && _c || Object])], ToolbarTitle));
        }
    };
});
"use strict";

System.register("ionic-angular/components/toolbar/toolbar", ["@angular/core", "../../config/config", "../ion", "../nav/view-controller"], function (_export, _context) {
    "use strict";

    var ChangeDetectionStrategy, Component, Directive, ElementRef, Optional, Config, Ion, ViewController, _createClass, _typeof, __decorate, __metadata, __param, Header, Footer, ToolbarBase, Toolbar, _a, _b, _c, _d, _e;

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            ChangeDetectionStrategy = _angularCore.ChangeDetectionStrategy;
            Component = _angularCore.Component;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Optional = _angularCore.Optional;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_ion) {
            Ion = _ion.Ion;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("Header", Header = function Header(viewCtrl) {
                _classCallCheck(this, Header);

                viewCtrl && viewCtrl.setHeader(this);
            });

            _export("Header", Header);

            _export("Header", Header = __decorate([Directive({
                selector: 'ion-header'
            }), __param(0, Optional()), __metadata('design:paramtypes', [typeof (_a = typeof ViewController !== 'undefined' && ViewController) === 'function' && _a || Object])], Header));
            /**
             * @private
             */

            _export("Footer", Footer = function Footer(viewCtrl) {
                _classCallCheck(this, Footer);

                viewCtrl && viewCtrl.setFooter(this);
            });

            _export("Footer", Footer);

            _export("Footer", Footer = __decorate([Directive({
                selector: 'ion-footer'
            }), __param(0, Optional()), __metadata('design:paramtypes', [typeof (_b = typeof ViewController !== 'undefined' && ViewController) === 'function' && _b || Object])], Footer));
            /**
             * @private
             */

            _export("ToolbarBase", ToolbarBase = function (_Ion) {
                _inherits(ToolbarBase, _Ion);

                function ToolbarBase(elementRef) {
                    _classCallCheck(this, ToolbarBase);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolbarBase).call(this, elementRef));

                    _this.itemRefs = [];
                    _this.titleRef = null;
                    return _this;
                }
                /**
                 * @private
                 */


                _createClass(ToolbarBase, [{
                    key: "setTitleCmp",
                    value: function setTitleCmp(titleCmp) {
                        this.titleCmp = titleCmp;
                    }
                }, {
                    key: "getTitleText",
                    value: function getTitleText() {
                        return this.titleCmp && this.titleCmp.getTitleText() || '';
                    }
                }, {
                    key: "getTitleRef",
                    value: function getTitleRef() {
                        return this.titleCmp && this.titleCmp.elementRef;
                    }
                }, {
                    key: "getItemRefs",
                    value: function getItemRefs() {
                        return this.itemRefs;
                    }
                }, {
                    key: "addItemRef",
                    value: function addItemRef(itemElementRef) {
                        this.itemRefs.push(itemElementRef);
                    }
                }]);

                return ToolbarBase;
            }(Ion));

            _export("ToolbarBase", ToolbarBase);

            _export("Toolbar", Toolbar = function (_ToolbarBase) {
                _inherits(Toolbar, _ToolbarBase);

                function Toolbar(viewCtrl, header, footer, config, elementRef) {
                    _classCallCheck(this, Toolbar);

                    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Toolbar).call(this, elementRef));

                    if (viewCtrl && (header || footer)) {
                        // only toolbars within headers and footer are view toolbars
                        // toolbars within the content are not view toolbars, since they
                        // are apart of the content, and could be anywhere within the content
                        viewCtrl.setToolbarRef(elementRef);
                    }
                    _this2._sbPadding = config.getBoolean('statusbarPadding');
                    return _this2;
                }

                return Toolbar;
            }(ToolbarBase));

            _export("Toolbar", Toolbar);

            _export("Toolbar", Toolbar = __decorate([Component({
                selector: 'ion-toolbar',
                template: '<div class="toolbar-background"></div>' + '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' + '<ng-content select="ion-buttons[start]"></ng-content>' + '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' + '<div class="toolbar-content">' + '<ng-content></ng-content>' + '</div>',
                host: {
                    'class': 'toolbar',
                    '[class.statusbar-padding]': '_sbPadding'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }), __param(0, Optional()), __param(1, Optional()), __param(2, Optional()), __metadata('design:paramtypes', [typeof (_c = typeof ViewController !== 'undefined' && ViewController) === 'function' && _c || Object, Header, Footer, typeof (_d = typeof Config !== 'undefined' && Config) === 'function' && _d || Object, typeof (_e = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _e || Object])], Toolbar));
        }
    };
});
"use strict";

System.register("ionic-angular/components/virtual-scroll/virtual-item", ["@angular/core"], function (_export, _context) {
    "use strict";

    var Directive, TemplateRef, ViewContainerRef, _typeof, __decorate, __metadata, VirtualHeader, VirtualFooter, VirtualItem, _a, _b, _c, _d;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            Directive = _angularCore.Directive;
            TemplateRef = _angularCore.TemplateRef;
            ViewContainerRef = _angularCore.ViewContainerRef;
        }],
        execute: function () {
            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            _export("VirtualHeader", VirtualHeader = function VirtualHeader(templateRef) {
                _classCallCheck(this, VirtualHeader);

                this.templateRef = templateRef;
            });

            _export("VirtualHeader", VirtualHeader);

            _export("VirtualHeader", VirtualHeader = __decorate([Directive({ selector: '[virtualHeader]' }), __metadata('design:paramtypes', [typeof (_a = typeof TemplateRef !== 'undefined' && TemplateRef) === 'function' && _a || Object])], VirtualHeader));
            /**
             * @private
             */

            _export("VirtualFooter", VirtualFooter = function VirtualFooter(templateRef) {
                _classCallCheck(this, VirtualFooter);

                this.templateRef = templateRef;
            });

            _export("VirtualFooter", VirtualFooter);

            _export("VirtualFooter", VirtualFooter = __decorate([Directive({ selector: '[virtualFooter]' }), __metadata('design:paramtypes', [typeof (_b = typeof TemplateRef !== 'undefined' && TemplateRef) === 'function' && _b || Object])], VirtualFooter));
            /**
             * @private
             */

            _export("VirtualItem", VirtualItem = function VirtualItem(templateRef, viewContainer) {
                _classCallCheck(this, VirtualItem);

                this.templateRef = templateRef;
                this.viewContainer = viewContainer;
            });

            _export("VirtualItem", VirtualItem);

            _export("VirtualItem", VirtualItem = __decorate([Directive({ selector: '[virtualItem]' }), __metadata('design:paramtypes', [typeof (_c = typeof TemplateRef !== 'undefined' && TemplateRef) === 'function' && _c || Object, typeof (_d = typeof ViewContainerRef !== 'undefined' && ViewContainerRef) === 'function' && _d || Object])], VirtualItem));
        }
    };
});
"use strict";

System.register("ionic-angular/components/virtual-scroll/virtual-scroll", ["@angular/core", "./virtual-util", "../../util/dom", "../../config/config", "../content/content", "../img/img", "../../util/util", "../../platform/platform", "../nav/view-controller", "./virtual-item"], function (_export, _context) {
    "use strict";

    var ChangeDetectorRef, ContentChild, ContentChildren, Directive, ElementRef, Input, IterableDiffers, NgZone, Optional, QueryList, Renderer, TrackByFn, adjustRendered, calcDimensions, estimateHeight, initReadNodes, processRecords, populateNodeData, updateDimensions, writeToNodes, clearNativeTimeout, nativeRaf, nativeTimeout, Config, Content, Img, isBlank, isFunction, isPresent, Platform, ViewController, VirtualFooter, VirtualHeader, VirtualItem, _createClass, _typeof, __decorate, __metadata, __param, VirtualScroll, SCROLL_END_TIMEOUT_MS, SCROLL_DIFFERENCE_MINIMUM, QUEUE_CHANGE_DETECTION, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_angularCore) {
            ChangeDetectorRef = _angularCore.ChangeDetectorRef;
            ContentChild = _angularCore.ContentChild;
            ContentChildren = _angularCore.ContentChildren;
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
            Input = _angularCore.Input;
            IterableDiffers = _angularCore.IterableDiffers;
            NgZone = _angularCore.NgZone;
            Optional = _angularCore.Optional;
            QueryList = _angularCore.QueryList;
            Renderer = _angularCore.Renderer;
            TrackByFn = _angularCore.TrackByFn;
        }, function (_virtualUtil) {
            adjustRendered = _virtualUtil.adjustRendered;
            calcDimensions = _virtualUtil.calcDimensions;
            estimateHeight = _virtualUtil.estimateHeight;
            initReadNodes = _virtualUtil.initReadNodes;
            processRecords = _virtualUtil.processRecords;
            populateNodeData = _virtualUtil.populateNodeData;
            updateDimensions = _virtualUtil.updateDimensions;
            writeToNodes = _virtualUtil.writeToNodes;
        }, function (_utilDom) {
            clearNativeTimeout = _utilDom.clearNativeTimeout;
            nativeRaf = _utilDom.nativeRaf;
            nativeTimeout = _utilDom.nativeTimeout;
        }, function (_configConfig) {
            Config = _configConfig.Config;
        }, function (_contentContent) {
            Content = _contentContent.Content;
        }, function (_imgImg) {
            Img = _imgImg.Img;
        }, function (_utilUtil) {
            isBlank = _utilUtil.isBlank;
            isFunction = _utilUtil.isFunction;
            isPresent = _utilUtil.isPresent;
        }, function (_platformPlatform) {
            Platform = _platformPlatform.Platform;
        }, function (_navViewController) {
            ViewController = _navViewController.ViewController;
        }, function (_virtualItem) {
            VirtualFooter = _virtualItem.VirtualFooter;
            VirtualHeader = _virtualItem.VirtualHeader;
            VirtualItem = _virtualItem.VirtualItem;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
            };

            __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                }return c > 3 && r && Object.defineProperty(target, key, r), r;
            };

            __metadata = undefined && undefined.__metadata || function (k, v) {
                if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };

            __param = undefined && undefined.__param || function (paramIndex, decorator) {
                return function (target, key) {
                    decorator(target, key, paramIndex);
                };
            };

            _export("VirtualScroll", VirtualScroll = function () {
                function VirtualScroll(_iterableDiffers, _elementRef, _renderer, _zone, _cd, _content, _platform, _ctrl, config) {
                    _classCallCheck(this, VirtualScroll);

                    this._iterableDiffers = _iterableDiffers;
                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this._zone = _zone;
                    this._cd = _cd;
                    this._content = _content;
                    this._platform = _platform;
                    this._ctrl = _ctrl;
                    this._records = [];
                    this._cells = [];
                    this._nodes = [];
                    this._vHeight = 0;
                    this._lastCheck = 0;
                    this._data = {
                        scrollTop: 0
                    };
                    this._queue = null;
                    /**
                     * @input {number} The buffer ratio is used to decide how many cells
                     * should get created when initially rendered. The number is a
                     * multiplier against the viewable area's height. For example, if it
                     * takes `20` cells to fill up the height of the viewable area, then
                     * with a buffer ratio of `2` it will create `40` cells that are
                     * available for reuse while scrolling. For better performance, it's
                     * better to have more cells than what are required to fill the
                     * viewable area. Default is `2`.
                     */
                    this.bufferRatio = 2;
                    /**
                     * @input {string} The approximate width of each item template's cell.
                     * This dimension is used to help determine how many cells should
                     * be created when initialized, and to help calculate the height of
                     * the scrollable area. This value can use either `px` or `%` units.
                     * Note that the actual rendered size of each cell comes from the
                     * app's CSS, whereas this approximation is used to help calculate
                     * initial dimensions. Default is `100%`.
                     */
                    this.approxItemWidth = '100%';
                    /**
                     * @input {string} The approximate height of each item template's cell.
                     * This dimension is used to help determine how many cells should
                     * be created when initialized, and to help calculate the height of
                     * the scrollable area. This height value can only use `px` units.
                     * Note that the actual rendered size of each cell comes from the
                     * app's CSS, whereas this approximation is used to help calculate
                     * initial dimensions. Default is `40px`.
                     */
                    this.approxItemHeight = '40px';
                    /**
                     * @input {string} The approximate width of each header template's cell.
                     * This dimension is used to help determine how many cells should
                     * be created when initialized, and to help calculate the height of
                     * the scrollable area. This value can use either `px` or `%` units.
                     * Note that the actual rendered size of each cell comes from the
                     * app's CSS, whereas this approximation is used to help calculate
                     * initial dimensions. Default is `100%`.
                     */
                    this.approxHeaderWidth = '100%';
                    /**
                     * @input {string} The approximate height of each header template's cell.
                     * This dimension is used to help determine how many cells should
                     * be created when initialized, and to help calculate the height of
                     * the scrollable area. This height value can only use `px` units.
                     * Note that the actual rendered size of each cell comes from the
                     * app's CSS, whereas this approximation is used to help calculate
                     * initial dimensions. Default is `40px`.
                     */
                    this.approxHeaderHeight = '40px';
                    /**
                     * @input {string} The approximate width of each footer template's cell.
                     * This dimension is used to help determine how many cells should
                     * be created when initialized, and to help calculate the height of
                     * the scrollable area. This value can use either `px` or `%` units.
                     * Note that the actual rendered size of each cell comes from the
                     * app's CSS, whereas this approximation is used to help calculate
                     * initial dimensions. Default is `100%`.
                     */
                    this.approxFooterWidth = '100%';
                    /**
                     * @input {string} The approximate height of each footer template's cell.
                     * This dimension is used to help determine how many cells should
                     * be created when initialized, and to help calculate the height of
                     * the scrollable area. This height value can only use `px` units.
                     * Note that the actual rendered size of each cell comes from the
                     * app's CSS, whereas this approximation is used to help calculate
                     * initial dimensions. Default is `40px`.
                     */
                    this.approxFooterHeight = '40px';
                    this._eventAssist = config.getBoolean('virtualScrollEventAssist');
                }
                /**
                 * @input {array} The data that builds the templates within the virtual scroll.
                 * This is the same data that you'd pass to `ngFor`. It's important to note
                 * that when this data has changed, then the entire virtual scroll is reset,
                 * which is an expensive operation and should be avoided if possible.
                 */


                _createClass(VirtualScroll, [{
                    key: "ngDoCheck",
                    value: function ngDoCheck() {
                        if (this._init) {
                            this.update(true);
                        }
                    }
                }, {
                    key: "ngAfterContentInit",
                    value: function ngAfterContentInit() {
                        var _this = this;

                        if (!this._init) {
                            if (!this._itmTmp) {
                                throw 'virtualItem required within virtualScroll';
                            }
                            this._init = true;
                            this.update(true);
                            this._platform.onResize(function () {
                                console.debug('VirtualScroll, onResize');
                                _this.update(false);
                            });
                        }
                    }
                }, {
                    key: "update",
                    value: function update(checkChanges) {
                        var self = this;
                        if (!self._records || !self._records.length) return;
                        if (checkChanges) {
                            if (isPresent(self._differ)) {
                                var changes = self._differ.diff(self._records);
                                if (!isPresent(changes)) return;
                            }
                        }
                        console.debug('VirtualScroll, update, records:', self._records.length);
                        // reset everything
                        self._cells.length = 0;
                        self._nodes.length = 0;
                        self._itmTmp.viewContainer.clear();
                        self._elementRef.nativeElement.parentElement.scrollTop = 0;
                        var attempts = 0;
                        function readDimensions(done /* cuz promises add unnecessary overhead here */) {
                            if (self._data.valid) {
                                // good to go, we already have good dimension data
                                done();
                            } else {
                                // ******** DOM READ ****************
                                calcDimensions(self._data, self._elementRef.nativeElement.parentElement, self.approxItemWidth, self.approxItemHeight, self.approxHeaderWidth, self.approxHeaderHeight, self.approxFooterWidth, self.approxFooterHeight, self.bufferRatio);
                                if (self._data.valid) {
                                    // sweet, we got some good dimension data!
                                    done();
                                } else if (attempts < 30) {
                                    // oh no! the DOM doesn't have good data yet!
                                    // let's try again in XXms, and give up eventually if we never get data
                                    attempts++;
                                    nativeRaf(function () {
                                        readDimensions(done);
                                    });
                                }
                            }
                        }
                        // ******** DOM READ ****************
                        readDimensions(function () {
                            processRecords(self._data.renderHeight, self._records, self._cells, self._hdrFn, self._ftrFn, self._data);
                            // ******** DOM WRITE ****************
                            self.renderVirtual();
                            // list for scroll events
                            self.addScrollListener();
                        });
                    }
                }, {
                    key: "renderVirtual",
                    value: function renderVirtual() {
                        // initialize nodes with the correct cell data
                        this._data.topCell = 0;
                        this._data.bottomCell = this._cells.length - 1;
                        populateNodeData(0, this._data.bottomCell, this._data.viewWidth, true, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, true);
                        // ******** DOM WRITE ****************
                        this._cd.detectChanges();
                        // wait a frame before trying to read and calculate the dimensions
                        nativeRaf(this.postRenderVirtual.bind(this));
                    }
                }, {
                    key: "postRenderVirtual",
                    value: function postRenderVirtual() {
                        // ******** DOM READ THEN DOM WRITE ****************
                        initReadNodes(this._nodes, this._cells, this._data);
                        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                        // ******** DOM WRITE ****************
                        this._renderer.setElementClass(this._elementRef.nativeElement, 'virtual-scroll', true);
                        // ******** DOM WRITE ****************
                        writeToNodes(this._nodes, this._cells, this._records.length);
                        // ******** DOM WRITE ****************
                        this.setVirtualHeight(estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
                    }
                }, {
                    key: "scrollUpdate",
                    value: function scrollUpdate() {
                        clearNativeTimeout(this._tmId);
                        this._tmId = nativeTimeout(this.onScrollEnd.bind(this), SCROLL_END_TIMEOUT_MS);
                        var data = this._data;
                        if (this._queue === QUEUE_CHANGE_DETECTION) {
                            // ******** DOM WRITE ****************
                            this._cd.detectChanges();
                            // ******** DOM WRITE ****************
                            writeToNodes(this._nodes, this._cells, this._records.length);
                            // ******** DOM WRITE ****************
                            this.setVirtualHeight(estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.25));
                            this._queue = null;
                        } else {
                            data.scrollDiff = data.scrollTop - this._lastCheck;
                            if (Math.abs(data.scrollDiff) > SCROLL_DIFFERENCE_MINIMUM) {
                                // don't bother updating if the scrollTop hasn't changed much
                                this._lastCheck = data.scrollTop;
                                if (data.scrollDiff > 0) {
                                    // load data we may not have processed yet
                                    var stopAtHeight = data.scrollTop + data.renderHeight;
                                    processRecords(stopAtHeight, this._records, this._cells, this._hdrFn, this._ftrFn, data);
                                }
                                // ******** DOM READ ****************
                                updateDimensions(this._nodes, this._cells, data, false);
                                adjustRendered(this._cells, data);
                                var madeChanges = populateNodeData(data.topCell, data.bottomCell, data.viewWidth, data.scrollDiff > 0, this._cells, this._records, this._nodes, this._itmTmp.viewContainer, this._itmTmp.templateRef, this._hdrTmp && this._hdrTmp.templateRef, this._ftrTmp && this._ftrTmp.templateRef, false);
                                if (madeChanges) {
                                    // do not update images while scrolling
                                    this._imgs.forEach(function (img) {
                                        img.enable(false);
                                    });
                                    // queue making updates in the next frame
                                    this._queue = QUEUE_CHANGE_DETECTION;
                                } else {
                                    this._queue = null;
                                }
                            }
                        }
                    }
                }, {
                    key: "onScrollEnd",
                    value: function onScrollEnd() {
                        // scrolling is done, allow images to be updated now
                        this._imgs.forEach(function (img) {
                            img.enable(true);
                        });
                        // ******** DOM READ ****************
                        updateDimensions(this._nodes, this._cells, this._data, false);
                        adjustRendered(this._cells, this._data);
                        // ******** DOM WRITE ****************
                        this._cd.detectChanges();
                        // ******** DOM WRITE ****************
                        this.setVirtualHeight(estimateHeight(this._records.length, this._cells[this._cells.length - 1], this._vHeight, 0.05));
                    }
                }, {
                    key: "setVirtualHeight",
                    value: function setVirtualHeight(newVirtualHeight) {
                        if (newVirtualHeight !== this._vHeight) {
                            // ******** DOM WRITE ****************
                            this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', newVirtualHeight > 0 ? newVirtualHeight + 'px' : '');
                            this._vHeight = newVirtualHeight;
                            console.debug('VirtualScroll, height', newVirtualHeight);
                        }
                    }
                }, {
                    key: "addScrollListener",
                    value: function addScrollListener() {
                        var self = this;
                        if (!self._unreg) {
                            self._zone.runOutsideAngular(function () {
                                function onScroll() {
                                    // ******** DOM READ ****************
                                    self._data.scrollTop = self._content.getScrollTop();
                                    // ******** DOM READ THEN DOM WRITE ****************
                                    self.scrollUpdate();
                                }
                                if (self._eventAssist) {
                                    // use JS scrolling for iOS UIWebView
                                    // goal is to completely remove this when iOS
                                    // fully supports scroll events
                                    // listen to JS scroll events
                                    self._unreg = self._content.jsScroll(onScroll);
                                } else {
                                    // listen to native scroll events
                                    self._unreg = self._content.addScrollListener(onScroll);
                                }
                            });
                        }
                    }
                }, {
                    key: "ngOnDestroy",
                    value: function ngOnDestroy() {
                        this._unreg && this._unreg();
                        this._unreg = null;
                    }
                }, {
                    key: "virtualScroll",
                    set: function set(val) {
                        this._records = val;
                        if (isBlank(this._differ) && isPresent(val)) {
                            this._differ = this._iterableDiffers.find(val).create(this._cd, this._trackBy);
                        }
                    }
                }, {
                    key: "headerFn",
                    set: function set(val) {
                        if (isFunction(val)) {
                            this._hdrFn = val.bind(this._ctrl && this._ctrl.instance || this);
                        }
                    }
                }, {
                    key: "footerFn",
                    set: function set(val) {
                        if (isFunction(val)) {
                            this._ftrFn = val.bind(this._ctrl && this._ctrl.instance || this);
                        }
                    }
                }, {
                    key: "virtualTrackBy",
                    set: function set(val) {
                        this._trackBy = val;
                    }
                }]);

                return VirtualScroll;
            }());

            _export("VirtualScroll", VirtualScroll);

            __decorate([ContentChild(VirtualItem), __metadata('design:type', typeof (_a = typeof VirtualItem !== 'undefined' && VirtualItem) === 'function' && _a || Object)], VirtualScroll.prototype, "_itmTmp", void 0);
            __decorate([ContentChild(VirtualHeader), __metadata('design:type', typeof (_b = typeof VirtualHeader !== 'undefined' && VirtualHeader) === 'function' && _b || Object)], VirtualScroll.prototype, "_hdrTmp", void 0);
            __decorate([ContentChild(VirtualFooter), __metadata('design:type', typeof (_c = typeof VirtualFooter !== 'undefined' && VirtualFooter) === 'function' && _c || Object)], VirtualScroll.prototype, "_ftrTmp", void 0);
            __decorate([ContentChildren(Img), __metadata('design:type', typeof (_d = typeof QueryList !== 'undefined' && QueryList) === 'function' && _d || Object)], VirtualScroll.prototype, "_imgs", void 0);
            __decorate([Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], VirtualScroll.prototype, "virtualScroll", null);
            __decorate([Input(), __metadata('design:type', Number)], VirtualScroll.prototype, "bufferRatio", void 0);
            __decorate([Input(), __metadata('design:type', String)], VirtualScroll.prototype, "approxItemWidth", void 0);
            __decorate([Input(), __metadata('design:type', String)], VirtualScroll.prototype, "approxItemHeight", void 0);
            __decorate([Input(), __metadata('design:type', String)], VirtualScroll.prototype, "approxHeaderWidth", void 0);
            __decorate([Input(), __metadata('design:type', String)], VirtualScroll.prototype, "approxHeaderHeight", void 0);
            __decorate([Input(), __metadata('design:type', String)], VirtualScroll.prototype, "approxFooterWidth", void 0);
            __decorate([Input(), __metadata('design:type', String)], VirtualScroll.prototype, "approxFooterHeight", void 0);
            __decorate([Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], VirtualScroll.prototype, "headerFn", null);
            __decorate([Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], VirtualScroll.prototype, "footerFn", null);
            __decorate([Input(), __metadata('design:type', typeof (_e = typeof TrackByFn !== 'undefined' && TrackByFn) === 'function' && _e || Object), __metadata('design:paramtypes', [typeof (_f = typeof TrackByFn !== 'undefined' && TrackByFn) === 'function' && _f || Object])], VirtualScroll.prototype, "virtualTrackBy", null);
            _export("VirtualScroll", VirtualScroll = __decorate([Directive({
                selector: '[virtualScroll]'
            }), __param(7, Optional()), __metadata('design:paramtypes', [typeof (_g = typeof IterableDiffers !== 'undefined' && IterableDiffers) === 'function' && _g || Object, typeof (_h = typeof ElementRef !== 'undefined' && ElementRef) === 'function' && _h || Object, typeof (_j = typeof Renderer !== 'undefined' && Renderer) === 'function' && _j || Object, typeof (_k = typeof NgZone !== 'undefined' && NgZone) === 'function' && _k || Object, typeof (_l = typeof ChangeDetectorRef !== 'undefined' && ChangeDetectorRef) === 'function' && _l || Object, typeof (_m = typeof Content !== 'undefined' && Content) === 'function' && _m || Object, typeof (_o = typeof Platform !== 'undefined' && Platform) === 'function' && _o || Object, typeof (_p = typeof ViewController !== 'undefined' && ViewController) === 'function' && _p || Object, typeof (_q = typeof Config !== 'undefined' && Config) === 'function' && _q || Object])], VirtualScroll));
            SCROLL_END_TIMEOUT_MS = 140;
            SCROLL_DIFFERENCE_MINIMUM = 20;
            QUEUE_CHANGE_DETECTION = 0;
        }
    };
});
'use strict';

System.register('ionic-angular/components/virtual-scroll/virtual-util', ['../../util/dom'], function (_export, _context) {
    "use strict";

    var CSS, _createClass, VirtualContext, TEMPLATE_ITEM, TEMPLATE_HEADER, TEMPLATE_FOOTER, VIEWABLE_RENDERED_PADDING, REQUIRED_DOM_READS;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function addCell(previousCell, recordIndex, tmpl, tmplData, cellWidth, cellHeight, viewportWidth) {
        var newCell = void 0;
        if (previousCell.left + previousCell.width + cellWidth > viewportWidth) {
            // add a new cell in a new row
            newCell = {
                record: recordIndex,
                tmpl: tmpl,
                row: previousCell.row + 1,
                width: cellWidth,
                height: cellHeight,
                top: previousCell.top + previousCell.height,
                left: 0,
                reads: 0
            };
        } else {
            // add a new cell in the same row
            newCell = {
                record: recordIndex,
                tmpl: tmpl,
                row: previousCell.row,
                width: cellWidth,
                height: cellHeight,
                top: previousCell.top,
                left: previousCell.left + previousCell.width,
                reads: 0
            };
        }
        if (tmplData) {
            newCell.data = tmplData;
        }
        return newCell;
    }
    /**
     * NO DOM
     */

    function addLastNodes(nodes, viewContainer, templateType, templateRef, temporaryData) {
        if (templateRef) {
            var node = {
                tmpl: templateType,
                view: viewContainer.createEmbeddedView(templateRef),
                isLastRecord: true,
                hidden: true
            };
            node.view.context.$implicit = temporaryData;
            nodes.push(node);
        }
    }
    /**
     * DOM READ THEN DOM WRITE
     */

    /**
     * DOM READ
     */
    function readElements(cell, element) {
        // ******** DOM READ ****************
        var styles = window.getComputedStyle(element);
        // ******** DOM READ ****************
        cell.left = element.offsetLeft - parseFloat(styles.marginLeft);
        // ******** DOM READ ****************
        cell.width = element.offsetWidth + parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
        // ******** DOM READ ****************
        cell.height = element.offsetHeight + parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
    }
    /**
     * DOM WRITE
     */

    /**
     * NO DOM
     */
    function calcWidth(viewportWidth, approxWidth) {
        if (approxWidth.indexOf('%') > 0) {
            return viewportWidth * (parseFloat(approxWidth) / 100);
        } else if (approxWidth.indexOf('px') > 0) {
            return parseFloat(approxWidth);
        }
        throw 'virtual scroll width can only use "%" or "px" units';
    }
    /**
     * NO DOM
     */
    function calcHeight(viewportHeight, approxHeight) {
        if (approxHeight.indexOf('px') > 0) {
            return parseFloat(approxHeight);
        }
        throw 'virtual scroll height must use "px" units';
    }
    /**
     * NO DOM
     */
    function getElement(node) {
        var rootNodes = node.view.rootNodes;
        for (var i = 0; i < rootNodes.length; i++) {
            if (rootNodes[i].nodeType === 1) {
                return rootNodes[i];
            }
        }
        return null;
    }
    return {
        setters: [function (_utilDom) {
            CSS = _utilDom.CSS;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            /**
             * NO DOM
             */
            function processRecords(stopAtHeight, records, cells, headerFn, footerFn, data) {
                var record = void 0;
                var startRecordIndex = void 0;
                var previousCell = void 0;
                var tmpData = void 0;
                var lastRecordIndex = records.length - 1;
                if (cells.length) {
                    // we already have cells
                    previousCell = cells[cells.length - 1];
                    if (previousCell.top + previousCell.height > stopAtHeight) {
                        return;
                    }
                    startRecordIndex = previousCell.record + 1;
                } else {
                    // no cells have been created yet
                    previousCell = {
                        row: 0,
                        width: 0,
                        height: 0,
                        top: 0,
                        left: 0,
                        tmpl: -1
                    };
                    startRecordIndex = 0;
                }
                var processedTotal = 0;
                for (var recordIndex = startRecordIndex; recordIndex <= lastRecordIndex; recordIndex++) {
                    record = records[recordIndex];
                    if (headerFn) {
                        tmpData = headerFn(record, recordIndex, records);
                        if (tmpData !== null) {
                            // add header data
                            previousCell = addCell(previousCell, recordIndex, TEMPLATE_HEADER, tmpData, data.hdrWidth, data.hdrHeight, data.viewWidth);
                            cells.push(previousCell);
                        }
                    }
                    // add item data
                    previousCell = addCell(previousCell, recordIndex, TEMPLATE_ITEM, null, data.itmWidth, data.itmHeight, data.viewWidth);
                    cells.push(previousCell);
                    if (footerFn) {
                        tmpData = footerFn(record, recordIndex, records);
                        if (tmpData !== null) {
                            // add footer data
                            previousCell = addCell(previousCell, recordIndex, TEMPLATE_FOOTER, tmpData, data.ftrWidth, data.ftrHeight, data.viewWidth);
                            cells.push(previousCell);
                        }
                    }
                    if (previousCell.record === lastRecordIndex) {
                        previousCell.isLast = true;
                    }
                    // should always process at least 3 records
                    processedTotal++;
                    if (previousCell.top + previousCell.height + data.itmHeight > stopAtHeight && processedTotal > 3) {
                        return;
                    }
                }
            }
            _export('processRecords', processRecords);

            function populateNodeData(startCellIndex, endCellIndex, viewportWidth, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp, initialLoad) {
                var madeChanges = false;
                var node = void 0;
                var availableNode = void 0;
                var cell = void 0;
                var previousCell = void 0;
                var isAlreadyRendered = void 0;
                var lastRecordIndex = records.length - 1;
                var viewInsertIndex = null;
                var totalNodes = nodes.length;
                var templateRef = void 0;
                startCellIndex = Math.max(startCellIndex, 0);
                endCellIndex = Math.min(endCellIndex, cells.length - 1);
                for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {
                    cell = cells[cellIndex];
                    availableNode = null;
                    isAlreadyRendered = false;
                    // find the first one that's available
                    if (!initialLoad) {
                        for (var i = 0; i < totalNodes; i++) {
                            node = nodes[i];
                            if (cell.tmpl !== node.tmpl || i === 0 && cellIndex !== 0) {
                                // the cell must use the correct template
                                // first node can only be used by the first cell (css :first-child reasons)
                                // this node is never available to be reused
                                continue;
                            } else if (node.isLastRecord) {
                                // very last record, but could be a header/item/footer
                                if (cell.record === lastRecordIndex) {
                                    availableNode = nodes[i];
                                    availableNode.hidden = false;
                                    break;
                                }
                                // this node is for the last record, but not actually the last
                                continue;
                            }
                            if (node.cell === cellIndex) {
                                isAlreadyRendered = true;
                                break;
                            }
                            if (node.cell < startCellIndex || node.cell > endCellIndex) {
                                if (!availableNode) {
                                    // havent gotten an available node yet
                                    availableNode = nodes[i];
                                } else if (scrollingDown) {
                                    // scrolling down
                                    if (node.cell < availableNode.cell) {
                                        availableNode = nodes[i];
                                    }
                                } else {
                                    // scrolling up
                                    if (node.cell > availableNode.cell) {
                                        availableNode = nodes[i];
                                    }
                                }
                            }
                        }
                        if (isAlreadyRendered) {
                            continue;
                        }
                    }
                    if (!availableNode) {
                        // did not find an available node to put the cell data into
                        // insert a new node before the last record nodes
                        if (viewInsertIndex === null) {
                            viewInsertIndex = -1;
                            for (var j = totalNodes - 1; j >= 0; j--) {
                                node = nodes[j];
                                if (node && !node.isLastRecord) {
                                    viewInsertIndex = viewContainer.indexOf(node.view);
                                    break;
                                }
                            }
                        }
                        // select which templateRef should be used for this cell
                        templateRef = cell.tmpl === TEMPLATE_HEADER ? hdrTmp : cell.tmpl === TEMPLATE_FOOTER ? ftrTmp : itmTmp;
                        if (!templateRef) {
                            console.error('virtual' + (cell.tmpl === TEMPLATE_HEADER ? 'Header' : cell.tmpl === TEMPLATE_FOOTER ? 'Footer' : 'Item') + ' template required');
                            continue;
                        }
                        availableNode = {
                            tmpl: cell.tmpl,
                            view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)
                        };
                        totalNodes = nodes.push(availableNode);
                    }
                    // console.debug(`node was cell ${availableNode.cell} but is now ${cellIndex}, was top: ${cell.top}`);
                    // assign who's the new cell index for this node
                    availableNode.cell = cellIndex;
                    // apply the cell's data to this node
                    availableNode.view.context.$implicit = cell.data || records[cell.record];
                    availableNode.view.context.index = cellIndex;
                    availableNode.hasChanges = true;
                    availableNode.lastTransform = null;
                    madeChanges = true;
                }
                if (initialLoad) {
                    // add nodes that go at the very end, and only represent the last record
                    var lastNodeTempData = records[lastRecordIndex] || {};
                    addLastNodes(nodes, viewContainer, TEMPLATE_HEADER, hdrTmp, lastNodeTempData);
                    addLastNodes(nodes, viewContainer, TEMPLATE_ITEM, itmTmp, lastNodeTempData);
                    addLastNodes(nodes, viewContainer, TEMPLATE_FOOTER, ftrTmp, lastNodeTempData);
                }
                return madeChanges;
            }
            _export('populateNodeData', populateNodeData);

            function initReadNodes(nodes, cells, data) {
                if (nodes.length && cells.length) {
                    // first node
                    // ******** DOM READ ****************
                    var firstEle = getElement(nodes[0]);
                    cells[0].top = firstEle.clientTop;
                    cells[0].left = firstEle.clientLeft;
                    cells[0].row = 0;
                    // ******** DOM READ ****************
                    updateDimensions(nodes, cells, data, true);
                    // ******** DOM READS ABOVE / DOM WRITES BELOW ****************
                    for (var i = 0; i < nodes.length; i++) {
                        if (nodes[i].hidden) {
                            // ******** DOM WRITE ****************
                            getElement(nodes[i]).classList.add('virtual-hidden');
                        }
                    }
                }
            }
            /**
             * DOM READ
             */

            _export('initReadNodes', initReadNodes);

            function updateDimensions(nodes, cells, data, initialUpdate) {
                var node = void 0;
                var element = void 0;
                var totalCells = cells.length;
                var cell = void 0;
                var previousCell = void 0;
                for (var i = 0; i < nodes.length; i++) {
                    node = nodes[i];
                    cell = cells[node.cell];
                    // read element dimensions if they haven't been checked enough times
                    if (cell && cell.reads < REQUIRED_DOM_READS && !node.hidden) {
                        element = getElement(node);
                        // ******** DOM READ ****************
                        readElements(cell, element);
                        if (initialUpdate) {
                            // update estimated dimensions with more accurate dimensions
                            if (cell.tmpl === TEMPLATE_HEADER) {
                                data.hdrHeight = cell.height;
                                if (cell.left === 0) {
                                    data.hdrWidth = cell.width;
                                }
                            } else if (cell.tmpl === TEMPLATE_FOOTER) {
                                data.ftrHeight = cell.height;
                                if (cell.left === 0) {
                                    data.ftrWidth = cell.width;
                                }
                            } else {
                                data.itmHeight = cell.height;
                                if (cell.left === 0) {
                                    data.itmWidth = cell.width;
                                }
                            }
                        }
                        cell.reads++;
                    }
                }
                // figure out which cells are currently viewable within the viewport
                var viewableBottom = data.scrollTop + data.viewHeight;
                data.topViewCell = totalCells;
                data.bottomViewCell = 0;
                // completely realign position to ensure they're all accurately placed
                for (var i = 1; i < totalCells; i++) {
                    cell = cells[i];
                    previousCell = cells[i - 1];
                    if (previousCell.left + previousCell.width + cell.width > data.viewWidth) {
                        // new row
                        cell.row++;
                        cell.top = previousCell.top + previousCell.height;
                        cell.left = 0;
                    } else {
                        // same row
                        cell.row = previousCell.row;
                        cell.top = previousCell.top;
                        cell.left = previousCell.left + previousCell.width;
                    }
                    // figure out which cells are viewable within the viewport
                    if (cell.top + cell.height > data.scrollTop && i < data.topViewCell) {
                        data.topViewCell = i;
                    } else if (cell.top < viewableBottom && i > data.bottomViewCell) {
                        data.bottomViewCell = i;
                    }
                }
            }
            _export('updateDimensions', updateDimensions);

            function writeToNodes(nodes, cells, totalRecords) {
                var node = void 0;
                var element = void 0;
                var cell = void 0;
                var totalCells = Math.max(totalRecords, cells.length).toString();
                var transform = void 0;
                for (var i = 0, ilen = nodes.length; i < ilen; i++) {
                    node = nodes[i];
                    if (!node.hidden) {
                        cell = cells[node.cell];
                        transform = 'translate3d(' + cell.left + 'px,' + cell.top + 'px,0px)';
                        if (node.lastTransform !== transform) {
                            element = getElement(node);
                            if (element) {
                                // ******** DOM WRITE ****************
                                element.style[CSS.transform] = node.lastTransform = transform;
                                // ******** DOM WRITE ****************
                                element.classList.add('virtual-position');
                                if (node.isLastRecord) {
                                    // its the last record, now with data and safe to show
                                    // ******** DOM WRITE ****************
                                    element.classList.remove('virtual-hidden');
                                }
                                // https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset
                                // ******** DOM WRITE ****************
                                element.setAttribute('aria-posinset', (node.cell + 1).toString());
                                // https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize
                                // ******** DOM WRITE ****************
                                element.setAttribute('aria-setsize', totalCells);
                            }
                        }
                    }
                }
            }
            /**
             * NO DOM
             */

            _export('writeToNodes', writeToNodes);

            function adjustRendered(cells, data) {
                // figure out which cells should be rendered
                var cell = void 0;
                var lastRow = -1;
                var cellsRenderHeight = 0;
                var maxRenderHeight = data.renderHeight - data.itmHeight;
                var totalCells = cells.length;
                var viewableRenderedPadding = data.itmHeight < 90 ? VIEWABLE_RENDERED_PADDING : 0;
                if (data.scrollDiff > 0) {
                    // scrolling down
                    data.topCell = Math.max(data.topViewCell - viewableRenderedPadding, 0);
                    data.bottomCell = Math.min(data.topCell + 2, totalCells - 1);
                    for (var i = data.topCell; i < totalCells; i++) {
                        cell = cells[i];
                        if (cell.row !== lastRow) {
                            cellsRenderHeight += cell.height;
                            lastRow = cell.row;
                        }
                        if (i > data.bottomCell) {
                            data.bottomCell = i;
                        }
                        if (cellsRenderHeight >= maxRenderHeight) {
                            break;
                        }
                    }
                } else {
                    // scroll up
                    data.bottomCell = Math.min(data.bottomViewCell + viewableRenderedPadding, totalCells - 1);
                    data.topCell = Math.max(data.bottomCell - 2, 0);
                    for (var i = data.bottomCell; i >= 0; i--) {
                        cell = cells[i];
                        if (cell.row !== lastRow) {
                            cellsRenderHeight += cell.height;
                            lastRow = cell.row;
                        }
                        if (i < data.topCell) {
                            data.topCell = i;
                        }
                        if (cellsRenderHeight >= maxRenderHeight) {
                            break;
                        }
                    }
                }
                // console.log(`adjustRendered topCell: ${data.topCell}, bottomCell: ${data.bottomCell}, cellsRenderHeight: ${cellsRenderHeight}, data.renderHeight: ${data.renderHeight}`);
            }
            /**
             * NO DOM
             */

            _export('adjustRendered', adjustRendered);

            function getVirtualHeight(totalRecords, lastCell) {
                if (lastCell.record >= totalRecords - 1) {
                    return lastCell.top + lastCell.height;
                }
                var unknownRecords = totalRecords - lastCell.record - 1;
                var knownHeight = lastCell.top + lastCell.height;
                return Math.ceil(knownHeight + knownHeight / (totalRecords - unknownRecords) * unknownRecords);
            }
            /**
             * NO DOM
             */

            _export('getVirtualHeight', getVirtualHeight);

            function estimateHeight(totalRecords, lastCell, existingHeight, difference) {
                var newHeight = getVirtualHeight(totalRecords, lastCell);
                var percentToBottom = lastCell.record / (totalRecords - 1);
                var diff = Math.abs(existingHeight - newHeight);
                if (diff > newHeight * difference || percentToBottom > .995) {
                    return newHeight;
                }
                return existingHeight;
            }
            /**
             * DOM READ
             */

            _export('estimateHeight', estimateHeight);

            function calcDimensions(data, viewportElement, approxItemWidth, approxItemHeight, appoxHeaderWidth, approxHeaderHeight, approxFooterWidth, approxFooterHeight, bufferRatio) {
                // get the parent container's viewport height
                // ******** DOM READ ****************
                data.viewWidth = viewportElement.offsetWidth;
                // ******** DOM READ ****************
                data.viewHeight = viewportElement.offsetHeight;
                // the height we'd like to render, which is larger than viewable
                data.renderHeight = data.viewHeight * bufferRatio;
                if (data.viewWidth > 0 && data.viewHeight > 0) {
                    data.itmWidth = calcWidth(data.viewWidth, approxItemWidth);
                    data.itmHeight = calcHeight(data.viewHeight, approxItemHeight);
                    data.hdrWidth = calcWidth(data.viewWidth, appoxHeaderWidth);
                    data.hdrHeight = calcHeight(data.viewHeight, approxHeaderHeight);
                    data.ftrWidth = calcWidth(data.viewWidth, approxFooterWidth);
                    data.ftrHeight = calcHeight(data.viewHeight, approxFooterHeight);
                    data.valid = true;
                }
            }
            _export('calcDimensions', calcDimensions);

            _export('VirtualContext', VirtualContext = function () {
                function VirtualContext($implicit, index, count) {
                    _classCallCheck(this, VirtualContext);

                    this.$implicit = $implicit;
                    this.index = index;
                    this.count = count;
                }

                _createClass(VirtualContext, [{
                    key: 'first',
                    get: function get() {
                        return this.index === 0;
                    }
                }, {
                    key: 'last',
                    get: function get() {
                        return this.index === this.count - 1;
                    }
                }, {
                    key: 'even',
                    get: function get() {
                        return this.index % 2 === 0;
                    }
                }, {
                    key: 'odd',
                    get: function get() {
                        return !this.even;
                    }
                }]);

                return VirtualContext;
            }());

            _export('VirtualContext', VirtualContext);

            TEMPLATE_ITEM = 0;
            TEMPLATE_HEADER = 1;
            TEMPLATE_FOOTER = 2;
            VIEWABLE_RENDERED_PADDING = 3;
            REQUIRED_DOM_READS = 2;
        }
    };
});
'use strict';

System.register('ionic-angular/platform/storage/local-storage', ['./storage'], function (_export, _context) {
    "use strict";

    var StorageEngine, _createClass, LocalStorage;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_storage) {
            StorageEngine = _storage.StorageEngine;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('LocalStorage', LocalStorage = function (_StorageEngine) {
                _inherits(LocalStorage, _StorageEngine);

                function LocalStorage() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, LocalStorage);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(LocalStorage).call(this));
                }
                /**
                 * Get the value of a key in LocalStorage
                 * @param {string} key the key you want to lookup in LocalStorage
                 * @returns {Promise} Returns a promise which is resolved when the value has been retrieved
                 */


                _createClass(LocalStorage, [{
                    key: 'get',
                    value: function get(key) {
                        return new Promise(function (resolve, reject) {
                            try {
                                var value = window.localStorage.getItem(key);
                                resolve(value);
                            } catch (e) {
                                reject(e);
                            }
                        });
                    }
                }, {
                    key: 'set',
                    value: function set(key, value) {
                        return new Promise(function (resolve, reject) {
                            try {
                                window.localStorage.setItem(key, value);
                                resolve();
                            } catch (e) {
                                reject(e);
                            }
                        });
                    }
                }, {
                    key: 'remove',
                    value: function remove(key) {
                        return new Promise(function (resolve, reject) {
                            try {
                                window.localStorage.removeItem(key);
                                resolve();
                            } catch (e) {
                                reject(e);
                            }
                        });
                    }
                }, {
                    key: 'clear',
                    value: function clear() {
                        return new Promise(function (resolve, reject) {
                            try {
                                window.localStorage.clear();
                                resolve();
                            } catch (e) {
                                reject(e);
                            }
                        });
                    }
                }]);

                return LocalStorage;
            }(StorageEngine));

            _export('LocalStorage', LocalStorage);
        }
    };
});
'use strict';

System.register('ionic-angular/platform/storage/sql', ['./storage', '../../util/util'], function (_export, _context) {
    "use strict";

    var StorageEngine, defaults, assign, _createClass, DB_NAME, win, SqlStorage;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    return {
        setters: [function (_storage) {
            StorageEngine = _storage.StorageEngine;
        }, function (_utilUtil) {
            defaults = _utilUtil.defaults;
            assign = _utilUtil.assign;
        }],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            DB_NAME = '__ionicstorage';
            win = window;

            _export('SqlStorage', SqlStorage = function (_StorageEngine) {
                _inherits(SqlStorage, _StorageEngine);

                function SqlStorage() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, SqlStorage);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SqlStorage).call(this));

                    var dbOptions = defaults(options, {
                        name: DB_NAME,
                        backupFlag: SqlStorage.BACKUP_LOCAL,
                        existingDatabase: false
                    });
                    if (win.sqlitePlugin) {
                        var location = _this._getBackupLocation(dbOptions.backupFlag);
                        _this._db = win.sqlitePlugin.openDatabase(assign({
                            name: dbOptions.name,
                            location: location,
                            createFromLocation: dbOptions.existingDatabase ? 1 : 0
                        }, dbOptions));
                    } else {
                        console.warn('Storage: SQLite plugin not installed, falling back to WebSQL. Make sure to install cordova-sqlite-storage in production!');
                        _this._db = win.openDatabase(dbOptions.name, '1.0', 'database', 5 * 1024 * 1024);
                    }
                    _this._tryInit();
                    return _this;
                }

                _createClass(SqlStorage, [{
                    key: '_getBackupLocation',
                    value: function _getBackupLocation(dbFlag) {
                        switch (dbFlag) {
                            case SqlStorage.BACKUP_LOCAL:
                                return 2;
                            case SqlStorage.BACKUP_LIBRARY:
                                return 1;
                            case SqlStorage.BACKUP_DOCUMENTS:
                                return 0;
                            default:
                                throw Error('Invalid backup flag: ' + dbFlag);
                        }
                    }
                }, {
                    key: '_tryInit',
                    value: function _tryInit() {
                        this.query('CREATE TABLE IF NOT EXISTS kv (key text primary key, value text)').catch(function (err) {
                            console.error('Storage: Unable to create initial storage tables', err.tx, err.err);
                        });
                    }
                }, {
                    key: 'query',
                    value: function query(_query) {
                        var _this2 = this;

                        var params = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                        return new Promise(function (resolve, reject) {
                            try {
                                _this2._db.transaction(function (tx) {
                                    tx.executeSql(_query, params, function (tx, res) {
                                        return resolve({ tx: tx, res: res });
                                    }, function (tx, err) {
                                        return reject({ tx: tx, err: err });
                                    });
                                }, function (err) {
                                    return reject({ err: err });
                                });
                            } catch (err) {
                                reject({ err: err });
                            }
                        });
                    }
                }, {
                    key: 'get',
                    value: function get(key) {
                        return this.query('select key, value from kv where key = ? limit 1', [key]).then(function (data) {
                            if (data.res.rows.length > 0) {
                                return data.res.rows.item(0).value;
                            }
                        });
                    }
                }, {
                    key: 'set',
                    value: function set(key, value) {
                        return this.query('insert or replace into kv(key, value) values (?, ?)', [key, value]);
                    }
                }, {
                    key: 'remove',
                    value: function remove(key) {
                        return this.query('delete from kv where key = ?', [key]);
                    }
                }, {
                    key: 'clear',
                    value: function clear() {
                        return this.query('delete from kv');
                    }
                }]);

                return SqlStorage;
            }(StorageEngine));

            _export('SqlStorage', SqlStorage);

            SqlStorage.BACKUP_LOCAL = 2;
            SqlStorage.BACKUP_LIBRARY = 1;
            SqlStorage.BACKUP_DOCUMENTS = 0;
        }
    };
});
'use strict';

System.register('ionic-angular/platform/storage/storage', [], function (_export, _context) {
    "use strict";

    var _createClass, Storage, StorageEngine;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [],
        execute: function () {
            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _export('Storage', Storage = function () {
                function Storage(strategyCls, options) {
                    _classCallCheck(this, Storage);

                    this._strategy = new strategyCls(options);
                }

                _createClass(Storage, [{
                    key: 'get',
                    value: function get(key) {
                        return this._strategy.get(key);
                    }
                }, {
                    key: 'getJson',
                    value: function getJson(key) {
                        return this.get(key).then(function (value) {
                            try {
                                return JSON.parse(value);
                            } catch (e) {
                                console.warn('Storage getJson(): unable to parse value for key', key, ' as JSON');
                                throw e; // rethrowing exception so it can be handled with .catch()
                            }
                        });
                    }
                }, {
                    key: 'setJson',
                    value: function setJson(key, value) {
                        try {
                            return this.set(key, JSON.stringify(value));
                        } catch (e) {
                            return Promise.reject(e);
                        }
                    }
                }, {
                    key: 'set',
                    value: function set(key, value) {
                        return this._strategy.set(key, value);
                    }
                }, {
                    key: 'remove',
                    value: function remove(key) {
                        return this._strategy.remove(key);
                    }
                }, {
                    key: 'query',
                    value: function query(_query, params) {
                        return this._strategy.query(_query, params);
                    }
                }, {
                    key: 'clear',
                    value: function clear() {
                        return this._strategy.clear();
                    }
                }]);

                return Storage;
            }());

            _export('Storage', Storage);

            _export('StorageEngine', StorageEngine = function () {
                function StorageEngine() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, StorageEngine);
                }

                _createClass(StorageEngine, [{
                    key: 'get',
                    value: function get(key) {
                        throw Error('get() not implemented for this storage engine');
                    }
                }, {
                    key: 'set',
                    value: function set(key, value) {
                        throw Error('set() not implemented for this storage engine');
                    }
                }, {
                    key: 'remove',
                    value: function remove(key) {
                        throw Error('remove() not implemented for this storage engine');
                    }
                }, {
                    key: 'query',
                    value: function query(_query2, params) {
                        throw Error('query() not implemented for this storage engine');
                    }
                }, {
                    key: 'clear',
                    value: function clear() {
                        throw Error('clear() not implemented for this storage engine');
                    }
                }]);

                return StorageEngine;
            }());

            _export('StorageEngine', StorageEngine);
        }
    };
});
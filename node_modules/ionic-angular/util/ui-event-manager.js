"use strict";
/**
 * @private
 */
var PointerEvents = (function () {
    function PointerEvents(ele, pointerDown, pointerMove, pointerUp, zone, option) {
        var _this = this;
        this.ele = ele;
        this.pointerDown = pointerDown;
        this.pointerMove = pointerMove;
        this.pointerUp = pointerUp;
        this.zone = zone;
        this.option = option;
        this.rmTouchStart = null;
        this.rmTouchMove = null;
        this.rmTouchEnd = null;
        this.rmMouseStart = null;
        this.rmMouseMove = null;
        this.rmMouseUp = null;
        this.lastTouchEvent = 0;
        this.mouseWait = 2 * 1000;
        this.rmTouchStart = listenEvent(ele, 'touchstart', zone, option, function (ev) { return _this.handleTouchStart(ev); });
        this.rmMouseStart = listenEvent(ele, 'mousedown', zone, option, function (ev) { return _this.handleMouseDown(ev); });
    }
    PointerEvents.prototype.handleTouchStart = function (ev) {
        var _this = this;
        this.lastTouchEvent = Date.now() + this.mouseWait;
        if (!this.pointerDown(ev)) {
            return;
        }
        if (!this.rmTouchMove) {
            this.rmTouchMove = listenEvent(this.ele, 'touchmove', this.zone, this.option, this.pointerMove);
        }
        if (!this.rmTouchEnd) {
            this.rmTouchEnd = listenEvent(this.ele, 'touchend', this.zone, this.option, function (ev) { return _this.handleTouchEnd(ev); });
        }
    };
    PointerEvents.prototype.handleMouseDown = function (ev) {
        var _this = this;
        if (this.lastTouchEvent > Date.now()) {
            void 0;
            return;
        }
        if (!this.pointerDown(ev)) {
            return;
        }
        if (!this.rmMouseMove) {
            this.rmMouseMove = listenEvent(window, 'mousemove', this.zone, this.option, this.pointerMove);
        }
        if (!this.rmMouseUp) {
            this.rmMouseUp = listenEvent(window, 'mouseup', this.zone, this.option, function (ev) { return _this.handleMouseUp(ev); });
        }
    };
    PointerEvents.prototype.handleTouchEnd = function (ev) {
        this.rmTouchMove && this.rmTouchMove();
        this.rmTouchMove = null;
        this.rmTouchEnd && this.rmTouchEnd();
        this.rmTouchEnd = null;
        this.pointerUp(ev);
    };
    PointerEvents.prototype.handleMouseUp = function (ev) {
        this.rmMouseMove && this.rmMouseMove();
        this.rmMouseMove = null;
        this.rmMouseUp && this.rmMouseUp();
        this.rmMouseUp = null;
        this.pointerUp(ev);
    };
    PointerEvents.prototype.stop = function () {
        this.rmTouchMove && this.rmTouchMove();
        this.rmTouchEnd && this.rmTouchEnd();
        this.rmTouchMove = null;
        this.rmTouchEnd = null;
        this.rmMouseMove && this.rmMouseMove();
        this.rmMouseUp && this.rmMouseUp();
        this.rmMouseMove = null;
        this.rmMouseUp = null;
    };
    PointerEvents.prototype.destroy = function () {
        this.rmTouchStart && this.rmTouchStart();
        this.rmTouchStart = null;
        this.rmMouseStart && this.rmMouseStart();
        this.rmMouseStart = null;
        this.stop();
        this.pointerDown = null;
        this.pointerMove = null;
        this.pointerUp = null;
        this.ele = null;
    };
    return PointerEvents;
}());
exports.PointerEvents = PointerEvents;
/**
 * @private
 */
var UIEventManager = (function () {
    function UIEventManager(zoneWrapped) {
        if (zoneWrapped === void 0) { zoneWrapped = true; }
        this.zoneWrapped = zoneWrapped;
        this.events = [];
    }
    UIEventManager.prototype.listenRef = function (ref, eventName, callback, option) {
        return this.listen(ref.nativeElement, eventName, callback, option);
    };
    UIEventManager.prototype.pointerEventsRef = function (ref, pointerStart, pointerMove, pointerEnd, option) {
        return this.pointerEvents(ref.nativeElement, pointerStart, pointerMove, pointerEnd, option);
    };
    UIEventManager.prototype.pointerEvents = function (element, pointerDown, pointerMove, pointerUp, option) {
        if (option === void 0) { option = false; }
        if (!element) {
            return;
        }
        var submanager = new PointerEvents(element, pointerDown, pointerMove, pointerUp, this.zoneWrapped, option);
        var removeFunc = function () { return submanager.destroy(); };
        this.events.push(removeFunc);
        return submanager;
    };
    UIEventManager.prototype.listen = function (element, eventName, callback, option) {
        if (option === void 0) { option = false; }
        if (!element) {
            return;
        }
        var removeFunc = listenEvent(element, eventName, this.zoneWrapped, option, callback);
        this.events.push(removeFunc);
        return removeFunc;
    };
    UIEventManager.prototype.unlistenAll = function () {
        for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
            var event_1 = _a[_i];
            event_1();
        }
        this.events.length = 0;
    };
    return UIEventManager;
}());
exports.UIEventManager = UIEventManager;
function listenEvent(ele, eventName, zoneWrapped, option, callback) {
    var rawEvent = ('__zone_symbol__addEventListener' in ele && !zoneWrapped);
    if (rawEvent) {
        ele.__zone_symbol__addEventListener(eventName, callback, option);
        return function () { return ele.__zone_symbol__removeEventListener(eventName, callback); };
    }
    else {
        ele.addEventListener(eventName, callback, option);
        return function () { return ele.removeEventListener(eventName, callback); };
    }
}

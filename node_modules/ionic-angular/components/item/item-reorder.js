"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
var content_1 = require('../content/content');
var dom_1 = require('../../util/dom');
var item_1 = require('./item');
var item_reorder_gesture_1 = require('../item/item-reorder-gesture');
var util_1 = require('../../util/util');
/**
 * @private
 */
var Reorder = (function () {
    function Reorder(elementRef, _rendered, _zone, _content) {
        this._rendered = _rendered;
        this._zone = _zone;
        this._content = _content;
        this._enableReorder = false;
        this._lastToIndex = -1;
        this.ionItemReorder = new core_1.EventEmitter();
        this._element = elementRef.nativeElement;
    }
    /**
     * @private
     */
    Reorder.prototype.ngOnDestroy = function () {
        this._element = null;
        this._reorderGesture && this._reorderGesture.destroy();
    };
    Object.defineProperty(Reorder.prototype, "reorder", {
        get: function () {
            return this._enableReorder;
        },
        set: function (val) {
            this._enableReorder = util_1.isTrueProperty(val);
            if (!this._enableReorder) {
                this._reorderGesture && this._reorderGesture.destroy();
                this._reorderGesture = null;
            }
            else if (!this._reorderGesture) {
                void 0;
                this._reorderGesture = new item_reorder_gesture_1.ItemReorderGesture(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    Reorder.prototype.reorderStart = function () {
        var children = this._element.children;
        var len = children.length;
        this.setCssClass('reorder-active', true);
        for (var i = 0; i < len; i++) {
            children[i]['$ionIndex'] = i;
        }
    };
    /**
     * @private
     */
    Reorder.prototype.reorderEmit = function (fromIndex, toIndex) {
        var _this = this;
        this.reorderReset();
        if (fromIndex !== toIndex) {
            this._zone.run(function () {
                _this.ionItemReorder.emit({
                    from: fromIndex,
                    to: toIndex,
                });
            });
        }
    };
    /**
     * @private
     */
    Reorder.prototype.scrollContent = function (scroll) {
        var scrollTop = this._content.getScrollTop() + scroll;
        if (scroll !== 0) {
            this._content.scrollTo(0, scrollTop, 0);
        }
        return scrollTop;
    };
    /**
     * @private
     */
    Reorder.prototype.reorderReset = function () {
        var children = this._element.children;
        var len = children.length;
        this.setCssClass('reorder-active', false);
        var transform = dom_1.CSS.transform;
        for (var i = 0; i < len; i++) {
            children[i].style[transform] = '';
        }
        this._lastToIndex = -1;
    };
    /**
     * @private
     */
    Reorder.prototype.reorderMove = function (fromIndex, toIndex, itemHeight) {
        if (this._lastToIndex === -1) {
            this._lastToIndex = fromIndex;
        }
        var lastToIndex = this._lastToIndex;
        this._lastToIndex = toIndex;
        // TODO: I think both loops can be merged into a single one
        // but I had no luck last time I tried
        /********* DOM READ ********** */
        var children = this._element.children;
        /********* DOM WRITE ********* */
        var transform = dom_1.CSS.transform;
        if (toIndex >= lastToIndex) {
            for (var i = lastToIndex; i <= toIndex; i++) {
                if (i !== fromIndex) {
                    children[i].style[transform] = (i > fromIndex)
                        ? "translateY(" + -itemHeight + "px)" : '';
                }
            }
        }
        if (toIndex <= lastToIndex) {
            for (var i = toIndex; i <= lastToIndex; i++) {
                if (i !== fromIndex) {
                    children[i].style[transform] = (i < fromIndex)
                        ? "translateY(" + itemHeight + "px)" : '';
                }
            }
        }
    };
    /**
     * @private
     */
    Reorder.prototype.setCssClass = function (classname, add) {
        this._rendered.setElementClass(this._element, classname, add);
    };
    /**
     * @private
     */
    Reorder.prototype.getNativeElement = function () {
        return this._element;
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Reorder.prototype, "ionItemReorder", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Reorder.prototype, "reorder", null);
    Reorder = __decorate([
        core_1.Directive({
            selector: '[reorder]',
            host: {
                '[class.reorder-enabled]': '_enableReorder',
            }
        }),
        __param(3, core_1.Optional()), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, core_1.NgZone, content_1.Content])
    ], Reorder);
    return Reorder;
}());
exports.Reorder = Reorder;
/**
 * @private
 */
var ItemReorder = (function () {
    function ItemReorder(item, elementRef) {
        this.item = item;
        this.elementRef = elementRef;
    }
    ItemReorder.prototype.ngAfterContentInit = function () {
        var item = this.item.getNativeElement();
        if (item.parentNode.nodeName === 'ION-ITEM-SLIDING') {
            this.elementRef.nativeElement['$ionReorderNode'] = item.parentNode;
        }
        else {
            this.elementRef.nativeElement['$ionReorderNode'] = item;
        }
    };
    ItemReorder = __decorate([
        core_1.Component({
            selector: 'ion-reorder',
            template: "<ion-icon name=\"menu\"></ion-icon>"
        }),
        __param(0, core_1.Inject(core_1.forwardRef(function () { return item_1.Item; }))), 
        __metadata('design:paramtypes', [item_1.Item, core_1.ElementRef])
    ], ItemReorder);
    return ItemReorder;
}());
exports.ItemReorder = ItemReorder;

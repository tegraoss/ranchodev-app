{
  "_args": [
    [
      {
        "raw": "tslint@https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
        "scope": null,
        "escapedName": "tslint",
        "name": "tslint",
        "rawSpec": "https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
        "spec": "https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
        "type": "remote"
      },
      "/home/ana/projects/ranchodev-app/ranchodev/node_modules/tslint-ionic-rules"
    ]
  ],
  "_from": "tslint@>=3.6.0 <4.0.0",
  "_id": "tslint@3.10.2",
  "_inCache": true,
  "_location": "/tslint-ionic-rules/tslint",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tslint@https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
    "scope": null,
    "escapedName": "tslint",
    "name": "tslint",
    "rawSpec": "https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
    "spec": "https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/tslint-ionic-rules",
    "/tslint-ionic-rules/tslint-eslint-rules"
  ],
  "_resolved": "https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
  "_shasum": "4486c9a1d96471738ca800be758ef4ae4c416f54",
  "_shrinkwrap": null,
  "_spec": "tslint@https://registry.npmjs.org/tslint/-/tslint-3.10.2.tgz",
  "_where": "/home/ana/projects/ranchodev-app/ranchodev/node_modules/tslint-ionic-rules",
  "bin": {
    "tslint": "./bin/tslint"
  },
  "bugs": {
    "url": "https://github.com/palantir/tslint/issues"
  },
  "dependencies": {
    "colors": "^1.1.2",
    "diff": "^2.2.1",
    "findup-sync": "~0.3.0",
    "glob": "^7.0.3",
    "optimist": "~0.6.0",
    "resolve": "^1.1.7",
    "underscore.string": "^3.3.4"
  },
  "description": "An extensible static analysis linter for the TypeScript language",
  "devDependencies": {
    "chai": "^3.0.0",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-eslint": "^18.1.0",
    "grunt-mocha-test": "^0.12.7",
    "grunt-npm-command": "^0.1.2",
    "grunt-run": "~0.6.0",
    "grunt-ts": "^5.1.0",
    "grunt-tslint": "latest",
    "mocha": "^2.2.5",
    "tslint": "latest",
    "tslint-test-config-non-relative": "file:test/external/tslint-test-config-non-relative",
    "typescript": "latest"
  },
  "homepage": "https://github.com/palantir/tslint#readme",
  "keywords": [
    "cli",
    "typescript",
    "linter"
  ],
  "license": "Apache-2.0",
  "main": "./lib/tslint",
  "name": "tslint",
  "optionalDependencies": {},
  "peerDependencies": {
    "typescript": ">=1.7.3"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/tslint.svg)](http://badge.fury.io/js/tslint)\n[![Downloads](http://img.shields.io/npm/dm/tslint.svg)](https://npmjs.org/package/tslint)\n[![Circle CI](https://circleci.com/gh/palantir/tslint.svg?style=svg)](https://circleci.com/gh/palantir/tslint)\n[![Join the chat at https://gitter.im/palantir/tslint](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/palantir/tslint?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nTSLint\n======\n\nAn extensible linter for the TypeScript language.\n\nSupports:\n\n- custom rules\n- custom formatters\n- inline disabling / enabling of rules\n- integration with [msbuild](https://github.com/joshuakgoldberg/tslint.msbuild), [grunt](https://github.com/palantir/grunt-tslint), [gulp](https://github.com/panuhorsmalahti/gulp-tslint), [atom](https://github.com/AtomLinter/linter-tslint), [eclipse](https://github.com/palantir/eclipse-tslint), [sublime](https://packagecontrol.io/packages/SublimeLinter-contrib-tslint), [vim](https://github.com/scrooloose/syntastic), [visual studio](https://visualstudiogallery.msdn.microsoft.com/6edc26d4-47d8-4987-82ee-7c820d79be1d), [vscode](https://marketplace.visualstudio.com/items?itemName=eg2.tslint), [webstorm](https://www.jetbrains.com/webstorm/help/tslint.html), and more\n\nTable of Contents\n------------\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Core Rules](#core-rules)\n- [Rule Flags](#rule-flags)\n- [Custom Rules](#custom-rules)\n- [Development](#development)\n- [Creating a new release](#creating-a-new-release)\n\n\nInstallation\n------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n##### CLI\n\n```\nnpm install -g tslint typescript\n```\n\n##### Library\n\n```\nnpm install tslint typescript\n```\n\n##### Peer dependencies\n\n`typescript` is a peer dependency of `tslint`. This allows you to update the compiler independently from the\nlinter. This also means that `tslint` will have to use the same version of `tsc` used to actually compile your sources.\n\nBreaking changes in the latest dev release of `typescript@next` might break something in the linter if we haven't built against that release yet. If this happens to you, you can try:\n\n1. picking up `tslint@next`, which may have some bugfixes not released in `tslint@latest`\n   (see [release notes here](https://github.com/palantir/tslint/releases)).\n2. rolling back `typescript` to a known working version.\n\nUsage\n-----\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\nPlease ensure that the TypeScript source files compile correctly _before_ running the linter.\n\n##### CLI\n\nusage: `tslint [options] file ...`\n\nOptions:\n\n```\n-c, --config          configuration file\n--force               return status code 0 even if there are lint errors\n-h, --help            display detailed help\n-i, --init            generate a tslint.json config file in the current working directory\n-o, --out             output file\n-r, --rules-dir       rules directory\n-s, --formatters-dir  formatters directory\n-e, --exclude         exclude globs from path expansion\n-t, --format          output format (prose, json, verbose, pmd, msbuild, checkstyle)  [default: \"prose\"]\n--test                test that tslint produces the correct output for the specified directory\n-v, --version         current version\n```\n\nBy default, configuration is loaded from `tslint.json`, if it exists in the current path, or the user's home directory, in that order.\n\ntslint accepts the following command-line options:\n\n```\n-c, --config:\n    The location of the configuration file that tslint will use to\n    determine which rules are activated and what options to provide\n    to the rules. If no option is specified, the config file named\n    tslint.json is used, so long as it exists in the path.\n    The format of the file is { rules: { /* rules list */ } },\n    where /* rules list */ is a key: value comma-seperated list of\n    rulename: rule-options pairs. Rule-options can be either a\n    boolean true/false value denoting whether the rule is used or not,\n    or a list [boolean, ...] where the boolean provides the same role\n    as in the non-list case, and the rest of the list are options passed\n    to the rule that will determine what it checks for (such as number\n    of characters for the max-line-length rule, or what functions to ban\n    for the ban rule).\n\n-e, --exclude:\n    A filename or glob which indicates files to exclude from linting.\n    This option can be supplied multiple times if you need multiple\n    globs to indicate which files to exclude.\n\n--force:\n    Return status code 0 even if there are any lint errors.\n    Useful while running as npm script.\n\n-i, --init:\n    Generates a tslint.json config file in the current working directory.\n\n-o, --out:\n    A filename to output the results to. By default, tslint outputs to\n    stdout, which is usually the console where you're running it from.\n\n-r, --rules-dir:\n    An additional rules directory, for user-created rules.\n    tslint will always check its default rules directory, in\n    node_modules/tslint/lib/rules, before checking the user-provided\n    rules directory, so rules in the user-provided rules directory\n    with the same name as the base rules will not be loaded.\n\n-s, --formatters-dir:\n    An additional formatters directory, for user-created formatters.\n    Formatters are files that will format the tslint output, before\n    writing it to stdout or the file passed in --out. The default\n    directory, node_modules/tslint/build/formatters, will always be\n    checked first, so user-created formatters with the same names\n    as the base formatters will not be loaded.\n\n-t, --format:\n    The formatter to use to format the results of the linter before\n    outputting it to stdout or the file passed in --out. The core\n    formatters are prose (human readable), json (machine readable)\n    and verbose. prose is the default if this option is not used.\n    Other built-in options include pmd, msbuild, and checkstyle. Additonal\n    formatters can be added and used if the --formatters-dir option is set.\n\n--test:\n    Runs tslint on the specified directory and checks if tslint's output matches\n    the expected output in .lint files. Automatically loads the tslint.json file in the\n    specified directory as the configuration file for the tests. See the\n    full tslint documentation for more details on how this can be used to test custom rules.\n\n-v, --version:\n    The current version of tslint.\n\n-h, --help:\n    Prints this help message.\n```\n\n##### Library\n\n```javascript\nvar fileName = \"Specify file name\";\n\nvar configuration = {\n    rules: {\n        \"variable-name\": true,\n        \"quotemark\": [true, \"double\"]\n    }\n};\n\nvar options = {\n    formatter: \"json\",\n    configuration: configuration,\n    rulesDirectory: \"customRules/\", // can be an array of directories\n    formattersDirectory: \"customFormatters/\"\n};\n\nvar Linter = require(\"tslint\");\nvar fs = require(\"fs\");\nvar contents = fs.readFileSync(fileName, \"utf8\");\n\nvar ll = new Linter(fileName, contents, options);\nvar result = ll.lint();\n```\n\nCore Rules\n-----\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\nCore rules are included in the `tslint` package.\n\nA sample configuration file with all options is available [here](https://github.com/palantir/tslint/blob/master/docs/sample.tslint.json).\n\n* `align` enforces vertical alignment. Rule options:\n  * `\"parameters\"` checks alignment of function parameters.\n  * `\"arguments\"` checks alignment of function call arguments.\n  * `\"statements\"` checks alignment of statements.\n* `ban` bans the use of specific functions. Options are [\"object\", \"function\"] pairs that ban the use of object.function().\n* `class-name` enforces PascalCased class and interface names.\n* `comment-format` enforces rules for single-line comments. Rule options:\n    * `\"check-space\"` enforces the rule that all single-line comments must begin with a space, as in `// comment`\n        * note that comments starting with `///` are also allowed, for things such as `///<reference>`\n    * `\"check-lowercase\"` enforces the rule that the first non-whitespace character of a comment must be lowercase, if applicable.\n    * `\"check-uppercase\"` enforces the rule that the first non-whitespace character of a comment must be uppercase, if applicable.\n* `curly` enforces braces for `if`/`for`/`do`/`while` statements.\n* `eofline` enforces the file to end with a newline.\n* `forin` enforces a `for ... in` statement to be filtered with an `if` statement.\n* `indent` enforces indentation with tabs or spaces. Rule options (one is required):\n    * `\"tabs\"` enforces consistent tabs.\n    * `\"spaces\"` enforces consistent spaces.\n* `interface-name` enforces the rule that interface names must begin with a capital 'I'\n* `interface-name` enforces consistent internace name. Rule options:\n    * `\"always-prefix\"` enforces interface names must have an 'I' prefix\n    * `\"never-prefix\"` enforces interface name must not have an 'I' prefix\n* `jsdoc-format` enforces basic format rules for jsdoc comments -- comments starting with `/**`\n    * each line contains an asterisk and asterisks must be aligned\n    * each asterisk must be followed by either a space or a newline (except for the first and the last)\n    * the only characters before the asterisk on each line must be whitespace characters\n    * one line comments must start with `/** ` and end with ` */`\n* `label-position` enforces labels only on sensible statements.\n* `label-undefined` checks that labels are defined before usage.\n* `max-line-length` sets the maximum length of a line.\n* `member-access` enforces using explicit visibility on class members\n    * `\"check-accessor\"` enforces explicit visibility on get/set accessors (can only be public)\n    * `\"check-constructor\"` enforces explicit visibility on constructors (can only be public)\n* `member-ordering` enforces member ordering. The first option should be an object with an `order` key.\n   Values for `order` can be `fields-first`, `statics-first`, `instance-sandwich`, or a custom order.\n* `new-parens` enforces parentheses when invoking a constructor via the new keyword.\n* `no-angle-bracket-type-assertion` disallows usages of `<>` type assertions in favor of using the `as` keyword.\n* `no-any` diallows usages of `any` as a type decoration.\n* `no-arg` disallows access to `arguments.callee`.\n* `no-bitwise` disallows bitwise operators.\n* `no-conditional-assignment` disallows any type of assignment in any conditionals. This applies to `do-while`, `for`, `if`, and `while` statements.\n* `no-consecutive-blank-lines` disallows having more than one blank line in a row in a file.\n* `no-console` disallows access to the specified functions on `console`. Rule options are functions to ban on the console variable.\n* `no-construct` disallows access to the constructors of `String`, `Number`, and `Boolean`.\n* `no-constructor-vars` disallows the `public` and `private` modifiers for constructor parameters.\n* `no-debugger` disallows `debugger` statements.\n* `no-default-export` disallows default exports in ES6-style modules. Use named exports instead.\n* `no-duplicate-key` disallows duplicate keys in object literals.\n* `no-duplicate-variable` disallows duplicate variable declarations in the same block scope.\n* `no-empty` disallows empty blocks.\n* `no-eval` disallows `eval` function invocations.\n* `no-inferrable-types` disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.\n   * `ignore-params` allows specifying an inferrable type as a function param\n* `no-internal-module` disallows internal `module` (use `namespace` instead).\n* `no-invalid-this` disallows using the `this` keyword outside of classes.\n    * `check-function-in-method` disallows using the `this` keyword in functions within class methods.\n* `no-namespace` disallows both internal `module`s and `namespace`, but allows ES6-style external modules.\n    * `allow-declarations` allows `declare namespace ... {}` to describe external APIs.\n* `no-null-keyword` disallows use of the `null` keyword literal.\n* `no-reference` disallows `/// <reference path=>` imports (use ES6-style imports instead).\n* `no-require-imports` disallows invocation of `require()` (use ES6-style imports instead).\n* `no-shadowed-variable` disallows shadowed variable declarations.\n* `no-string-literal` disallows object access via string literals.\n* `no-switch-case-fall-through` disallows falling through case statements. As of TypeScript version 1.8, this rule can be enabled within the compiler by passing the `--noFallthroughCasesInSwitch` flag.\n* `no-trailing-whitespace` disallows trailing whitespace at the end of a line.\n* `no-unreachable` disallows unreachable code after `break`, `catch`, `throw`, and `return` statements. This rule is supported and enforced by default within the TypeScript compiler since version 1.8.\n* `no-unused-expression` disallows unused expression statements, that is, expression statements that are not assignments or function invocations (and thus no-ops).\n* `no-unused-variable` disallows unused imports, variables, functions and private class members. Rule options:\n    * `\"check-parameters\"` disallows unused function and constructor parameters.\n        * NOTE: this option is experimental and does not work with classes that use abstract method declarations, among other things. Use at your own risk.\n    * `\"react\"` relaxes the rule for a namespace import named `React` (from either the module `\"react\"` or `\"react/addons\"`). Any JSX expression in the file will be treated as a usage of `React` (because it expands to `React.createElement`).\n    * `{\"ignore-pattern\": \"pattern\"}` where pattern is a case-sensitive regexp. Variable names that match the pattern will be ignored.\n* `no-use-before-declare` disallows usage of variables before their declaration.\n* `no-var-keyword` disallows usage of the `var` keyword, use `let` or `const` instead.\n* `no-var-requires` disallows the use of require statements except in import statements, banning the use of forms such as `var module = require(\"module\")`.\n* `object-literal-sort-keys` checks that keys in object literals are declared in alphabetical order (useful to prevent merge conflicts).\n* `one-line` enforces the specified tokens to be on the same line as the expression preceding it. Rule options:\n  * `\"check-catch\"` checks that `catch` is on the same line as the closing brace for `try`.\n  * `\"check-else\"` checks that `else` is on the same line as the closing brace for `if`.\n  * `\"check-finally\"` checks that `finally` is on the same line as the closing brace for the preceding `try` or `catch`.\n  * `\"check-open-brace\"` checks that an open brace falls on the same line as its preceding expression.\n  * `\"check-whitespace\"` checks preceding whitespace for the specified tokens.\n* `one-variable-per-declaration` disallows multiple variable definitions in the same statement.\n  * `\"ignore-for-loop\"` allows multiple variable definitions in for loop statement.\n* `quotemark` enforces consistent single or double quoted string literals. Rule options (at least one of `\"double\"` or `\"single\"` is required):\n    * `\"single\"` enforces single quotes.\n    * `\"double\"` enforces double quotes.\n    * `\"jsx-single\"` enforces single quotes for JSX attributes.\n    * `\"jsx-double\"` enforces double quotes for JSX attributes.\n    * `\"avoid-escape\"` allows you to use the \"other\" quotemark in cases where escaping would normally be required. For example, `[true, \"double\", \"avoid-escape\"]` would not report a failure on the string literal `'Hello \"World\"'`.\n* `radix` enforces the radix parameter of `parseInt`.\n* `semicolon` enforces consistent semicolon usage at the end of every statement. Rule options:\n    * `\"always\"` enforces semicolons at the end of every statement.\n    * `\"never\"` disallows semicolons at the end of every statement except for when they are necessary.\n* `switch-default` enforces a `default` case in `switch` statements.\n* `trailing-comma` enforces or disallows trailing comma within array and object literals, destructuring assignment and named imports.\n  Each rule option requires a value of `\"always\"` or `\"never\"`. Rule options:\n    * `\"multiline\"` checks multi-line object literals.\n    * `\"singleline\"` checks single-line object literals.\n* `triple-equals` enforces `===` and `!==` in favor of `==` and `!=`.\n    * `\"allow-null-check\"` allows `==` and `!=` when comparing to `null`.\n    * `\"allow-undefined-check\"` allows `==` and `!=` when comparing to `undefined`.\n* `typedef` enforces type definitions to exist. Rule options:\n    * `\"call-signature\"` checks return type of functions.\n    * `\"parameter\"` checks type specifier of function parameters for non-arrow functions.\n    * `\"arrow-parameter\"` checks type specifier of function parameters for arrow functions.\n    * `\"property-declaration\"` checks return types of interface properties.\n    * `\"variable-declaration\"` checks variable declarations.\n    * `\"member-variable-declaration\"` checks member variable declarations.\n* `typedef-whitespace` enforces spacing whitespace for type definitions. Each rule option requires a value of `\"nospace\"`,\n  `\"onespace\"` or `\"space\"` to require no space, exactly one or at least one space before or after the type specifier's\n  colon. You can specify two objects containing the five options. The first one describes the left, the second one the\n  right hand side of the typedef colon. To omit checks for either side, omit the second object or pass an empty object\n  for the first. Rule options:\n    * `\"call-signature\"` checks return type of functions.\n    * `\"index-signature\"` checks index type specifier of indexers.\n    * `\"parameter\"` checks function parameters.\n    * `\"property-declaration\"` checks object property declarations.\n    * `\"variable-declaration\"` checks variable declaration.\n* `use-isnan` enforces that you use the isNaN() function to check for NaN references instead of a comparison to the NaN constant.\n* `use-strict` enforces ECMAScript 5's strict mode.\n    * `check-module` checks that all top-level modules are using strict mode.\n    * `check-function` checks that all top-level functions are using strict mode.\n* `variable-name` checks variables names for various errors.  Rule options:\n  * `\"check-format\"`: allows only camelCased or UPPER_CASED variable names\n    * `\"allow-leading-underscore\"` allows underscores at the beginning.\n    * `\"allow-trailing-underscore\"` allows underscores at the end.\n    * `\"allow-pascal-case\"` allows PascalCase in addition to camelCase.\n  * `\"ban-keywords\"`: disallows the use of certain TypeScript keywords (`any`, `Number`, `number`, `String`, `string`, `Boolean`, `boolean`, `undefined`) as variable or parameter names.\n* `whitespace` enforces spacing whitespace. Rule options:\n  * `\"check-branch\"` checks branching statements (`if`/`else`/`for`/`while`) are followed by whitespace.\n  * `\"check-decl\"`checks that variable declarations have whitespace around the equals token.\n  * `\"check-operator\"` checks for whitespace around operator tokens.\n  * `\"check-module\"` checks for whitespace in import & export statements.\n  * `\"check-separator\"` checks for whitespace after separator tokens (`,`/`;`).\n  * `\"check-type\"` checks for whitespace before a variable type specification.\n  * `\"check-typecast\"` checks for whitespace between a typecast and its target.\n\nRule Flags\n-----\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\nYou may enable/disable TSLint or a subset of rules within certain lines of a file with the following comment rule flags:\n\n* `/* tslint:disable */` - Disable all rules for the rest of the file\n* `/* tslint:enable */` - Enable all rules for the rest of the file\n* `/* tslint:disable:rule1 rule2 rule3... */` - Disable the listed rules for the rest of the file\n* `/* tslint:enable:rule1 rule2 rule3... */` - Enable the listed rules for the rest of the file\n* `// tslint:disable-next-line` - Disables all rules for the following line\n* `someCode(); // tslint:disable-line` - Disables all rules for the current line\n* `// tslint:disable-next-line:rule1 rule2 rule3...` - Disables the listed rules for the next line\n* etc.\n\nRules flags enable or disable rules as they are parsed. Disabling an already disabled rule or enabling an already enabled rule has no effect.\n\nFor example, imagine the directive `/* tslint:disable */` on the first line of a file, `/* tslint:enable:ban class-name */` on the 10th line and `/* tslint:enable */` on the 20th. No rules will be checked between the 1st and 10th lines, only the `ban` and `class-name` rules will be checked between the 10th and 20th, and all rules will be checked for the remainder of the file.\n\nCustom Rules\n------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n#### Custom rule sets from the community\n\nIf we don't have all the rules you're looking for, you can either write your own custom rules or use custom rules that others have developed. The repos below are a good source of custom rules:\n\n- [ESLint rules for TSLint](https://github.com/buzinas/tslint-eslint-rules) - Improve your TSLint with the missing ESLint Rules\n- [tslint-microsoft-contrib](https://github.com/Microsoft/tslint-microsoft-contrib) - A set of TSLint rules used on some Microsoft projects\n- [codelyzer](https://github.com/mgechev/codelyzer) - A set of tslint rules for static code analysis of Angular 2 TypeScript projects\n\n#### Writing custom rules\n\nTSLint ships with a set of core rules that can be configured. However, users are also allowed to write their own rules, which allows them to enforce specific behavior not covered by the core of TSLint. TSLint's internal rules are itself written to be pluggable, so adding a new rule is as simple as creating a new rule file named by convention. New rules can be written in either TypeScript or Javascript; if written in TypeScript, the code must be compiled to Javascript before invoking TSLint.\n\nRule names are always camel-cased and *must* contain the suffix `Rule`. Let us take the example of how to write a new rule to forbid all import statements (you know, *for science*). Let us name the rule file `noImportsRule.ts`. Rules can be referenced in `tslint.json` in their kebab-case forms, so `\"no-imports\": true` would turn on the rule.\n\nNow, let us first write the rule in TypeScript. A few things to note:\n- We import `tslint/lib/lint` to get the whole `Lint` namespace instead of just the `Linter` class.\n- The exported class must always be named `Rule` and extend from `Lint.Rules.AbstractRule`.\n\n```typescript\nimport * as ts from \"typescript\";\nimport * as Lint from \"tslint/lib/lint\";\n\nexport class Rule extends Lint.Rules.AbstractRule {\n    public static FAILURE_STRING = \"import statement forbidden\";\n\n    public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\n        return this.applyWithWalker(new NoImportsWalker(sourceFile, this.getOptions()));\n    }\n}\n\n// The walker takes care of all the work.\nclass NoImportsWalker extends Lint.RuleWalker {\n    public visitImportDeclaration(node: ts.ImportDeclaration) {\n        // create a failure at the current position\n        this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.FAILURE_STRING));\n\n        // call the base version of this visitor to actually parse this node\n        super.visitImportDeclaration(node);\n    }\n}\n```\n\nGiven a walker, TypeScript's parser visits the AST using the visitor pattern. So the rule walkers only need to override the appropriate visitor methods to enforce its checks. For reference, the base walker can be found in [syntaxWalker.ts](https://github.com/palantir/tslint/blob/master/src/language/walker/syntaxWalker.ts).\n\nWe still need to hook up this new rule to TSLint. First make sure to compile `noImportsRule.ts`:\n\n```bash\ntsc -m commonjs --noImplicitAny noImportsRule.ts node_modules/tslint/lib/tslint.d.ts\n```\n\nThen, if using the CLI, provide the directory that contains this rule as an option to `--rules-dir`. If using TSLint as a library or via `grunt-tslint`, the `options` hash must contain `\"rulesDirectory\": \"...\"`. If you run the linter, you'll see that we have now successfully banned all import statements via TSLint!\n\nFinal notes:\n\n- Core rules cannot be overwritten with a custom implementation.\n- Custom rules can also take in options just like core rules (retrieved via `this.getOptions()`).\n\nCustom Formatters\n-----------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\nJust like rules, additional formatters can also be supplied to TSLint via `--formatters-dir` on the CLI or `formattersDirectory` option on the library or `grunt-tslint`. Writing a new formatter is simpler than writing a new rule, as shown in the JSON formatter's code.\n\n```typescript\nimport * as ts from \"typescript\";\nimport * as Lint from \"tslint/lib/lint\";\n\nexport class Formatter extends Lint.Formatters.AbstractFormatter {\n    public format(failures: Lint.RuleFailure[]): string {\n        var failuresJSON = failures.map((failure: Lint.RuleFailure) => failure.toJson());\n        return JSON.stringify(failuresJSON);\n    }\n}\n```\n\nSuch custom formatters can also be written in JavaScript. Formatter files are always named with the suffix `Formatter` and referenced from TSLint without their suffix.\n\nDevelopment\n-----------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n#### Quick Start\n\n```bash\ngit clone git@github.com:palantir/tslint.git\nnpm install\ngrunt\n```\n\n#### `next` branch\n\nThe [`next` branch of this repo](https://github.com/palantir/tslint/tree/next) tracks the latest TypeScript compiler\nnightly release as a `devDependency`. This allows you to develop the linter and its rules against the latest features of the\nlanguage. Releases from this branch are published to npm with the `next` dist-tag, so you may install the latest dev\nversion of TSLint via `npm install tslint@next`.\n\nCreating a new release\n----------------------\n<sup>[back to ToC &uarr;](#table-of-contents)</sup>\n\n1. Bump the version number in `package.json` and `src/tslint.ts`\n2. Add release notes in `CHANGELOG.md`\n3. Run `grunt` to build the latest sources\n4. Commit with message `Prepare release <version>`\n5. Run `npm publish`\n6. Create a git tag for the new release and push it ([see existing tags here](https://github.com/palantir/tslint/tags))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/palantir/tslint.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "typescript": {
    "definition": "lib/tslint.d.ts"
  },
  "typings": "./lib/tslint",
  "version": "3.10.2"
}
